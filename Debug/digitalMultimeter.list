
digitalMultimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c388  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800c528  0800c528  0001c528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb40  0800cb40  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb48  0800cb48  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb48  0800cb48  0001cb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  200001e8  0800cd38  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e70  0800cd38  00024e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b836  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b72  00000000  00000000  0003ba91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0003f608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e3  00000000  00000000  00040f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053ac  00000000  00000000  0004235b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c64c  00000000  00000000  00047707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a84c8  00000000  00000000  00063d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081a8  00000000  00000000  0010c21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001143c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c510 	.word	0x0800c510

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c510 	.word	0x0800c510

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800100a:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HD44780_Init+0xec>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HD44780_Init+0xf0>)
 8001012:	2208      	movs	r2, #8
 8001014:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <HD44780_Init+0xf4>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HD44780_Init+0xec>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d907      	bls.n	8001034 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HD44780_Init+0xf4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HD44780_Init+0xf4>)
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e006      	b.n	8001042 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HD44780_Init+0xf4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HD44780_Init+0xf4>)
 8001040:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001042:	f000 f985 	bl	8001350 <DelayInit>
  HAL_Delay(50);
 8001046:	2032      	movs	r0, #50	; 0x32
 8001048:	f001 f964 	bl	8002314 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HD44780_Init+0xf0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f943 	bl	80012dc <ExpanderWrite>
  HAL_Delay(1000);
 8001056:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105a:	f001 f95b 	bl	8002314 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800105e:	2030      	movs	r0, #48	; 0x30
 8001060:	f000 f92b 	bl	80012ba <Write4Bits>
  DelayUS(4500);
 8001064:	f241 1094 	movw	r0, #4500	; 0x1194
 8001068:	f000 f99c 	bl	80013a4 <DelayUS>

  Write4Bits(0x03 << 4);
 800106c:	2030      	movs	r0, #48	; 0x30
 800106e:	f000 f924 	bl	80012ba <Write4Bits>
  DelayUS(4500);
 8001072:	f241 1094 	movw	r0, #4500	; 0x1194
 8001076:	f000 f995 	bl	80013a4 <DelayUS>

  Write4Bits(0x03 << 4);
 800107a:	2030      	movs	r0, #48	; 0x30
 800107c:	f000 f91d 	bl	80012ba <Write4Bits>
  DelayUS(4500);
 8001080:	f241 1094 	movw	r0, #4500	; 0x1194
 8001084:	f000 f98e 	bl	80013a4 <DelayUS>

  Write4Bits(0x02 << 4);
 8001088:	2020      	movs	r0, #32
 800108a:	f000 f916 	bl	80012ba <Write4Bits>
  DelayUS(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f000 f988 	bl	80013a4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HD44780_Init+0xf4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8ce 	bl	8001240 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HD44780_Init+0xf8>)
 80010a6:	2204      	movs	r2, #4
 80010a8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010aa:	f000 f875 	bl	8001198 <HD44780_Display>
  HD44780_Clear();
 80010ae:	f000 f82b 	bl	8001108 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HD44780_Init+0xfc>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HD44780_Init+0xfc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f8bc 	bl	8001240 <SendCommand>
  DelayUS(4500);
 80010c8:	f241 1094 	movw	r0, #4500	; 0x1194
 80010cc:	f000 f96a 	bl	80013a4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010d0:	490b      	ldr	r1, [pc, #44]	; (8001100 <HD44780_Init+0x100>)
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f876 	bl	80011c4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010d8:	490a      	ldr	r1, [pc, #40]	; (8001104 <HD44780_Init+0x104>)
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 f872 	bl	80011c4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010e0:	f000 f81d 	bl	800111e <HD44780_Home>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000207 	.word	0x20000207
 80010f0:	20000208 	.word	0x20000208
 80010f4:	20000204 	.word	0x20000204
 80010f8:	20000205 	.word	0x20000205
 80010fc:	20000206 	.word	0x20000206
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008

08001108 <HD44780_Clear>:

void HD44780_Clear()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 f897 	bl	8001240 <SendCommand>
  DelayUS(2000);
 8001112:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001116:	f000 f945 	bl	80013a4 <DelayUS>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}

0800111e <HD44780_Home>:

void HD44780_Home()
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001122:	2002      	movs	r0, #2
 8001124:	f000 f88c 	bl	8001240 <SendCommand>
  DelayUS(2000);
 8001128:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800112c:	f000 f93a 	bl	80013a4 <DelayUS>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HD44780_SetCursor+0x5c>)
 8001146:	f107 0408 	add.w	r4, r7, #8
 800114a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HD44780_SetCursor+0x60>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	79ba      	ldrb	r2, [r7, #6]
 8001156:	429a      	cmp	r2, r3
 8001158:	d303      	bcc.n	8001162 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HD44780_SetCursor+0x60>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3318      	adds	r3, #24
 8001168:	443b      	add	r3, r7
 800116a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4413      	add	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f85d 	bl	8001240 <SendCommand>
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	0800c528 	.word	0x0800c528
 8001194:	20000207 	.word	0x20000207

08001198 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HD44780_Display+0x28>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HD44780_Display+0x28>)
 80011a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HD44780_Display+0x28>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f843 	bl	8001240 <SendCommand>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000205 	.word	0x20000205

080011c4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f82a 	bl	8001240 <SendCommand>
  for (int i=0; i<8; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e009      	b.n	8001206 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f82e 	bl	800125c <SendChar>
  for (int i=0; i<8; i++)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b07      	cmp	r3, #7
 800120a:	ddf2      	ble.n	80011f2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800121e:	e006      	b.n	800122e <HD44780_PrintStr+0x18>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f817 	bl	800125c <SendChar>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f4      	bne.n	8001220 <HD44780_PrintStr+0xa>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f812 	bl	8001278 <Send>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <SendChar>:

static void SendChar(uint8_t ch)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2101      	movs	r1, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f804 	bl	8001278 <Send>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	4313      	orrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f80b 	bl	80012ba <Write4Bits>
  Write4Bits((lownib)|mode);
 80012a4:	7bba      	ldrb	r2, [r7, #14]
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f804 	bl	80012ba <Write4Bits>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f808 	bl	80012dc <ExpanderWrite>
  PulseEnable(value);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f820 	bl	8001314 <PulseEnable>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <ExpanderWrite+0x30>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012f2:	f107 020f 	add.w	r2, r7, #15
 80012f6:	230a      	movs	r3, #10
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	214e      	movs	r1, #78	; 0x4e
 80012fe:	4804      	ldr	r0, [pc, #16]	; (8001310 <ExpanderWrite+0x34>)
 8001300:	f001 ffb6 	bl	8003270 <HAL_I2C_Master_Transmit>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000208 	.word	0x20000208
 8001310:	20000280 	.word	0x20000280

08001314 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffd8 	bl	80012dc <ExpanderWrite>
  DelayUS(20);
 800132c:	2014      	movs	r0, #20
 800132e:	f000 f839 	bl	80013a4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffce 	bl	80012dc <ExpanderWrite>
  DelayUS(20);
 8001340:	2014      	movs	r0, #20
 8001342:	f000 f82f 	bl	80013a4 <DelayUS>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <DelayInit>:

static void DelayInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <DelayInit+0x4c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <DelayInit+0x4c>)
 800135a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800135e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <DelayInit+0x4c>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <DelayInit+0x4c>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <DelayInit+0x50>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <DelayInit+0x50>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <DelayInit+0x50>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <DelayInit+0x50>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <DelayInit+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800138a:	bf00      	nop
  __ASM volatile ("NOP");
 800138c:	bf00      	nop
  __ASM volatile ("NOP");
 800138e:	bf00      	nop
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000edf0 	.word	0xe000edf0
 80013a0:	e0001000 	.word	0xe0001000

080013a4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <DelayUS+0x44>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <DelayUS+0x48>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9a      	lsrs	r2, r3, #18
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <DelayUS+0x4c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <DelayUS+0x4c>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f6      	bhi.n	80013c6 <DelayUS+0x22>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000010 	.word	0x20000010
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	e0001000 	.word	0xe0001000

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f000 ff4a 	bl	8002290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f87a 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 f9b6 	bl	8001770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001404:	f000 f98a 	bl	800171c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001408:	f000 f930 	bl	800166c <MX_I2C1_Init>
  MX_ADC1_Init();
 800140c:	f000 f8dc 	bl	80015c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001410:	f000 f95a 	bl	80016c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001414:	f003 fccc 	bl	8004db0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of voltQueue */
  voltQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &voltQueue_attributes);
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <main+0xac>)
 800141a:	2102      	movs	r1, #2
 800141c:	2010      	movs	r0, #16
 800141e:	f003 fe00 	bl	8005022 <osMessageQueueNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <main+0xb0>)
 8001426:	6013      	str	r3, [r2, #0]

  /* creation of queueAmper */
  queueAmperHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueAmper_attributes);
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <main+0xb4>)
 800142a:	2102      	movs	r1, #2
 800142c:	2010      	movs	r0, #16
 800142e:	f003 fdf8 	bl	8005022 <osMessageQueueNew>
 8001432:	4603      	mov	r3, r0
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <main+0xb8>)
 8001436:	6013      	str	r3, [r2, #0]

  /* creation of queueOhm */
  queueOhmHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueOhm_attributes);
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <main+0xbc>)
 800143a:	2102      	movs	r1, #2
 800143c:	2010      	movs	r0, #16
 800143e:	f003 fdf0 	bl	8005022 <osMessageQueueNew>
 8001442:	4603      	mov	r3, r0
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <main+0xc0>)
 8001446:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of voltMeter */
  voltMeterHandle = osThreadNew(StartVoltMeter, NULL, &voltMeter_attributes);
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <main+0xc4>)
 800144a:	2100      	movs	r1, #0
 800144c:	481b      	ldr	r0, [pc, #108]	; (80014bc <main+0xc8>)
 800144e:	f003 fcf9 	bl	8004e44 <osThreadNew>
 8001452:	4603      	mov	r3, r0
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <main+0xcc>)
 8001456:	6013      	str	r3, [r2, #0]

  /* creation of amperMeter */
  amperMeterHandle = osThreadNew(StartAmperMeter, NULL, &amperMeter_attributes);
 8001458:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <main+0xd0>)
 800145a:	2100      	movs	r1, #0
 800145c:	481a      	ldr	r0, [pc, #104]	; (80014c8 <main+0xd4>)
 800145e:	f003 fcf1 	bl	8004e44 <osThreadNew>
 8001462:	4603      	mov	r3, r0
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <main+0xd8>)
 8001466:	6013      	str	r3, [r2, #0]

  /* creation of ohmmeter */
  ohmmeterHandle = osThreadNew(StartOhmMeter, NULL, &ohmmeter_attributes);
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <main+0xdc>)
 800146a:	2100      	movs	r1, #0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <main+0xe0>)
 800146e:	f003 fce9 	bl	8004e44 <osThreadNew>
 8001472:	4603      	mov	r3, r0
 8001474:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <main+0xe4>)
 8001476:	6013      	str	r3, [r2, #0]

  /* creation of defaultPrint */
  defaultPrintHandle = osThreadNew(StartPrint, NULL, &defaultPrint_attributes);
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <main+0xe8>)
 800147a:	2100      	movs	r1, #0
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <main+0xec>)
 800147e:	f003 fce1 	bl	8004e44 <osThreadNew>
 8001482:	4603      	mov	r3, r0
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <main+0xf0>)
 8001486:	6013      	str	r3, [r2, #0]

  /* creation of adcAcquire */
  adcAcquireHandle = osThreadNew(StartADC, NULL, &adcAcquire_attributes);
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <main+0xf4>)
 800148a:	2100      	movs	r1, #0
 800148c:	4817      	ldr	r0, [pc, #92]	; (80014ec <main+0xf8>)
 800148e:	f003 fcd9 	bl	8004e44 <osThreadNew>
 8001492:	4603      	mov	r3, r0
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <main+0xfc>)
 8001496:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001498:	f003 fcae 	bl	8004df8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149c:	e7fe      	b.n	800149c <main+0xa8>
 800149e:	bf00      	nop
 80014a0:	0800c6b8 	.word	0x0800c6b8
 80014a4:	20000378 	.word	0x20000378
 80014a8:	0800c6d0 	.word	0x0800c6d0
 80014ac:	2000037c 	.word	0x2000037c
 80014b0:	0800c6e8 	.word	0x0800c6e8
 80014b4:	20000380 	.word	0x20000380
 80014b8:	0800c604 	.word	0x0800c604
 80014bc:	08001971 	.word	0x08001971
 80014c0:	20000364 	.word	0x20000364
 80014c4:	0800c628 	.word	0x0800c628
 80014c8:	08001a69 	.word	0x08001a69
 80014cc:	20000368 	.word	0x20000368
 80014d0:	0800c64c 	.word	0x0800c64c
 80014d4:	08001b75 	.word	0x08001b75
 80014d8:	2000036c 	.word	0x2000036c
 80014dc:	0800c670 	.word	0x0800c670
 80014e0:	08001b81 	.word	0x08001b81
 80014e4:	20000370 	.word	0x20000370
 80014e8:	0800c694 	.word	0x0800c694
 80014ec:	08001c2d 	.word	0x08001c2d
 80014f0:	20000374 	.word	0x20000374

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2230      	movs	r2, #48	; 0x30
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f007 fbc9 	bl	8008c9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <SystemClock_Config+0xcc>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <SystemClock_Config+0xcc>)
 8001522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <SystemClock_Config+0xcc>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <SystemClock_Config+0xd0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <SystemClock_Config+0xd0>)
 8001542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <SystemClock_Config+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2310      	movs	r3, #16
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001560:	2302      	movs	r3, #2
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001568:	2308      	movs	r3, #8
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800156c:	2348      	movs	r3, #72	; 0x48
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001574:	2307      	movs	r3, #7
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	4618      	mov	r0, r3
 800157e:	f002 f9d1 	bl	8003924 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001588:	f000 fb95 	bl	8001cb6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158c:	230f      	movs	r3, #15
 800158e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2102      	movs	r1, #2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fc33 	bl	8003e14 <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015b4:	f000 fb7f 	bl	8001cb6 <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000

080015c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_ADC1_Init+0x98>)
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_ADC1_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_ADC1_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_ADC1_Init+0x98>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_ADC1_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_ADC1_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_ADC1_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_ADC1_Init+0x98>)
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <MX_ADC1_Init+0xa0>)
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_ADC1_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_ADC1_Init+0x98>)
 8001614:	2201      	movs	r2, #1
 8001616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_ADC1_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_ADC1_Init+0x98>)
 8001622:	2201      	movs	r2, #1
 8001624:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <MX_ADC1_Init+0x98>)
 8001628:	f000 fe98 	bl	800235c <HAL_ADC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001632:	f000 fb40 	bl	8001cb6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_ADC1_Init+0x98>)
 8001648:	f001 f818 	bl	800267c <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001652:	f000 fb30 	bl	8001cb6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000238 	.word	0x20000238
 8001664:	40012000 	.word	0x40012000
 8001668:	0f000001 	.word	0x0f000001

0800166c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x50>)
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <MX_I2C1_Init+0x54>)
 8001674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x50>)
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_I2C1_Init+0x58>)
 800167a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_I2C1_Init+0x50>)
 800168a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <MX_I2C1_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_I2C1_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_I2C1_Init+0x50>)
 80016aa:	f001 fc9d 	bl	8002fe8 <HAL_I2C_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b4:	f000 faff 	bl	8001cb6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000280 	.word	0x20000280
 80016c0:	40005400 	.word	0x40005400
 80016c4:	000186a0 	.word	0x000186a0

080016c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_USART1_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_USART1_UART_Init+0x4c>)
 8001700:	f003 f84e 	bl	80047a0 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 fad4 	bl	8001cb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200002d4 	.word	0x200002d4
 8001718:	40011000 	.word	0x40011000

0800171c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_USART2_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_USART2_UART_Init+0x4c>)
 8001754:	f003 f824 	bl	80047a0 <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f000 faaa 	bl	8001cb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000031c 	.word	0x2000031c
 800176c:	40004400 	.word	0x40004400

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <MX_GPIO_Init+0x140>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <MX_GPIO_Init+0x140>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <MX_GPIO_Init+0x140>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a41      	ldr	r2, [pc, #260]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a33      	ldr	r2, [pc, #204]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <MX_GPIO_Init+0x140>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	482e      	ldr	r0, [pc, #184]	; (80018b4 <MX_GPIO_Init+0x144>)
 80017fc:	f001 fbc2 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001806:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4828      	ldr	r0, [pc, #160]	; (80018b8 <MX_GPIO_Init+0x148>)
 8001818:	f001 fa30 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181c:	2320      	movs	r3, #32
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4820      	ldr	r0, [pc, #128]	; (80018b4 <MX_GPIO_Init+0x144>)
 8001834:	f001 fa22 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Amper_Button_Pin */
  GPIO_InitStruct.Pin = Amper_Button_Pin;
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Amper_Button_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <MX_GPIO_Init+0x148>)
 800184e:	f001 fa15 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Volt_Button_Pin */
  GPIO_InitStruct.Pin = Volt_Button_Pin;
 8001852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001858:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Volt_Button_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <MX_GPIO_Init+0x144>)
 800186a:	f001 fa07 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Ohm_Button_Pin */
  GPIO_InitStruct.Pin = Ohm_Button_Pin;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001872:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ohm_Button_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480e      	ldr	r0, [pc, #56]	; (80018bc <MX_GPIO_Init+0x14c>)
 8001884:	f001 f9fa 	bl	8002c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2105      	movs	r1, #5
 800188c:	2017      	movs	r0, #23
 800188e:	f001 f9cb 	bl	8002c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001892:	2017      	movs	r0, #23
 8001894:	f001 f9e4 	bl	8002c60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2105      	movs	r1, #5
 800189c:	2028      	movs	r0, #40	; 0x28
 800189e:	f001 f9c3 	bl	8002c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018a2:	2028      	movs	r0, #40	; 0x28
 80018a4:	f001 f9dc 	bl	8002c60 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020400 	.word	0x40020400

080018c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d0:	d10e      	bne.n	80018f0 <HAL_GPIO_EXTI_Callback+0x30>
		if(mod == modvolt || mod == modamper || mod == modohm){
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_EXTI_Callback+0x2a>
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_EXTI_Callback+0x2a>
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d102      	bne.n	80018f0 <HAL_GPIO_EXTI_Callback+0x30>
			mod = modprint;
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == Volt_Button_Pin){
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f6:	d10e      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x56>
		if(mod == modprint || mod == modamper || mod == modohm){
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_EXTI_Callback+0x50>
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_EXTI_Callback+0x50>
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d102      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x56>
			mod = modvolt;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == Amper_Button_Pin){
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b80      	cmp	r3, #128	; 0x80
 800191a:	d10e      	bne.n	800193a <HAL_GPIO_EXTI_Callback+0x7a>
		if(mod == modprint || mod == modvolt || mod == modohm){
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_EXTI_Callback+0x74>
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_EXTI_Callback+0x74>
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d102      	bne.n	800193a <HAL_GPIO_EXTI_Callback+0x7a>
			mod = modamper;
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
		}
	}
	if(GPIO_Pin == Ohm_Button_Pin){
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d10e      	bne.n	800195e <HAL_GPIO_EXTI_Callback+0x9e>
		if(mod == modprint || mod == modvolt || mod == modamper){
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_EXTI_Callback+0x98>
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_EXTI_Callback+0x98>
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d102      	bne.n	800195e <HAL_GPIO_EXTI_Callback+0x9e>
			mod = modohm;
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_GPIO_EXTI_Callback+0xac>)
 800195a:	2203      	movs	r2, #3
 800195c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000234 	.word	0x20000234

08001970 <StartVoltMeter>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartVoltMeter */
void StartVoltMeter(void *argument)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osThreadSuspend(defaultPrintHandle);
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <StartVoltMeter+0xd8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 faf3 	bl	8004f68 <osThreadSuspend>
	osThreadSuspend(amperMeterHandle);
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <StartVoltMeter+0xdc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 faee 	bl	8004f68 <osThreadSuspend>
	osThreadSuspend(ohmmeterHandle);
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <StartVoltMeter+0xe0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fae9 	bl	8004f68 <osThreadSuspend>
	uint16_t voltraw;
  /* Infinite loop */
  for(;;)
  {
	if(mod == modprint){
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <StartVoltMeter+0xe4>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <StartVoltMeter+0x3a>
		osThreadResume(defaultPrintHandle);
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <StartVoltMeter+0xd8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fb01 	bl	8004faa <osThreadResume>
 80019a8:	e7f5      	b.n	8001996 <StartVoltMeter+0x26>
	}
	else if(mod == modamper){
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <StartVoltMeter+0xe4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d105      	bne.n	80019be <StartVoltMeter+0x4e>
		osThreadResume(amperMeterHandle);
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <StartVoltMeter+0xdc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 faf7 	bl	8004faa <osThreadResume>
 80019bc:	e7eb      	b.n	8001996 <StartVoltMeter+0x26>
	}
	else if(mod == modohm){
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <StartVoltMeter+0xe4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d105      	bne.n	80019d2 <StartVoltMeter+0x62>
		osThreadResume(ohmmeterHandle);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <StartVoltMeter+0xe0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 faed 	bl	8004faa <osThreadResume>
 80019d0:	e7e1      	b.n	8001996 <StartVoltMeter+0x26>
	}else{

	HD44780_Init(2);
 80019d2:	2002      	movs	r0, #2
 80019d4:	f7ff fb14 	bl	8001000 <HD44780_Init>
	HD44780_Clear();
 80019d8:	f7ff fb96 	bl	8001108 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80019dc:	2100      	movs	r1, #0
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fba8 	bl	8001134 <HD44780_SetCursor>
	HD44780_PrintStr("VOLTMETER");
 80019e4:	481c      	ldr	r0, [pc, #112]	; (8001a58 <StartVoltMeter+0xe8>)
 80019e6:	f7ff fc16 	bl	8001216 <HD44780_PrintStr>

    float voltage = raw*(3.3/4096);
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <StartVoltMeter+0xec>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fda0 	bl	8000534 <__aeabi_i2d>
 80019f4:	a312      	add	r3, pc, #72	; (adr r3, 8001a40 <StartVoltMeter+0xd0>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fe05 	bl	8000608 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f8f7 	bl	8000bf8 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60fb      	str	r3, [r7, #12]
    snprintf(voltageStr, sizeof(voltageStr), "%.2f V", voltage);
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7fe fda2 	bl	8000558 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	e9cd 2300 	strd	r2, r3, [sp]
 8001a1c:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <StartVoltMeter+0xf0>)
 8001a1e:	2114      	movs	r1, #20
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <StartVoltMeter+0xf4>)
 8001a22:	f007 f8a3 	bl	8008b6c <sniprintf>
    HD44780_SetCursor(0,1);
 8001a26:	2101      	movs	r1, #1
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fb83 	bl	8001134 <HD44780_SetCursor>
    HD44780_PrintStr(voltageStr);
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <StartVoltMeter+0xf4>)
 8001a30:	f7ff fbf1 	bl	8001216 <HD44780_PrintStr>
    osDelay(100);
 8001a34:	2064      	movs	r0, #100	; 0x64
 8001a36:	f003 fad9 	bl	8004fec <osDelay>
	if(mod == modprint){
 8001a3a:	e7ac      	b.n	8001996 <StartVoltMeter+0x26>
 8001a3c:	f3af 8000 	nop.w
 8001a40:	66666666 	.word	0x66666666
 8001a44:	3f4a6666 	.word	0x3f4a6666
 8001a48:	20000370 	.word	0x20000370
 8001a4c:	20000368 	.word	0x20000368
 8001a50:	2000036c 	.word	0x2000036c
 8001a54:	20000234 	.word	0x20000234
 8001a58:	0800c59c 	.word	0x0800c59c
 8001a5c:	2000020a 	.word	0x2000020a
 8001a60:	0800c5a8 	.word	0x0800c5a8
 8001a64:	2000020c 	.word	0x2000020c

08001a68 <StartAmperMeter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAmperMeter */
void StartAmperMeter(void *argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAmperMeter */
	osThreadSuspend(defaultPrintHandle);
 8001a70:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <StartAmperMeter+0xe8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fa77 	bl	8004f68 <osThreadSuspend>
	osThreadSuspend(voltMeterHandle);
 8001a7a:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <StartAmperMeter+0xec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fa72 	bl	8004f68 <osThreadSuspend>
	osThreadSuspend(ohmmeterHandle);
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <StartAmperMeter+0xf0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fa6d 	bl	8004f68 <osThreadSuspend>
	uint16_t amperraw;
  /* Infinite loop */
  for(;;)
  {
	  if(mod == modprint){
 8001a8e:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <StartAmperMeter+0xf4>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <StartAmperMeter+0x3a>
		  osThreadResume(defaultPrintHandle);
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <StartAmperMeter+0xe8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fa85 	bl	8004faa <osThreadResume>
 8001aa0:	e7f5      	b.n	8001a8e <StartAmperMeter+0x26>
	  }
	  else if(mod == modvolt){
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <StartAmperMeter+0xf4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <StartAmperMeter+0x4e>
		  osThreadResume(voltMeterHandle);
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <StartAmperMeter+0xec>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fa7b 	bl	8004faa <osThreadResume>
 8001ab4:	e7eb      	b.n	8001a8e <StartAmperMeter+0x26>
	  }
	  else if(mod == modohm){
 8001ab6:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <StartAmperMeter+0xf4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d105      	bne.n	8001aca <StartAmperMeter+0x62>
		  osThreadResume(ohmmeterHandle);
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <StartAmperMeter+0xf0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fa71 	bl	8004faa <osThreadResume>
 8001ac8:	e7e1      	b.n	8001a8e <StartAmperMeter+0x26>
	  }else{

	HD44780_Init(2);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7ff fa98 	bl	8001000 <HD44780_Init>
	HD44780_Clear();
 8001ad0:	f7ff fb1a 	bl	8001108 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fb2c 	bl	8001134 <HD44780_SetCursor>
	HD44780_PrintStr("AMPERMETER");
 8001adc:	4820      	ldr	r0, [pc, #128]	; (8001b60 <StartAmperMeter+0xf8>)
 8001ade:	f7ff fb9a 	bl	8001216 <HD44780_PrintStr>

	float voltage = raw*(3.3/4096);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <StartAmperMeter+0xfc>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd24 	bl	8000534 <__aeabi_i2d>
 8001aec:	a316      	add	r3, pc, #88	; (adr r3, 8001b48 <StartAmperMeter+0xe0>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fd89 	bl	8000608 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f87b 	bl	8000bf8 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]
	float ampers = voltage/220;
 8001b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b0a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001b68 <StartAmperMeter+0x100>
 8001b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b12:	edc7 7a02 	vstr	s15, [r7, #8]
	snprintf(amperStr, sizeof(amperStr), "%.2f A", ampers);
 8001b16:	68b8      	ldr	r0, [r7, #8]
 8001b18:	f7fe fd1e 	bl	8000558 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9cd 2300 	strd	r2, r3, [sp]
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <StartAmperMeter+0x104>)
 8001b26:	2114      	movs	r1, #20
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <StartAmperMeter+0x108>)
 8001b2a:	f007 f81f 	bl	8008b6c <sniprintf>
	HD44780_SetCursor(0,1);
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff faff 	bl	8001134 <HD44780_SetCursor>
	HD44780_PrintStr(amperStr);
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <StartAmperMeter+0x108>)
 8001b38:	f7ff fb6d 	bl	8001216 <HD44780_PrintStr>
    osDelay(100);
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	f003 fa55 	bl	8004fec <osDelay>
	  if(mod == modprint){
 8001b42:	e7a4      	b.n	8001a8e <StartAmperMeter+0x26>
 8001b44:	f3af 8000 	nop.w
 8001b48:	66666666 	.word	0x66666666
 8001b4c:	3f4a6666 	.word	0x3f4a6666
 8001b50:	20000370 	.word	0x20000370
 8001b54:	20000364 	.word	0x20000364
 8001b58:	2000036c 	.word	0x2000036c
 8001b5c:	20000234 	.word	0x20000234
 8001b60:	0800c5b0 	.word	0x0800c5b0
 8001b64:	2000020a 	.word	0x2000020a
 8001b68:	435c0000 	.word	0x435c0000
 8001b6c:	0800c5bc 	.word	0x0800c5bc
 8001b70:	20000220 	.word	0x20000220

08001b74 <StartOhmMeter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOhmMeter */
void StartOhmMeter(void *argument)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOhmMeter */

  /* Infinite loop */
  for(;;)
 8001b7c:	e7fe      	b.n	8001b7c <StartOhmMeter+0x8>
	...

08001b80 <StartPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrint */
void StartPrint(void *argument)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrint */
osThreadSuspend(voltMeterHandle);
 8001b88:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <StartPrint+0x90>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 f9eb 	bl	8004f68 <osThreadSuspend>
osThreadSuspend(amperMeterHandle);
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <StartPrint+0x94>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f9e6 	bl	8004f68 <osThreadSuspend>
osThreadSuspend(ohmmeterHandle);
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <StartPrint+0x98>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 f9e1 	bl	8004f68 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(mod == modvolt){
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <StartPrint+0x9c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d105      	bne.n	8001bba <StartPrint+0x3a>
		  osThreadResume(voltMeterHandle);
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <StartPrint+0x90>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 f9f9 	bl	8004faa <osThreadResume>
 8001bb8:	e7f5      	b.n	8001ba6 <StartPrint+0x26>
	  }
	  else if(mod == modamper){
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <StartPrint+0x9c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d105      	bne.n	8001bce <StartPrint+0x4e>
		  osThreadResume(amperMeterHandle);
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <StartPrint+0x94>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f9ef 	bl	8004faa <osThreadResume>
 8001bcc:	e7eb      	b.n	8001ba6 <StartPrint+0x26>
	  }
	  else if(mod == modprint){
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <StartPrint+0x9c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <StartPrint+0x62>
		  osThreadResume(defaultPrintHandle);
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <StartPrint+0xa0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 f9e5 	bl	8004faa <osThreadResume>
 8001be0:	e7e1      	b.n	8001ba6 <StartPrint+0x26>
	  }else{

	  HD44780_Init(2);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7ff fa0c 	bl	8001000 <HD44780_Init>
	  HD44780_Clear();
 8001be8:	f7ff fa8e 	bl	8001108 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8001bec:	2100      	movs	r1, #0
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff faa0 	bl	8001134 <HD44780_SetCursor>
	  HD44780_PrintStr("/////DIGITAL////");
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <StartPrint+0xa4>)
 8001bf6:	f7ff fb0e 	bl	8001216 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fa99 	bl	8001134 <HD44780_SetCursor>
	  HD44780_PrintStr("///MULTIMETER///");
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <StartPrint+0xa8>)
 8001c04:	f7ff fb07 	bl	8001216 <HD44780_PrintStr>
	  osDelay(100);
 8001c08:	2064      	movs	r0, #100	; 0x64
 8001c0a:	f003 f9ef 	bl	8004fec <osDelay>
	  if(mod == modvolt){
 8001c0e:	e7ca      	b.n	8001ba6 <StartPrint+0x26>
 8001c10:	20000364 	.word	0x20000364
 8001c14:	20000368 	.word	0x20000368
 8001c18:	2000036c 	.word	0x2000036c
 8001c1c:	20000234 	.word	0x20000234
 8001c20:	20000370 	.word	0x20000370
 8001c24:	0800c5c4 	.word	0x0800c5c4
 8001c28:	0800c5d8 	.word	0x0800c5d8

08001c2c <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8001c34:	4813      	ldr	r0, [pc, #76]	; (8001c84 <StartADC+0x58>)
 8001c36:	f000 fbd5 	bl	80023e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,100);
 8001c3a:	2164      	movs	r1, #100	; 0x64
 8001c3c:	4811      	ldr	r0, [pc, #68]	; (8001c84 <StartADC+0x58>)
 8001c3e:	f000 fc85 	bl	800254c <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8001c42:	4810      	ldr	r0, [pc, #64]	; (8001c84 <StartADC+0x58>)
 8001c44:	f000 fd0d 	bl	8002662 <HAL_ADC_GetValue>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <StartADC+0x5c>)
 8001c4e:	801a      	strh	r2, [r3, #0]
	osMessageQueuePut(voltQueueHandle, &raw, 1, 10);
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <StartADC+0x60>)
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	230a      	movs	r3, #10
 8001c56:	2201      	movs	r2, #1
 8001c58:	490b      	ldr	r1, [pc, #44]	; (8001c88 <StartADC+0x5c>)
 8001c5a:	f003 fa55 	bl	8005108 <osMessageQueuePut>
	osMessageQueuePut(queueAmperHandle, &raw, 1, 10);
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <StartADC+0x64>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	230a      	movs	r3, #10
 8001c64:	2201      	movs	r2, #1
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <StartADC+0x5c>)
 8001c68:	f003 fa4e 	bl	8005108 <osMessageQueuePut>
	osMessageQueuePut(queueOhmHandle, &raw, 1, 10);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <StartADC+0x68>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	230a      	movs	r3, #10
 8001c72:	2201      	movs	r2, #1
 8001c74:	4904      	ldr	r1, [pc, #16]	; (8001c88 <StartADC+0x5c>)
 8001c76:	f003 fa47 	bl	8005108 <osMessageQueuePut>
    osDelay(100);
 8001c7a:	2064      	movs	r0, #100	; 0x64
 8001c7c:	f003 f9b6 	bl	8004fec <osDelay>
	HAL_ADC_Start(&hadc1);
 8001c80:	e7d8      	b.n	8001c34 <StartADC+0x8>
 8001c82:	bf00      	nop
 8001c84:	20000238 	.word	0x20000238
 8001c88:	2000020a 	.word	0x2000020a
 8001c8c:	20000378 	.word	0x20000378
 8001c90:	2000037c 	.word	0x2000037c
 8001c94:	20000380 	.word	0x20000380

08001c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001caa:	f000 fb13 	bl	80022d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cba:	b672      	cpsid	i
}
 8001cbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <Error_Handler+0x8>

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_MspInit+0x54>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_MspInit+0x54>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_MspInit+0x54>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_MspInit+0x54>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_MspInit+0x54>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_MspInit+0x54>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	210f      	movs	r1, #15
 8001d02:	f06f 0001 	mvn.w	r0, #1
 8001d06:	f000 ff8f 	bl	8002c28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_ADC_MspInit+0x7c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d127      	bne.n	8001d8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_ADC_MspInit+0x80>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_ADC_MspInit+0x80>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_ADC_MspInit+0x80>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_ADC_MspInit+0x80>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_ADC_MspInit+0x80>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_ADC_MspInit+0x80>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d72:	2301      	movs	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d76:	2303      	movs	r3, #3
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_ADC_MspInit+0x84>)
 8001d86:	f000 ff79 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40012000 	.word	0x40012000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000

08001da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_I2C_MspInit+0x84>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d12c      	bne.n	8001e1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_I2C_MspInit+0x88>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_I2C_MspInit+0x88>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_I2C_MspInit+0x88>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de4:	2312      	movs	r3, #18
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df0:	2304      	movs	r3, #4
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480c      	ldr	r0, [pc, #48]	; (8001e2c <HAL_I2C_MspInit+0x8c>)
 8001dfc:	f000 ff3e 	bl	8002c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_I2C_MspInit+0x88>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_I2C_MspInit+0x88>)
 8001e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_I2C_MspInit+0x88>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40005400 	.word	0x40005400
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a32      	ldr	r2, [pc, #200]	; (8001f18 <HAL_UART_MspInit+0xe8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12d      	bne.n	8001eae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a30      	ldr	r2, [pc, #192]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001e5c:	f043 0310 	orr.w	r3, r3, #16
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481e      	ldr	r0, [pc, #120]	; (8001f20 <HAL_UART_MspInit+0xf0>)
 8001ea8:	f000 fee8 	bl	8002c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eac:	e030      	b.n	8001f10 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_UART_MspInit+0xf4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d12b      	bne.n	8001f10 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_UART_MspInit+0xec>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ef0:	230c      	movs	r3, #12
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f00:	2307      	movs	r3, #7
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_UART_MspInit+0xf0>)
 8001f0c:	f000 feb6 	bl	8002c7c <HAL_GPIO_Init>
}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40004400 	.word	0x40004400

08001f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08e      	sub	sp, #56	; 0x38
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_InitTick+0xe8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a33      	ldr	r2, [pc, #204]	; (8002010 <HAL_InitTick+0xe8>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_InitTick+0xe8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f54:	f107 0210 	add.w	r2, r7, #16
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 f978 	bl	8004254 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f6e:	f002 f949 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8001f72:	6378      	str	r0, [r7, #52]	; 0x34
 8001f74:	e004      	b.n	8001f80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f76:	f002 f945 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_InitTick+0xec>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9b      	lsrs	r3, r3, #18
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_InitTick+0xf0>)
 8001f90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_InitTick+0xf0>)
 8001f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f9c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_InitTick+0xf0>)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_InitTick+0xf0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_InitTick+0xf0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_InitTick+0xf0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001fb6:	4818      	ldr	r0, [pc, #96]	; (8002018 <HAL_InitTick+0xf0>)
 8001fb8:	f002 f97e 	bl	80042b8 <HAL_TIM_Base_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11b      	bne.n	8002002 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001fca:	4813      	ldr	r0, [pc, #76]	; (8002018 <HAL_InitTick+0xf0>)
 8001fcc:	f002 f9ce 	bl	800436c <HAL_TIM_Base_Start_IT>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d111      	bne.n	8002002 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fde:	201c      	movs	r0, #28
 8001fe0:	f000 fe3e 	bl	8002c60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	d808      	bhi.n	8001ffc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001fea:	2200      	movs	r2, #0
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	201c      	movs	r0, #28
 8001ff0:	f000 fe1a 	bl	8002c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff4:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_InitTick+0xf4>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e002      	b.n	8002002 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002006:	4618      	mov	r0, r3
 8002008:	3738      	adds	r7, #56	; 0x38
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	431bde83 	.word	0x431bde83
 8002018:	20000384 	.word	0x20000384
 800201c:	20000014 	.word	0x20000014

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ohm_Button_Pin);
 8002050:	2040      	movs	r0, #64	; 0x40
 8002052:	f000 ffb1 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Amper_Button_Pin);
 8002056:	2080      	movs	r0, #128	; 0x80
 8002058:	f000 ffae 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Volt_Button_Pin);
 800205c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002060:	f000 ffaa 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM2_IRQHandler+0x10>)
 800206e:	f002 f9df 	bl	8004430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000384 	.word	0x20000384

0800207c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002080:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002084:	f000 ff98 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a6:	f006 fe4b 	bl	8008d40 <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
  return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ce:	e7fe      	b.n	80020ce <_exit+0x12>

080020d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
  }

  return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e009      	b.n	8002130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3301      	adds	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbf1      	blt.n	800211c <_write+0x12>
  }
  return len;
 8002138:	687b      	ldr	r3, [r7, #4]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_close>:

int _close(int file)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216a:	605a      	str	r2, [r3, #4]
  return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_isatty>:

int _isatty(int file)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f006 fdb0 	bl	8008d40 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20018000 	.word	0x20018000
 800220c:	00000400 	.word	0x00000400
 8002210:	200003cc 	.word	0x200003cc
 8002214:	20004e70 	.word	0x20004e70

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002240:	f7ff ffea 	bl	8002218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800226a:	f006 fd6f 	bl	8008d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226e:	f7ff f8c1 	bl	80013f4 <main>
  bx  lr    
 8002272:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002274:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002280:	0800cb50 	.word	0x0800cb50
  ldr r2, =_sbss
 8002284:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002288:	20004e70 	.word	0x20004e70

0800228c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC_IRQHandler>
	...

08002290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <HAL_Init+0x40>)
 800229a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_Init+0x40>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_Init+0x40>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 fcaa 	bl	8002c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	200f      	movs	r0, #15
 80022c0:	f7ff fe32 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7ff fcfc 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023c00 	.word	0x40023c00

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000018 	.word	0x20000018
 80022f8:	200003d0 	.word	0x200003d0

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200003d0 	.word	0x200003d0

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000018 	.word	0x20000018

0800235c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e033      	b.n	80023da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fccc 	bl	8001d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023a2:	f023 0302 	bic.w	r3, r3, #2
 80023a6:	f043 0202 	orr.w	r2, r3, #2
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fa86 	bl	80028c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
 80023ca:	e001      	b.n	80023d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Start+0x1a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e097      	b.n	800252e <HAL_ADC_Start+0x14a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d018      	beq.n	8002446 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_ADC_Start+0x158>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a45      	ldr	r2, [pc, #276]	; (8002540 <HAL_ADC_Start+0x15c>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0c9a      	lsrs	r2, r3, #18
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002438:	e002      	b.n	8002440 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d15f      	bne.n	8002514 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800247e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d106      	bne.n	80024a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f023 0206 	bic.w	r2, r3, #6
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_ADC_Start+0x160>)
 80024b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024bc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d129      	bne.n	800252c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e020      	b.n	800252c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_ADC_Start+0x164>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d11b      	bne.n	800252c <HAL_ADC_Start+0x148>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d114      	bne.n	800252c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	e00b      	b.n	800252c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0210 	orr.w	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000010 	.word	0x20000010
 8002540:	431bde83 	.word	0x431bde83
 8002544:	40012300 	.word	0x40012300
 8002548:	40012000 	.word	0x40012000

0800254c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002568:	d113      	bne.n	8002592 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d10b      	bne.n	8002592 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e063      	b.n	800265a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002592:	f7ff feb3 	bl	80022fc <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002598:	e021      	b.n	80025de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d01d      	beq.n	80025de <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_PollForConversion+0x6c>
 80025a8:	f7ff fea8 	bl	80022fc <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d212      	bcs.n	80025de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d00b      	beq.n	80025de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e03d      	b.n	800265a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d1d6      	bne.n	800259a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0212 	mvn.w	r2, #18
 80025f4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d123      	bne.n	8002658 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d11f      	bne.n	8002658 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e105      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x228>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d925      	bls.n	80026f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68d9      	ldr	r1, [r3, #12]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	2207      	movs	r2, #7
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68d9      	ldr	r1, [r3, #12]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4403      	add	r3, r0
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	409a      	lsls	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	e022      	b.n	800273a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	2207      	movs	r2, #7
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	4603      	mov	r3, r0
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4403      	add	r3, r0
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d824      	bhi.n	800278c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b05      	subs	r3, #5
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	3b05      	subs	r3, #5
 800277e:	fa00 f203 	lsl.w	r2, r0, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	635a      	str	r2, [r3, #52]	; 0x34
 800278a:	e04c      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b0c      	cmp	r3, #12
 8002792:	d824      	bhi.n	80027de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b23      	subs	r3, #35	; 0x23
 80027a6:	221f      	movs	r2, #31
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43da      	mvns	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	400a      	ands	r2, r1
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b23      	subs	r3, #35	; 0x23
 80027d0:	fa00 f203 	lsl.w	r2, r0, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
 80027dc:	e023      	b.n	8002826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b41      	subs	r3, #65	; 0x41
 80027f0:	221f      	movs	r2, #31
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	400a      	ands	r2, r1
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b41      	subs	r3, #65	; 0x41
 800281a:	fa00 f203 	lsl.w	r2, r0, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_ADC_ConfigChannel+0x234>)
 8002828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <HAL_ADC_ConfigChannel+0x238>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d109      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1cc>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b12      	cmp	r3, #18
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_ADC_ConfigChannel+0x238>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d123      	bne.n	800289a <HAL_ADC_ConfigChannel+0x21e>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b10      	cmp	r3, #16
 8002858:	d003      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x1e6>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b11      	cmp	r3, #17
 8002860:	d11b      	bne.n	800289a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b10      	cmp	r3, #16
 8002874:	d111      	bne.n	800289a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_ADC_ConfigChannel+0x23c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_ADC_ConfigChannel+0x240>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	0c9a      	lsrs	r2, r3, #18
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800288c:	e002      	b.n	8002894 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3b01      	subs	r3, #1
 8002892:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f9      	bne.n	800288e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40012300 	.word	0x40012300
 80028b4:	40012000 	.word	0x40012000
 80028b8:	20000010 	.word	0x20000010
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <ADC_Init+0x1f0>)
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <ADC_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00f      	b.n	80029be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0202 	bic.w	r2, r2, #2
 80029cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	005a      	lsls	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	035a      	lsls	r2, r3, #13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	051a      	lsls	r2, r3, #20
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a76:	025a      	lsls	r2, r3, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	029a      	lsls	r2, r3, #10
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	0f000001 	.word	0x0f000001

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	; (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	db0b      	blt.n	8002b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <__NVIC_EnableIRQ+0x38>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e100 	.word	0xe000e100

08002b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f1c3 0307 	rsb	r3, r3, #7
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	bf28      	it	cs
 8002bca:	2304      	movcs	r3, #4
 8002bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2b06      	cmp	r3, #6
 8002bd4:	d902      	bls.n	8002bdc <NVIC_EncodePriority+0x30>
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3b03      	subs	r3, #3
 8002bda:	e000      	b.n	8002bde <NVIC_EncodePriority+0x32>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	f04f 32ff 	mov.w	r2, #4294967295
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	401a      	ands	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	4313      	orrs	r3, r2
         );
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3724      	adds	r7, #36	; 0x24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff4c 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3a:	f7ff ff61 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f7ff ffb1 	bl	8002bac <NVIC_EncodePriority>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff80 	bl	8002b58 <__NVIC_SetPriority>
}
 8002c58:	bf00      	nop
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff54 	bl	8002b1c <__NVIC_EnableIRQ>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e159      	b.n	8002f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8148 	bne.w	8002f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d017      	beq.n	8002d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x202>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_GPIO_Init+0x2f4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x1fe>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_GPIO_Init+0x2f8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x1fa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x1f6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a45      	ldr	r2, [pc, #276]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x1f2>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4935      	ldr	r1, [pc, #212]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f40:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f aea2 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fc72 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40013c00 	.word	0x40013c00

08002fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e12b      	b.n	8003252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe fec6 	bl	8001da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800304c:	f001 f8da 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a81      	ldr	r2, [pc, #516]	; (800325c <HAL_I2C_Init+0x274>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d807      	bhi.n	800306c <HAL_I2C_Init+0x84>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a80      	ldr	r2, [pc, #512]	; (8003260 <HAL_I2C_Init+0x278>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e006      	b.n	800307a <HAL_I2C_Init+0x92>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a7d      	ldr	r2, [pc, #500]	; (8003264 <HAL_I2C_Init+0x27c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0e7      	b.n	8003252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a78      	ldr	r2, [pc, #480]	; (8003268 <HAL_I2C_Init+0x280>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a6a      	ldr	r2, [pc, #424]	; (800325c <HAL_I2C_Init+0x274>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d802      	bhi.n	80030bc <HAL_I2C_Init+0xd4>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3301      	adds	r3, #1
 80030ba:	e009      	b.n	80030d0 <HAL_I2C_Init+0xe8>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a69      	ldr	r2, [pc, #420]	; (800326c <HAL_I2C_Init+0x284>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	3301      	adds	r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	495c      	ldr	r1, [pc, #368]	; (800325c <HAL_I2C_Init+0x274>)
 80030ec:	428b      	cmp	r3, r1
 80030ee:	d819      	bhi.n	8003124 <HAL_I2C_Init+0x13c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e59      	subs	r1, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fe:	1c59      	adds	r1, r3, #1
 8003100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003104:	400b      	ands	r3, r1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_I2C_Init+0x138>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e59      	subs	r1, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fbb1 f3f3 	udiv	r3, r1, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	e051      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 8003120:	2304      	movs	r3, #4
 8003122:	e04f      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <HAL_I2C_Init+0x168>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e58      	subs	r0, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e012      	b.n	8003176 <HAL_I2C_Init+0x18e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0099      	lsls	r1, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Init+0x196>
 800317a:	2301      	movs	r3, #1
 800317c:	e022      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <HAL_I2C_Init+0x1bc>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e58      	subs	r0, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	440b      	add	r3, r1
 8003194:	fbb0 f3f3 	udiv	r3, r0, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	e00f      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	6809      	ldr	r1, [r1, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6911      	ldr	r1, [r2, #16]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68d2      	ldr	r2, [r2, #12]
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	430b      	orrs	r3, r1
 8003206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000186a0 	.word	0x000186a0
 8003260:	001e847f 	.word	0x001e847f
 8003264:	003d08ff 	.word	0x003d08ff
 8003268:	431bde83 	.word	0x431bde83
 800326c:	10624dd3 	.word	0x10624dd3

08003270 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	460b      	mov	r3, r1
 800327e:	817b      	strh	r3, [r7, #10]
 8003280:	4613      	mov	r3, r2
 8003282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff f83a 	bl	80022fc <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	f040 80e0 	bne.w	8003458 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2319      	movs	r3, #25
 800329e:	2201      	movs	r2, #1
 80032a0:	4970      	ldr	r1, [pc, #448]	; (8003464 <HAL_I2C_Master_Transmit+0x1f4>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f964 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0d3      	b.n	800345a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2C_Master_Transmit+0x50>
 80032bc:	2302      	movs	r3, #2
 80032be:	e0cc      	b.n	800345a <HAL_I2C_Master_Transmit+0x1ea>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d007      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2210      	movs	r2, #16
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	893a      	ldrh	r2, [r7, #8]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_I2C_Master_Transmit+0x1f8>)
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003328:	8979      	ldrh	r1, [r7, #10]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f89c 	bl	800346c <I2C_MasterRequestWrite>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e08d      	b.n	800345a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003354:	e066      	b.n	8003424 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa22 	bl	80037a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06b      	b.n	800345a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x188>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d017      	beq.n	80033f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	6a39      	ldr	r1, [r7, #32]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fa19 	bl	8003834 <I2C_WaitOnBTFFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2b04      	cmp	r3, #4
 800340e:	d107      	bne.n	8003420 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e01a      	b.n	800345a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d194      	bne.n	8003356 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e000      	b.n	800345a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003458:	2302      	movs	r3, #2
  }
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	00100002 	.word	0x00100002
 8003468:	ffff0000 	.word	0xffff0000

0800346c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	460b      	mov	r3, r1
 800347a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d006      	beq.n	8003496 <I2C_MasterRequestWrite+0x2a>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d003      	beq.n	8003496 <I2C_MasterRequestWrite+0x2a>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003494:	d108      	bne.n	80034a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e00b      	b.n	80034c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	2b12      	cmp	r3, #18
 80034ae:	d107      	bne.n	80034c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f84f 	bl	8003570 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e6:	d103      	bne.n	80034f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e035      	b.n	8003560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fc:	d108      	bne.n	8003510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034fe:	897b      	ldrh	r3, [r7, #10]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800350c:	611a      	str	r2, [r3, #16]
 800350e:	e01b      	b.n	8003548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	11db      	asrs	r3, r3, #7
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0306 	and.w	r3, r3, #6
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f063 030f 	orn	r3, r3, #15
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	490e      	ldr	r1, [pc, #56]	; (8003568 <I2C_MasterRequestWrite+0xfc>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f898 	bl	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e010      	b.n	8003560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <I2C_MasterRequestWrite+0x100>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f888 	bl	8003664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00010008 	.word	0x00010008
 800356c:	00010002 	.word	0x00010002

08003570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003580:	e048      	b.n	8003614 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d044      	beq.n	8003614 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fe feb7 	bl	80022fc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d139      	bne.n	8003614 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10d      	bne.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	43da      	mvns	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	e00c      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	43da      	mvns	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d116      	bne.n	8003614 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e023      	b.n	800365c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d10d      	bne.n	800363a <I2C_WaitOnFlagUntilTimeout+0xca>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	e00c      	b.n	8003654 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	43da      	mvns	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	4013      	ands	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	429a      	cmp	r2, r3
 8003658:	d093      	beq.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003672:	e071      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d123      	bne.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800369c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e067      	b.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d041      	beq.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d4:	f7fe fe12 	bl	80022fc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d302      	bcc.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d136      	bne.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10c      	bne.n	800370e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	e00b      	b.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	43da      	mvns	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d016      	beq.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e021      	b.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10c      	bne.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e00b      	b.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf14      	ite	ne
 800378e:	2301      	movne	r3, #1
 8003790:	2300      	moveq	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f af6d 	bne.w	8003674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b0:	e034      	b.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f886 	bl	80038c4 <I2C_IsAcknowledgeFailed>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e034      	b.n	800382c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d028      	beq.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe fd97 	bl	80022fc <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11d      	bne.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d016      	beq.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0220 	orr.w	r2, r3, #32
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e007      	b.n	800382c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d1c3      	bne.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003840:	e034      	b.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f83e 	bl	80038c4 <I2C_IsAcknowledgeFailed>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e034      	b.n	80038bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d028      	beq.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fe fd4f 	bl	80022fc <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d11d      	bne.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b04      	cmp	r3, #4
 800387c:	d016      	beq.n	80038ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e007      	b.n	80038bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d1c3      	bne.n	8003842 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038da:	d11b      	bne.n	8003914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e267      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d075      	beq.n	8003a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003942:	4b88      	ldr	r3, [pc, #544]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b04      	cmp	r3, #4
 800394c:	d00c      	beq.n	8003968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394e:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003956:	2b08      	cmp	r3, #8
 8003958:	d112      	bne.n	8003980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395a:	4b82      	ldr	r3, [pc, #520]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003966:	d10b      	bne.n	8003980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	4b7e      	ldr	r3, [pc, #504]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d05b      	beq.n	8003a2c <HAL_RCC_OscConfig+0x108>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d157      	bne.n	8003a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e242      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003988:	d106      	bne.n	8003998 <HAL_RCC_OscConfig+0x74>
 800398a:	4b76      	ldr	r3, [pc, #472]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a75      	ldr	r2, [pc, #468]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e01d      	b.n	80039d4 <HAL_RCC_OscConfig+0xb0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x98>
 80039a2:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6f      	ldr	r2, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6c      	ldr	r2, [pc, #432]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e00b      	b.n	80039d4 <HAL_RCC_OscConfig+0xb0>
 80039bc:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a68      	ldr	r2, [pc, #416]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d013      	beq.n	8003a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fc8e 	bl	80022fc <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fe fc8a 	bl	80022fc <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e207      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b5b      	ldr	r3, [pc, #364]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0xc0>
 8003a02:	e014      	b.n	8003a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a04:	f7fe fc7a 	bl	80022fc <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fc76 	bl	80022fc <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1f3      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1e:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0xe8>
 8003a2a:	e000      	b.n	8003a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d063      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d11c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a52:	4b44      	ldr	r3, [pc, #272]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d116      	bne.n	8003a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_RCC_OscConfig+0x152>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e1c7      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4937      	ldr	r1, [pc, #220]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	e03a      	b.n	8003b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCC_OscConfig+0x244>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fe fc2f 	bl	80022fc <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa2:	f7fe fc2b 	bl	80022fc <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e1a8      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4925      	ldr	r1, [pc, #148]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	e015      	b.n	8003b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_RCC_OscConfig+0x244>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe fc0e 	bl	80022fc <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fc0a 	bl	80022fc <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e187      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d036      	beq.n	8003b7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <HAL_RCC_OscConfig+0x248>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe fbee 	bl	80022fc <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fe fbea 	bl	80022fc <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e167      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_OscConfig+0x240>)
 8003b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x200>
 8003b42:	e01b      	b.n	8003b7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_OscConfig+0x248>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fbd7 	bl	80022fc <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b50:	e00e      	b.n	8003b70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b52:	f7fe fbd3 	bl	80022fc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d907      	bls.n	8003b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e150      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
 8003b64:	40023800 	.word	0x40023800
 8003b68:	42470000 	.word	0x42470000
 8003b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ea      	bne.n	8003b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8097 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8e:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	4b7d      	ldr	r3, [pc, #500]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a7c      	ldr	r2, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b7a      	ldr	r3, [pc, #488]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bba:	4b77      	ldr	r3, [pc, #476]	; (8003d98 <HAL_RCC_OscConfig+0x474>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d118      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc6:	4b74      	ldr	r3, [pc, #464]	; (8003d98 <HAL_RCC_OscConfig+0x474>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a73      	ldr	r2, [pc, #460]	; (8003d98 <HAL_RCC_OscConfig+0x474>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd2:	f7fe fb93 	bl	80022fc <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bda:	f7fe fb8f 	bl	80022fc <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e10c      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	4b6a      	ldr	r3, [pc, #424]	; (8003d98 <HAL_RCC_OscConfig+0x474>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x2ea>
 8003c00:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a63      	ldr	r2, [pc, #396]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	e01c      	b.n	8003c48 <HAL_RCC_OscConfig+0x324>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x30c>
 8003c16:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	4a5b      	ldr	r2, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0x324>
 8003c30:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a57      	ldr	r2, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	4b55      	ldr	r3, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a54      	ldr	r2, [pc, #336]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f023 0304 	bic.w	r3, r3, #4
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c50:	f7fe fb54 	bl	80022fc <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fe fb50 	bl	80022fc <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0cb      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0ee      	beq.n	8003c58 <HAL_RCC_OscConfig+0x334>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fb3e 	bl	80022fc <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fe fb3a 	bl	80022fc <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0b5      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ee      	bne.n	8003c84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cac:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a1 	beq.w	8003e04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d05c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d141      	bne.n	8003d5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd6:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCC_OscConfig+0x478>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fb0e 	bl	80022fc <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fe fb0a 	bl	80022fc <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e087      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	491b      	ldr	r1, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x478>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe fae3 	bl	80022fc <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fe fadf 	bl	80022fc <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e05c      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x416>
 8003d58:	e054      	b.n	8003e04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCC_OscConfig+0x478>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe facc 	bl	80022fc <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe fac8 	bl	80022fc <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e045      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x444>
 8003d86:	e03d      	b.n	8003e04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e038      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x4ec>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d028      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d121      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d11a      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d111      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	3b01      	subs	r3, #1
 8003dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0cc      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b68      	ldr	r3, [pc, #416]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d90c      	bls.n	8003e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b65      	ldr	r3, [pc, #404]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3e:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0b8      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e68:	4b59      	ldr	r3, [pc, #356]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e80:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a52      	ldr	r2, [pc, #328]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e8c:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	494d      	ldr	r1, [pc, #308]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d044      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb2:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d119      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e07f      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed2:	4b3f      	ldr	r3, [pc, #252]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e06f      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e067      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef2:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f023 0203 	bic.w	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4934      	ldr	r1, [pc, #208]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f04:	f7fe f9fa 	bl	80022fc <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0c:	f7fe f9f6 	bl	80022fc <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e04f      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 020c 	and.w	r2, r3, #12
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d1eb      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d20c      	bcs.n	8003f5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e032      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4916      	ldr	r1, [pc, #88]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	490e      	ldr	r1, [pc, #56]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f9a:	f000 f821 	bl	8003fe0 <HAL_RCC_GetSysClockFreq>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	091b      	lsrs	r3, r3, #4
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	490a      	ldr	r1, [pc, #40]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	5ccb      	ldrb	r3, [r1, r3]
 8003fae:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fd ffb4 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023c00 	.word	0x40023c00
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	0800c700 	.word	0x0800c700
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	20000014 	.word	0x20000014

08003fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe4:	b094      	sub	sp, #80	; 0x50
 8003fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	647b      	str	r3, [r7, #68]	; 0x44
 8003fec:	2300      	movs	r3, #0
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff8:	4b79      	ldr	r3, [pc, #484]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b08      	cmp	r3, #8
 8004002:	d00d      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x40>
 8004004:	2b08      	cmp	r3, #8
 8004006:	f200 80e1 	bhi.w	80041cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x34>
 800400e:	2b04      	cmp	r3, #4
 8004010:	d003      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x3a>
 8004012:	e0db      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004014:	4b73      	ldr	r3, [pc, #460]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004018:	e0db      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401a:	4b73      	ldr	r3, [pc, #460]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800401c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800401e:	e0d8      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004020:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004028:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800402a:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d063      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	2200      	movs	r2, #0
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004040:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004048:	633b      	str	r3, [r7, #48]	; 0x30
 800404a:	2300      	movs	r3, #0
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
 800404e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	f04f 0000 	mov.w	r0, #0
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	0159      	lsls	r1, r3, #5
 8004060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004064:	0150      	lsls	r0, r2, #5
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4621      	mov	r1, r4
 800406c:	1a51      	subs	r1, r2, r1
 800406e:	6139      	str	r1, [r7, #16]
 8004070:	4629      	mov	r1, r5
 8004072:	eb63 0301 	sbc.w	r3, r3, r1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004084:	4659      	mov	r1, fp
 8004086:	018b      	lsls	r3, r1, #6
 8004088:	4651      	mov	r1, sl
 800408a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800408e:	4651      	mov	r1, sl
 8004090:	018a      	lsls	r2, r1, #6
 8004092:	4651      	mov	r1, sl
 8004094:	ebb2 0801 	subs.w	r8, r2, r1
 8004098:	4659      	mov	r1, fp
 800409a:	eb63 0901 	sbc.w	r9, r3, r1
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b2:	4690      	mov	r8, r2
 80040b4:	4699      	mov	r9, r3
 80040b6:	4623      	mov	r3, r4
 80040b8:	eb18 0303 	adds.w	r3, r8, r3
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	462b      	mov	r3, r5
 80040c0:	eb49 0303 	adc.w	r3, r9, r3
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040d2:	4629      	mov	r1, r5
 80040d4:	024b      	lsls	r3, r1, #9
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040dc:	4621      	mov	r1, r4
 80040de:	024a      	lsls	r2, r1, #9
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e6:	2200      	movs	r2, #0
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f0:	f7fc fdd2 	bl	8000c98 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	e058      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	2200      	movs	r2, #0
 8004106:	4618      	mov	r0, r3
 8004108:	4611      	mov	r1, r2
 800410a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800410e:	623b      	str	r3, [r7, #32]
 8004110:	2300      	movs	r3, #0
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	f04f 0000 	mov.w	r0, #0
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	0159      	lsls	r1, r3, #5
 8004126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412a:	0150      	lsls	r0, r2, #5
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4641      	mov	r1, r8
 8004132:	ebb2 0a01 	subs.w	sl, r2, r1
 8004136:	4649      	mov	r1, r9
 8004138:	eb63 0b01 	sbc.w	fp, r3, r1
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004148:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800414c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004150:	ebb2 040a 	subs.w	r4, r2, sl
 8004154:	eb63 050b 	sbc.w	r5, r3, fp
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	00eb      	lsls	r3, r5, #3
 8004162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004166:	00e2      	lsls	r2, r4, #3
 8004168:	4614      	mov	r4, r2
 800416a:	461d      	mov	r5, r3
 800416c:	4643      	mov	r3, r8
 800416e:	18e3      	adds	r3, r4, r3
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	464b      	mov	r3, r9
 8004174:	eb45 0303 	adc.w	r3, r5, r3
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004186:	4629      	mov	r1, r5
 8004188:	028b      	lsls	r3, r1, #10
 800418a:	4621      	mov	r1, r4
 800418c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004190:	4621      	mov	r1, r4
 8004192:	028a      	lsls	r2, r1, #10
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	2200      	movs	r2, #0
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	61fa      	str	r2, [r7, #28]
 80041a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a4:	f7fc fd78 	bl	8000c98 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	3301      	adds	r3, #1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3750      	adds	r7, #80	; 0x50
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	007a1200 	.word	0x007a1200

080041ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000010 	.word	0x20000010

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004208:	f7ff fff0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0a9b      	lsrs	r3, r3, #10
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800c710 	.word	0x0800c710

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004230:	f7ff ffdc 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0b5b      	lsrs	r3, r3, #13
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800c710 	.word	0x0800c710

08004254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	220f      	movs	r2, #15
 8004262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_RCC_GetClockConfig+0x60>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40023c00 	.word	0x40023c00

080042b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e041      	b.n	800434e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f839 	bl	8004356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 f9b2 	bl	8004660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d001      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e044      	b.n	800440e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1e      	ldr	r2, [pc, #120]	; (800441c <HAL_TIM_Base_Start_IT+0xb0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d013      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_TIM_Base_Start_IT+0xb4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_TIM_Base_Start_IT+0xb8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_TIM_Base_Start_IT+0xbc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x6c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <HAL_TIM_Base_Start_IT+0xc0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d111      	bne.n	80043fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d010      	beq.n	800440c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	e007      	b.n	800440c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40014000 	.word	0x40014000

08004430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d020      	beq.n	8004494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0202 	mvn.w	r2, #2
 8004464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8d2 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8c4 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8d5 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d020      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01b      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0204 	mvn.w	r2, #4
 80044b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8ac 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f89e 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8af 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d020      	beq.n	800452c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0208 	mvn.w	r2, #8
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2204      	movs	r2, #4
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f886 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f878 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f889 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0210 	mvn.w	r2, #16
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2208      	movs	r2, #8
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f860 	bl	8004624 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f852 	bl	8004610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f863 	bl	8004638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0201 	mvn.w	r2, #1
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fb7e 	bl	8001c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8e6 	bl	800478c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f834 	bl	800464c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0220 	mvn.w	r2, #32
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8b8 	bl	8004778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3a      	ldr	r2, [pc, #232]	; (800475c <TIM_Base_SetConfig+0xfc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_Base_SetConfig+0x38>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d00b      	beq.n	8004698 <TIM_Base_SetConfig+0x38>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a37      	ldr	r2, [pc, #220]	; (8004760 <TIM_Base_SetConfig+0x100>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_Base_SetConfig+0x38>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a36      	ldr	r2, [pc, #216]	; (8004764 <TIM_Base_SetConfig+0x104>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0x38>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <TIM_Base_SetConfig+0x108>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d108      	bne.n	80046aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2b      	ldr	r2, [pc, #172]	; (800475c <TIM_Base_SetConfig+0xfc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01b      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d017      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <TIM_Base_SetConfig+0x100>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <TIM_Base_SetConfig+0x104>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00f      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <TIM_Base_SetConfig+0x108>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <TIM_Base_SetConfig+0x10c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a24      	ldr	r2, [pc, #144]	; (8004770 <TIM_Base_SetConfig+0x110>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a23      	ldr	r2, [pc, #140]	; (8004774 <TIM_Base_SetConfig+0x114>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d108      	bne.n	80046fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0e      	ldr	r2, [pc, #56]	; (800475c <TIM_Base_SetConfig+0xfc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d103      	bne.n	8004730 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f023 0201 	bic.w	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	611a      	str	r2, [r3, #16]
  }
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800

08004778 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e042      	b.n	8004838 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd fb32 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2224      	movs	r2, #36	; 0x24
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f82b 	bl	8004840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b0c0      	sub	sp, #256	; 0x100
 8004846:	af00      	add	r7, sp, #0
 8004848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	68d9      	ldr	r1, [r3, #12]
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	ea40 0301 	orr.w	r3, r0, r1
 8004868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	431a      	orrs	r2, r3
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	431a      	orrs	r2, r3
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004898:	f021 010c 	bic.w	r1, r1, #12
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048a6:	430b      	orrs	r3, r1
 80048a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ba:	6999      	ldr	r1, [r3, #24]
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	ea40 0301 	orr.w	r3, r0, r1
 80048c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <UART_SetConfig+0x2cc>)
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d005      	beq.n	80048e0 <UART_SetConfig+0xa0>
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4b8d      	ldr	r3, [pc, #564]	; (8004b10 <UART_SetConfig+0x2d0>)
 80048dc:	429a      	cmp	r2, r3
 80048de:	d104      	bne.n	80048ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e0:	f7ff fca4 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 80048e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048e8:	e003      	b.n	80048f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7ff fc8b 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 80048ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fc:	f040 810c 	bne.w	8004b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004904:	2200      	movs	r2, #0
 8004906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800490a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800490e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004912:	4622      	mov	r2, r4
 8004914:	462b      	mov	r3, r5
 8004916:	1891      	adds	r1, r2, r2
 8004918:	65b9      	str	r1, [r7, #88]	; 0x58
 800491a:	415b      	adcs	r3, r3
 800491c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800491e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004922:	4621      	mov	r1, r4
 8004924:	eb12 0801 	adds.w	r8, r2, r1
 8004928:	4629      	mov	r1, r5
 800492a:	eb43 0901 	adc.w	r9, r3, r1
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800493a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800493e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004942:	4690      	mov	r8, r2
 8004944:	4699      	mov	r9, r3
 8004946:	4623      	mov	r3, r4
 8004948:	eb18 0303 	adds.w	r3, r8, r3
 800494c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004950:	462b      	mov	r3, r5
 8004952:	eb49 0303 	adc.w	r3, r9, r3
 8004956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800496a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800496e:	460b      	mov	r3, r1
 8004970:	18db      	adds	r3, r3, r3
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
 8004974:	4613      	mov	r3, r2
 8004976:	eb42 0303 	adc.w	r3, r2, r3
 800497a:	657b      	str	r3, [r7, #84]	; 0x54
 800497c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004984:	f7fc f988 	bl	8000c98 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <UART_SetConfig+0x2d4>)
 800498e:	fba3 2302 	umull	r2, r3, r3, r2
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	011c      	lsls	r4, r3, #4
 8004996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049a8:	4642      	mov	r2, r8
 80049aa:	464b      	mov	r3, r9
 80049ac:	1891      	adds	r1, r2, r2
 80049ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80049b0:	415b      	adcs	r3, r3
 80049b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b8:	4641      	mov	r1, r8
 80049ba:	eb12 0a01 	adds.w	sl, r2, r1
 80049be:	4649      	mov	r1, r9
 80049c0:	eb43 0b01 	adc.w	fp, r3, r1
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049d8:	4692      	mov	sl, r2
 80049da:	469b      	mov	fp, r3
 80049dc:	4643      	mov	r3, r8
 80049de:	eb1a 0303 	adds.w	r3, sl, r3
 80049e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049e6:	464b      	mov	r3, r9
 80049e8:	eb4b 0303 	adc.w	r3, fp, r3
 80049ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a04:	460b      	mov	r3, r1
 8004a06:	18db      	adds	r3, r3, r3
 8004a08:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	647b      	str	r3, [r7, #68]	; 0x44
 8004a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a1a:	f7fc f93d 	bl	8000c98 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004a26:	fba3 2301 	umull	r2, r3, r3, r1
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	2264      	movs	r2, #100	; 0x64
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	1acb      	subs	r3, r1, r3
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a3a:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a48:	441c      	add	r4, r3
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a64:	415b      	adcs	r3, r3
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a6c:	4641      	mov	r1, r8
 8004a6e:	1851      	adds	r1, r2, r1
 8004a70:	6339      	str	r1, [r7, #48]	; 0x30
 8004a72:	4649      	mov	r1, r9
 8004a74:	414b      	adcs	r3, r1
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a84:	4659      	mov	r1, fp
 8004a86:	00cb      	lsls	r3, r1, #3
 8004a88:	4651      	mov	r1, sl
 8004a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a8e:	4651      	mov	r1, sl
 8004a90:	00ca      	lsls	r2, r1, #3
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	4642      	mov	r2, r8
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	18db      	adds	r3, r3, r3
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ad6:	f7fc f8df 	bl	8000c98 <__aeabi_uldivmod>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	2164      	movs	r1, #100	; 0x64
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	3332      	adds	r3, #50	; 0x32
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f003 0207 	and.w	r2, r3, #7
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4422      	add	r2, r4
 8004b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b08:	e106      	b.n	8004d18 <UART_SetConfig+0x4d8>
 8004b0a:	bf00      	nop
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b2a:	4642      	mov	r2, r8
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	1891      	adds	r1, r2, r2
 8004b30:	6239      	str	r1, [r7, #32]
 8004b32:	415b      	adcs	r3, r3
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	1854      	adds	r4, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb43 0501 	adc.w	r5, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	00eb      	lsls	r3, r5, #3
 8004b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b52:	00e2      	lsls	r2, r4, #3
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	4643      	mov	r3, r8
 8004b5a:	18e3      	adds	r3, r4, r3
 8004b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b60:	464b      	mov	r3, r9
 8004b62:	eb45 0303 	adc.w	r3, r5, r3
 8004b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b86:	4629      	mov	r1, r5
 8004b88:	008b      	lsls	r3, r1, #2
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b90:	4621      	mov	r1, r4
 8004b92:	008a      	lsls	r2, r1, #2
 8004b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b98:	f7fc f87e 	bl	8000c98 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4b60      	ldr	r3, [pc, #384]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	011c      	lsls	r4, r3, #4
 8004baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	1891      	adds	r1, r2, r2
 8004bc2:	61b9      	str	r1, [r7, #24]
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bcc:	4641      	mov	r1, r8
 8004bce:	1851      	adds	r1, r2, r1
 8004bd0:	6139      	str	r1, [r7, #16]
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	414b      	adcs	r3, r1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be4:	4659      	mov	r1, fp
 8004be6:	00cb      	lsls	r3, r1, #3
 8004be8:	4651      	mov	r1, sl
 8004bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bee:	4651      	mov	r1, sl
 8004bf0:	00ca      	lsls	r2, r1, #3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c24:	4649      	mov	r1, r9
 8004c26:	008b      	lsls	r3, r1, #2
 8004c28:	4641      	mov	r1, r8
 8004c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2e:	4641      	mov	r1, r8
 8004c30:	008a      	lsls	r2, r1, #2
 8004c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c36:	f7fc f82f 	bl	8000c98 <__aeabi_uldivmod>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004c42:	fba3 2301 	umull	r2, r3, r3, r1
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	2264      	movs	r2, #100	; 0x64
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	1acb      	subs	r3, r1, r3
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	3332      	adds	r3, #50	; 0x32
 8004c54:	4a33      	ldr	r2, [pc, #204]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c60:	441c      	add	r4, r3
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c66:	2200      	movs	r2, #0
 8004c68:	673b      	str	r3, [r7, #112]	; 0x70
 8004c6a:	677a      	str	r2, [r7, #116]	; 0x74
 8004c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	1891      	adds	r1, r2, r2
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	415b      	adcs	r3, r3
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c80:	4641      	mov	r1, r8
 8004c82:	1851      	adds	r1, r2, r1
 8004c84:	6039      	str	r1, [r7, #0]
 8004c86:	4649      	mov	r1, r9
 8004c88:	414b      	adcs	r3, r1
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c98:	4659      	mov	r1, fp
 8004c9a:	00cb      	lsls	r3, r1, #3
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	00ca      	lsls	r2, r1, #3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	4642      	mov	r2, r8
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	eb42 0303 	adc.w	r3, r2, r3
 8004cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc6:	667a      	str	r2, [r7, #100]	; 0x64
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	008b      	lsls	r3, r1, #2
 8004cd8:	4641      	mov	r1, r8
 8004cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cde:	4641      	mov	r1, r8
 8004ce0:	008a      	lsls	r2, r1, #2
 8004ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ce6:	f7fb ffd7 	bl	8000c98 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a08      	ldr	r2, [pc, #32]	; (8004d24 <UART_SetConfig+0x4e4>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4422      	add	r2, r4
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d24:	51eb851f 	.word	0x51eb851f

08004d28 <__NVIC_SetPriority>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db0a      	blt.n	8004d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	490c      	ldr	r1, [pc, #48]	; (8004d74 <__NVIC_SetPriority+0x4c>)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	0112      	lsls	r2, r2, #4
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d50:	e00a      	b.n	8004d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	4908      	ldr	r1, [pc, #32]	; (8004d78 <__NVIC_SetPriority+0x50>)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	3b04      	subs	r3, #4
 8004d60:	0112      	lsls	r2, r2, #4
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	761a      	strb	r2, [r3, #24]
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000e100 	.word	0xe000e100
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <SysTick_Handler+0x1c>)
 8004d82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d84:	f001 ff52 	bl	8006c2c <xTaskGetSchedulerState>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d001      	beq.n	8004d92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d8e:	f002 fd3b 	bl	8007808 <xPortSysTickHandler>
  }
}
 8004d92:	bf00      	nop
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000e010 	.word	0xe000e010

08004d9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004da0:	2100      	movs	r1, #0
 8004da2:	f06f 0004 	mvn.w	r0, #4
 8004da6:	f7ff ffbf 	bl	8004d28 <__NVIC_SetPriority>
#endif
}
 8004daa:	bf00      	nop
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db6:	f3ef 8305 	mrs	r3, IPSR
 8004dba:	603b      	str	r3, [r7, #0]
  return(result);
 8004dbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004dc2:	f06f 0305 	mvn.w	r3, #5
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	e00c      	b.n	8004de4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <osKernelInitialize+0x44>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <osKernelInitialize+0x44>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	e002      	b.n	8004de4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004dde:	f04f 33ff 	mov.w	r3, #4294967295
 8004de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004de4:	687b      	ldr	r3, [r7, #4]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	200003d4 	.word	0x200003d4

08004df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dfe:	f3ef 8305 	mrs	r3, IPSR
 8004e02:	603b      	str	r3, [r7, #0]
  return(result);
 8004e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e0a:	f06f 0305 	mvn.w	r3, #5
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	e010      	b.n	8004e34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <osKernelStart+0x48>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d109      	bne.n	8004e2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e1a:	f7ff ffbf 	bl	8004d9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <osKernelStart+0x48>)
 8004e20:	2202      	movs	r2, #2
 8004e22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e24:	f001 faba 	bl	800639c <vTaskStartScheduler>
      stat = osOK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	e002      	b.n	8004e34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e34:	687b      	ldr	r3, [r7, #4]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200003d4 	.word	0x200003d4

08004e44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08e      	sub	sp, #56	; 0x38
 8004e48:	af04      	add	r7, sp, #16
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e54:	f3ef 8305 	mrs	r3, IPSR
 8004e58:	617b      	str	r3, [r7, #20]
  return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d17e      	bne.n	8004f5e <osThreadNew+0x11a>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d07b      	beq.n	8004f5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e66:	2380      	movs	r3, #128	; 0x80
 8004e68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e6a:	2318      	movs	r3, #24
 8004e6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
 8004e76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d045      	beq.n	8004f0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <osThreadNew+0x48>
        name = attr->name;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <osThreadNew+0x6e>
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b38      	cmp	r3, #56	; 0x38
 8004ea4:	d805      	bhi.n	8004eb2 <osThreadNew+0x6e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <osThreadNew+0x72>
        return (NULL);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e054      	b.n	8004f60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <osThreadNew+0xa8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8004ed4:	d90a      	bls.n	8004eec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <osThreadNew+0xa8>
        mem = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e010      	b.n	8004f0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10c      	bne.n	8004f0e <osThreadNew+0xca>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d108      	bne.n	8004f0e <osThreadNew+0xca>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <osThreadNew+0xca>
          mem = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e001      	b.n	8004f0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d110      	bne.n	8004f36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6a3a      	ldr	r2, [r7, #32]
 8004f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 ff5a 	bl	8005de4 <xTaskCreateStatic>
 8004f30:	4603      	mov	r3, r0
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e013      	b.n	8004f5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 ffa5 	bl	8005e9e <xTaskCreate>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <osThreadNew+0x11a>
            hTask = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f5e:	693b      	ldr	r3, [r7, #16]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3728      	adds	r7, #40	; 0x28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f74:	f3ef 8305 	mrs	r3, IPSR
 8004f78:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004f80:	f06f 0305 	mvn.w	r3, #5
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e00b      	b.n	8004fa0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004f8e:	f06f 0303 	mvn.w	r3, #3
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e004      	b.n	8004fa0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004f9a:	6938      	ldr	r0, [r7, #16]
 8004f9c:	f001 f8f8 	bl	8006190 <vTaskSuspend>
  }

  return (stat);
 8004fa0:	697b      	ldr	r3, [r7, #20]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb6:	f3ef 8305 	mrs	r3, IPSR
 8004fba:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <osThreadResume+0x20>
    stat = osErrorISR;
 8004fc2:	f06f 0305 	mvn.w	r3, #5
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e00b      	b.n	8004fe2 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004fd0:	f06f 0303 	mvn.w	r3, #3
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e004      	b.n	8004fe2 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8004fdc:	6938      	ldr	r0, [r7, #16]
 8004fde:	f001 f97f 	bl	80062e0 <vTaskResume>
  }

  return (stat);
 8004fe2:	697b      	ldr	r3, [r7, #20]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff4:	f3ef 8305 	mrs	r3, IPSR
 8004ff8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <osDelay+0x1c>
    stat = osErrorISR;
 8005000:	f06f 0305 	mvn.w	r3, #5
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e007      	b.n	8005018 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f001 f888 	bl	8006128 <vTaskDelay>
    }
  }

  return (stat);
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005022:	b580      	push	{r7, lr}
 8005024:	b08a      	sub	sp, #40	; 0x28
 8005026:	af02      	add	r7, sp, #8
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005032:	f3ef 8305 	mrs	r3, IPSR
 8005036:	613b      	str	r3, [r7, #16]
  return(result);
 8005038:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800503a:	2b00      	cmp	r3, #0
 800503c:	d15f      	bne.n	80050fe <osMessageQueueNew+0xdc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05c      	beq.n	80050fe <osMessageQueueNew+0xdc>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d059      	beq.n	80050fe <osMessageQueueNew+0xdc>
    mem = -1;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d029      	beq.n	80050aa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d012      	beq.n	8005084 <osMessageQueueNew+0x62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b4f      	cmp	r3, #79	; 0x4f
 8005064:	d90e      	bls.n	8005084 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <osMessageQueueNew+0x62>
        mem = 1;
 800507e:	2301      	movs	r3, #1
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e014      	b.n	80050ae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <osMessageQueueNew+0x8c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10c      	bne.n	80050ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005098:	2b00      	cmp	r3, #0
 800509a:	d108      	bne.n	80050ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <osMessageQueueNew+0x8c>
          mem = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	e001      	b.n	80050ae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d10b      	bne.n	80050cc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2100      	movs	r1, #0
 80050be:	9100      	str	r1, [sp, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f9d0 	bl	8005468 <xQueueGenericCreateStatic>
 80050c8:	61f8      	str	r0, [r7, #28]
 80050ca:	e008      	b.n	80050de <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d105      	bne.n	80050de <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80050d2:	2200      	movs	r2, #0
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fa3e 	bl	8005558 <xQueueGenericCreate>
 80050dc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00c      	beq.n	80050fe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e001      	b.n	80050f6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	69f8      	ldr	r0, [r7, #28]
 80050fa:	f000 fe15 	bl	8005d28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80050fe:	69fb      	ldr	r3, [r7, #28]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800511c:	2300      	movs	r3, #0
 800511e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005120:	f3ef 8305 	mrs	r3, IPSR
 8005124:	617b      	str	r3, [r7, #20]
  return(result);
 8005126:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005128:	2b00      	cmp	r3, #0
 800512a:	d028      	beq.n	800517e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <osMessageQueuePut+0x36>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <osMessageQueuePut+0x36>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800513e:	f06f 0303 	mvn.w	r3, #3
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e038      	b.n	80051b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800514a:	f107 0210 	add.w	r2, r7, #16
 800514e:	2300      	movs	r3, #0
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	69b8      	ldr	r0, [r7, #24]
 8005154:	f000 fb5c 	bl	8005810 <xQueueGenericSendFromISR>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	d003      	beq.n	8005166 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800515e:	f06f 0302 	mvn.w	r3, #2
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e028      	b.n	80051b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d025      	beq.n	80051b8 <osMessageQueuePut+0xb0>
 800516c:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <osMessageQueuePut+0xbc>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	e01c      	b.n	80051b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <osMessageQueuePut+0x82>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800518a:	f06f 0303 	mvn.w	r3, #3
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e012      	b.n	80051b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005192:	2300      	movs	r3, #0
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	69b8      	ldr	r0, [r7, #24]
 800519a:	f000 fa3b 	bl	8005614 <xQueueGenericSend>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d009      	beq.n	80051b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80051aa:	f06f 0301 	mvn.w	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e002      	b.n	80051b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80051b2:	f06f 0302 	mvn.w	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80051b8:	69fb      	ldr	r3, [r7, #28]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80051d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a06      	ldr	r2, [pc, #24]	; (80051f8 <vApplicationGetIdleTaskMemory+0x30>)
 80051de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	200003d8 	.word	0x200003d8
 80051f8:	20000434 	.word	0x20000434

080051fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <vApplicationGetTimerTaskMemory+0x2c>)
 800520c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a06      	ldr	r2, [pc, #24]	; (800522c <vApplicationGetTimerTaskMemory+0x30>)
 8005212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000634 	.word	0x20000634
 800522c:	20000690 	.word	0x20000690

08005230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f103 0208 	add.w	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f103 0208 	add.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d103      	bne.n	80052f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e00c      	b.n	800530c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3308      	adds	r3, #8
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e002      	b.n	8005300 <vListInsert+0x2e>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	d2f6      	bcs.n	80052fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6892      	ldr	r2, [r2, #8]
 800535a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6852      	ldr	r2, [r2, #4]
 8005364:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d103      	bne.n	8005378 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053c2:	f002 f98f 	bl	80076e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053d2:	fb01 f303 	mul.w	r3, r1, r3
 80053d6:	441a      	add	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	3b01      	subs	r3, #1
 80053f4:	68f9      	ldr	r1, [r7, #12]
 80053f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	441a      	add	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d114      	bne.n	8005442 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3310      	adds	r3, #16
 8005424:	4618      	mov	r0, r3
 8005426:	f001 fa43 	bl	80068b0 <xTaskRemoveFromEventList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d012      	beq.n	8005456 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <xQueueGenericReset+0xcc>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	e009      	b.n	8005456 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3310      	adds	r3, #16
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fef2 	bl	8005230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff feed 	bl	8005230 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005456:	f002 f975 	bl	8007744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800545a:	2301      	movs	r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <xQueueGenericCreateStatic+0x52>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <xQueueGenericCreateStatic+0x56>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <xQueueGenericCreateStatic+0x58>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	623b      	str	r3, [r7, #32]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <xQueueGenericCreateStatic+0x7e>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericCreateStatic+0x82>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericCreateStatic+0x84>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61fb      	str	r3, [r7, #28]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005506:	2350      	movs	r3, #80	; 0x50
 8005508:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b50      	cmp	r3, #80	; 0x50
 800550e:	d00a      	beq.n	8005526 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61bb      	str	r3, [r7, #24]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005526:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800553a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4613      	mov	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f83f 	bl	80055cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005550:	4618      	mov	r0, r3
 8005552:	3730      	adds	r7, #48	; 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xQueueGenericCreate+0x2a>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	613b      	str	r3, [r7, #16]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3350      	adds	r3, #80	; 0x50
 8005590:	4618      	mov	r0, r3
 8005592:	f002 f9c9 	bl	8007928 <pvPortMalloc>
 8005596:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3350      	adds	r3, #80	; 0x50
 80055a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b0:	79fa      	ldrb	r2, [r7, #7]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	4613      	mov	r3, r2
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f805 	bl	80055cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055c2:	69bb      	ldr	r3, [r7, #24]
	}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e002      	b.n	80055ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055fa:	2101      	movs	r1, #1
 80055fc:	69b8      	ldr	r0, [r7, #24]
 80055fe:	f7ff fecb 	bl	8005398 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b08e      	sub	sp, #56	; 0x38
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <xQueueGenericSend+0x32>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <xQueueGenericSend+0x40>
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <xQueueGenericSend+0x44>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <xQueueGenericSend+0x46>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <xQueueGenericSend+0x60>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d103      	bne.n	8005682 <xQueueGenericSend+0x6e>
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <xQueueGenericSend+0x72>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <xQueueGenericSend+0x74>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a2:	f001 fac3 	bl	8006c2c <xTaskGetSchedulerState>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueGenericSend+0x9e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericSend+0xa2>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericSend+0xa4>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61fb      	str	r3, [r7, #28]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056d2:	f002 f807 	bl	80076e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <xQueueGenericSend+0xd4>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d129      	bne.n	800573c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ee:	f000 fa0b 	bl	8005b08 <prvCopyDataToQueue>
 80056f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d010      	beq.n	800571e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	4618      	mov	r0, r3
 8005702:	f001 f8d5 	bl	80068b0 <xTaskRemoveFromEventList>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d013      	beq.n	8005734 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b3f      	ldr	r3, [pc, #252]	; (800580c <xQueueGenericSend+0x1f8>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	e00a      	b.n	8005734 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <xQueueGenericSend+0x1f8>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005734:	f002 f806 	bl	8007744 <vPortExitCritical>
				return pdPASS;
 8005738:	2301      	movs	r3, #1
 800573a:	e063      	b.n	8005804 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005742:	f001 ffff 	bl	8007744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005746:	2300      	movs	r3, #0
 8005748:	e05c      	b.n	8005804 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4618      	mov	r0, r3
 8005756:	f001 f90f 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800575e:	f001 fff1 	bl	8007744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005762:	f000 fe81 	bl	8006468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005766:	f001 ffbd 	bl	80076e4 <vPortEnterCritical>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005770:	b25b      	sxtb	r3, r3
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d103      	bne.n	8005780 <xQueueGenericSend+0x16c>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005786:	b25b      	sxtb	r3, r3
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d103      	bne.n	8005796 <xQueueGenericSend+0x182>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005796:	f001 ffd5 	bl	8007744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800579a:	1d3a      	adds	r2, r7, #4
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 f8fe 	bl	80069a4 <xTaskCheckForTimeOut>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d124      	bne.n	80057f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b0:	f000 faa2 	bl	8005cf8 <prvIsQueueFull>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	3310      	adds	r3, #16
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 f824 	bl	8006810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ca:	f000 fa2d 	bl	8005c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057ce:	f000 fe59 	bl	8006484 <xTaskResumeAll>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f af7c 	bne.w	80056d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <xQueueGenericSend+0x1f8>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	e772      	b.n	80056d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ee:	f000 fa1b 	bl	8005c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f2:	f000 fe47 	bl	8006484 <xTaskResumeAll>
 80057f6:	e76c      	b.n	80056d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fa:	f000 fa15 	bl	8005c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fe:	f000 fe41 	bl	8006484 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005802:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005804:	4618      	mov	r0, r3
 8005806:	3738      	adds	r7, #56	; 0x38
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b090      	sub	sp, #64	; 0x40
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <xQueueGenericSendFromISR+0x3c>
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <xQueueGenericSendFromISR+0x40>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <xQueueGenericSendFromISR+0x42>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d103      	bne.n	800587a <xQueueGenericSendFromISR+0x6a>
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <xQueueGenericSendFromISR+0x6e>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericSendFromISR+0x70>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	623b      	str	r3, [r7, #32]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800589a:	f002 f805 	bl	80078a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800589e:	f3ef 8211 	mrs	r2, BASEPRI
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	61fa      	str	r2, [r7, #28]
 80058b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <xQueueGenericSendFromISR+0xbc>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d12f      	bne.n	800592c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058e2:	f000 f911 	bl	8005b08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d112      	bne.n	8005916 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d016      	beq.n	8005926 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	3324      	adds	r3, #36	; 0x24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 ffd7 	bl	80068b0 <xTaskRemoveFromEventList>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e007      	b.n	8005926 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800591a:	3301      	adds	r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	b25a      	sxtb	r2, r3
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005926:	2301      	movs	r3, #1
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800592a:	e001      	b.n	8005930 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800592c:	2300      	movs	r3, #0
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800593a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800593e:	4618      	mov	r0, r3
 8005940:	3740      	adds	r7, #64	; 0x40
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08c      	sub	sp, #48	; 0x30
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <xQueueReceive+0x30>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	623b      	str	r3, [r7, #32]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <xQueueReceive+0x3e>
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <xQueueReceive+0x42>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueReceive+0x44>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueReceive+0x5e>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61fb      	str	r3, [r7, #28]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059a6:	f001 f941 	bl	8006c2c <xTaskGetSchedulerState>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <xQueueReceive+0x6e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <xQueueReceive+0x72>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <xQueueReceive+0x74>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10a      	bne.n	80059d6 <xQueueReceive+0x8e>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	61bb      	str	r3, [r7, #24]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d6:	f001 fe85 	bl	80076e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01f      	beq.n	8005a26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ea:	f000 f8f7 	bl	8005bdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00f      	beq.n	8005a1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	3310      	adds	r3, #16
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 ff54 	bl	80068b0 <xTaskRemoveFromEventList>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a0e:	4b3d      	ldr	r3, [pc, #244]	; (8005b04 <xQueueReceive+0x1bc>)
 8005a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a1e:	f001 fe91 	bl	8007744 <vPortExitCritical>
				return pdPASS;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e069      	b.n	8005afa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a2c:	f001 fe8a 	bl	8007744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e062      	b.n	8005afa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a3a:	f107 0310 	add.w	r3, r7, #16
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 ff9a 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a48:	f001 fe7c 	bl	8007744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a4c:	f000 fd0c 	bl	8006468 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a50:	f001 fe48 	bl	80076e4 <vPortEnterCritical>
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d103      	bne.n	8005a6a <xQueueReceive+0x122>
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <xQueueReceive+0x138>
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a80:	f001 fe60 	bl	8007744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a84:	1d3a      	adds	r2, r7, #4
 8005a86:	f107 0310 	add.w	r3, r7, #16
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 ff89 	bl	80069a4 <xTaskCheckForTimeOut>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d123      	bne.n	8005ae0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9a:	f000 f917 	bl	8005ccc <prvIsQueueEmpty>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	3324      	adds	r3, #36	; 0x24
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 feaf 	bl	8006810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab4:	f000 f8b8 	bl	8005c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ab8:	f000 fce4 	bl	8006484 <xTaskResumeAll>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d189      	bne.n	80059d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <xQueueReceive+0x1bc>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	e780      	b.n	80059d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ad6:	f000 f8a7 	bl	8005c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ada:	f000 fcd3 	bl	8006484 <xTaskResumeAll>
 8005ade:	e77a      	b.n	80059d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae2:	f000 f8a1 	bl	8005c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ae6:	f000 fccd 	bl	8006484 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aec:	f000 f8ee 	bl	8005ccc <prvIsQueueEmpty>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f43f af6f 	beq.w	80059d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3730      	adds	r7, #48	; 0x30
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10d      	bne.n	8005b42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d14d      	bne.n	8005bca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f001 f898 	bl	8006c68 <xTaskPriorityDisinherit>
 8005b38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	609a      	str	r2, [r3, #8]
 8005b40:	e043      	b.n	8005bca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d119      	bne.n	8005b7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6858      	ldr	r0, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	461a      	mov	r2, r3
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	f003 f921 	bl	8008d9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	441a      	add	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d32b      	bcc.n	8005bca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	e026      	b.n	8005bca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68d8      	ldr	r0, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b84:	461a      	mov	r2, r3
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	f003 f907 	bl	8008d9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	425b      	negs	r3, r3
 8005b96:	441a      	add	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d207      	bcs.n	8005bb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	441a      	add	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d105      	bne.n	8005bca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bd2:	697b      	ldr	r3, [r7, #20]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	441a      	add	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d303      	bcc.n	8005c10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68d9      	ldr	r1, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6838      	ldr	r0, [r7, #0]
 8005c1c:	f003 f8bd 	bl	8008d9a <memcpy>
	}
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c30:	f001 fd58 	bl	80076e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c3c:	e011      	b.n	8005c62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d012      	beq.n	8005c6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3324      	adds	r3, #36	; 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fe30 	bl	80068b0 <xTaskRemoveFromEventList>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c56:	f000 ff07 	bl	8006a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dce9      	bgt.n	8005c3e <prvUnlockQueue+0x16>
 8005c6a:	e000      	b.n	8005c6e <prvUnlockQueue+0x46>
					break;
 8005c6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c76:	f001 fd65 	bl	8007744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c7a:	f001 fd33 	bl	80076e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c86:	e011      	b.n	8005cac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3310      	adds	r3, #16
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fe0b 	bl	80068b0 <xTaskRemoveFromEventList>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ca0:	f000 fee2 	bl	8006a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dce9      	bgt.n	8005c88 <prvUnlockQueue+0x60>
 8005cb4:	e000      	b.n	8005cb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	22ff      	movs	r2, #255	; 0xff
 8005cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cc0:	f001 fd40 	bl	8007744 <vPortExitCritical>
}
 8005cc4:	bf00      	nop
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cd4:	f001 fd06 	bl	80076e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e001      	b.n	8005cea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cea:	f001 fd2b 	bl	8007744 <vPortExitCritical>

	return xReturn;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d00:	f001 fcf0 	bl	80076e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d102      	bne.n	8005d16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e001      	b.n	8005d1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f001 fd13 	bl	8007744 <vPortExitCritical>

	return xReturn;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	e014      	b.n	8005d62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d38:	4a0f      	ldr	r2, [pc, #60]	; (8005d78 <vQueueAddToRegistry+0x50>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d44:	490c      	ldr	r1, [pc, #48]	; (8005d78 <vQueueAddToRegistry+0x50>)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <vQueueAddToRegistry+0x50>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d5a:	e006      	b.n	8005d6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b07      	cmp	r3, #7
 8005d66:	d9e7      	bls.n	8005d38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000a90 	.word	0x20000a90

08005d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d8c:	f001 fcaa 	bl	80076e4 <vPortEnterCritical>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d96:	b25b      	sxtb	r3, r3
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d103      	bne.n	8005da6 <vQueueWaitForMessageRestricted+0x2a>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d103      	bne.n	8005dbc <vQueueWaitForMessageRestricted+0x40>
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dbc:	f001 fcc2 	bl	8007744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	3324      	adds	r3, #36	; 0x24
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fd41 	bl	8006858 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dd6:	6978      	ldr	r0, [r7, #20]
 8005dd8:	f7ff ff26 	bl	8005c28 <prvUnlockQueue>
	}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	; 0x38
 8005de8:	af04      	add	r7, sp, #16
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	623b      	str	r3, [r7, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xTaskCreateStatic+0x46>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	61fb      	str	r3, [r7, #28]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e2a:	235c      	movs	r3, #92	; 0x5c
 8005e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b5c      	cmp	r3, #92	; 0x5c
 8005e32:	d00a      	beq.n	8005e4a <xTaskCreateStatic+0x66>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	61bb      	str	r3, [r7, #24]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01e      	beq.n	8005e90 <xTaskCreateStatic+0xac>
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01b      	beq.n	8005e90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	9302      	str	r3, [sp, #8]
 8005e72:	f107 0314 	add.w	r3, r7, #20
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f850 	bl	8005f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e8a:	f000 f8dd 	bl	8006048 <prvAddNewTaskToReadyList>
 8005e8e:	e001      	b.n	8005e94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e94:	697b      	ldr	r3, [r7, #20]
	}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3728      	adds	r7, #40	; 0x28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b08c      	sub	sp, #48	; 0x30
 8005ea2:	af04      	add	r7, sp, #16
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fd38 	bl	8007928 <pvPortMalloc>
 8005eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ec0:	205c      	movs	r0, #92	; 0x5c
 8005ec2:	f001 fd31 	bl	8007928 <pvPortMalloc>
 8005ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed4:	e005      	b.n	8005ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	f001 fdf2 	bl	8007ac0 <vPortFree>
 8005edc:	e001      	b.n	8005ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d017      	beq.n	8005f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9303      	str	r3, [sp, #12]
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	9302      	str	r3, [sp, #8]
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f80e 	bl	8005f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f0c:	69f8      	ldr	r0, [r7, #28]
 8005f0e:	f000 f89b 	bl	8006048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f12:	2301      	movs	r3, #1
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	e002      	b.n	8005f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	461a      	mov	r2, r3
 8005f40:	21a5      	movs	r1, #165	; 0xa5
 8005f42:	f002 feaa 	bl	8008c9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f50:	3b01      	subs	r3, #1
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	617b      	str	r3, [r7, #20]
}
 8005f7c:	bf00      	nop
 8005f7e:	e7fe      	b.n	8005f7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01f      	beq.n	8005fc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e012      	b.n	8005fb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	7819      	ldrb	r1, [r3, #0]
 8005f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	3334      	adds	r3, #52	; 0x34
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d006      	beq.n	8005fba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b0f      	cmp	r3, #15
 8005fb6:	d9e9      	bls.n	8005f8c <prvInitialiseNewTask+0x64>
 8005fb8:	e000      	b.n	8005fbc <prvInitialiseNewTask+0x94>
			{
				break;
 8005fba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc4:	e003      	b.n	8005fce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	2b37      	cmp	r3, #55	; 0x37
 8005fd2:	d901      	bls.n	8005fd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005fd4:	2337      	movs	r3, #55	; 0x37
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff f93e 	bl	8005270 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	3318      	adds	r3, #24
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff f939 	bl	8005270 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	69b8      	ldr	r0, [r7, #24]
 8006028:	f001 fa2e 	bl	8007488 <pxPortInitialiseStack>
 800602c:	4602      	mov	r2, r0
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800603e:	bf00      	nop
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006050:	f001 fb48 	bl	80076e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006054:	4b2d      	ldr	r3, [pc, #180]	; (800610c <prvAddNewTaskToReadyList+0xc4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	4a2c      	ldr	r2, [pc, #176]	; (800610c <prvAddNewTaskToReadyList+0xc4>)
 800605c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800605e:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d109      	bne.n	800607a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006066:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800606c:	4b27      	ldr	r3, [pc, #156]	; (800610c <prvAddNewTaskToReadyList+0xc4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d110      	bne.n	8006096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006074:	f000 fd1c 	bl	8006ab0 <prvInitialiseTaskLists>
 8006078:	e00d      	b.n	8006096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800607a:	4b26      	ldr	r3, [pc, #152]	; (8006114 <prvAddNewTaskToReadyList+0xcc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006082:	4b23      	ldr	r3, [pc, #140]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	429a      	cmp	r2, r3
 800608e:	d802      	bhi.n	8006096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006096:	4b20      	ldr	r3, [pc, #128]	; (8006118 <prvAddNewTaskToReadyList+0xd0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <prvAddNewTaskToReadyList+0xd0>)
 800609e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <prvAddNewTaskToReadyList+0xd0>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <prvAddNewTaskToReadyList+0xd4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d903      	bls.n	80060bc <prvAddNewTaskToReadyList+0x74>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <prvAddNewTaskToReadyList+0xd4>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a15      	ldr	r2, [pc, #84]	; (8006120 <prvAddNewTaskToReadyList+0xd8>)
 80060ca:	441a      	add	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7ff f8d9 	bl	800528a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060d8:	f001 fb34 	bl	8007744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060dc:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <prvAddNewTaskToReadyList+0xcc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <prvAddNewTaskToReadyList+0xc8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d207      	bcs.n	8006102 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f2:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <prvAddNewTaskToReadyList+0xdc>)
 80060f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000fa4 	.word	0x20000fa4
 8006110:	20000ad0 	.word	0x20000ad0
 8006114:	20000fb0 	.word	0x20000fb0
 8006118:	20000fc0 	.word	0x20000fc0
 800611c:	20000fac 	.word	0x20000fac
 8006120:	20000ad4 	.word	0x20000ad4
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d017      	beq.n	800616a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800613a:	4b13      	ldr	r3, [pc, #76]	; (8006188 <vTaskDelay+0x60>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <vTaskDelay+0x30>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60bb      	str	r3, [r7, #8]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006158:	f000 f986 	bl	8006468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800615c:	2100      	movs	r1, #0
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fdf0 	bl	8006d44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006164:	f000 f98e 	bl	8006484 <xTaskResumeAll>
 8006168:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d107      	bne.n	8006180 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <vTaskDelay+0x64>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000fcc 	.word	0x20000fcc
 800618c:	e000ed04 	.word	0xe000ed04

08006190 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006198:	f001 faa4 	bl	80076e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <vTaskSuspend+0x18>
 80061a2:	4b30      	ldr	r3, [pc, #192]	; (8006264 <vTaskSuspend+0xd4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	e000      	b.n	80061aa <vTaskSuspend+0x1a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff f8c7 	bl	8005344 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3318      	adds	r3, #24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff f8be 	bl	8005344 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4826      	ldr	r0, [pc, #152]	; (8006268 <vTaskSuspend+0xd8>)
 80061d0:	f7ff f85b 	bl	800528a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d103      	bne.n	80061e8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80061e8:	f001 faac 	bl	8007744 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80061ec:	4b1f      	ldr	r3, [pc, #124]	; (800626c <vTaskSuspend+0xdc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80061f4:	f001 fa76 	bl	80076e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80061f8:	f000 fcf8 	bl	8006bec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80061fc:	f001 faa2 	bl	8007744 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006200:	4b18      	ldr	r3, [pc, #96]	; (8006264 <vTaskSuspend+0xd4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	429a      	cmp	r2, r3
 8006208:	d127      	bne.n	800625a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800620a:	4b18      	ldr	r3, [pc, #96]	; (800626c <vTaskSuspend+0xdc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d017      	beq.n	8006242 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <vTaskSuspend+0xe0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <vTaskSuspend+0xa0>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	60bb      	str	r3, [r7, #8]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <vTaskSuspend+0xe4>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006240:	e00b      	b.n	800625a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <vTaskSuspend+0xd8>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <vTaskSuspend+0xe8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d103      	bne.n	8006256 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <vTaskSuspend+0xd4>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
	}
 8006254:	e001      	b.n	800625a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8006256:	f000 fa7d 	bl	8006754 <vTaskSwitchContext>
	}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000ad0 	.word	0x20000ad0
 8006268:	20000f90 	.word	0x20000f90
 800626c:	20000fb0 	.word	0x20000fb0
 8006270:	20000fcc 	.word	0x20000fcc
 8006274:	e000ed04 	.word	0xe000ed04
 8006278:	20000fa4 	.word	0x20000fa4

0800627c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <prvTaskIsTaskSuspended+0x5c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10a      	bne.n	80062c8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <prvTaskIsTaskSuspended+0x60>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d005      	beq.n	80062c8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062c8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000f90 	.word	0x20000f90
 80062dc:	20000f64 	.word	0x20000f64

080062e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <vTaskResume+0x28>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006308:	4b20      	ldr	r3, [pc, #128]	; (800638c <vTaskResume+0xac>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	429a      	cmp	r2, r3
 8006310:	d038      	beq.n	8006384 <vTaskResume+0xa4>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d035      	beq.n	8006384 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006318:	f001 f9e4 	bl	80076e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff ffad 	bl	800627c <prvTaskIsTaskSuspended>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02b      	beq.n	8006380 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f809 	bl	8005344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <vTaskResume+0xb0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d903      	bls.n	8006346 <vTaskResume+0x66>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <vTaskResume+0xb0>)
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4a10      	ldr	r2, [pc, #64]	; (8006394 <vTaskResume+0xb4>)
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f7fe ff94 	bl	800528a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <vTaskResume+0xac>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	429a      	cmp	r2, r3
 800636e:	d307      	bcc.n	8006380 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006370:	4b09      	ldr	r3, [pc, #36]	; (8006398 <vTaskResume+0xb8>)
 8006372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006380:	f001 f9e0 	bl	8007744 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000ad0 	.word	0x20000ad0
 8006390:	20000fac 	.word	0x20000fac
 8006394:	20000ad4 	.word	0x20000ad4
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063aa:	463a      	mov	r2, r7
 80063ac:	1d39      	adds	r1, r7, #4
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe ff08 	bl	80051c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	9202      	str	r2, [sp, #8]
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	2300      	movs	r3, #0
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	460a      	mov	r2, r1
 80063ca:	4921      	ldr	r1, [pc, #132]	; (8006450 <vTaskStartScheduler+0xb4>)
 80063cc:	4821      	ldr	r0, [pc, #132]	; (8006454 <vTaskStartScheduler+0xb8>)
 80063ce:	f7ff fd09 	bl	8005de4 <xTaskCreateStatic>
 80063d2:	4603      	mov	r3, r0
 80063d4:	4a20      	ldr	r2, [pc, #128]	; (8006458 <vTaskStartScheduler+0xbc>)
 80063d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063d8:	4b1f      	ldr	r3, [pc, #124]	; (8006458 <vTaskStartScheduler+0xbc>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e001      	b.n	80063ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d102      	bne.n	80063f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063f0:	f000 fcfc 	bl	8006dec <xTimerCreateTimerTask>
 80063f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d116      	bne.n	800642a <vTaskStartScheduler+0x8e>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	613b      	str	r3, [r7, #16]
}
 800640e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <vTaskStartScheduler+0xc0>)
 8006412:	f04f 32ff 	mov.w	r2, #4294967295
 8006416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <vTaskStartScheduler+0xc4>)
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <vTaskStartScheduler+0xc8>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006424:	f001 f8bc 	bl	80075a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006428:	e00e      	b.n	8006448 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d10a      	bne.n	8006448 <vTaskStartScheduler+0xac>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60fb      	str	r3, [r7, #12]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <vTaskStartScheduler+0xaa>
}
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	0800c5ec 	.word	0x0800c5ec
 8006454:	08006a81 	.word	0x08006a81
 8006458:	20000fc8 	.word	0x20000fc8
 800645c:	20000fc4 	.word	0x20000fc4
 8006460:	20000fb0 	.word	0x20000fb0
 8006464:	20000fa8 	.word	0x20000fa8

08006468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800646c:	4b04      	ldr	r3, [pc, #16]	; (8006480 <vTaskSuspendAll+0x18>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3301      	adds	r3, #1
 8006472:	4a03      	ldr	r2, [pc, #12]	; (8006480 <vTaskSuspendAll+0x18>)
 8006474:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006476:	bf00      	nop
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000fcc 	.word	0x20000fcc

08006484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006492:	4b42      	ldr	r3, [pc, #264]	; (800659c <xTaskResumeAll+0x118>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	603b      	str	r3, [r7, #0]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064b0:	f001 f918 	bl	80076e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064b4:	4b39      	ldr	r3, [pc, #228]	; (800659c <xTaskResumeAll+0x118>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	4a38      	ldr	r2, [pc, #224]	; (800659c <xTaskResumeAll+0x118>)
 80064bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <xTaskResumeAll+0x118>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d162      	bne.n	800658c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064c6:	4b36      	ldr	r3, [pc, #216]	; (80065a0 <xTaskResumeAll+0x11c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d05e      	beq.n	800658c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ce:	e02f      	b.n	8006530 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d0:	4b34      	ldr	r3, [pc, #208]	; (80065a4 <xTaskResumeAll+0x120>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3318      	adds	r3, #24
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fe ff31 	bl	8005344 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe ff2c 	bl	8005344 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <xTaskResumeAll+0x124>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d903      	bls.n	8006500 <xTaskResumeAll+0x7c>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <xTaskResumeAll+0x124>)
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a27      	ldr	r2, [pc, #156]	; (80065ac <xTaskResumeAll+0x128>)
 800650e:	441a      	add	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f7fe feb7 	bl	800528a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <xTaskResumeAll+0x12c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800652a:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <xTaskResumeAll+0x130>)
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xTaskResumeAll+0x120>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1cb      	bne.n	80064d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800653e:	f000 fb55 	bl	8006bec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <xTaskResumeAll+0x134>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d010      	beq.n	8006570 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800654e:	f000 f847 	bl	80065e0 <xTaskIncrementTick>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006558:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <xTaskResumeAll+0x130>)
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f1      	bne.n	800654e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800656a:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <xTaskResumeAll+0x134>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <xTaskResumeAll+0x130>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d009      	beq.n	800658c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <xTaskResumeAll+0x138>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800658c:	f001 f8da 	bl	8007744 <vPortExitCritical>

	return xAlreadyYielded;
 8006590:	68bb      	ldr	r3, [r7, #8]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000fcc 	.word	0x20000fcc
 80065a0:	20000fa4 	.word	0x20000fa4
 80065a4:	20000f64 	.word	0x20000f64
 80065a8:	20000fac 	.word	0x20000fac
 80065ac:	20000ad4 	.word	0x20000ad4
 80065b0:	20000ad0 	.word	0x20000ad0
 80065b4:	20000fb8 	.word	0x20000fb8
 80065b8:	20000fb4 	.word	0x20000fb4
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <xTaskGetTickCount+0x1c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065cc:	687b      	ldr	r3, [r7, #4]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000fa8 	.word	0x20000fa8

080065e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ea:	4b4f      	ldr	r3, [pc, #316]	; (8006728 <xTaskIncrementTick+0x148>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f040 808f 	bne.w	8006712 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065f4:	4b4d      	ldr	r3, [pc, #308]	; (800672c <xTaskIncrementTick+0x14c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3301      	adds	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065fc:	4a4b      	ldr	r2, [pc, #300]	; (800672c <xTaskIncrementTick+0x14c>)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d120      	bne.n	800664a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006608:	4b49      	ldr	r3, [pc, #292]	; (8006730 <xTaskIncrementTick+0x150>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <xTaskIncrementTick+0x48>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	603b      	str	r3, [r7, #0]
}
 8006624:	bf00      	nop
 8006626:	e7fe      	b.n	8006626 <xTaskIncrementTick+0x46>
 8006628:	4b41      	ldr	r3, [pc, #260]	; (8006730 <xTaskIncrementTick+0x150>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	4b41      	ldr	r3, [pc, #260]	; (8006734 <xTaskIncrementTick+0x154>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a3f      	ldr	r2, [pc, #252]	; (8006730 <xTaskIncrementTick+0x150>)
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4a3f      	ldr	r2, [pc, #252]	; (8006734 <xTaskIncrementTick+0x154>)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	4b3e      	ldr	r3, [pc, #248]	; (8006738 <xTaskIncrementTick+0x158>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	4a3d      	ldr	r2, [pc, #244]	; (8006738 <xTaskIncrementTick+0x158>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	f000 fad1 	bl	8006bec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800664a:	4b3c      	ldr	r3, [pc, #240]	; (800673c <xTaskIncrementTick+0x15c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	429a      	cmp	r2, r3
 8006652:	d349      	bcc.n	80066e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006654:	4b36      	ldr	r3, [pc, #216]	; (8006730 <xTaskIncrementTick+0x150>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800665e:	4b37      	ldr	r3, [pc, #220]	; (800673c <xTaskIncrementTick+0x15c>)
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	601a      	str	r2, [r3, #0]
					break;
 8006666:	e03f      	b.n	80066e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006668:	4b31      	ldr	r3, [pc, #196]	; (8006730 <xTaskIncrementTick+0x150>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d203      	bcs.n	8006688 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006680:	4a2e      	ldr	r2, [pc, #184]	; (800673c <xTaskIncrementTick+0x15c>)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006686:	e02f      	b.n	80066e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3304      	adds	r3, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7fe fe59 	bl	8005344 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3318      	adds	r3, #24
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe fe50 	bl	8005344 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a8:	4b25      	ldr	r3, [pc, #148]	; (8006740 <xTaskIncrementTick+0x160>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d903      	bls.n	80066b8 <xTaskIncrementTick+0xd8>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	4a22      	ldr	r2, [pc, #136]	; (8006740 <xTaskIncrementTick+0x160>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <xTaskIncrementTick+0x164>)
 80066c6:	441a      	add	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7fe fddb 	bl	800528a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <xTaskIncrementTick+0x168>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	429a      	cmp	r2, r3
 80066e0:	d3b8      	bcc.n	8006654 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066e2:	2301      	movs	r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e6:	e7b5      	b.n	8006654 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066e8:	4b17      	ldr	r3, [pc, #92]	; (8006748 <xTaskIncrementTick+0x168>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ee:	4915      	ldr	r1, [pc, #84]	; (8006744 <xTaskIncrementTick+0x164>)
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d901      	bls.n	8006704 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006700:	2301      	movs	r3, #1
 8006702:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006704:	4b11      	ldr	r3, [pc, #68]	; (800674c <xTaskIncrementTick+0x16c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e004      	b.n	800671c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <xTaskIncrementTick+0x170>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a0d      	ldr	r2, [pc, #52]	; (8006750 <xTaskIncrementTick+0x170>)
 800671a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000fcc 	.word	0x20000fcc
 800672c:	20000fa8 	.word	0x20000fa8
 8006730:	20000f5c 	.word	0x20000f5c
 8006734:	20000f60 	.word	0x20000f60
 8006738:	20000fbc 	.word	0x20000fbc
 800673c:	20000fc4 	.word	0x20000fc4
 8006740:	20000fac 	.word	0x20000fac
 8006744:	20000ad4 	.word	0x20000ad4
 8006748:	20000ad0 	.word	0x20000ad0
 800674c:	20000fb8 	.word	0x20000fb8
 8006750:	20000fb4 	.word	0x20000fb4

08006754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800675a:	4b28      	ldr	r3, [pc, #160]	; (80067fc <vTaskSwitchContext+0xa8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006762:	4b27      	ldr	r3, [pc, #156]	; (8006800 <vTaskSwitchContext+0xac>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006768:	e041      	b.n	80067ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800676a:	4b25      	ldr	r3, [pc, #148]	; (8006800 <vTaskSwitchContext+0xac>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006770:	4b24      	ldr	r3, [pc, #144]	; (8006804 <vTaskSwitchContext+0xb0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e010      	b.n	800679a <vTaskSwitchContext+0x46>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <vTaskSwitchContext+0x40>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	607b      	str	r3, [r7, #4]
}
 8006790:	bf00      	nop
 8006792:	e7fe      	b.n	8006792 <vTaskSwitchContext+0x3e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3b01      	subs	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	491b      	ldr	r1, [pc, #108]	; (8006808 <vTaskSwitchContext+0xb4>)
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0e4      	beq.n	8006778 <vTaskSwitchContext+0x24>
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4a13      	ldr	r2, [pc, #76]	; (8006808 <vTaskSwitchContext+0xb4>)
 80067ba:	4413      	add	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	605a      	str	r2, [r3, #4]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3308      	adds	r3, #8
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d104      	bne.n	80067de <vTaskSwitchContext+0x8a>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	4a09      	ldr	r2, [pc, #36]	; (800680c <vTaskSwitchContext+0xb8>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	4a06      	ldr	r2, [pc, #24]	; (8006804 <vTaskSwitchContext+0xb0>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6013      	str	r3, [r2, #0]
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000fcc 	.word	0x20000fcc
 8006800:	20000fb8 	.word	0x20000fb8
 8006804:	20000fac 	.word	0x20000fac
 8006808:	20000ad4 	.word	0x20000ad4
 800680c:	20000ad0 	.word	0x20000ad0

08006810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <vTaskPlaceOnEventList+0x44>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3318      	adds	r3, #24
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fe fd47 	bl	80052d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006844:	2101      	movs	r1, #1
 8006846:	6838      	ldr	r0, [r7, #0]
 8006848:	f000 fa7c 	bl	8006d44 <prvAddCurrentTaskToDelayedList>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	20000ad0 	.word	0x20000ad0

08006858 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	617b      	str	r3, [r7, #20]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3318      	adds	r3, #24
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7fe fcfe 	bl	800528a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006894:	f04f 33ff 	mov.w	r3, #4294967295
 8006898:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	68b8      	ldr	r0, [r7, #8]
 800689e:	f000 fa51 	bl	8006d44 <prvAddCurrentTaskToDelayedList>
	}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000ad0 	.word	0x20000ad0

080068b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	60fb      	str	r3, [r7, #12]
}
 80068d8:	bf00      	nop
 80068da:	e7fe      	b.n	80068da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3318      	adds	r3, #24
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fe fd2f 	bl	8005344 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e6:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <xTaskRemoveFromEventList+0xb0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11d      	bne.n	800692a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fd26 	bl	8005344 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4b19      	ldr	r3, [pc, #100]	; (8006964 <xTaskRemoveFromEventList+0xb4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d903      	bls.n	800690c <xTaskRemoveFromEventList+0x5c>
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a16      	ldr	r2, [pc, #88]	; (8006964 <xTaskRemoveFromEventList+0xb4>)
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4a13      	ldr	r2, [pc, #76]	; (8006968 <xTaskRemoveFromEventList+0xb8>)
 800691a:	441a      	add	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f7fe fcb1 	bl	800528a <vListInsertEnd>
 8006928:	e005      	b.n	8006936 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3318      	adds	r3, #24
 800692e:	4619      	mov	r1, r3
 8006930:	480e      	ldr	r0, [pc, #56]	; (800696c <xTaskRemoveFromEventList+0xbc>)
 8006932:	f7fe fcaa 	bl	800528a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <xTaskRemoveFromEventList+0xc0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	429a      	cmp	r2, r3
 8006942:	d905      	bls.n	8006950 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <xTaskRemoveFromEventList+0xc4>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e001      	b.n	8006954 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006954:	697b      	ldr	r3, [r7, #20]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000fcc 	.word	0x20000fcc
 8006964:	20000fac 	.word	0x20000fac
 8006968:	20000ad4 	.word	0x20000ad4
 800696c:	20000f64 	.word	0x20000f64
 8006970:	20000ad0 	.word	0x20000ad0
 8006974:	20000fb8 	.word	0x20000fb8

08006978 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <vTaskInternalSetTimeOutState+0x24>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <vTaskInternalSetTimeOutState+0x28>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000fbc 	.word	0x20000fbc
 80069a0:	20000fa8 	.word	0x20000fa8

080069a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	613b      	str	r3, [r7, #16]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60fb      	str	r3, [r7, #12]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80069e6:	f000 fe7d 	bl	80076e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <xTaskCheckForTimeOut+0xbc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d102      	bne.n	8006a0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	e023      	b.n	8006a52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b15      	ldr	r3, [pc, #84]	; (8006a64 <xTaskCheckForTimeOut+0xc0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d007      	beq.n	8006a26 <xTaskCheckForTimeOut+0x82>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	e015      	b.n	8006a52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d20b      	bcs.n	8006a48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff9b 	bl	8006978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e004      	b.n	8006a52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a52:	f000 fe77 	bl	8007744 <vPortExitCritical>

	return xReturn;
 8006a56:	69fb      	ldr	r3, [r7, #28]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000fa8 	.word	0x20000fa8
 8006a64:	20000fbc 	.word	0x20000fbc

08006a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a6c:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <vTaskMissedYield+0x14>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
}
 8006a72:	bf00      	nop
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	20000fb8 	.word	0x20000fb8

08006a80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a88:	f000 f852 	bl	8006b30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <prvIdleTask+0x28>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d9f9      	bls.n	8006a88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a94:	4b05      	ldr	r3, [pc, #20]	; (8006aac <prvIdleTask+0x2c>)
 8006a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006aa4:	e7f0      	b.n	8006a88 <prvIdleTask+0x8>
 8006aa6:	bf00      	nop
 8006aa8:	20000ad4 	.word	0x20000ad4
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	e00c      	b.n	8006ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4a12      	ldr	r2, [pc, #72]	; (8006b10 <prvInitialiseTaskLists+0x60>)
 8006ac8:	4413      	add	r3, r2
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fbb0 	bl	8005230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b37      	cmp	r3, #55	; 0x37
 8006ada:	d9ef      	bls.n	8006abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006adc:	480d      	ldr	r0, [pc, #52]	; (8006b14 <prvInitialiseTaskLists+0x64>)
 8006ade:	f7fe fba7 	bl	8005230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ae2:	480d      	ldr	r0, [pc, #52]	; (8006b18 <prvInitialiseTaskLists+0x68>)
 8006ae4:	f7fe fba4 	bl	8005230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ae8:	480c      	ldr	r0, [pc, #48]	; (8006b1c <prvInitialiseTaskLists+0x6c>)
 8006aea:	f7fe fba1 	bl	8005230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aee:	480c      	ldr	r0, [pc, #48]	; (8006b20 <prvInitialiseTaskLists+0x70>)
 8006af0:	f7fe fb9e 	bl	8005230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006af4:	480b      	ldr	r0, [pc, #44]	; (8006b24 <prvInitialiseTaskLists+0x74>)
 8006af6:	f7fe fb9b 	bl	8005230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <prvInitialiseTaskLists+0x78>)
 8006afc:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <prvInitialiseTaskLists+0x64>)
 8006afe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <prvInitialiseTaskLists+0x7c>)
 8006b02:	4a05      	ldr	r2, [pc, #20]	; (8006b18 <prvInitialiseTaskLists+0x68>)
 8006b04:	601a      	str	r2, [r3, #0]
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000ad4 	.word	0x20000ad4
 8006b14:	20000f34 	.word	0x20000f34
 8006b18:	20000f48 	.word	0x20000f48
 8006b1c:	20000f64 	.word	0x20000f64
 8006b20:	20000f78 	.word	0x20000f78
 8006b24:	20000f90 	.word	0x20000f90
 8006b28:	20000f5c 	.word	0x20000f5c
 8006b2c:	20000f60 	.word	0x20000f60

08006b30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b36:	e019      	b.n	8006b6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b38:	f000 fdd4 	bl	80076e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <prvCheckTasksWaitingTermination+0x50>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fe fbfb 	bl	8005344 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <prvCheckTasksWaitingTermination+0x54>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	4a0b      	ldr	r2, [pc, #44]	; (8006b84 <prvCheckTasksWaitingTermination+0x54>)
 8006b56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <prvCheckTasksWaitingTermination+0x58>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <prvCheckTasksWaitingTermination+0x58>)
 8006b60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b62:	f000 fdef 	bl	8007744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f810 	bl	8006b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <prvCheckTasksWaitingTermination+0x58>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e1      	bne.n	8006b38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000f78 	.word	0x20000f78
 8006b84:	20000fa4 	.word	0x20000fa4
 8006b88:	20000f8c 	.word	0x20000f8c

08006b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d108      	bne.n	8006bb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 ff8c 	bl	8007ac0 <vPortFree>
				vPortFree( pxTCB );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 ff89 	bl	8007ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bae:	e018      	b.n	8006be2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d103      	bne.n	8006bc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 ff80 	bl	8007ac0 <vPortFree>
	}
 8006bc0:	e00f      	b.n	8006be2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d00a      	beq.n	8006be2 <prvDeleteTCB+0x56>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	60fb      	str	r3, [r7, #12]
}
 8006bde:	bf00      	nop
 8006be0:	e7fe      	b.n	8006be0 <prvDeleteTCB+0x54>
	}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <prvResetNextTaskUnblockTime+0x38>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <prvResetNextTaskUnblockTime+0x3c>)
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c04:	e008      	b.n	8006c18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <prvResetNextTaskUnblockTime+0x38>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4a04      	ldr	r2, [pc, #16]	; (8006c28 <prvResetNextTaskUnblockTime+0x3c>)
 8006c16:	6013      	str	r3, [r2, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000f5c 	.word	0x20000f5c
 8006c28:	20000fc4 	.word	0x20000fc4

08006c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <xTaskGetSchedulerState+0x34>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	607b      	str	r3, [r7, #4]
 8006c3e:	e008      	b.n	8006c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c40:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <xTaskGetSchedulerState+0x38>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	607b      	str	r3, [r7, #4]
 8006c4c:	e001      	b.n	8006c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c52:	687b      	ldr	r3, [r7, #4]
	}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000fb0 	.word	0x20000fb0
 8006c64:	20000fcc 	.word	0x20000fcc

08006c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d056      	beq.n	8006d2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <xTaskPriorityDisinherit+0xd0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d00a      	beq.n	8006c9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	60fb      	str	r3, [r7, #12]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60bb      	str	r3, [r7, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc0:	1e5a      	subs	r2, r3, #1
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d02c      	beq.n	8006d2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d128      	bne.n	8006d2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe fb30 	bl	8005344 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <xTaskPriorityDisinherit+0xd4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d903      	bls.n	8006d0c <xTaskPriorityDisinherit+0xa4>
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <xTaskPriorityDisinherit+0xd4>)
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <xTaskPriorityDisinherit+0xd8>)
 8006d1a:	441a      	add	r2, r3
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fe fab1 	bl	800528a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d2c:	697b      	ldr	r3, [r7, #20]
	}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000ad0 	.word	0x20000ad0
 8006d3c:	20000fac 	.word	0x20000fac
 8006d40:	20000ad4 	.word	0x20000ad4

08006d44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d54:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe faf2 	bl	8005344 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d10a      	bne.n	8006d7e <prvAddCurrentTaskToDelayedList+0x3a>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d007      	beq.n	8006d7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3304      	adds	r3, #4
 8006d74:	4619      	mov	r1, r3
 8006d76:	4819      	ldr	r0, [pc, #100]	; (8006ddc <prvAddCurrentTaskToDelayedList+0x98>)
 8006d78:	f7fe fa87 	bl	800528a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d7c:	e026      	b.n	8006dcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d209      	bcs.n	8006daa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fe fa95 	bl	80052d2 <vListInsert>
}
 8006da8:	e010      	b.n	8006dcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f7fe fa8b 	bl	80052d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d202      	bcs.n	8006dcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dc6:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20000fa8 	.word	0x20000fa8
 8006dd8:	20000ad0 	.word	0x20000ad0
 8006ddc:	20000f90 	.word	0x20000f90
 8006de0:	20000f60 	.word	0x20000f60
 8006de4:	20000f5c 	.word	0x20000f5c
 8006de8:	20000fc4 	.word	0x20000fc4

08006dec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08a      	sub	sp, #40	; 0x28
 8006df0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006df6:	f000 fb07 	bl	8007408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006dfa:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <xTimerCreateTimerTask+0x80>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d021      	beq.n	8006e46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e0a:	1d3a      	adds	r2, r7, #4
 8006e0c:	f107 0108 	add.w	r1, r7, #8
 8006e10:	f107 030c 	add.w	r3, r7, #12
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe f9f1 	bl	80051fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	9202      	str	r2, [sp, #8]
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	2302      	movs	r3, #2
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	4910      	ldr	r1, [pc, #64]	; (8006e70 <xTimerCreateTimerTask+0x84>)
 8006e2e:	4811      	ldr	r0, [pc, #68]	; (8006e74 <xTimerCreateTimerTask+0x88>)
 8006e30:	f7fe ffd8 	bl	8005de4 <xTaskCreateStatic>
 8006e34:	4603      	mov	r3, r0
 8006e36:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <xTimerCreateTimerTask+0x8c>)
 8006e38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <xTimerCreateTimerTask+0x8c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e42:	2301      	movs	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	613b      	str	r3, [r7, #16]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e62:	697b      	ldr	r3, [r7, #20]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20001000 	.word	0x20001000
 8006e70:	0800c5f4 	.word	0x0800c5f4
 8006e74:	08006fb1 	.word	0x08006fb1
 8006e78:	20001004 	.word	0x20001004

08006e7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08a      	sub	sp, #40	; 0x28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	623b      	str	r3, [r7, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d02a      	beq.n	8006f08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b05      	cmp	r3, #5
 8006ec2:	dc18      	bgt.n	8006ef6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ec4:	f7ff feb2 	bl	8006c2c <xTaskGetSchedulerState>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d109      	bne.n	8006ee2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f107 0110 	add.w	r1, r7, #16
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eda:	f7fe fb9b 	bl	8005614 <xQueueGenericSend>
 8006ede:	6278      	str	r0, [r7, #36]	; 0x24
 8006ee0:	e012      	b.n	8006f08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f107 0110 	add.w	r1, r7, #16
 8006eea:	2300      	movs	r3, #0
 8006eec:	2200      	movs	r2, #0
 8006eee:	f7fe fb91 	bl	8005614 <xQueueGenericSend>
 8006ef2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ef4:	e008      	b.n	8006f08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <xTimerGenericCommand+0x98>)
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	f107 0110 	add.w	r1, r7, #16
 8006efe:	2300      	movs	r3, #0
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	f7fe fc85 	bl	8005810 <xQueueGenericSendFromISR>
 8006f06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20001000 	.word	0x20001000

08006f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f22:	4b22      	ldr	r3, [pc, #136]	; (8006fac <prvProcessExpiredTimer+0x94>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fa07 	bl	8005344 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d022      	beq.n	8006f8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	18d1      	adds	r1, r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	6978      	ldr	r0, [r7, #20]
 8006f52:	f000 f8d1 	bl	80070f8 <prvInsertTimerInActiveList>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01f      	beq.n	8006f9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	2300      	movs	r3, #0
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	2100      	movs	r1, #0
 8006f66:	6978      	ldr	r0, [r7, #20]
 8006f68:	f7ff ff88 	bl	8006e7c <xTimerGenericCommand>
 8006f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d113      	bne.n	8006f9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	60fb      	str	r3, [r7, #12]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	6978      	ldr	r0, [r7, #20]
 8006fa2:	4798      	blx	r3
}
 8006fa4:	bf00      	nop
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000ff8 	.word	0x20000ff8

08006fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 f857 	bl	8007070 <prvGetNextExpireTime>
 8006fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f803 	bl	8006fd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006fce:	f000 f8d5 	bl	800717c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fd2:	e7f1      	b.n	8006fb8 <prvTimerTask+0x8>

08006fd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006fde:	f7ff fa43 	bl	8006468 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f866 	bl	80070b8 <prvSampleTimeNow>
 8006fec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d130      	bne.n	8007056 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <prvProcessTimerOrBlockTask+0x3c>
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d806      	bhi.n	8007010 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007002:	f7ff fa3f 	bl	8006484 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff ff85 	bl	8006f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800700e:	e024      	b.n	800705a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <prvProcessTimerOrBlockTask+0x90>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <prvProcessTimerOrBlockTask+0x50>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <prvProcessTimerOrBlockTask+0x52>
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <prvProcessTimerOrBlockTask+0x94>)
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4619      	mov	r1, r3
 8007036:	f7fe fea1 	bl	8005d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800703a:	f7ff fa23 	bl	8006484 <xTaskResumeAll>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007044:	4b09      	ldr	r3, [pc, #36]	; (800706c <prvProcessTimerOrBlockTask+0x98>)
 8007046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	f3bf 8f6f 	isb	sy
}
 8007054:	e001      	b.n	800705a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007056:	f7ff fa15 	bl	8006484 <xTaskResumeAll>
}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000ffc 	.word	0x20000ffc
 8007068:	20001000 	.word	0x20001000
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <prvGetNextExpireTime+0x44>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <prvGetNextExpireTime+0x16>
 8007082:	2201      	movs	r2, #1
 8007084:	e000      	b.n	8007088 <prvGetNextExpireTime+0x18>
 8007086:	2200      	movs	r2, #0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <prvGetNextExpireTime+0x44>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e001      	b.n	80070a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070a4:	68fb      	ldr	r3, [r7, #12]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000ff8 	.word	0x20000ff8

080070b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070c0:	f7ff fa7e 	bl	80065c0 <xTaskGetTickCount>
 80070c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <prvSampleTimeNow+0x3c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d205      	bcs.n	80070dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070d0:	f000 f936 	bl	8007340 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e002      	b.n	80070e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070e2:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <prvSampleTimeNow+0x3c>)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070e8:	68fb      	ldr	r3, [r7, #12]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20001008 	.word	0x20001008

080070f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d812      	bhi.n	8007144 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e01b      	b.n	800716a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <prvInsertTimerInActiveList+0x7c>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fe f8c8 	bl	80052d2 <vListInsert>
 8007142:	e012      	b.n	800716a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d206      	bcs.n	800715a <prvInsertTimerInActiveList+0x62>
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d302      	bcc.n	800715a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007154:	2301      	movs	r3, #1
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	e007      	b.n	800716a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <prvInsertTimerInActiveList+0x80>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3304      	adds	r3, #4
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f7fe f8b4 	bl	80052d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800716a:	697b      	ldr	r3, [r7, #20]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000ffc 	.word	0x20000ffc
 8007178:	20000ff8 	.word	0x20000ff8

0800717c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007182:	e0ca      	b.n	800731a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da18      	bge.n	80071bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	3304      	adds	r3, #4
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61fb      	str	r3, [r7, #28]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b2:	6850      	ldr	r0, [r2, #4]
 80071b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b6:	6892      	ldr	r2, [r2, #8]
 80071b8:	4611      	mov	r1, r2
 80071ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f2c0 80ab 	blt.w	800731a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe f8b5 	bl	8005344 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071da:	463b      	mov	r3, r7
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ff6b 	bl	80070b8 <prvSampleTimeNow>
 80071e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	f200 8096 	bhi.w	8007318 <prvProcessReceivedCommands+0x19c>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <prvProcessReceivedCommands+0x78>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	0800721d 	.word	0x0800721d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007291 	.word	0x08007291
 8007204:	080072a5 	.word	0x080072a5
 8007208:	080072ef 	.word	0x080072ef
 800720c:	0800721d 	.word	0x0800721d
 8007210:	0800721d 	.word	0x0800721d
 8007214:	08007291 	.word	0x08007291
 8007218:	080072a5 	.word	0x080072a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	18d1      	adds	r1, r2, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800723c:	f7ff ff5c 	bl	80070f8 <prvInsertTimerInActiveList>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d069      	beq.n	800731a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05e      	beq.n	800731a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	441a      	add	r2, r3
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726e:	f7ff fe05 	bl	8006e7c <xTimerGenericCommand>
 8007272:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d14f      	bne.n	800731a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	61bb      	str	r3, [r7, #24]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80072a2:	e03a      	b.n	800731a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	617b      	str	r3, [r7, #20]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	18d1      	adds	r1, r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e8:	f7ff ff06 	bl	80070f8 <prvInsertTimerInActiveList>
					break;
 80072ec:	e015      	b.n	800731a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80072fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fe:	f000 fbdf 	bl	8007ac0 <vPortFree>
 8007302:	e00a      	b.n	800731a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800730a:	f023 0301 	bic.w	r3, r3, #1
 800730e:	b2da      	uxtb	r2, r3
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007316:	e000      	b.n	800731a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007318:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800731a:	4b08      	ldr	r3, [pc, #32]	; (800733c <prvProcessReceivedCommands+0x1c0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	1d39      	adds	r1, r7, #4
 8007320:	2200      	movs	r2, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fb10 	bl	8005948 <xQueueReceive>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f47f af2a 	bne.w	8007184 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3730      	adds	r7, #48	; 0x30
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20001000 	.word	0x20001000

08007340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007346:	e048      	b.n	80073da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <prvSwitchTimerLists+0xc0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007352:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <prvSwitchTimerLists+0xc0>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd ffef 	bl	8005344 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02e      	beq.n	80073da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d90e      	bls.n	80073ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800739a:	4b19      	ldr	r3, [pc, #100]	; (8007400 <prvSwitchTimerLists+0xc0>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3304      	adds	r3, #4
 80073a2:	4619      	mov	r1, r3
 80073a4:	4610      	mov	r0, r2
 80073a6:	f7fd ff94 	bl	80052d2 <vListInsert>
 80073aa:	e016      	b.n	80073da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073ac:	2300      	movs	r3, #0
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	2300      	movs	r3, #0
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fd60 	bl	8006e7c <xTimerGenericCommand>
 80073bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	603b      	str	r3, [r7, #0]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1b1      	bne.n	8007348 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073e4:	4b06      	ldr	r3, [pc, #24]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <prvSwitchTimerLists+0xc4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a04      	ldr	r2, [pc, #16]	; (8007400 <prvSwitchTimerLists+0xc0>)
 80073f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80073f2:	4a04      	ldr	r2, [pc, #16]	; (8007404 <prvSwitchTimerLists+0xc4>)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000ff8 	.word	0x20000ff8
 8007404:	20000ffc 	.word	0x20000ffc

08007408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800740e:	f000 f969 	bl	80076e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d120      	bne.n	800745c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800741a:	4814      	ldr	r0, [pc, #80]	; (800746c <prvCheckForValidListAndQueue+0x64>)
 800741c:	f7fd ff08 	bl	8005230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007420:	4813      	ldr	r0, [pc, #76]	; (8007470 <prvCheckForValidListAndQueue+0x68>)
 8007422:	f7fd ff05 	bl	8005230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <prvCheckForValidListAndQueue+0x6c>)
 8007428:	4a10      	ldr	r2, [pc, #64]	; (800746c <prvCheckForValidListAndQueue+0x64>)
 800742a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800742c:	4b12      	ldr	r3, [pc, #72]	; (8007478 <prvCheckForValidListAndQueue+0x70>)
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <prvCheckForValidListAndQueue+0x68>)
 8007430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007432:	2300      	movs	r3, #0
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <prvCheckForValidListAndQueue+0x74>)
 8007438:	4a11      	ldr	r2, [pc, #68]	; (8007480 <prvCheckForValidListAndQueue+0x78>)
 800743a:	2110      	movs	r1, #16
 800743c:	200a      	movs	r0, #10
 800743e:	f7fe f813 	bl	8005468 <xQueueGenericCreateStatic>
 8007442:	4603      	mov	r3, r0
 8007444:	4a08      	ldr	r2, [pc, #32]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007448:	4b07      	ldr	r3, [pc, #28]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <prvCheckForValidListAndQueue+0x60>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	490b      	ldr	r1, [pc, #44]	; (8007484 <prvCheckForValidListAndQueue+0x7c>)
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fc66 	bl	8005d28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800745c:	f000 f972 	bl	8007744 <vPortExitCritical>
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20001000 	.word	0x20001000
 800746c:	20000fd0 	.word	0x20000fd0
 8007470:	20000fe4 	.word	0x20000fe4
 8007474:	20000ff8 	.word	0x20000ff8
 8007478:	20000ffc 	.word	0x20000ffc
 800747c:	200010ac 	.word	0x200010ac
 8007480:	2000100c 	.word	0x2000100c
 8007484:	0800c5fc 	.word	0x0800c5fc

08007488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3b04      	subs	r3, #4
 8007498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3b04      	subs	r3, #4
 80074a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0201 	bic.w	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3b04      	subs	r3, #4
 80074b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074b8:	4a0c      	ldr	r2, [pc, #48]	; (80074ec <pxPortInitialiseStack+0x64>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3b14      	subs	r3, #20
 80074c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b04      	subs	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f06f 0202 	mvn.w	r2, #2
 80074d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3b20      	subs	r3, #32
 80074dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	080074f1 	.word	0x080074f1

080074f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074fa:	4b12      	ldr	r3, [pc, #72]	; (8007544 <prvTaskExitError+0x54>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d00a      	beq.n	800751a <prvTaskExitError+0x2a>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <prvTaskExitError+0x28>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60bb      	str	r3, [r7, #8]
}
 800752c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800752e:	bf00      	nop
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0fc      	beq.n	8007530 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	2000001c 	.word	0x2000001c
	...

08007550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <pxCurrentTCBConst2>)
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	6808      	ldr	r0, [r1, #0]
 8007556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	f380 8809 	msr	PSP, r0
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8811 	msr	BASEPRI, r0
 800756a:	4770      	bx	lr
 800756c:	f3af 8000 	nop.w

08007570 <pxCurrentTCBConst2>:
 8007570:	20000ad0 	.word	0x20000ad0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop

08007578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007578:	4808      	ldr	r0, [pc, #32]	; (800759c <prvPortStartFirstTask+0x24>)
 800757a:	6800      	ldr	r0, [r0, #0]
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	f380 8808 	msr	MSP, r0
 8007582:	f04f 0000 	mov.w	r0, #0
 8007586:	f380 8814 	msr	CONTROL, r0
 800758a:	b662      	cpsie	i
 800758c:	b661      	cpsie	f
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	df00      	svc	0
 8007598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800759a:	bf00      	nop
 800759c:	e000ed08 	.word	0xe000ed08

080075a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075a6:	4b46      	ldr	r3, [pc, #280]	; (80076c0 <xPortStartScheduler+0x120>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a46      	ldr	r2, [pc, #280]	; (80076c4 <xPortStartScheduler+0x124>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10a      	bne.n	80075c6 <xPortStartScheduler+0x26>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	613b      	str	r3, [r7, #16]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075c6:	4b3e      	ldr	r3, [pc, #248]	; (80076c0 <xPortStartScheduler+0x120>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3f      	ldr	r2, [pc, #252]	; (80076c8 <xPortStartScheduler+0x128>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d10a      	bne.n	80075e6 <xPortStartScheduler+0x46>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075e6:	4b39      	ldr	r3, [pc, #228]	; (80076cc <xPortStartScheduler+0x12c>)
 80075e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	22ff      	movs	r2, #255	; 0xff
 80075f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4b31      	ldr	r3, [pc, #196]	; (80076d0 <xPortStartScheduler+0x130>)
 800760c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800760e:	4b31      	ldr	r3, [pc, #196]	; (80076d4 <xPortStartScheduler+0x134>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007614:	e009      	b.n	800762a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007616:	4b2f      	ldr	r3, [pc, #188]	; (80076d4 <xPortStartScheduler+0x134>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3b01      	subs	r3, #1
 800761c:	4a2d      	ldr	r2, [pc, #180]	; (80076d4 <xPortStartScheduler+0x134>)
 800761e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	b2db      	uxtb	r3, r3
 8007628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007632:	2b80      	cmp	r3, #128	; 0x80
 8007634:	d0ef      	beq.n	8007616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007636:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <xPortStartScheduler+0x134>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1c3 0307 	rsb	r3, r3, #7
 800763e:	2b04      	cmp	r3, #4
 8007640:	d00a      	beq.n	8007658 <xPortStartScheduler+0xb8>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	60bb      	str	r3, [r7, #8]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007658:	4b1e      	ldr	r3, [pc, #120]	; (80076d4 <xPortStartScheduler+0x134>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	4a1d      	ldr	r2, [pc, #116]	; (80076d4 <xPortStartScheduler+0x134>)
 8007660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <xPortStartScheduler+0x134>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <xPortStartScheduler+0x134>)
 800766c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	b2da      	uxtb	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007676:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <xPortStartScheduler+0x138>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a17      	ldr	r2, [pc, #92]	; (80076d8 <xPortStartScheduler+0x138>)
 800767c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007682:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <xPortStartScheduler+0x138>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <xPortStartScheduler+0x138>)
 8007688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800768c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800768e:	f000 f8dd 	bl	800784c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007692:	4b12      	ldr	r3, [pc, #72]	; (80076dc <xPortStartScheduler+0x13c>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007698:	f000 f8fc 	bl	8007894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800769c:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xPortStartScheduler+0x140>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a0f      	ldr	r2, [pc, #60]	; (80076e0 <xPortStartScheduler+0x140>)
 80076a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80076a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076a8:	f7ff ff66 	bl	8007578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076ac:	f7ff f852 	bl	8006754 <vTaskSwitchContext>
	prvTaskExitError();
 80076b0:	f7ff ff1e 	bl	80074f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000ed00 	.word	0xe000ed00
 80076c4:	410fc271 	.word	0x410fc271
 80076c8:	410fc270 	.word	0x410fc270
 80076cc:	e000e400 	.word	0xe000e400
 80076d0:	200010fc 	.word	0x200010fc
 80076d4:	20001100 	.word	0x20001100
 80076d8:	e000ed20 	.word	0xe000ed20
 80076dc:	2000001c 	.word	0x2000001c
 80076e0:	e000ef34 	.word	0xe000ef34

080076e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	607b      	str	r3, [r7, #4]
}
 80076fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <vPortEnterCritical+0x58>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3301      	adds	r3, #1
 8007704:	4a0d      	ldr	r2, [pc, #52]	; (800773c <vPortEnterCritical+0x58>)
 8007706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <vPortEnterCritical+0x58>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10f      	bne.n	8007730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <vPortEnterCritical+0x5c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <vPortEnterCritical+0x4c>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	603b      	str	r3, [r7, #0]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <vPortEnterCritical+0x4a>
	}
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	2000001c 	.word	0x2000001c
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800774a:	4b12      	ldr	r3, [pc, #72]	; (8007794 <vPortExitCritical+0x50>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <vPortExitCritical+0x24>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	607b      	str	r3, [r7, #4]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <vPortExitCritical+0x50>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3b01      	subs	r3, #1
 800776e:	4a09      	ldr	r2, [pc, #36]	; (8007794 <vPortExitCritical+0x50>)
 8007770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <vPortExitCritical+0x50>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <vPortExitCritical+0x42>
 800777a:	2300      	movs	r3, #0
 800777c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f383 8811 	msr	BASEPRI, r3
}
 8007784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	2000001c 	.word	0x2000001c
	...

080077a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077a0:	f3ef 8009 	mrs	r0, PSP
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <pxCurrentTCBConst>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f01e 0f10 	tst.w	lr, #16
 80077b0:	bf08      	it	eq
 80077b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ba:	6010      	str	r0, [r2, #0]
 80077bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077c4:	f380 8811 	msr	BASEPRI, r0
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f7fe ffc0 	bl	8006754 <vTaskSwitchContext>
 80077d4:	f04f 0000 	mov.w	r0, #0
 80077d8:	f380 8811 	msr	BASEPRI, r0
 80077dc:	bc09      	pop	{r0, r3}
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	6808      	ldr	r0, [r1, #0]
 80077e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e6:	f01e 0f10 	tst.w	lr, #16
 80077ea:	bf08      	it	eq
 80077ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077f0:	f380 8809 	msr	PSP, r0
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst>:
 8007800:	20000ad0 	.word	0x20000ad0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
}
 8007820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007822:	f7fe fedd 	bl	80065e0 <xTaskIncrementTick>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <xPortSysTickHandler+0x40>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	f383 8811 	msr	BASEPRI, r3
}
 800783e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	e000ed04 	.word	0xe000ed04

0800784c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007850:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <vPortSetupTimerInterrupt+0x34>)
 8007852:	2200      	movs	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <vPortSetupTimerInterrupt+0x38>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <vPortSetupTimerInterrupt+0x3c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <vPortSetupTimerInterrupt+0x40>)
 8007862:	fba2 2303 	umull	r2, r3, r2, r3
 8007866:	099b      	lsrs	r3, r3, #6
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <vPortSetupTimerInterrupt+0x44>)
 800786a:	3b01      	subs	r3, #1
 800786c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800786e:	4b04      	ldr	r3, [pc, #16]	; (8007880 <vPortSetupTimerInterrupt+0x34>)
 8007870:	2207      	movs	r2, #7
 8007872:	601a      	str	r2, [r3, #0]
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e010 	.word	0xe000e010
 8007884:	e000e018 	.word	0xe000e018
 8007888:	20000010 	.word	0x20000010
 800788c:	10624dd3 	.word	0x10624dd3
 8007890:	e000e014 	.word	0xe000e014

08007894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80078a4 <vPortEnableVFP+0x10>
 8007898:	6801      	ldr	r1, [r0, #0]
 800789a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800789e:	6001      	str	r1, [r0, #0]
 80078a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078a2:	bf00      	nop
 80078a4:	e000ed88 	.word	0xe000ed88

080078a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078ae:	f3ef 8305 	mrs	r3, IPSR
 80078b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b0f      	cmp	r3, #15
 80078b8:	d914      	bls.n	80078e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078ba:	4a17      	ldr	r2, [pc, #92]	; (8007918 <vPortValidateInterruptPriority+0x70>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078c4:	4b15      	ldr	r3, [pc, #84]	; (800791c <vPortValidateInterruptPriority+0x74>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	7afa      	ldrb	r2, [r7, #11]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d20a      	bcs.n	80078e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	607b      	str	r3, [r7, #4]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <vPortValidateInterruptPriority+0x78>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078ec:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <vPortValidateInterruptPriority+0x7c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d90a      	bls.n	800790a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	603b      	str	r3, [r7, #0]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <vPortValidateInterruptPriority+0x60>
	}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	e000e3f0 	.word	0xe000e3f0
 800791c:	200010fc 	.word	0x200010fc
 8007920:	e000ed0c 	.word	0xe000ed0c
 8007924:	20001100 	.word	0x20001100

08007928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007934:	f7fe fd98 	bl	8006468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007938:	4b5b      	ldr	r3, [pc, #364]	; (8007aa8 <pvPortMalloc+0x180>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007940:	f000 f920 	bl	8007b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007944:	4b59      	ldr	r3, [pc, #356]	; (8007aac <pvPortMalloc+0x184>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4013      	ands	r3, r2
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8093 	bne.w	8007a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01d      	beq.n	8007994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007958:	2208      	movs	r2, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d014      	beq.n	8007994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	3308      	adds	r3, #8
 8007972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <pvPortMalloc+0x6c>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	617b      	str	r3, [r7, #20]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d06e      	beq.n	8007a78 <pvPortMalloc+0x150>
 800799a:	4b45      	ldr	r3, [pc, #276]	; (8007ab0 <pvPortMalloc+0x188>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d869      	bhi.n	8007a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079a4:	4b43      	ldr	r3, [pc, #268]	; (8007ab4 <pvPortMalloc+0x18c>)
 80079a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079a8:	4b42      	ldr	r3, [pc, #264]	; (8007ab4 <pvPortMalloc+0x18c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ae:	e004      	b.n	80079ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d903      	bls.n	80079cc <pvPortMalloc+0xa4>
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f1      	bne.n	80079b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079cc:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <pvPortMalloc+0x180>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d050      	beq.n	8007a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2208      	movs	r2, #8
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	2308      	movs	r3, #8
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d91f      	bls.n	8007a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <pvPortMalloc+0xf8>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	613b      	str	r3, [r7, #16]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	1ad2      	subs	r2, r2, r3
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a32:	69b8      	ldr	r0, [r7, #24]
 8007a34:	f000 f908 	bl	8007c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a46:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <pvPortMalloc+0x190>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d203      	bcs.n	8007a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a52:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <pvPortMalloc+0x188>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <pvPortMalloc+0x190>)
 8007a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <pvPortMalloc+0x184>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a6e:	4b13      	ldr	r3, [pc, #76]	; (8007abc <pvPortMalloc+0x194>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a11      	ldr	r2, [pc, #68]	; (8007abc <pvPortMalloc+0x194>)
 8007a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a78:	f7fe fd04 	bl	8006484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <pvPortMalloc+0x174>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60fb      	str	r3, [r7, #12]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <pvPortMalloc+0x172>
	return pvReturn;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3728      	adds	r7, #40	; 0x28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20004d0c 	.word	0x20004d0c
 8007aac:	20004d20 	.word	0x20004d20
 8007ab0:	20004d10 	.word	0x20004d10
 8007ab4:	20004d04 	.word	0x20004d04
 8007ab8:	20004d14 	.word	0x20004d14
 8007abc:	20004d18 	.word	0x20004d18

08007ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04d      	beq.n	8007b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	425b      	negs	r3, r3
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4413      	add	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <vPortFree+0xb8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <vPortFree+0x44>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	60fb      	str	r3, [r7, #12]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <vPortFree+0x62>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	60bb      	str	r3, [r7, #8]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <vPortFree+0xb8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01e      	beq.n	8007b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11a      	bne.n	8007b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <vPortFree+0xb8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	43db      	mvns	r3, r3
 8007b42:	401a      	ands	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b48:	f7fe fc8e 	bl	8006468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <vPortFree+0xbc>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4413      	add	r3, r2
 8007b56:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <vPortFree+0xbc>)
 8007b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b5a:	6938      	ldr	r0, [r7, #16]
 8007b5c:	f000 f874 	bl	8007c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <vPortFree+0xc0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <vPortFree+0xc0>)
 8007b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b6a:	f7fe fc8b 	bl	8006484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b6e:	bf00      	nop
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20004d20 	.word	0x20004d20
 8007b7c:	20004d10 	.word	0x20004d10
 8007b80:	20004d1c 	.word	0x20004d1c

08007b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b90:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <prvHeapInit+0xac>)
 8007b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00c      	beq.n	8007bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3307      	adds	r3, #7
 8007ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0307 	bic.w	r3, r3, #7
 8007baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	4a1f      	ldr	r2, [pc, #124]	; (8007c30 <prvHeapInit+0xac>)
 8007bb4:	4413      	add	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <prvHeapInit+0xb0>)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <prvHeapInit+0xb0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 0307 	bic.w	r3, r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <prvHeapInit+0xb4>)
 8007be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007be6:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <prvHeapInit+0xb4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2200      	movs	r2, #0
 8007bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bee:	4b12      	ldr	r3, [pc, #72]	; (8007c38 <prvHeapInit+0xb4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <prvHeapInit+0xb4>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <prvHeapInit+0xb8>)
 8007c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	4a09      	ldr	r2, [pc, #36]	; (8007c40 <prvHeapInit+0xbc>)
 8007c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c1c:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <prvHeapInit+0xc0>)
 8007c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c22:	601a      	str	r2, [r3, #0]
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20001104 	.word	0x20001104
 8007c34:	20004d04 	.word	0x20004d04
 8007c38:	20004d0c 	.word	0x20004d0c
 8007c3c:	20004d14 	.word	0x20004d14
 8007c40:	20004d10 	.word	0x20004d10
 8007c44:	20004d20 	.word	0x20004d20

08007c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c50:	4b28      	ldr	r3, [pc, #160]	; (8007cf4 <prvInsertBlockIntoFreeList+0xac>)
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e002      	b.n	8007c5c <prvInsertBlockIntoFreeList+0x14>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d8f7      	bhi.n	8007c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d108      	bne.n	8007c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	441a      	add	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d118      	bne.n	8007cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d00d      	beq.n	8007cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	441a      	add	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e008      	b.n	8007cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e003      	b.n	8007cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d002      	beq.n	8007ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20004d04 	.word	0x20004d04
 8007cf8:	20004d0c 	.word	0x20004d0c

08007cfc <__cvt>:
 8007cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	ec55 4b10 	vmov	r4, r5, d0
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	460e      	mov	r6, r1
 8007d08:	4619      	mov	r1, r3
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	bfbb      	ittet	lt
 8007d0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d12:	461d      	movlt	r5, r3
 8007d14:	2300      	movge	r3, #0
 8007d16:	232d      	movlt	r3, #45	; 0x2d
 8007d18:	700b      	strb	r3, [r1, #0]
 8007d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d20:	4691      	mov	r9, r2
 8007d22:	f023 0820 	bic.w	r8, r3, #32
 8007d26:	bfbc      	itt	lt
 8007d28:	4622      	movlt	r2, r4
 8007d2a:	4614      	movlt	r4, r2
 8007d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d30:	d005      	beq.n	8007d3e <__cvt+0x42>
 8007d32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d36:	d100      	bne.n	8007d3a <__cvt+0x3e>
 8007d38:	3601      	adds	r6, #1
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	e000      	b.n	8007d40 <__cvt+0x44>
 8007d3e:	2103      	movs	r1, #3
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	ab02      	add	r3, sp, #8
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	ec45 4b10 	vmov	d0, r4, r5
 8007d4c:	4653      	mov	r3, sl
 8007d4e:	4632      	mov	r2, r6
 8007d50:	f001 f8c2 	bl	8008ed8 <_dtoa_r>
 8007d54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d58:	4607      	mov	r7, r0
 8007d5a:	d102      	bne.n	8007d62 <__cvt+0x66>
 8007d5c:	f019 0f01 	tst.w	r9, #1
 8007d60:	d022      	beq.n	8007da8 <__cvt+0xac>
 8007d62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d66:	eb07 0906 	add.w	r9, r7, r6
 8007d6a:	d110      	bne.n	8007d8e <__cvt+0x92>
 8007d6c:	783b      	ldrb	r3, [r7, #0]
 8007d6e:	2b30      	cmp	r3, #48	; 0x30
 8007d70:	d10a      	bne.n	8007d88 <__cvt+0x8c>
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fead 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d7e:	b918      	cbnz	r0, 8007d88 <__cvt+0x8c>
 8007d80:	f1c6 0601 	rsb	r6, r6, #1
 8007d84:	f8ca 6000 	str.w	r6, [sl]
 8007d88:	f8da 3000 	ldr.w	r3, [sl]
 8007d8c:	4499      	add	r9, r3
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 fe9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d9a:	b108      	cbz	r0, 8007da0 <__cvt+0xa4>
 8007d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007da0:	2230      	movs	r2, #48	; 0x30
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	454b      	cmp	r3, r9
 8007da6:	d307      	bcc.n	8007db8 <__cvt+0xbc>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dac:	1bdb      	subs	r3, r3, r7
 8007dae:	4638      	mov	r0, r7
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	b004      	add	sp, #16
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	1c59      	adds	r1, r3, #1
 8007dba:	9103      	str	r1, [sp, #12]
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e7f0      	b.n	8007da2 <__cvt+0xa6>

08007dc0 <__exponent>:
 8007dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	bfb8      	it	lt
 8007dc8:	4249      	neglt	r1, r1
 8007dca:	f803 2b02 	strb.w	r2, [r3], #2
 8007dce:	bfb4      	ite	lt
 8007dd0:	222d      	movlt	r2, #45	; 0x2d
 8007dd2:	222b      	movge	r2, #43	; 0x2b
 8007dd4:	2909      	cmp	r1, #9
 8007dd6:	7042      	strb	r2, [r0, #1]
 8007dd8:	dd2a      	ble.n	8007e30 <__exponent+0x70>
 8007dda:	f10d 0207 	add.w	r2, sp, #7
 8007dde:	4617      	mov	r7, r2
 8007de0:	260a      	movs	r6, #10
 8007de2:	4694      	mov	ip, r2
 8007de4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007de8:	fb06 1415 	mls	r4, r6, r5, r1
 8007dec:	3430      	adds	r4, #48	; 0x30
 8007dee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007df2:	460c      	mov	r4, r1
 8007df4:	2c63      	cmp	r4, #99	; 0x63
 8007df6:	f102 32ff 	add.w	r2, r2, #4294967295
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	dcf1      	bgt.n	8007de2 <__exponent+0x22>
 8007dfe:	3130      	adds	r1, #48	; 0x30
 8007e00:	f1ac 0402 	sub.w	r4, ip, #2
 8007e04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e08:	1c41      	adds	r1, r0, #1
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	42ba      	cmp	r2, r7
 8007e0e:	d30a      	bcc.n	8007e26 <__exponent+0x66>
 8007e10:	f10d 0209 	add.w	r2, sp, #9
 8007e14:	eba2 020c 	sub.w	r2, r2, ip
 8007e18:	42bc      	cmp	r4, r7
 8007e1a:	bf88      	it	hi
 8007e1c:	2200      	movhi	r2, #0
 8007e1e:	4413      	add	r3, r2
 8007e20:	1a18      	subs	r0, r3, r0
 8007e22:	b003      	add	sp, #12
 8007e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e2e:	e7ed      	b.n	8007e0c <__exponent+0x4c>
 8007e30:	2330      	movs	r3, #48	; 0x30
 8007e32:	3130      	adds	r1, #48	; 0x30
 8007e34:	7083      	strb	r3, [r0, #2]
 8007e36:	70c1      	strb	r1, [r0, #3]
 8007e38:	1d03      	adds	r3, r0, #4
 8007e3a:	e7f1      	b.n	8007e20 <__exponent+0x60>

08007e3c <_printf_float>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	ed2d 8b02 	vpush	{d8}
 8007e44:	b08d      	sub	sp, #52	; 0x34
 8007e46:	460c      	mov	r4, r1
 8007e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	461f      	mov	r7, r3
 8007e50:	4605      	mov	r5, r0
 8007e52:	f000 ff2b 	bl	8008cac <_localeconv_r>
 8007e56:	f8d0 a000 	ldr.w	sl, [r0]
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f7f8 fa10 	bl	8000280 <strlen>
 8007e60:	2300      	movs	r3, #0
 8007e62:	930a      	str	r3, [sp, #40]	; 0x28
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e70:	3307      	adds	r3, #7
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	f103 0208 	add.w	r2, r3, #8
 8007e7a:	f8c8 2000 	str.w	r2, [r8]
 8007e7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e8c:	ee08 0a10 	vmov	s16, r0
 8007e90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e98:	4b9e      	ldr	r3, [pc, #632]	; (8008114 <_printf_float+0x2d8>)
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	f7f8 fe4d 	bl	8000b3c <__aeabi_dcmpun>
 8007ea2:	bb88      	cbnz	r0, 8007f08 <_printf_float+0xcc>
 8007ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ea8:	4b9a      	ldr	r3, [pc, #616]	; (8008114 <_printf_float+0x2d8>)
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007eae:	f7f8 fe27 	bl	8000b00 <__aeabi_dcmple>
 8007eb2:	bb48      	cbnz	r0, 8007f08 <_printf_float+0xcc>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 fe16 	bl	8000aec <__aeabi_dcmplt>
 8007ec0:	b110      	cbz	r0, 8007ec8 <_printf_float+0x8c>
 8007ec2:	232d      	movs	r3, #45	; 0x2d
 8007ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec8:	4a93      	ldr	r2, [pc, #588]	; (8008118 <_printf_float+0x2dc>)
 8007eca:	4b94      	ldr	r3, [pc, #592]	; (800811c <_printf_float+0x2e0>)
 8007ecc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ed0:	bf94      	ite	ls
 8007ed2:	4690      	movls	r8, r2
 8007ed4:	4698      	movhi	r8, r3
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	9b05      	ldr	r3, [sp, #20]
 8007edc:	f023 0304 	bic.w	r3, r3, #4
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	f04f 0900 	mov.w	r9, #0
 8007ee6:	9700      	str	r7, [sp, #0]
 8007ee8:	4633      	mov	r3, r6
 8007eea:	aa0b      	add	r2, sp, #44	; 0x2c
 8007eec:	4621      	mov	r1, r4
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f000 f9da 	bl	80082a8 <_printf_common>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f040 8090 	bne.w	800801a <_printf_float+0x1de>
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	b00d      	add	sp, #52	; 0x34
 8007f00:	ecbd 8b02 	vpop	{d8}
 8007f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f08:	4642      	mov	r2, r8
 8007f0a:	464b      	mov	r3, r9
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7f8 fe14 	bl	8000b3c <__aeabi_dcmpun>
 8007f14:	b140      	cbz	r0, 8007f28 <_printf_float+0xec>
 8007f16:	464b      	mov	r3, r9
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfbc      	itt	lt
 8007f1c:	232d      	movlt	r3, #45	; 0x2d
 8007f1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f22:	4a7f      	ldr	r2, [pc, #508]	; (8008120 <_printf_float+0x2e4>)
 8007f24:	4b7f      	ldr	r3, [pc, #508]	; (8008124 <_printf_float+0x2e8>)
 8007f26:	e7d1      	b.n	8007ecc <_printf_float+0x90>
 8007f28:	6863      	ldr	r3, [r4, #4]
 8007f2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f2e:	9206      	str	r2, [sp, #24]
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	d13f      	bne.n	8007fb4 <_printf_float+0x178>
 8007f34:	2306      	movs	r3, #6
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	6861      	ldr	r1, [r4, #4]
 8007f3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f40:	2300      	movs	r3, #0
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	ab0a      	add	r3, sp, #40	; 0x28
 8007f46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f4a:	ab09      	add	r3, sp, #36	; 0x24
 8007f4c:	ec49 8b10 	vmov	d0, r8, r9
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	6022      	str	r2, [r4, #0]
 8007f54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f7ff fecf 	bl	8007cfc <__cvt>
 8007f5e:	9b06      	ldr	r3, [sp, #24]
 8007f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f62:	2b47      	cmp	r3, #71	; 0x47
 8007f64:	4680      	mov	r8, r0
 8007f66:	d108      	bne.n	8007f7a <_printf_float+0x13e>
 8007f68:	1cc8      	adds	r0, r1, #3
 8007f6a:	db02      	blt.n	8007f72 <_printf_float+0x136>
 8007f6c:	6863      	ldr	r3, [r4, #4]
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	dd41      	ble.n	8007ff6 <_printf_float+0x1ba>
 8007f72:	f1ab 0302 	sub.w	r3, fp, #2
 8007f76:	fa5f fb83 	uxtb.w	fp, r3
 8007f7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f7e:	d820      	bhi.n	8007fc2 <_printf_float+0x186>
 8007f80:	3901      	subs	r1, #1
 8007f82:	465a      	mov	r2, fp
 8007f84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f88:	9109      	str	r1, [sp, #36]	; 0x24
 8007f8a:	f7ff ff19 	bl	8007dc0 <__exponent>
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f90:	1813      	adds	r3, r2, r0
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	4681      	mov	r9, r0
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	dc02      	bgt.n	8007fa0 <_printf_float+0x164>
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	07d2      	lsls	r2, r2, #31
 8007f9e:	d501      	bpl.n	8007fa4 <_printf_float+0x168>
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d09c      	beq.n	8007ee6 <_printf_float+0xaa>
 8007fac:	232d      	movs	r3, #45	; 0x2d
 8007fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb2:	e798      	b.n	8007ee6 <_printf_float+0xaa>
 8007fb4:	9a06      	ldr	r2, [sp, #24]
 8007fb6:	2a47      	cmp	r2, #71	; 0x47
 8007fb8:	d1be      	bne.n	8007f38 <_printf_float+0xfc>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1bc      	bne.n	8007f38 <_printf_float+0xfc>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e7b9      	b.n	8007f36 <_printf_float+0xfa>
 8007fc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fc6:	d118      	bne.n	8007ffa <_printf_float+0x1be>
 8007fc8:	2900      	cmp	r1, #0
 8007fca:	6863      	ldr	r3, [r4, #4]
 8007fcc:	dd0b      	ble.n	8007fe6 <_printf_float+0x1aa>
 8007fce:	6121      	str	r1, [r4, #16]
 8007fd0:	b913      	cbnz	r3, 8007fd8 <_printf_float+0x19c>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	07d0      	lsls	r0, r2, #31
 8007fd6:	d502      	bpl.n	8007fde <_printf_float+0x1a2>
 8007fd8:	3301      	adds	r3, #1
 8007fda:	440b      	add	r3, r1
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fe0:	f04f 0900 	mov.w	r9, #0
 8007fe4:	e7de      	b.n	8007fa4 <_printf_float+0x168>
 8007fe6:	b913      	cbnz	r3, 8007fee <_printf_float+0x1b2>
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	07d2      	lsls	r2, r2, #31
 8007fec:	d501      	bpl.n	8007ff2 <_printf_float+0x1b6>
 8007fee:	3302      	adds	r3, #2
 8007ff0:	e7f4      	b.n	8007fdc <_printf_float+0x1a0>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e7f2      	b.n	8007fdc <_printf_float+0x1a0>
 8007ff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	db05      	blt.n	800800c <_printf_float+0x1d0>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	6121      	str	r1, [r4, #16]
 8008004:	07d8      	lsls	r0, r3, #31
 8008006:	d5ea      	bpl.n	8007fde <_printf_float+0x1a2>
 8008008:	1c4b      	adds	r3, r1, #1
 800800a:	e7e7      	b.n	8007fdc <_printf_float+0x1a0>
 800800c:	2900      	cmp	r1, #0
 800800e:	bfd4      	ite	le
 8008010:	f1c1 0202 	rsble	r2, r1, #2
 8008014:	2201      	movgt	r2, #1
 8008016:	4413      	add	r3, r2
 8008018:	e7e0      	b.n	8007fdc <_printf_float+0x1a0>
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	055a      	lsls	r2, r3, #21
 800801e:	d407      	bmi.n	8008030 <_printf_float+0x1f4>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	4642      	mov	r2, r8
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	d12c      	bne.n	8008088 <_printf_float+0x24c>
 800802e:	e764      	b.n	8007efa <_printf_float+0xbe>
 8008030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008034:	f240 80e0 	bls.w	80081f8 <_printf_float+0x3bc>
 8008038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	f7f8 fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008044:	2800      	cmp	r0, #0
 8008046:	d034      	beq.n	80080b2 <_printf_float+0x276>
 8008048:	4a37      	ldr	r2, [pc, #220]	; (8008128 <_printf_float+0x2ec>)
 800804a:	2301      	movs	r3, #1
 800804c:	4631      	mov	r1, r6
 800804e:	4628      	mov	r0, r5
 8008050:	47b8      	blx	r7
 8008052:	3001      	adds	r0, #1
 8008054:	f43f af51 	beq.w	8007efa <_printf_float+0xbe>
 8008058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800805c:	429a      	cmp	r2, r3
 800805e:	db02      	blt.n	8008066 <_printf_float+0x22a>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07d8      	lsls	r0, r3, #31
 8008064:	d510      	bpl.n	8008088 <_printf_float+0x24c>
 8008066:	ee18 3a10 	vmov	r3, s16
 800806a:	4652      	mov	r2, sl
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f af41 	beq.w	8007efa <_printf_float+0xbe>
 8008078:	f04f 0800 	mov.w	r8, #0
 800807c:	f104 091a 	add.w	r9, r4, #26
 8008080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008082:	3b01      	subs	r3, #1
 8008084:	4543      	cmp	r3, r8
 8008086:	dc09      	bgt.n	800809c <_printf_float+0x260>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	079b      	lsls	r3, r3, #30
 800808c:	f100 8107 	bmi.w	800829e <_printf_float+0x462>
 8008090:	68e0      	ldr	r0, [r4, #12]
 8008092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008094:	4298      	cmp	r0, r3
 8008096:	bfb8      	it	lt
 8008098:	4618      	movlt	r0, r3
 800809a:	e730      	b.n	8007efe <_printf_float+0xc2>
 800809c:	2301      	movs	r3, #1
 800809e:	464a      	mov	r2, r9
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b8      	blx	r7
 80080a6:	3001      	adds	r0, #1
 80080a8:	f43f af27 	beq.w	8007efa <_printf_float+0xbe>
 80080ac:	f108 0801 	add.w	r8, r8, #1
 80080b0:	e7e6      	b.n	8008080 <_printf_float+0x244>
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dc39      	bgt.n	800812c <_printf_float+0x2f0>
 80080b8:	4a1b      	ldr	r2, [pc, #108]	; (8008128 <_printf_float+0x2ec>)
 80080ba:	2301      	movs	r3, #1
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f af19 	beq.w	8007efa <_printf_float+0xbe>
 80080c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80080cc:	4313      	orrs	r3, r2
 80080ce:	d102      	bne.n	80080d6 <_printf_float+0x29a>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	07d9      	lsls	r1, r3, #31
 80080d4:	d5d8      	bpl.n	8008088 <_printf_float+0x24c>
 80080d6:	ee18 3a10 	vmov	r3, s16
 80080da:	4652      	mov	r2, sl
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f af09 	beq.w	8007efa <_printf_float+0xbe>
 80080e8:	f04f 0900 	mov.w	r9, #0
 80080ec:	f104 0a1a 	add.w	sl, r4, #26
 80080f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f2:	425b      	negs	r3, r3
 80080f4:	454b      	cmp	r3, r9
 80080f6:	dc01      	bgt.n	80080fc <_printf_float+0x2c0>
 80080f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fa:	e792      	b.n	8008022 <_printf_float+0x1e6>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f aef7 	beq.w	8007efa <_printf_float+0xbe>
 800810c:	f109 0901 	add.w	r9, r9, #1
 8008110:	e7ee      	b.n	80080f0 <_printf_float+0x2b4>
 8008112:	bf00      	nop
 8008114:	7fefffff 	.word	0x7fefffff
 8008118:	0800c718 	.word	0x0800c718
 800811c:	0800c71c 	.word	0x0800c71c
 8008120:	0800c720 	.word	0x0800c720
 8008124:	0800c724 	.word	0x0800c724
 8008128:	0800c728 	.word	0x0800c728
 800812c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008130:	429a      	cmp	r2, r3
 8008132:	bfa8      	it	ge
 8008134:	461a      	movge	r2, r3
 8008136:	2a00      	cmp	r2, #0
 8008138:	4691      	mov	r9, r2
 800813a:	dc37      	bgt.n	80081ac <_printf_float+0x370>
 800813c:	f04f 0b00 	mov.w	fp, #0
 8008140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008144:	f104 021a 	add.w	r2, r4, #26
 8008148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800814a:	9305      	str	r3, [sp, #20]
 800814c:	eba3 0309 	sub.w	r3, r3, r9
 8008150:	455b      	cmp	r3, fp
 8008152:	dc33      	bgt.n	80081bc <_printf_float+0x380>
 8008154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008158:	429a      	cmp	r2, r3
 800815a:	db3b      	blt.n	80081d4 <_printf_float+0x398>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	07da      	lsls	r2, r3, #31
 8008160:	d438      	bmi.n	80081d4 <_printf_float+0x398>
 8008162:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008166:	eba2 0903 	sub.w	r9, r2, r3
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	1ad2      	subs	r2, r2, r3
 800816e:	4591      	cmp	r9, r2
 8008170:	bfa8      	it	ge
 8008172:	4691      	movge	r9, r2
 8008174:	f1b9 0f00 	cmp.w	r9, #0
 8008178:	dc35      	bgt.n	80081e6 <_printf_float+0x3aa>
 800817a:	f04f 0800 	mov.w	r8, #0
 800817e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008182:	f104 0a1a 	add.w	sl, r4, #26
 8008186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	eba3 0309 	sub.w	r3, r3, r9
 8008190:	4543      	cmp	r3, r8
 8008192:	f77f af79 	ble.w	8008088 <_printf_float+0x24c>
 8008196:	2301      	movs	r3, #1
 8008198:	4652      	mov	r2, sl
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f aeaa 	beq.w	8007efa <_printf_float+0xbe>
 80081a6:	f108 0801 	add.w	r8, r8, #1
 80081aa:	e7ec      	b.n	8008186 <_printf_float+0x34a>
 80081ac:	4613      	mov	r3, r2
 80081ae:	4631      	mov	r1, r6
 80081b0:	4642      	mov	r2, r8
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b8      	blx	r7
 80081b6:	3001      	adds	r0, #1
 80081b8:	d1c0      	bne.n	800813c <_printf_float+0x300>
 80081ba:	e69e      	b.n	8007efa <_printf_float+0xbe>
 80081bc:	2301      	movs	r3, #1
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	9205      	str	r2, [sp, #20]
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	f43f ae97 	beq.w	8007efa <_printf_float+0xbe>
 80081cc:	9a05      	ldr	r2, [sp, #20]
 80081ce:	f10b 0b01 	add.w	fp, fp, #1
 80081d2:	e7b9      	b.n	8008148 <_printf_float+0x30c>
 80081d4:	ee18 3a10 	vmov	r3, s16
 80081d8:	4652      	mov	r2, sl
 80081da:	4631      	mov	r1, r6
 80081dc:	4628      	mov	r0, r5
 80081de:	47b8      	blx	r7
 80081e0:	3001      	adds	r0, #1
 80081e2:	d1be      	bne.n	8008162 <_printf_float+0x326>
 80081e4:	e689      	b.n	8007efa <_printf_float+0xbe>
 80081e6:	9a05      	ldr	r2, [sp, #20]
 80081e8:	464b      	mov	r3, r9
 80081ea:	4442      	add	r2, r8
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	d1c1      	bne.n	800817a <_printf_float+0x33e>
 80081f6:	e680      	b.n	8007efa <_printf_float+0xbe>
 80081f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fa:	2a01      	cmp	r2, #1
 80081fc:	dc01      	bgt.n	8008202 <_printf_float+0x3c6>
 80081fe:	07db      	lsls	r3, r3, #31
 8008200:	d53a      	bpl.n	8008278 <_printf_float+0x43c>
 8008202:	2301      	movs	r3, #1
 8008204:	4642      	mov	r2, r8
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	47b8      	blx	r7
 800820c:	3001      	adds	r0, #1
 800820e:	f43f ae74 	beq.w	8007efa <_printf_float+0xbe>
 8008212:	ee18 3a10 	vmov	r3, s16
 8008216:	4652      	mov	r2, sl
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f ae6b 	beq.w	8007efa <_printf_float+0xbe>
 8008224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008228:	2200      	movs	r2, #0
 800822a:	2300      	movs	r3, #0
 800822c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008230:	f7f8 fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 8008234:	b9d8      	cbnz	r0, 800826e <_printf_float+0x432>
 8008236:	f10a 33ff 	add.w	r3, sl, #4294967295
 800823a:	f108 0201 	add.w	r2, r8, #1
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d10e      	bne.n	8008266 <_printf_float+0x42a>
 8008248:	e657      	b.n	8007efa <_printf_float+0xbe>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae50 	beq.w	8007efa <_printf_float+0xbe>
 800825a:	f108 0801 	add.w	r8, r8, #1
 800825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008260:	3b01      	subs	r3, #1
 8008262:	4543      	cmp	r3, r8
 8008264:	dcf1      	bgt.n	800824a <_printf_float+0x40e>
 8008266:	464b      	mov	r3, r9
 8008268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800826c:	e6da      	b.n	8008024 <_printf_float+0x1e8>
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	f104 0a1a 	add.w	sl, r4, #26
 8008276:	e7f2      	b.n	800825e <_printf_float+0x422>
 8008278:	2301      	movs	r3, #1
 800827a:	4642      	mov	r2, r8
 800827c:	e7df      	b.n	800823e <_printf_float+0x402>
 800827e:	2301      	movs	r3, #1
 8008280:	464a      	mov	r2, r9
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae36 	beq.w	8007efa <_printf_float+0xbe>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008296:	1a5b      	subs	r3, r3, r1
 8008298:	4543      	cmp	r3, r8
 800829a:	dcf0      	bgt.n	800827e <_printf_float+0x442>
 800829c:	e6f8      	b.n	8008090 <_printf_float+0x254>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f104 0919 	add.w	r9, r4, #25
 80082a6:	e7f4      	b.n	8008292 <_printf_float+0x456>

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4616      	mov	r6, r2
 80082ae:	4699      	mov	r9, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bfb8      	it	lt
 80082bc:	4613      	movlt	r3, r2
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c4:	4607      	mov	r7, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b10a      	cbz	r2, 80082ce <_printf_common+0x26>
 80082ca:	3301      	adds	r3, #1
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	0699      	lsls	r1, r3, #26
 80082d2:	bf42      	ittt	mi
 80082d4:	6833      	ldrmi	r3, [r6, #0]
 80082d6:	3302      	addmi	r3, #2
 80082d8:	6033      	strmi	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	f015 0506 	ands.w	r5, r5, #6
 80082e0:	d106      	bne.n	80082f0 <_printf_common+0x48>
 80082e2:	f104 0a19 	add.w	sl, r4, #25
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	dc26      	bgt.n	800833e <_printf_common+0x96>
 80082f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f4:	1e13      	subs	r3, r2, #0
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	bf18      	it	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	0692      	lsls	r2, r2, #26
 80082fe:	d42b      	bmi.n	8008358 <_printf_common+0xb0>
 8008300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d01e      	beq.n	800834c <_printf_common+0xa4>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	6922      	ldr	r2, [r4, #16]
 8008312:	f003 0306 	and.w	r3, r3, #6
 8008316:	2b04      	cmp	r3, #4
 8008318:	bf02      	ittt	eq
 800831a:	68e5      	ldreq	r5, [r4, #12]
 800831c:	6833      	ldreq	r3, [r6, #0]
 800831e:	1aed      	subeq	r5, r5, r3
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	bf0c      	ite	eq
 8008324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008328:	2500      	movne	r5, #0
 800832a:	4293      	cmp	r3, r2
 800832c:	bfc4      	itt	gt
 800832e:	1a9b      	subgt	r3, r3, r2
 8008330:	18ed      	addgt	r5, r5, r3
 8008332:	2600      	movs	r6, #0
 8008334:	341a      	adds	r4, #26
 8008336:	42b5      	cmp	r5, r6
 8008338:	d11a      	bne.n	8008370 <_printf_common+0xc8>
 800833a:	2000      	movs	r0, #0
 800833c:	e008      	b.n	8008350 <_printf_common+0xa8>
 800833e:	2301      	movs	r3, #1
 8008340:	4652      	mov	r2, sl
 8008342:	4649      	mov	r1, r9
 8008344:	4638      	mov	r0, r7
 8008346:	47c0      	blx	r8
 8008348:	3001      	adds	r0, #1
 800834a:	d103      	bne.n	8008354 <_printf_common+0xac>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	3501      	adds	r5, #1
 8008356:	e7c6      	b.n	80082e6 <_printf_common+0x3e>
 8008358:	18e1      	adds	r1, r4, r3
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	2030      	movs	r0, #48	; 0x30
 800835e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008362:	4422      	add	r2, r4
 8008364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800836c:	3302      	adds	r3, #2
 800836e:	e7c7      	b.n	8008300 <_printf_common+0x58>
 8008370:	2301      	movs	r3, #1
 8008372:	4622      	mov	r2, r4
 8008374:	4649      	mov	r1, r9
 8008376:	4638      	mov	r0, r7
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0e6      	beq.n	800834c <_printf_common+0xa4>
 800837e:	3601      	adds	r6, #1
 8008380:	e7d9      	b.n	8008336 <_printf_common+0x8e>
	...

08008384 <_printf_i>:
 8008384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	7e0f      	ldrb	r7, [r1, #24]
 800838a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800838c:	2f78      	cmp	r7, #120	; 0x78
 800838e:	4691      	mov	r9, r2
 8008390:	4680      	mov	r8, r0
 8008392:	460c      	mov	r4, r1
 8008394:	469a      	mov	sl, r3
 8008396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800839a:	d807      	bhi.n	80083ac <_printf_i+0x28>
 800839c:	2f62      	cmp	r7, #98	; 0x62
 800839e:	d80a      	bhi.n	80083b6 <_printf_i+0x32>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	f000 80d4 	beq.w	800854e <_printf_i+0x1ca>
 80083a6:	2f58      	cmp	r7, #88	; 0x58
 80083a8:	f000 80c0 	beq.w	800852c <_printf_i+0x1a8>
 80083ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b4:	e03a      	b.n	800842c <_printf_i+0xa8>
 80083b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ba:	2b15      	cmp	r3, #21
 80083bc:	d8f6      	bhi.n	80083ac <_printf_i+0x28>
 80083be:	a101      	add	r1, pc, #4	; (adr r1, 80083c4 <_printf_i+0x40>)
 80083c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	08008431 	.word	0x08008431
 80083cc:	080083ad 	.word	0x080083ad
 80083d0:	080083ad 	.word	0x080083ad
 80083d4:	080083ad 	.word	0x080083ad
 80083d8:	080083ad 	.word	0x080083ad
 80083dc:	08008431 	.word	0x08008431
 80083e0:	080083ad 	.word	0x080083ad
 80083e4:	080083ad 	.word	0x080083ad
 80083e8:	080083ad 	.word	0x080083ad
 80083ec:	080083ad 	.word	0x080083ad
 80083f0:	08008535 	.word	0x08008535
 80083f4:	0800845d 	.word	0x0800845d
 80083f8:	080084ef 	.word	0x080084ef
 80083fc:	080083ad 	.word	0x080083ad
 8008400:	080083ad 	.word	0x080083ad
 8008404:	08008557 	.word	0x08008557
 8008408:	080083ad 	.word	0x080083ad
 800840c:	0800845d 	.word	0x0800845d
 8008410:	080083ad 	.word	0x080083ad
 8008414:	080083ad 	.word	0x080083ad
 8008418:	080084f7 	.word	0x080084f7
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	602a      	str	r2, [r5, #0]
 8008424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800842c:	2301      	movs	r3, #1
 800842e:	e09f      	b.n	8008570 <_printf_i+0x1ec>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	0607      	lsls	r7, r0, #24
 8008436:	f103 0104 	add.w	r1, r3, #4
 800843a:	6029      	str	r1, [r5, #0]
 800843c:	d501      	bpl.n	8008442 <_printf_i+0xbe>
 800843e:	681e      	ldr	r6, [r3, #0]
 8008440:	e003      	b.n	800844a <_printf_i+0xc6>
 8008442:	0646      	lsls	r6, r0, #25
 8008444:	d5fb      	bpl.n	800843e <_printf_i+0xba>
 8008446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800844a:	2e00      	cmp	r6, #0
 800844c:	da03      	bge.n	8008456 <_printf_i+0xd2>
 800844e:	232d      	movs	r3, #45	; 0x2d
 8008450:	4276      	negs	r6, r6
 8008452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008456:	485a      	ldr	r0, [pc, #360]	; (80085c0 <_printf_i+0x23c>)
 8008458:	230a      	movs	r3, #10
 800845a:	e012      	b.n	8008482 <_printf_i+0xfe>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	6820      	ldr	r0, [r4, #0]
 8008460:	1d19      	adds	r1, r3, #4
 8008462:	6029      	str	r1, [r5, #0]
 8008464:	0605      	lsls	r5, r0, #24
 8008466:	d501      	bpl.n	800846c <_printf_i+0xe8>
 8008468:	681e      	ldr	r6, [r3, #0]
 800846a:	e002      	b.n	8008472 <_printf_i+0xee>
 800846c:	0641      	lsls	r1, r0, #25
 800846e:	d5fb      	bpl.n	8008468 <_printf_i+0xe4>
 8008470:	881e      	ldrh	r6, [r3, #0]
 8008472:	4853      	ldr	r0, [pc, #332]	; (80085c0 <_printf_i+0x23c>)
 8008474:	2f6f      	cmp	r7, #111	; 0x6f
 8008476:	bf0c      	ite	eq
 8008478:	2308      	moveq	r3, #8
 800847a:	230a      	movne	r3, #10
 800847c:	2100      	movs	r1, #0
 800847e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008482:	6865      	ldr	r5, [r4, #4]
 8008484:	60a5      	str	r5, [r4, #8]
 8008486:	2d00      	cmp	r5, #0
 8008488:	bfa2      	ittt	ge
 800848a:	6821      	ldrge	r1, [r4, #0]
 800848c:	f021 0104 	bicge.w	r1, r1, #4
 8008490:	6021      	strge	r1, [r4, #0]
 8008492:	b90e      	cbnz	r6, 8008498 <_printf_i+0x114>
 8008494:	2d00      	cmp	r5, #0
 8008496:	d04b      	beq.n	8008530 <_printf_i+0x1ac>
 8008498:	4615      	mov	r5, r2
 800849a:	fbb6 f1f3 	udiv	r1, r6, r3
 800849e:	fb03 6711 	mls	r7, r3, r1, r6
 80084a2:	5dc7      	ldrb	r7, [r0, r7]
 80084a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084a8:	4637      	mov	r7, r6
 80084aa:	42bb      	cmp	r3, r7
 80084ac:	460e      	mov	r6, r1
 80084ae:	d9f4      	bls.n	800849a <_printf_i+0x116>
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d10b      	bne.n	80084cc <_printf_i+0x148>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	07de      	lsls	r6, r3, #31
 80084b8:	d508      	bpl.n	80084cc <_printf_i+0x148>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4299      	cmp	r1, r3
 80084c0:	bfde      	ittt	le
 80084c2:	2330      	movle	r3, #48	; 0x30
 80084c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084cc:	1b52      	subs	r2, r2, r5
 80084ce:	6122      	str	r2, [r4, #16]
 80084d0:	f8cd a000 	str.w	sl, [sp]
 80084d4:	464b      	mov	r3, r9
 80084d6:	aa03      	add	r2, sp, #12
 80084d8:	4621      	mov	r1, r4
 80084da:	4640      	mov	r0, r8
 80084dc:	f7ff fee4 	bl	80082a8 <_printf_common>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d14a      	bne.n	800857a <_printf_i+0x1f6>
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	b004      	add	sp, #16
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	f043 0320 	orr.w	r3, r3, #32
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	4833      	ldr	r0, [pc, #204]	; (80085c4 <_printf_i+0x240>)
 80084f8:	2778      	movs	r7, #120	; 0x78
 80084fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	6829      	ldr	r1, [r5, #0]
 8008502:	061f      	lsls	r7, r3, #24
 8008504:	f851 6b04 	ldr.w	r6, [r1], #4
 8008508:	d402      	bmi.n	8008510 <_printf_i+0x18c>
 800850a:	065f      	lsls	r7, r3, #25
 800850c:	bf48      	it	mi
 800850e:	b2b6      	uxthmi	r6, r6
 8008510:	07df      	lsls	r7, r3, #31
 8008512:	bf48      	it	mi
 8008514:	f043 0320 	orrmi.w	r3, r3, #32
 8008518:	6029      	str	r1, [r5, #0]
 800851a:	bf48      	it	mi
 800851c:	6023      	strmi	r3, [r4, #0]
 800851e:	b91e      	cbnz	r6, 8008528 <_printf_i+0x1a4>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	f023 0320 	bic.w	r3, r3, #32
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	2310      	movs	r3, #16
 800852a:	e7a7      	b.n	800847c <_printf_i+0xf8>
 800852c:	4824      	ldr	r0, [pc, #144]	; (80085c0 <_printf_i+0x23c>)
 800852e:	e7e4      	b.n	80084fa <_printf_i+0x176>
 8008530:	4615      	mov	r5, r2
 8008532:	e7bd      	b.n	80084b0 <_printf_i+0x12c>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	6826      	ldr	r6, [r4, #0]
 8008538:	6961      	ldr	r1, [r4, #20]
 800853a:	1d18      	adds	r0, r3, #4
 800853c:	6028      	str	r0, [r5, #0]
 800853e:	0635      	lsls	r5, r6, #24
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	d501      	bpl.n	8008548 <_printf_i+0x1c4>
 8008544:	6019      	str	r1, [r3, #0]
 8008546:	e002      	b.n	800854e <_printf_i+0x1ca>
 8008548:	0670      	lsls	r0, r6, #25
 800854a:	d5fb      	bpl.n	8008544 <_printf_i+0x1c0>
 800854c:	8019      	strh	r1, [r3, #0]
 800854e:	2300      	movs	r3, #0
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	4615      	mov	r5, r2
 8008554:	e7bc      	b.n	80084d0 <_printf_i+0x14c>
 8008556:	682b      	ldr	r3, [r5, #0]
 8008558:	1d1a      	adds	r2, r3, #4
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	681d      	ldr	r5, [r3, #0]
 800855e:	6862      	ldr	r2, [r4, #4]
 8008560:	2100      	movs	r1, #0
 8008562:	4628      	mov	r0, r5
 8008564:	f7f7 fe3c 	bl	80001e0 <memchr>
 8008568:	b108      	cbz	r0, 800856e <_printf_i+0x1ea>
 800856a:	1b40      	subs	r0, r0, r5
 800856c:	6060      	str	r0, [r4, #4]
 800856e:	6863      	ldr	r3, [r4, #4]
 8008570:	6123      	str	r3, [r4, #16]
 8008572:	2300      	movs	r3, #0
 8008574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008578:	e7aa      	b.n	80084d0 <_printf_i+0x14c>
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	462a      	mov	r2, r5
 800857e:	4649      	mov	r1, r9
 8008580:	4640      	mov	r0, r8
 8008582:	47d0      	blx	sl
 8008584:	3001      	adds	r0, #1
 8008586:	d0ad      	beq.n	80084e4 <_printf_i+0x160>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	079b      	lsls	r3, r3, #30
 800858c:	d413      	bmi.n	80085b6 <_printf_i+0x232>
 800858e:	68e0      	ldr	r0, [r4, #12]
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	4298      	cmp	r0, r3
 8008594:	bfb8      	it	lt
 8008596:	4618      	movlt	r0, r3
 8008598:	e7a6      	b.n	80084e8 <_printf_i+0x164>
 800859a:	2301      	movs	r3, #1
 800859c:	4632      	mov	r2, r6
 800859e:	4649      	mov	r1, r9
 80085a0:	4640      	mov	r0, r8
 80085a2:	47d0      	blx	sl
 80085a4:	3001      	adds	r0, #1
 80085a6:	d09d      	beq.n	80084e4 <_printf_i+0x160>
 80085a8:	3501      	adds	r5, #1
 80085aa:	68e3      	ldr	r3, [r4, #12]
 80085ac:	9903      	ldr	r1, [sp, #12]
 80085ae:	1a5b      	subs	r3, r3, r1
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	dcf2      	bgt.n	800859a <_printf_i+0x216>
 80085b4:	e7eb      	b.n	800858e <_printf_i+0x20a>
 80085b6:	2500      	movs	r5, #0
 80085b8:	f104 0619 	add.w	r6, r4, #25
 80085bc:	e7f5      	b.n	80085aa <_printf_i+0x226>
 80085be:	bf00      	nop
 80085c0:	0800c72a 	.word	0x0800c72a
 80085c4:	0800c73b 	.word	0x0800c73b

080085c8 <_scanf_float>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	b087      	sub	sp, #28
 80085ce:	4617      	mov	r7, r2
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	688b      	ldr	r3, [r1, #8]
 80085d4:	1e5a      	subs	r2, r3, #1
 80085d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80085da:	bf83      	ittte	hi
 80085dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80085e0:	195b      	addhi	r3, r3, r5
 80085e2:	9302      	strhi	r3, [sp, #8]
 80085e4:	2300      	movls	r3, #0
 80085e6:	bf86      	itte	hi
 80085e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80085ec:	608b      	strhi	r3, [r1, #8]
 80085ee:	9302      	strls	r3, [sp, #8]
 80085f0:	680b      	ldr	r3, [r1, #0]
 80085f2:	468b      	mov	fp, r1
 80085f4:	2500      	movs	r5, #0
 80085f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80085fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80085fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008602:	4680      	mov	r8, r0
 8008604:	460c      	mov	r4, r1
 8008606:	465e      	mov	r6, fp
 8008608:	46aa      	mov	sl, r5
 800860a:	46a9      	mov	r9, r5
 800860c:	9501      	str	r5, [sp, #4]
 800860e:	68a2      	ldr	r2, [r4, #8]
 8008610:	b152      	cbz	r2, 8008628 <_scanf_float+0x60>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b4e      	cmp	r3, #78	; 0x4e
 8008618:	d864      	bhi.n	80086e4 <_scanf_float+0x11c>
 800861a:	2b40      	cmp	r3, #64	; 0x40
 800861c:	d83c      	bhi.n	8008698 <_scanf_float+0xd0>
 800861e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008622:	b2c8      	uxtb	r0, r1
 8008624:	280e      	cmp	r0, #14
 8008626:	d93a      	bls.n	800869e <_scanf_float+0xd6>
 8008628:	f1b9 0f00 	cmp.w	r9, #0
 800862c:	d003      	beq.n	8008636 <_scanf_float+0x6e>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800863a:	f1ba 0f01 	cmp.w	sl, #1
 800863e:	f200 8113 	bhi.w	8008868 <_scanf_float+0x2a0>
 8008642:	455e      	cmp	r6, fp
 8008644:	f200 8105 	bhi.w	8008852 <_scanf_float+0x28a>
 8008648:	2501      	movs	r5, #1
 800864a:	4628      	mov	r0, r5
 800864c:	b007      	add	sp, #28
 800864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008652:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008656:	2a0d      	cmp	r2, #13
 8008658:	d8e6      	bhi.n	8008628 <_scanf_float+0x60>
 800865a:	a101      	add	r1, pc, #4	; (adr r1, 8008660 <_scanf_float+0x98>)
 800865c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008660:	0800879f 	.word	0x0800879f
 8008664:	08008629 	.word	0x08008629
 8008668:	08008629 	.word	0x08008629
 800866c:	08008629 	.word	0x08008629
 8008670:	080087ff 	.word	0x080087ff
 8008674:	080087d7 	.word	0x080087d7
 8008678:	08008629 	.word	0x08008629
 800867c:	08008629 	.word	0x08008629
 8008680:	080087ad 	.word	0x080087ad
 8008684:	08008629 	.word	0x08008629
 8008688:	08008629 	.word	0x08008629
 800868c:	08008629 	.word	0x08008629
 8008690:	08008629 	.word	0x08008629
 8008694:	08008765 	.word	0x08008765
 8008698:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800869c:	e7db      	b.n	8008656 <_scanf_float+0x8e>
 800869e:	290e      	cmp	r1, #14
 80086a0:	d8c2      	bhi.n	8008628 <_scanf_float+0x60>
 80086a2:	a001      	add	r0, pc, #4	; (adr r0, 80086a8 <_scanf_float+0xe0>)
 80086a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086a8:	08008757 	.word	0x08008757
 80086ac:	08008629 	.word	0x08008629
 80086b0:	08008757 	.word	0x08008757
 80086b4:	080087eb 	.word	0x080087eb
 80086b8:	08008629 	.word	0x08008629
 80086bc:	08008705 	.word	0x08008705
 80086c0:	08008741 	.word	0x08008741
 80086c4:	08008741 	.word	0x08008741
 80086c8:	08008741 	.word	0x08008741
 80086cc:	08008741 	.word	0x08008741
 80086d0:	08008741 	.word	0x08008741
 80086d4:	08008741 	.word	0x08008741
 80086d8:	08008741 	.word	0x08008741
 80086dc:	08008741 	.word	0x08008741
 80086e0:	08008741 	.word	0x08008741
 80086e4:	2b6e      	cmp	r3, #110	; 0x6e
 80086e6:	d809      	bhi.n	80086fc <_scanf_float+0x134>
 80086e8:	2b60      	cmp	r3, #96	; 0x60
 80086ea:	d8b2      	bhi.n	8008652 <_scanf_float+0x8a>
 80086ec:	2b54      	cmp	r3, #84	; 0x54
 80086ee:	d077      	beq.n	80087e0 <_scanf_float+0x218>
 80086f0:	2b59      	cmp	r3, #89	; 0x59
 80086f2:	d199      	bne.n	8008628 <_scanf_float+0x60>
 80086f4:	2d07      	cmp	r5, #7
 80086f6:	d197      	bne.n	8008628 <_scanf_float+0x60>
 80086f8:	2508      	movs	r5, #8
 80086fa:	e029      	b.n	8008750 <_scanf_float+0x188>
 80086fc:	2b74      	cmp	r3, #116	; 0x74
 80086fe:	d06f      	beq.n	80087e0 <_scanf_float+0x218>
 8008700:	2b79      	cmp	r3, #121	; 0x79
 8008702:	e7f6      	b.n	80086f2 <_scanf_float+0x12a>
 8008704:	6821      	ldr	r1, [r4, #0]
 8008706:	05c8      	lsls	r0, r1, #23
 8008708:	d51a      	bpl.n	8008740 <_scanf_float+0x178>
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008710:	6021      	str	r1, [r4, #0]
 8008712:	f109 0901 	add.w	r9, r9, #1
 8008716:	b11b      	cbz	r3, 8008720 <_scanf_float+0x158>
 8008718:	3b01      	subs	r3, #1
 800871a:	3201      	adds	r2, #1
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	60a2      	str	r2, [r4, #8]
 8008720:	68a3      	ldr	r3, [r4, #8]
 8008722:	3b01      	subs	r3, #1
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	6923      	ldr	r3, [r4, #16]
 8008728:	3301      	adds	r3, #1
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3b01      	subs	r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	607b      	str	r3, [r7, #4]
 8008734:	f340 8084 	ble.w	8008840 <_scanf_float+0x278>
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3301      	adds	r3, #1
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	e766      	b.n	800860e <_scanf_float+0x46>
 8008740:	eb1a 0f05 	cmn.w	sl, r5
 8008744:	f47f af70 	bne.w	8008628 <_scanf_float+0x60>
 8008748:	6822      	ldr	r2, [r4, #0]
 800874a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	f806 3b01 	strb.w	r3, [r6], #1
 8008754:	e7e4      	b.n	8008720 <_scanf_float+0x158>
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	0610      	lsls	r0, r2, #24
 800875a:	f57f af65 	bpl.w	8008628 <_scanf_float+0x60>
 800875e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008762:	e7f4      	b.n	800874e <_scanf_float+0x186>
 8008764:	f1ba 0f00 	cmp.w	sl, #0
 8008768:	d10e      	bne.n	8008788 <_scanf_float+0x1c0>
 800876a:	f1b9 0f00 	cmp.w	r9, #0
 800876e:	d10e      	bne.n	800878e <_scanf_float+0x1c6>
 8008770:	6822      	ldr	r2, [r4, #0]
 8008772:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008776:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800877a:	d108      	bne.n	800878e <_scanf_float+0x1c6>
 800877c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008780:	6022      	str	r2, [r4, #0]
 8008782:	f04f 0a01 	mov.w	sl, #1
 8008786:	e7e3      	b.n	8008750 <_scanf_float+0x188>
 8008788:	f1ba 0f02 	cmp.w	sl, #2
 800878c:	d055      	beq.n	800883a <_scanf_float+0x272>
 800878e:	2d01      	cmp	r5, #1
 8008790:	d002      	beq.n	8008798 <_scanf_float+0x1d0>
 8008792:	2d04      	cmp	r5, #4
 8008794:	f47f af48 	bne.w	8008628 <_scanf_float+0x60>
 8008798:	3501      	adds	r5, #1
 800879a:	b2ed      	uxtb	r5, r5
 800879c:	e7d8      	b.n	8008750 <_scanf_float+0x188>
 800879e:	f1ba 0f01 	cmp.w	sl, #1
 80087a2:	f47f af41 	bne.w	8008628 <_scanf_float+0x60>
 80087a6:	f04f 0a02 	mov.w	sl, #2
 80087aa:	e7d1      	b.n	8008750 <_scanf_float+0x188>
 80087ac:	b97d      	cbnz	r5, 80087ce <_scanf_float+0x206>
 80087ae:	f1b9 0f00 	cmp.w	r9, #0
 80087b2:	f47f af3c 	bne.w	800862e <_scanf_float+0x66>
 80087b6:	6822      	ldr	r2, [r4, #0]
 80087b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087c0:	f47f af39 	bne.w	8008636 <_scanf_float+0x6e>
 80087c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087c8:	6022      	str	r2, [r4, #0]
 80087ca:	2501      	movs	r5, #1
 80087cc:	e7c0      	b.n	8008750 <_scanf_float+0x188>
 80087ce:	2d03      	cmp	r5, #3
 80087d0:	d0e2      	beq.n	8008798 <_scanf_float+0x1d0>
 80087d2:	2d05      	cmp	r5, #5
 80087d4:	e7de      	b.n	8008794 <_scanf_float+0x1cc>
 80087d6:	2d02      	cmp	r5, #2
 80087d8:	f47f af26 	bne.w	8008628 <_scanf_float+0x60>
 80087dc:	2503      	movs	r5, #3
 80087de:	e7b7      	b.n	8008750 <_scanf_float+0x188>
 80087e0:	2d06      	cmp	r5, #6
 80087e2:	f47f af21 	bne.w	8008628 <_scanf_float+0x60>
 80087e6:	2507      	movs	r5, #7
 80087e8:	e7b2      	b.n	8008750 <_scanf_float+0x188>
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	0591      	lsls	r1, r2, #22
 80087ee:	f57f af1b 	bpl.w	8008628 <_scanf_float+0x60>
 80087f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80087f6:	6022      	str	r2, [r4, #0]
 80087f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80087fc:	e7a8      	b.n	8008750 <_scanf_float+0x188>
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008804:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008808:	d006      	beq.n	8008818 <_scanf_float+0x250>
 800880a:	0550      	lsls	r0, r2, #21
 800880c:	f57f af0c 	bpl.w	8008628 <_scanf_float+0x60>
 8008810:	f1b9 0f00 	cmp.w	r9, #0
 8008814:	f43f af0f 	beq.w	8008636 <_scanf_float+0x6e>
 8008818:	0591      	lsls	r1, r2, #22
 800881a:	bf58      	it	pl
 800881c:	9901      	ldrpl	r1, [sp, #4]
 800881e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008822:	bf58      	it	pl
 8008824:	eba9 0101 	subpl.w	r1, r9, r1
 8008828:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800882c:	bf58      	it	pl
 800882e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008832:	6022      	str	r2, [r4, #0]
 8008834:	f04f 0900 	mov.w	r9, #0
 8008838:	e78a      	b.n	8008750 <_scanf_float+0x188>
 800883a:	f04f 0a03 	mov.w	sl, #3
 800883e:	e787      	b.n	8008750 <_scanf_float+0x188>
 8008840:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008844:	4639      	mov	r1, r7
 8008846:	4640      	mov	r0, r8
 8008848:	4798      	blx	r3
 800884a:	2800      	cmp	r0, #0
 800884c:	f43f aedf 	beq.w	800860e <_scanf_float+0x46>
 8008850:	e6ea      	b.n	8008628 <_scanf_float+0x60>
 8008852:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008856:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800885a:	463a      	mov	r2, r7
 800885c:	4640      	mov	r0, r8
 800885e:	4798      	blx	r3
 8008860:	6923      	ldr	r3, [r4, #16]
 8008862:	3b01      	subs	r3, #1
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	e6ec      	b.n	8008642 <_scanf_float+0x7a>
 8008868:	1e6b      	subs	r3, r5, #1
 800886a:	2b06      	cmp	r3, #6
 800886c:	d825      	bhi.n	80088ba <_scanf_float+0x2f2>
 800886e:	2d02      	cmp	r5, #2
 8008870:	d836      	bhi.n	80088e0 <_scanf_float+0x318>
 8008872:	455e      	cmp	r6, fp
 8008874:	f67f aee8 	bls.w	8008648 <_scanf_float+0x80>
 8008878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800887c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008880:	463a      	mov	r2, r7
 8008882:	4640      	mov	r0, r8
 8008884:	4798      	blx	r3
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	3b01      	subs	r3, #1
 800888a:	6123      	str	r3, [r4, #16]
 800888c:	e7f1      	b.n	8008872 <_scanf_float+0x2aa>
 800888e:	9802      	ldr	r0, [sp, #8]
 8008890:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008894:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008898:	9002      	str	r0, [sp, #8]
 800889a:	463a      	mov	r2, r7
 800889c:	4640      	mov	r0, r8
 800889e:	4798      	blx	r3
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088aa:	fa5f fa8a 	uxtb.w	sl, sl
 80088ae:	f1ba 0f02 	cmp.w	sl, #2
 80088b2:	d1ec      	bne.n	800888e <_scanf_float+0x2c6>
 80088b4:	3d03      	subs	r5, #3
 80088b6:	b2ed      	uxtb	r5, r5
 80088b8:	1b76      	subs	r6, r6, r5
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	05da      	lsls	r2, r3, #23
 80088be:	d52f      	bpl.n	8008920 <_scanf_float+0x358>
 80088c0:	055b      	lsls	r3, r3, #21
 80088c2:	d510      	bpl.n	80088e6 <_scanf_float+0x31e>
 80088c4:	455e      	cmp	r6, fp
 80088c6:	f67f aebf 	bls.w	8008648 <_scanf_float+0x80>
 80088ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088d2:	463a      	mov	r2, r7
 80088d4:	4640      	mov	r0, r8
 80088d6:	4798      	blx	r3
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	3b01      	subs	r3, #1
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	e7f1      	b.n	80088c4 <_scanf_float+0x2fc>
 80088e0:	46aa      	mov	sl, r5
 80088e2:	9602      	str	r6, [sp, #8]
 80088e4:	e7df      	b.n	80088a6 <_scanf_float+0x2de>
 80088e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	2965      	cmp	r1, #101	; 0x65
 80088ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80088f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	d00c      	beq.n	8008914 <_scanf_float+0x34c>
 80088fa:	2945      	cmp	r1, #69	; 0x45
 80088fc:	d00a      	beq.n	8008914 <_scanf_float+0x34c>
 80088fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008902:	463a      	mov	r2, r7
 8008904:	4640      	mov	r0, r8
 8008906:	4798      	blx	r3
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800890e:	3b01      	subs	r3, #1
 8008910:	1eb5      	subs	r5, r6, #2
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008918:	463a      	mov	r2, r7
 800891a:	4640      	mov	r0, r8
 800891c:	4798      	blx	r3
 800891e:	462e      	mov	r6, r5
 8008920:	6825      	ldr	r5, [r4, #0]
 8008922:	f015 0510 	ands.w	r5, r5, #16
 8008926:	d158      	bne.n	80089da <_scanf_float+0x412>
 8008928:	7035      	strb	r5, [r6, #0]
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008934:	d11c      	bne.n	8008970 <_scanf_float+0x3a8>
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	454b      	cmp	r3, r9
 800893a:	eba3 0209 	sub.w	r2, r3, r9
 800893e:	d124      	bne.n	800898a <_scanf_float+0x3c2>
 8008940:	2200      	movs	r2, #0
 8008942:	4659      	mov	r1, fp
 8008944:	4640      	mov	r0, r8
 8008946:	f002 fc73 	bl	800b230 <_strtod_r>
 800894a:	9b03      	ldr	r3, [sp, #12]
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f011 0f02 	tst.w	r1, #2
 8008954:	ec57 6b10 	vmov	r6, r7, d0
 8008958:	f103 0204 	add.w	r2, r3, #4
 800895c:	d020      	beq.n	80089a0 <_scanf_float+0x3d8>
 800895e:	9903      	ldr	r1, [sp, #12]
 8008960:	600a      	str	r2, [r1, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	e9c3 6700 	strd	r6, r7, [r3]
 8008968:	68e3      	ldr	r3, [r4, #12]
 800896a:	3301      	adds	r3, #1
 800896c:	60e3      	str	r3, [r4, #12]
 800896e:	e66c      	b.n	800864a <_scanf_float+0x82>
 8008970:	9b04      	ldr	r3, [sp, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0e4      	beq.n	8008940 <_scanf_float+0x378>
 8008976:	9905      	ldr	r1, [sp, #20]
 8008978:	230a      	movs	r3, #10
 800897a:	462a      	mov	r2, r5
 800897c:	3101      	adds	r1, #1
 800897e:	4640      	mov	r0, r8
 8008980:	f002 fcde 	bl	800b340 <_strtol_r>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	9e05      	ldr	r6, [sp, #20]
 8008988:	1ac2      	subs	r2, r0, r3
 800898a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800898e:	429e      	cmp	r6, r3
 8008990:	bf28      	it	cs
 8008992:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008996:	4912      	ldr	r1, [pc, #72]	; (80089e0 <_scanf_float+0x418>)
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f91b 	bl	8008bd4 <siprintf>
 800899e:	e7cf      	b.n	8008940 <_scanf_float+0x378>
 80089a0:	f011 0f04 	tst.w	r1, #4
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	600a      	str	r2, [r1, #0]
 80089a8:	d1db      	bne.n	8008962 <_scanf_float+0x39a>
 80089aa:	f8d3 8000 	ldr.w	r8, [r3]
 80089ae:	ee10 2a10 	vmov	r2, s0
 80089b2:	ee10 0a10 	vmov	r0, s0
 80089b6:	463b      	mov	r3, r7
 80089b8:	4639      	mov	r1, r7
 80089ba:	f7f8 f8bf 	bl	8000b3c <__aeabi_dcmpun>
 80089be:	b128      	cbz	r0, 80089cc <_scanf_float+0x404>
 80089c0:	4808      	ldr	r0, [pc, #32]	; (80089e4 <_scanf_float+0x41c>)
 80089c2:	f000 f9f9 	bl	8008db8 <nanf>
 80089c6:	ed88 0a00 	vstr	s0, [r8]
 80089ca:	e7cd      	b.n	8008968 <_scanf_float+0x3a0>
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f8 f912 	bl	8000bf8 <__aeabi_d2f>
 80089d4:	f8c8 0000 	str.w	r0, [r8]
 80089d8:	e7c6      	b.n	8008968 <_scanf_float+0x3a0>
 80089da:	2500      	movs	r5, #0
 80089dc:	e635      	b.n	800864a <_scanf_float+0x82>
 80089de:	bf00      	nop
 80089e0:	0800c74c 	.word	0x0800c74c
 80089e4:	0800cadd 	.word	0x0800cadd

080089e8 <std>:
 80089e8:	2300      	movs	r3, #0
 80089ea:	b510      	push	{r4, lr}
 80089ec:	4604      	mov	r4, r0
 80089ee:	e9c0 3300 	strd	r3, r3, [r0]
 80089f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089f6:	6083      	str	r3, [r0, #8]
 80089f8:	8181      	strh	r1, [r0, #12]
 80089fa:	6643      	str	r3, [r0, #100]	; 0x64
 80089fc:	81c2      	strh	r2, [r0, #14]
 80089fe:	6183      	str	r3, [r0, #24]
 8008a00:	4619      	mov	r1, r3
 8008a02:	2208      	movs	r2, #8
 8008a04:	305c      	adds	r0, #92	; 0x5c
 8008a06:	f000 f948 	bl	8008c9a <memset>
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <std+0x58>)
 8008a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <std+0x5c>)
 8008a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a12:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <std+0x60>)
 8008a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a16:	4b0d      	ldr	r3, [pc, #52]	; (8008a4c <std+0x64>)
 8008a18:	6323      	str	r3, [r4, #48]	; 0x30
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <std+0x68>)
 8008a1c:	6224      	str	r4, [r4, #32]
 8008a1e:	429c      	cmp	r4, r3
 8008a20:	d006      	beq.n	8008a30 <std+0x48>
 8008a22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008a26:	4294      	cmp	r4, r2
 8008a28:	d002      	beq.n	8008a30 <std+0x48>
 8008a2a:	33d0      	adds	r3, #208	; 0xd0
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	d105      	bne.n	8008a3c <std+0x54>
 8008a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a38:	f000 b9ac 	b.w	8008d94 <__retarget_lock_init_recursive>
 8008a3c:	bd10      	pop	{r4, pc}
 8008a3e:	bf00      	nop
 8008a40:	08008c15 	.word	0x08008c15
 8008a44:	08008c37 	.word	0x08008c37
 8008a48:	08008c6f 	.word	0x08008c6f
 8008a4c:	08008c93 	.word	0x08008c93
 8008a50:	20004d24 	.word	0x20004d24

08008a54 <stdio_exit_handler>:
 8008a54:	4a02      	ldr	r2, [pc, #8]	; (8008a60 <stdio_exit_handler+0xc>)
 8008a56:	4903      	ldr	r1, [pc, #12]	; (8008a64 <stdio_exit_handler+0x10>)
 8008a58:	4803      	ldr	r0, [pc, #12]	; (8008a68 <stdio_exit_handler+0x14>)
 8008a5a:	f000 b869 	b.w	8008b30 <_fwalk_sglue>
 8008a5e:	bf00      	nop
 8008a60:	20000020 	.word	0x20000020
 8008a64:	0800b701 	.word	0x0800b701
 8008a68:	2000002c 	.word	0x2000002c

08008a6c <cleanup_stdio>:
 8008a6c:	6841      	ldr	r1, [r0, #4]
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <cleanup_stdio+0x34>)
 8008a70:	4299      	cmp	r1, r3
 8008a72:	b510      	push	{r4, lr}
 8008a74:	4604      	mov	r4, r0
 8008a76:	d001      	beq.n	8008a7c <cleanup_stdio+0x10>
 8008a78:	f002 fe42 	bl	800b700 <_fflush_r>
 8008a7c:	68a1      	ldr	r1, [r4, #8]
 8008a7e:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <cleanup_stdio+0x38>)
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d002      	beq.n	8008a8a <cleanup_stdio+0x1e>
 8008a84:	4620      	mov	r0, r4
 8008a86:	f002 fe3b 	bl	800b700 <_fflush_r>
 8008a8a:	68e1      	ldr	r1, [r4, #12]
 8008a8c:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <cleanup_stdio+0x3c>)
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	d004      	beq.n	8008a9c <cleanup_stdio+0x30>
 8008a92:	4620      	mov	r0, r4
 8008a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a98:	f002 be32 	b.w	800b700 <_fflush_r>
 8008a9c:	bd10      	pop	{r4, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20004d24 	.word	0x20004d24
 8008aa4:	20004d8c 	.word	0x20004d8c
 8008aa8:	20004df4 	.word	0x20004df4

08008aac <global_stdio_init.part.0>:
 8008aac:	b510      	push	{r4, lr}
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <global_stdio_init.part.0+0x30>)
 8008ab0:	4c0b      	ldr	r4, [pc, #44]	; (8008ae0 <global_stdio_init.part.0+0x34>)
 8008ab2:	4a0c      	ldr	r2, [pc, #48]	; (8008ae4 <global_stdio_init.part.0+0x38>)
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2104      	movs	r1, #4
 8008abc:	f7ff ff94 	bl	80089e8 <std>
 8008ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	2109      	movs	r1, #9
 8008ac8:	f7ff ff8e 	bl	80089e8 <std>
 8008acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad6:	2112      	movs	r1, #18
 8008ad8:	f7ff bf86 	b.w	80089e8 <std>
 8008adc:	20004e5c 	.word	0x20004e5c
 8008ae0:	20004d24 	.word	0x20004d24
 8008ae4:	08008a55 	.word	0x08008a55

08008ae8 <__sfp_lock_acquire>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <__sfp_lock_acquire+0x8>)
 8008aea:	f000 b954 	b.w	8008d96 <__retarget_lock_acquire_recursive>
 8008aee:	bf00      	nop
 8008af0:	20004e65 	.word	0x20004e65

08008af4 <__sfp_lock_release>:
 8008af4:	4801      	ldr	r0, [pc, #4]	; (8008afc <__sfp_lock_release+0x8>)
 8008af6:	f000 b94f 	b.w	8008d98 <__retarget_lock_release_recursive>
 8008afa:	bf00      	nop
 8008afc:	20004e65 	.word	0x20004e65

08008b00 <__sinit>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4604      	mov	r4, r0
 8008b04:	f7ff fff0 	bl	8008ae8 <__sfp_lock_acquire>
 8008b08:	6a23      	ldr	r3, [r4, #32]
 8008b0a:	b11b      	cbz	r3, 8008b14 <__sinit+0x14>
 8008b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b10:	f7ff bff0 	b.w	8008af4 <__sfp_lock_release>
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <__sinit+0x28>)
 8008b16:	6223      	str	r3, [r4, #32]
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <__sinit+0x2c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f5      	bne.n	8008b0c <__sinit+0xc>
 8008b20:	f7ff ffc4 	bl	8008aac <global_stdio_init.part.0>
 8008b24:	e7f2      	b.n	8008b0c <__sinit+0xc>
 8008b26:	bf00      	nop
 8008b28:	08008a6d 	.word	0x08008a6d
 8008b2c:	20004e5c 	.word	0x20004e5c

08008b30 <_fwalk_sglue>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4607      	mov	r7, r0
 8008b36:	4688      	mov	r8, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b40:	f1b9 0901 	subs.w	r9, r9, #1
 8008b44:	d505      	bpl.n	8008b52 <_fwalk_sglue+0x22>
 8008b46:	6824      	ldr	r4, [r4, #0]
 8008b48:	2c00      	cmp	r4, #0
 8008b4a:	d1f7      	bne.n	8008b3c <_fwalk_sglue+0xc>
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d907      	bls.n	8008b68 <_fwalk_sglue+0x38>
 8008b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	d003      	beq.n	8008b68 <_fwalk_sglue+0x38>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4638      	mov	r0, r7
 8008b64:	47c0      	blx	r8
 8008b66:	4306      	orrs	r6, r0
 8008b68:	3568      	adds	r5, #104	; 0x68
 8008b6a:	e7e9      	b.n	8008b40 <_fwalk_sglue+0x10>

08008b6c <sniprintf>:
 8008b6c:	b40c      	push	{r2, r3}
 8008b6e:	b530      	push	{r4, r5, lr}
 8008b70:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <sniprintf+0x64>)
 8008b72:	1e0c      	subs	r4, r1, #0
 8008b74:	681d      	ldr	r5, [r3, #0]
 8008b76:	b09d      	sub	sp, #116	; 0x74
 8008b78:	da08      	bge.n	8008b8c <sniprintf+0x20>
 8008b7a:	238b      	movs	r3, #139	; 0x8b
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	b01d      	add	sp, #116	; 0x74
 8008b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b88:	b002      	add	sp, #8
 8008b8a:	4770      	bx	lr
 8008b8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b94:	bf14      	ite	ne
 8008b96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b9a:	4623      	moveq	r3, r4
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	9307      	str	r3, [sp, #28]
 8008ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	9006      	str	r0, [sp, #24]
 8008ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008bac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bae:	ab21      	add	r3, sp, #132	; 0x84
 8008bb0:	a902      	add	r1, sp, #8
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	f002 fc1f 	bl	800b3f8 <_svfiprintf_r>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	bfbc      	itt	lt
 8008bbe:	238b      	movlt	r3, #139	; 0x8b
 8008bc0:	602b      	strlt	r3, [r5, #0]
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	d0dd      	beq.n	8008b82 <sniprintf+0x16>
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	e7d9      	b.n	8008b82 <sniprintf+0x16>
 8008bce:	bf00      	nop
 8008bd0:	20000078 	.word	0x20000078

08008bd4 <siprintf>:
 8008bd4:	b40e      	push	{r1, r2, r3}
 8008bd6:	b500      	push	{lr}
 8008bd8:	b09c      	sub	sp, #112	; 0x70
 8008bda:	ab1d      	add	r3, sp, #116	; 0x74
 8008bdc:	9002      	str	r0, [sp, #8]
 8008bde:	9006      	str	r0, [sp, #24]
 8008be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008be4:	4809      	ldr	r0, [pc, #36]	; (8008c0c <siprintf+0x38>)
 8008be6:	9107      	str	r1, [sp, #28]
 8008be8:	9104      	str	r1, [sp, #16]
 8008bea:	4909      	ldr	r1, [pc, #36]	; (8008c10 <siprintf+0x3c>)
 8008bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf0:	9105      	str	r1, [sp, #20]
 8008bf2:	6800      	ldr	r0, [r0, #0]
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	a902      	add	r1, sp, #8
 8008bf8:	f002 fbfe 	bl	800b3f8 <_svfiprintf_r>
 8008bfc:	9b02      	ldr	r3, [sp, #8]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
 8008c02:	b01c      	add	sp, #112	; 0x70
 8008c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c08:	b003      	add	sp, #12
 8008c0a:	4770      	bx	lr
 8008c0c:	20000078 	.word	0x20000078
 8008c10:	ffff0208 	.word	0xffff0208

08008c14 <__sread>:
 8008c14:	b510      	push	{r4, lr}
 8008c16:	460c      	mov	r4, r1
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	f000 f86c 	bl	8008cf8 <_read_r>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	bfab      	itete	ge
 8008c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c26:	89a3      	ldrhlt	r3, [r4, #12]
 8008c28:	181b      	addge	r3, r3, r0
 8008c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c2e:	bfac      	ite	ge
 8008c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c32:	81a3      	strhlt	r3, [r4, #12]
 8008c34:	bd10      	pop	{r4, pc}

08008c36 <__swrite>:
 8008c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	461f      	mov	r7, r3
 8008c3c:	898b      	ldrh	r3, [r1, #12]
 8008c3e:	05db      	lsls	r3, r3, #23
 8008c40:	4605      	mov	r5, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	4616      	mov	r6, r2
 8008c46:	d505      	bpl.n	8008c54 <__swrite+0x1e>
 8008c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f000 f840 	bl	8008cd4 <_lseek_r>
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	4632      	mov	r2, r6
 8008c62:	463b      	mov	r3, r7
 8008c64:	4628      	mov	r0, r5
 8008c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6a:	f000 b857 	b.w	8008d1c <_write_r>

08008c6e <__sseek>:
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	460c      	mov	r4, r1
 8008c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c76:	f000 f82d 	bl	8008cd4 <_lseek_r>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	bf15      	itete	ne
 8008c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c8a:	81a3      	strheq	r3, [r4, #12]
 8008c8c:	bf18      	it	ne
 8008c8e:	81a3      	strhne	r3, [r4, #12]
 8008c90:	bd10      	pop	{r4, pc}

08008c92 <__sclose>:
 8008c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c96:	f000 b80d 	b.w	8008cb4 <_close_r>

08008c9a <memset>:
 8008c9a:	4402      	add	r2, r0
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d100      	bne.n	8008ca4 <memset+0xa>
 8008ca2:	4770      	bx	lr
 8008ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca8:	e7f9      	b.n	8008c9e <memset+0x4>
	...

08008cac <_localeconv_r>:
 8008cac:	4800      	ldr	r0, [pc, #0]	; (8008cb0 <_localeconv_r+0x4>)
 8008cae:	4770      	bx	lr
 8008cb0:	2000016c 	.word	0x2000016c

08008cb4 <_close_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d06      	ldr	r5, [pc, #24]	; (8008cd0 <_close_r+0x1c>)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4604      	mov	r4, r0
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	602b      	str	r3, [r5, #0]
 8008cc0:	f7f9 fa3f 	bl	8002142 <_close>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_close_r+0x1a>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_close_r+0x1a>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20004e60 	.word	0x20004e60

08008cd4 <_lseek_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d07      	ldr	r5, [pc, #28]	; (8008cf4 <_lseek_r+0x20>)
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4608      	mov	r0, r1
 8008cdc:	4611      	mov	r1, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f7f9 fa54 	bl	8002190 <_lseek>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_lseek_r+0x1e>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_lseek_r+0x1e>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	20004e60 	.word	0x20004e60

08008cf8 <_read_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d07      	ldr	r5, [pc, #28]	; (8008d18 <_read_r+0x20>)
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	4608      	mov	r0, r1
 8008d00:	4611      	mov	r1, r2
 8008d02:	2200      	movs	r2, #0
 8008d04:	602a      	str	r2, [r5, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f7f9 f9e2 	bl	80020d0 <_read>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_read_r+0x1e>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_read_r+0x1e>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20004e60 	.word	0x20004e60

08008d1c <_write_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d07      	ldr	r5, [pc, #28]	; (8008d3c <_write_r+0x20>)
 8008d20:	4604      	mov	r4, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	602a      	str	r2, [r5, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f9 f9ed 	bl	800210a <_write>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_write_r+0x1e>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_write_r+0x1e>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	20004e60 	.word	0x20004e60

08008d40 <__errno>:
 8008d40:	4b01      	ldr	r3, [pc, #4]	; (8008d48 <__errno+0x8>)
 8008d42:	6818      	ldr	r0, [r3, #0]
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	20000078 	.word	0x20000078

08008d4c <__libc_init_array>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	4d0d      	ldr	r5, [pc, #52]	; (8008d84 <__libc_init_array+0x38>)
 8008d50:	4c0d      	ldr	r4, [pc, #52]	; (8008d88 <__libc_init_array+0x3c>)
 8008d52:	1b64      	subs	r4, r4, r5
 8008d54:	10a4      	asrs	r4, r4, #2
 8008d56:	2600      	movs	r6, #0
 8008d58:	42a6      	cmp	r6, r4
 8008d5a:	d109      	bne.n	8008d70 <__libc_init_array+0x24>
 8008d5c:	4d0b      	ldr	r5, [pc, #44]	; (8008d8c <__libc_init_array+0x40>)
 8008d5e:	4c0c      	ldr	r4, [pc, #48]	; (8008d90 <__libc_init_array+0x44>)
 8008d60:	f003 fbd6 	bl	800c510 <_init>
 8008d64:	1b64      	subs	r4, r4, r5
 8008d66:	10a4      	asrs	r4, r4, #2
 8008d68:	2600      	movs	r6, #0
 8008d6a:	42a6      	cmp	r6, r4
 8008d6c:	d105      	bne.n	8008d7a <__libc_init_array+0x2e>
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d74:	4798      	blx	r3
 8008d76:	3601      	adds	r6, #1
 8008d78:	e7ee      	b.n	8008d58 <__libc_init_array+0xc>
 8008d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7e:	4798      	blx	r3
 8008d80:	3601      	adds	r6, #1
 8008d82:	e7f2      	b.n	8008d6a <__libc_init_array+0x1e>
 8008d84:	0800cb48 	.word	0x0800cb48
 8008d88:	0800cb48 	.word	0x0800cb48
 8008d8c:	0800cb48 	.word	0x0800cb48
 8008d90:	0800cb4c 	.word	0x0800cb4c

08008d94 <__retarget_lock_init_recursive>:
 8008d94:	4770      	bx	lr

08008d96 <__retarget_lock_acquire_recursive>:
 8008d96:	4770      	bx	lr

08008d98 <__retarget_lock_release_recursive>:
 8008d98:	4770      	bx	lr

08008d9a <memcpy>:
 8008d9a:	440a      	add	r2, r1
 8008d9c:	4291      	cmp	r1, r2
 8008d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008da2:	d100      	bne.n	8008da6 <memcpy+0xc>
 8008da4:	4770      	bx	lr
 8008da6:	b510      	push	{r4, lr}
 8008da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008db0:	4291      	cmp	r1, r2
 8008db2:	d1f9      	bne.n	8008da8 <memcpy+0xe>
 8008db4:	bd10      	pop	{r4, pc}
	...

08008db8 <nanf>:
 8008db8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008dc0 <nanf+0x8>
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	7fc00000 	.word	0x7fc00000

08008dc4 <quorem>:
 8008dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	6903      	ldr	r3, [r0, #16]
 8008dca:	690c      	ldr	r4, [r1, #16]
 8008dcc:	42a3      	cmp	r3, r4
 8008dce:	4607      	mov	r7, r0
 8008dd0:	db7e      	blt.n	8008ed0 <quorem+0x10c>
 8008dd2:	3c01      	subs	r4, #1
 8008dd4:	f101 0814 	add.w	r8, r1, #20
 8008dd8:	f100 0514 	add.w	r5, r0, #20
 8008ddc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008de6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dea:	3301      	adds	r3, #1
 8008dec:	429a      	cmp	r2, r3
 8008dee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008df2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008df6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dfa:	d331      	bcc.n	8008e60 <quorem+0x9c>
 8008dfc:	f04f 0e00 	mov.w	lr, #0
 8008e00:	4640      	mov	r0, r8
 8008e02:	46ac      	mov	ip, r5
 8008e04:	46f2      	mov	sl, lr
 8008e06:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e0a:	b293      	uxth	r3, r2
 8008e0c:	fb06 e303 	mla	r3, r6, r3, lr
 8008e10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e14:	0c1a      	lsrs	r2, r3, #16
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	ebaa 0303 	sub.w	r3, sl, r3
 8008e1c:	f8dc a000 	ldr.w	sl, [ip]
 8008e20:	fa13 f38a 	uxtah	r3, r3, sl
 8008e24:	fb06 220e 	mla	r2, r6, lr, r2
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	9b00      	ldr	r3, [sp, #0]
 8008e2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e30:	b292      	uxth	r2, r2
 8008e32:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e3a:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e3e:	4581      	cmp	r9, r0
 8008e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e44:	f84c 3b04 	str.w	r3, [ip], #4
 8008e48:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e4c:	d2db      	bcs.n	8008e06 <quorem+0x42>
 8008e4e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e52:	b92b      	cbnz	r3, 8008e60 <quorem+0x9c>
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	3b04      	subs	r3, #4
 8008e58:	429d      	cmp	r5, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	d32c      	bcc.n	8008eb8 <quorem+0xf4>
 8008e5e:	613c      	str	r4, [r7, #16]
 8008e60:	4638      	mov	r0, r7
 8008e62:	f001 f9f1 	bl	800a248 <__mcmp>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	db22      	blt.n	8008eb0 <quorem+0xec>
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e74:	f8d1 c000 	ldr.w	ip, [r1]
 8008e78:	b293      	uxth	r3, r2
 8008e7a:	1ac3      	subs	r3, r0, r3
 8008e7c:	0c12      	lsrs	r2, r2, #16
 8008e7e:	fa13 f38c 	uxtah	r3, r3, ip
 8008e82:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e90:	45c1      	cmp	r9, r8
 8008e92:	f841 3b04 	str.w	r3, [r1], #4
 8008e96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e9a:	d2e9      	bcs.n	8008e70 <quorem+0xac>
 8008e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ea4:	b922      	cbnz	r2, 8008eb0 <quorem+0xec>
 8008ea6:	3b04      	subs	r3, #4
 8008ea8:	429d      	cmp	r5, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	d30a      	bcc.n	8008ec4 <quorem+0x100>
 8008eae:	613c      	str	r4, [r7, #16]
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	b003      	add	sp, #12
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb8:	6812      	ldr	r2, [r2, #0]
 8008eba:	3b04      	subs	r3, #4
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	d1ce      	bne.n	8008e5e <quorem+0x9a>
 8008ec0:	3c01      	subs	r4, #1
 8008ec2:	e7c9      	b.n	8008e58 <quorem+0x94>
 8008ec4:	6812      	ldr	r2, [r2, #0]
 8008ec6:	3b04      	subs	r3, #4
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	d1f0      	bne.n	8008eae <quorem+0xea>
 8008ecc:	3c01      	subs	r4, #1
 8008ece:	e7eb      	b.n	8008ea8 <quorem+0xe4>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7ee      	b.n	8008eb2 <quorem+0xee>
 8008ed4:	0000      	movs	r0, r0
	...

08008ed8 <_dtoa_r>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ed2d 8b04 	vpush	{d8-d9}
 8008ee0:	69c5      	ldr	r5, [r0, #28]
 8008ee2:	b093      	sub	sp, #76	; 0x4c
 8008ee4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ee8:	ec57 6b10 	vmov	r6, r7, d0
 8008eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ef0:	9107      	str	r1, [sp, #28]
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef8:	b975      	cbnz	r5, 8008f18 <_dtoa_r+0x40>
 8008efa:	2010      	movs	r0, #16
 8008efc:	f000 fe2a 	bl	8009b54 <malloc>
 8008f00:	4602      	mov	r2, r0
 8008f02:	61e0      	str	r0, [r4, #28]
 8008f04:	b920      	cbnz	r0, 8008f10 <_dtoa_r+0x38>
 8008f06:	4bae      	ldr	r3, [pc, #696]	; (80091c0 <_dtoa_r+0x2e8>)
 8008f08:	21ef      	movs	r1, #239	; 0xef
 8008f0a:	48ae      	ldr	r0, [pc, #696]	; (80091c4 <_dtoa_r+0x2ec>)
 8008f0c:	f002 fc64 	bl	800b7d8 <__assert_func>
 8008f10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f14:	6005      	str	r5, [r0, #0]
 8008f16:	60c5      	str	r5, [r0, #12]
 8008f18:	69e3      	ldr	r3, [r4, #28]
 8008f1a:	6819      	ldr	r1, [r3, #0]
 8008f1c:	b151      	cbz	r1, 8008f34 <_dtoa_r+0x5c>
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	604a      	str	r2, [r1, #4]
 8008f22:	2301      	movs	r3, #1
 8008f24:	4093      	lsls	r3, r2
 8008f26:	608b      	str	r3, [r1, #8]
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 ff07 	bl	8009d3c <_Bfree>
 8008f2e:	69e3      	ldr	r3, [r4, #28]
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	1e3b      	subs	r3, r7, #0
 8008f36:	bfbb      	ittet	lt
 8008f38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f3c:	9303      	strlt	r3, [sp, #12]
 8008f3e:	2300      	movge	r3, #0
 8008f40:	2201      	movlt	r2, #1
 8008f42:	bfac      	ite	ge
 8008f44:	f8c8 3000 	strge.w	r3, [r8]
 8008f48:	f8c8 2000 	strlt.w	r2, [r8]
 8008f4c:	4b9e      	ldr	r3, [pc, #632]	; (80091c8 <_dtoa_r+0x2f0>)
 8008f4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f52:	ea33 0308 	bics.w	r3, r3, r8
 8008f56:	d11b      	bne.n	8008f90 <_dtoa_r+0xb8>
 8008f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f64:	4333      	orrs	r3, r6
 8008f66:	f000 8593 	beq.w	8009a90 <_dtoa_r+0xbb8>
 8008f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f6c:	b963      	cbnz	r3, 8008f88 <_dtoa_r+0xb0>
 8008f6e:	4b97      	ldr	r3, [pc, #604]	; (80091cc <_dtoa_r+0x2f4>)
 8008f70:	e027      	b.n	8008fc2 <_dtoa_r+0xea>
 8008f72:	4b97      	ldr	r3, [pc, #604]	; (80091d0 <_dtoa_r+0x2f8>)
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	3308      	adds	r3, #8
 8008f78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	9800      	ldr	r0, [sp, #0]
 8008f7e:	b013      	add	sp, #76	; 0x4c
 8008f80:	ecbd 8b04 	vpop	{d8-d9}
 8008f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f88:	4b90      	ldr	r3, [pc, #576]	; (80091cc <_dtoa_r+0x2f4>)
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	3303      	adds	r3, #3
 8008f8e:	e7f3      	b.n	8008f78 <_dtoa_r+0xa0>
 8008f90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	ec51 0b17 	vmov	r0, r1, d7
 8008f9a:	eeb0 8a47 	vmov.f32	s16, s14
 8008f9e:	eef0 8a67 	vmov.f32	s17, s15
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f7f7 fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fa8:	4681      	mov	r9, r0
 8008faa:	b160      	cbz	r0, 8008fc6 <_dtoa_r+0xee>
 8008fac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fae:	2301      	movs	r3, #1
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8568 	beq.w	8009a8a <_dtoa_r+0xbb2>
 8008fba:	4b86      	ldr	r3, [pc, #536]	; (80091d4 <_dtoa_r+0x2fc>)
 8008fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	e7da      	b.n	8008f7c <_dtoa_r+0xa4>
 8008fc6:	aa10      	add	r2, sp, #64	; 0x40
 8008fc8:	a911      	add	r1, sp, #68	; 0x44
 8008fca:	4620      	mov	r0, r4
 8008fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8008fd0:	eef0 0a68 	vmov.f32	s1, s17
 8008fd4:	f001 fa4e 	bl	800a474 <__d2b>
 8008fd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fdc:	4682      	mov	sl, r0
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	d07f      	beq.n	80090e2 <_dtoa_r+0x20a>
 8008fe2:	ee18 3a90 	vmov	r3, s17
 8008fe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008fee:	ec51 0b18 	vmov	r0, r1, d8
 8008ff2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ff6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ffa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ffe:	4619      	mov	r1, r3
 8009000:	2200      	movs	r2, #0
 8009002:	4b75      	ldr	r3, [pc, #468]	; (80091d8 <_dtoa_r+0x300>)
 8009004:	f7f7 f948 	bl	8000298 <__aeabi_dsub>
 8009008:	a367      	add	r3, pc, #412	; (adr r3, 80091a8 <_dtoa_r+0x2d0>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 fafb 	bl	8000608 <__aeabi_dmul>
 8009012:	a367      	add	r3, pc, #412	; (adr r3, 80091b0 <_dtoa_r+0x2d8>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 f940 	bl	800029c <__adddf3>
 800901c:	4606      	mov	r6, r0
 800901e:	4628      	mov	r0, r5
 8009020:	460f      	mov	r7, r1
 8009022:	f7f7 fa87 	bl	8000534 <__aeabi_i2d>
 8009026:	a364      	add	r3, pc, #400	; (adr r3, 80091b8 <_dtoa_r+0x2e0>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 faec 	bl	8000608 <__aeabi_dmul>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 f930 	bl	800029c <__adddf3>
 800903c:	4606      	mov	r6, r0
 800903e:	460f      	mov	r7, r1
 8009040:	f7f7 fd92 	bl	8000b68 <__aeabi_d2iz>
 8009044:	2200      	movs	r2, #0
 8009046:	4683      	mov	fp, r0
 8009048:	2300      	movs	r3, #0
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 fd4d 	bl	8000aec <__aeabi_dcmplt>
 8009052:	b148      	cbz	r0, 8009068 <_dtoa_r+0x190>
 8009054:	4658      	mov	r0, fp
 8009056:	f7f7 fa6d 	bl	8000534 <__aeabi_i2d>
 800905a:	4632      	mov	r2, r6
 800905c:	463b      	mov	r3, r7
 800905e:	f7f7 fd3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009062:	b908      	cbnz	r0, 8009068 <_dtoa_r+0x190>
 8009064:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009068:	f1bb 0f16 	cmp.w	fp, #22
 800906c:	d857      	bhi.n	800911e <_dtoa_r+0x246>
 800906e:	4b5b      	ldr	r3, [pc, #364]	; (80091dc <_dtoa_r+0x304>)
 8009070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	ec51 0b18 	vmov	r0, r1, d8
 800907c:	f7f7 fd36 	bl	8000aec <__aeabi_dcmplt>
 8009080:	2800      	cmp	r0, #0
 8009082:	d04e      	beq.n	8009122 <_dtoa_r+0x24a>
 8009084:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009088:	2300      	movs	r3, #0
 800908a:	930c      	str	r3, [sp, #48]	; 0x30
 800908c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800908e:	1b5b      	subs	r3, r3, r5
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	bf45      	ittet	mi
 8009094:	f1c3 0301 	rsbmi	r3, r3, #1
 8009098:	9305      	strmi	r3, [sp, #20]
 800909a:	2300      	movpl	r3, #0
 800909c:	2300      	movmi	r3, #0
 800909e:	9206      	str	r2, [sp, #24]
 80090a0:	bf54      	ite	pl
 80090a2:	9305      	strpl	r3, [sp, #20]
 80090a4:	9306      	strmi	r3, [sp, #24]
 80090a6:	f1bb 0f00 	cmp.w	fp, #0
 80090aa:	db3c      	blt.n	8009126 <_dtoa_r+0x24e>
 80090ac:	9b06      	ldr	r3, [sp, #24]
 80090ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80090b2:	445b      	add	r3, fp
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9308      	str	r3, [sp, #32]
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b09      	cmp	r3, #9
 80090be:	d868      	bhi.n	8009192 <_dtoa_r+0x2ba>
 80090c0:	2b05      	cmp	r3, #5
 80090c2:	bfc4      	itt	gt
 80090c4:	3b04      	subgt	r3, #4
 80090c6:	9307      	strgt	r3, [sp, #28]
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	f1a3 0302 	sub.w	r3, r3, #2
 80090ce:	bfcc      	ite	gt
 80090d0:	2500      	movgt	r5, #0
 80090d2:	2501      	movle	r5, #1
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	f200 8085 	bhi.w	80091e4 <_dtoa_r+0x30c>
 80090da:	e8df f003 	tbb	[pc, r3]
 80090de:	3b2e      	.short	0x3b2e
 80090e0:	5839      	.short	0x5839
 80090e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80090e6:	441d      	add	r5, r3
 80090e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	bfc1      	itttt	gt
 80090f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80090f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80090fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009100:	bfd6      	itet	le
 8009102:	f1c3 0320 	rsble	r3, r3, #32
 8009106:	ea48 0003 	orrgt.w	r0, r8, r3
 800910a:	fa06 f003 	lslle.w	r0, r6, r3
 800910e:	f7f7 fa01 	bl	8000514 <__aeabi_ui2d>
 8009112:	2201      	movs	r2, #1
 8009114:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009118:	3d01      	subs	r5, #1
 800911a:	920e      	str	r2, [sp, #56]	; 0x38
 800911c:	e76f      	b.n	8008ffe <_dtoa_r+0x126>
 800911e:	2301      	movs	r3, #1
 8009120:	e7b3      	b.n	800908a <_dtoa_r+0x1b2>
 8009122:	900c      	str	r0, [sp, #48]	; 0x30
 8009124:	e7b2      	b.n	800908c <_dtoa_r+0x1b4>
 8009126:	9b05      	ldr	r3, [sp, #20]
 8009128:	eba3 030b 	sub.w	r3, r3, fp
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	f1cb 0300 	rsb	r3, fp, #0
 8009132:	9308      	str	r3, [sp, #32]
 8009134:	2300      	movs	r3, #0
 8009136:	930b      	str	r3, [sp, #44]	; 0x2c
 8009138:	e7bf      	b.n	80090ba <_dtoa_r+0x1e2>
 800913a:	2300      	movs	r3, #0
 800913c:	9309      	str	r3, [sp, #36]	; 0x24
 800913e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009140:	2b00      	cmp	r3, #0
 8009142:	dc52      	bgt.n	80091ea <_dtoa_r+0x312>
 8009144:	2301      	movs	r3, #1
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	461a      	mov	r2, r3
 800914c:	920a      	str	r2, [sp, #40]	; 0x28
 800914e:	e00b      	b.n	8009168 <_dtoa_r+0x290>
 8009150:	2301      	movs	r3, #1
 8009152:	e7f3      	b.n	800913c <_dtoa_r+0x264>
 8009154:	2300      	movs	r3, #0
 8009156:	9309      	str	r3, [sp, #36]	; 0x24
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	445b      	add	r3, fp
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	3301      	adds	r3, #1
 8009160:	2b01      	cmp	r3, #1
 8009162:	9304      	str	r3, [sp, #16]
 8009164:	bfb8      	it	lt
 8009166:	2301      	movlt	r3, #1
 8009168:	69e0      	ldr	r0, [r4, #28]
 800916a:	2100      	movs	r1, #0
 800916c:	2204      	movs	r2, #4
 800916e:	f102 0614 	add.w	r6, r2, #20
 8009172:	429e      	cmp	r6, r3
 8009174:	d93d      	bls.n	80091f2 <_dtoa_r+0x31a>
 8009176:	6041      	str	r1, [r0, #4]
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fd9f 	bl	8009cbc <_Balloc>
 800917e:	9000      	str	r0, [sp, #0]
 8009180:	2800      	cmp	r0, #0
 8009182:	d139      	bne.n	80091f8 <_dtoa_r+0x320>
 8009184:	4b16      	ldr	r3, [pc, #88]	; (80091e0 <_dtoa_r+0x308>)
 8009186:	4602      	mov	r2, r0
 8009188:	f240 11af 	movw	r1, #431	; 0x1af
 800918c:	e6bd      	b.n	8008f0a <_dtoa_r+0x32>
 800918e:	2301      	movs	r3, #1
 8009190:	e7e1      	b.n	8009156 <_dtoa_r+0x27e>
 8009192:	2501      	movs	r5, #1
 8009194:	2300      	movs	r3, #0
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	9509      	str	r5, [sp, #36]	; 0x24
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	2200      	movs	r2, #0
 80091a4:	2312      	movs	r3, #18
 80091a6:	e7d1      	b.n	800914c <_dtoa_r+0x274>
 80091a8:	636f4361 	.word	0x636f4361
 80091ac:	3fd287a7 	.word	0x3fd287a7
 80091b0:	8b60c8b3 	.word	0x8b60c8b3
 80091b4:	3fc68a28 	.word	0x3fc68a28
 80091b8:	509f79fb 	.word	0x509f79fb
 80091bc:	3fd34413 	.word	0x3fd34413
 80091c0:	0800c75e 	.word	0x0800c75e
 80091c4:	0800c775 	.word	0x0800c775
 80091c8:	7ff00000 	.word	0x7ff00000
 80091cc:	0800c75a 	.word	0x0800c75a
 80091d0:	0800c751 	.word	0x0800c751
 80091d4:	0800c729 	.word	0x0800c729
 80091d8:	3ff80000 	.word	0x3ff80000
 80091dc:	0800c860 	.word	0x0800c860
 80091e0:	0800c7cd 	.word	0x0800c7cd
 80091e4:	2301      	movs	r3, #1
 80091e6:	9309      	str	r3, [sp, #36]	; 0x24
 80091e8:	e7d7      	b.n	800919a <_dtoa_r+0x2c2>
 80091ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	e7ba      	b.n	8009168 <_dtoa_r+0x290>
 80091f2:	3101      	adds	r1, #1
 80091f4:	0052      	lsls	r2, r2, #1
 80091f6:	e7ba      	b.n	800916e <_dtoa_r+0x296>
 80091f8:	69e3      	ldr	r3, [r4, #28]
 80091fa:	9a00      	ldr	r2, [sp, #0]
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	2b0e      	cmp	r3, #14
 8009202:	f200 80a8 	bhi.w	8009356 <_dtoa_r+0x47e>
 8009206:	2d00      	cmp	r5, #0
 8009208:	f000 80a5 	beq.w	8009356 <_dtoa_r+0x47e>
 800920c:	f1bb 0f00 	cmp.w	fp, #0
 8009210:	dd38      	ble.n	8009284 <_dtoa_r+0x3ac>
 8009212:	4bc0      	ldr	r3, [pc, #768]	; (8009514 <_dtoa_r+0x63c>)
 8009214:	f00b 020f 	and.w	r2, fp, #15
 8009218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009220:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009224:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009228:	d019      	beq.n	800925e <_dtoa_r+0x386>
 800922a:	4bbb      	ldr	r3, [pc, #748]	; (8009518 <_dtoa_r+0x640>)
 800922c:	ec51 0b18 	vmov	r0, r1, d8
 8009230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009234:	f7f7 fb12 	bl	800085c <__aeabi_ddiv>
 8009238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800923c:	f008 080f 	and.w	r8, r8, #15
 8009240:	2503      	movs	r5, #3
 8009242:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009518 <_dtoa_r+0x640>
 8009246:	f1b8 0f00 	cmp.w	r8, #0
 800924a:	d10a      	bne.n	8009262 <_dtoa_r+0x38a>
 800924c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009250:	4632      	mov	r2, r6
 8009252:	463b      	mov	r3, r7
 8009254:	f7f7 fb02 	bl	800085c <__aeabi_ddiv>
 8009258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800925c:	e02b      	b.n	80092b6 <_dtoa_r+0x3de>
 800925e:	2502      	movs	r5, #2
 8009260:	e7ef      	b.n	8009242 <_dtoa_r+0x36a>
 8009262:	f018 0f01 	tst.w	r8, #1
 8009266:	d008      	beq.n	800927a <_dtoa_r+0x3a2>
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009270:	f7f7 f9ca 	bl	8000608 <__aeabi_dmul>
 8009274:	3501      	adds	r5, #1
 8009276:	4606      	mov	r6, r0
 8009278:	460f      	mov	r7, r1
 800927a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800927e:	f109 0908 	add.w	r9, r9, #8
 8009282:	e7e0      	b.n	8009246 <_dtoa_r+0x36e>
 8009284:	f000 809f 	beq.w	80093c6 <_dtoa_r+0x4ee>
 8009288:	f1cb 0600 	rsb	r6, fp, #0
 800928c:	4ba1      	ldr	r3, [pc, #644]	; (8009514 <_dtoa_r+0x63c>)
 800928e:	4fa2      	ldr	r7, [pc, #648]	; (8009518 <_dtoa_r+0x640>)
 8009290:	f006 020f 	and.w	r2, r6, #15
 8009294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	ec51 0b18 	vmov	r0, r1, d8
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a8:	1136      	asrs	r6, r6, #4
 80092aa:	2300      	movs	r3, #0
 80092ac:	2502      	movs	r5, #2
 80092ae:	2e00      	cmp	r6, #0
 80092b0:	d17e      	bne.n	80093b0 <_dtoa_r+0x4d8>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1d0      	bne.n	8009258 <_dtoa_r+0x380>
 80092b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8084 	beq.w	80093ca <_dtoa_r+0x4f2>
 80092c2:	4b96      	ldr	r3, [pc, #600]	; (800951c <_dtoa_r+0x644>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fc0f 	bl	8000aec <__aeabi_dcmplt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d07b      	beq.n	80093ca <_dtoa_r+0x4f2>
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d078      	beq.n	80093ca <_dtoa_r+0x4f2>
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dd39      	ble.n	8009352 <_dtoa_r+0x47a>
 80092de:	4b90      	ldr	r3, [pc, #576]	; (8009520 <_dtoa_r+0x648>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f7 f98f 	bl	8000608 <__aeabi_dmul>
 80092ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ee:	9e01      	ldr	r6, [sp, #4]
 80092f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80092f4:	3501      	adds	r5, #1
 80092f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80092fa:	4628      	mov	r0, r5
 80092fc:	f7f7 f91a 	bl	8000534 <__aeabi_i2d>
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	f7f7 f980 	bl	8000608 <__aeabi_dmul>
 8009308:	4b86      	ldr	r3, [pc, #536]	; (8009524 <_dtoa_r+0x64c>)
 800930a:	2200      	movs	r2, #0
 800930c:	f7f6 ffc6 	bl	800029c <__adddf3>
 8009310:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	2e00      	cmp	r6, #0
 800931c:	d158      	bne.n	80093d0 <_dtoa_r+0x4f8>
 800931e:	4b82      	ldr	r3, [pc, #520]	; (8009528 <_dtoa_r+0x650>)
 8009320:	2200      	movs	r2, #0
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	f7f6 ffb7 	bl	8000298 <__aeabi_dsub>
 800932a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800932e:	4680      	mov	r8, r0
 8009330:	4689      	mov	r9, r1
 8009332:	f7f7 fbf9 	bl	8000b28 <__aeabi_dcmpgt>
 8009336:	2800      	cmp	r0, #0
 8009338:	f040 8296 	bne.w	8009868 <_dtoa_r+0x990>
 800933c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009340:	4640      	mov	r0, r8
 8009342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009346:	4649      	mov	r1, r9
 8009348:	f7f7 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	f040 8289 	bne.w	8009864 <_dtoa_r+0x98c>
 8009352:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009358:	2b00      	cmp	r3, #0
 800935a:	f2c0 814e 	blt.w	80095fa <_dtoa_r+0x722>
 800935e:	f1bb 0f0e 	cmp.w	fp, #14
 8009362:	f300 814a 	bgt.w	80095fa <_dtoa_r+0x722>
 8009366:	4b6b      	ldr	r3, [pc, #428]	; (8009514 <_dtoa_r+0x63c>)
 8009368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800936c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	f280 80dc 	bge.w	8009530 <_dtoa_r+0x658>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f300 80d8 	bgt.w	8009530 <_dtoa_r+0x658>
 8009380:	f040 826f 	bne.w	8009862 <_dtoa_r+0x98a>
 8009384:	4b68      	ldr	r3, [pc, #416]	; (8009528 <_dtoa_r+0x650>)
 8009386:	2200      	movs	r2, #0
 8009388:	4640      	mov	r0, r8
 800938a:	4649      	mov	r1, r9
 800938c:	f7f7 f93c 	bl	8000608 <__aeabi_dmul>
 8009390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009394:	f7f7 fbbe 	bl	8000b14 <__aeabi_dcmpge>
 8009398:	9e04      	ldr	r6, [sp, #16]
 800939a:	4637      	mov	r7, r6
 800939c:	2800      	cmp	r0, #0
 800939e:	f040 8245 	bne.w	800982c <_dtoa_r+0x954>
 80093a2:	9d00      	ldr	r5, [sp, #0]
 80093a4:	2331      	movs	r3, #49	; 0x31
 80093a6:	f805 3b01 	strb.w	r3, [r5], #1
 80093aa:	f10b 0b01 	add.w	fp, fp, #1
 80093ae:	e241      	b.n	8009834 <_dtoa_r+0x95c>
 80093b0:	07f2      	lsls	r2, r6, #31
 80093b2:	d505      	bpl.n	80093c0 <_dtoa_r+0x4e8>
 80093b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	3501      	adds	r5, #1
 80093be:	2301      	movs	r3, #1
 80093c0:	1076      	asrs	r6, r6, #1
 80093c2:	3708      	adds	r7, #8
 80093c4:	e773      	b.n	80092ae <_dtoa_r+0x3d6>
 80093c6:	2502      	movs	r5, #2
 80093c8:	e775      	b.n	80092b6 <_dtoa_r+0x3de>
 80093ca:	9e04      	ldr	r6, [sp, #16]
 80093cc:	465f      	mov	r7, fp
 80093ce:	e792      	b.n	80092f6 <_dtoa_r+0x41e>
 80093d0:	9900      	ldr	r1, [sp, #0]
 80093d2:	4b50      	ldr	r3, [pc, #320]	; (8009514 <_dtoa_r+0x63c>)
 80093d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093d8:	4431      	add	r1, r6
 80093da:	9102      	str	r1, [sp, #8]
 80093dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093de:	eeb0 9a47 	vmov.f32	s18, s14
 80093e2:	eef0 9a67 	vmov.f32	s19, s15
 80093e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d044      	beq.n	800947c <_dtoa_r+0x5a4>
 80093f2:	494e      	ldr	r1, [pc, #312]	; (800952c <_dtoa_r+0x654>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f7 fa31 	bl	800085c <__aeabi_ddiv>
 80093fa:	ec53 2b19 	vmov	r2, r3, d9
 80093fe:	f7f6 ff4b 	bl	8000298 <__aeabi_dsub>
 8009402:	9d00      	ldr	r5, [sp, #0]
 8009404:	ec41 0b19 	vmov	d9, r0, r1
 8009408:	4649      	mov	r1, r9
 800940a:	4640      	mov	r0, r8
 800940c:	f7f7 fbac 	bl	8000b68 <__aeabi_d2iz>
 8009410:	4606      	mov	r6, r0
 8009412:	f7f7 f88f 	bl	8000534 <__aeabi_i2d>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4640      	mov	r0, r8
 800941c:	4649      	mov	r1, r9
 800941e:	f7f6 ff3b 	bl	8000298 <__aeabi_dsub>
 8009422:	3630      	adds	r6, #48	; 0x30
 8009424:	f805 6b01 	strb.w	r6, [r5], #1
 8009428:	ec53 2b19 	vmov	r2, r3, d9
 800942c:	4680      	mov	r8, r0
 800942e:	4689      	mov	r9, r1
 8009430:	f7f7 fb5c 	bl	8000aec <__aeabi_dcmplt>
 8009434:	2800      	cmp	r0, #0
 8009436:	d164      	bne.n	8009502 <_dtoa_r+0x62a>
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	4937      	ldr	r1, [pc, #220]	; (800951c <_dtoa_r+0x644>)
 800943e:	2000      	movs	r0, #0
 8009440:	f7f6 ff2a 	bl	8000298 <__aeabi_dsub>
 8009444:	ec53 2b19 	vmov	r2, r3, d9
 8009448:	f7f7 fb50 	bl	8000aec <__aeabi_dcmplt>
 800944c:	2800      	cmp	r0, #0
 800944e:	f040 80b6 	bne.w	80095be <_dtoa_r+0x6e6>
 8009452:	9b02      	ldr	r3, [sp, #8]
 8009454:	429d      	cmp	r5, r3
 8009456:	f43f af7c 	beq.w	8009352 <_dtoa_r+0x47a>
 800945a:	4b31      	ldr	r3, [pc, #196]	; (8009520 <_dtoa_r+0x648>)
 800945c:	ec51 0b19 	vmov	r0, r1, d9
 8009460:	2200      	movs	r2, #0
 8009462:	f7f7 f8d1 	bl	8000608 <__aeabi_dmul>
 8009466:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <_dtoa_r+0x648>)
 8009468:	ec41 0b19 	vmov	d9, r0, r1
 800946c:	2200      	movs	r2, #0
 800946e:	4640      	mov	r0, r8
 8009470:	4649      	mov	r1, r9
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	4680      	mov	r8, r0
 8009478:	4689      	mov	r9, r1
 800947a:	e7c5      	b.n	8009408 <_dtoa_r+0x530>
 800947c:	ec51 0b17 	vmov	r0, r1, d7
 8009480:	f7f7 f8c2 	bl	8000608 <__aeabi_dmul>
 8009484:	9b02      	ldr	r3, [sp, #8]
 8009486:	9d00      	ldr	r5, [sp, #0]
 8009488:	930f      	str	r3, [sp, #60]	; 0x3c
 800948a:	ec41 0b19 	vmov	d9, r0, r1
 800948e:	4649      	mov	r1, r9
 8009490:	4640      	mov	r0, r8
 8009492:	f7f7 fb69 	bl	8000b68 <__aeabi_d2iz>
 8009496:	4606      	mov	r6, r0
 8009498:	f7f7 f84c 	bl	8000534 <__aeabi_i2d>
 800949c:	3630      	adds	r6, #48	; 0x30
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f6 fef7 	bl	8000298 <__aeabi_dsub>
 80094aa:	f805 6b01 	strb.w	r6, [r5], #1
 80094ae:	9b02      	ldr	r3, [sp, #8]
 80094b0:	429d      	cmp	r5, r3
 80094b2:	4680      	mov	r8, r0
 80094b4:	4689      	mov	r9, r1
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	d124      	bne.n	8009506 <_dtoa_r+0x62e>
 80094bc:	4b1b      	ldr	r3, [pc, #108]	; (800952c <_dtoa_r+0x654>)
 80094be:	ec51 0b19 	vmov	r0, r1, d9
 80094c2:	f7f6 feeb 	bl	800029c <__adddf3>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	f7f7 fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d173      	bne.n	80095be <_dtoa_r+0x6e6>
 80094d6:	ec53 2b19 	vmov	r2, r3, d9
 80094da:	4914      	ldr	r1, [pc, #80]	; (800952c <_dtoa_r+0x654>)
 80094dc:	2000      	movs	r0, #0
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f7f7 faff 	bl	8000aec <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f af2f 	beq.w	8009352 <_dtoa_r+0x47a>
 80094f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094f6:	1e6b      	subs	r3, r5, #1
 80094f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094fe:	2b30      	cmp	r3, #48	; 0x30
 8009500:	d0f8      	beq.n	80094f4 <_dtoa_r+0x61c>
 8009502:	46bb      	mov	fp, r7
 8009504:	e04a      	b.n	800959c <_dtoa_r+0x6c4>
 8009506:	4b06      	ldr	r3, [pc, #24]	; (8009520 <_dtoa_r+0x648>)
 8009508:	f7f7 f87e 	bl	8000608 <__aeabi_dmul>
 800950c:	4680      	mov	r8, r0
 800950e:	4689      	mov	r9, r1
 8009510:	e7bd      	b.n	800948e <_dtoa_r+0x5b6>
 8009512:	bf00      	nop
 8009514:	0800c860 	.word	0x0800c860
 8009518:	0800c838 	.word	0x0800c838
 800951c:	3ff00000 	.word	0x3ff00000
 8009520:	40240000 	.word	0x40240000
 8009524:	401c0000 	.word	0x401c0000
 8009528:	40140000 	.word	0x40140000
 800952c:	3fe00000 	.word	0x3fe00000
 8009530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009534:	9d00      	ldr	r5, [sp, #0]
 8009536:	4642      	mov	r2, r8
 8009538:	464b      	mov	r3, r9
 800953a:	4630      	mov	r0, r6
 800953c:	4639      	mov	r1, r7
 800953e:	f7f7 f98d 	bl	800085c <__aeabi_ddiv>
 8009542:	f7f7 fb11 	bl	8000b68 <__aeabi_d2iz>
 8009546:	9001      	str	r0, [sp, #4]
 8009548:	f7f6 fff4 	bl	8000534 <__aeabi_i2d>
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	f7f7 f85a 	bl	8000608 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f6 fe9c 	bl	8000298 <__aeabi_dsub>
 8009560:	9e01      	ldr	r6, [sp, #4]
 8009562:	9f04      	ldr	r7, [sp, #16]
 8009564:	3630      	adds	r6, #48	; 0x30
 8009566:	f805 6b01 	strb.w	r6, [r5], #1
 800956a:	9e00      	ldr	r6, [sp, #0]
 800956c:	1bae      	subs	r6, r5, r6
 800956e:	42b7      	cmp	r7, r6
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	d134      	bne.n	80095e0 <_dtoa_r+0x708>
 8009576:	f7f6 fe91 	bl	800029c <__adddf3>
 800957a:	4642      	mov	r2, r8
 800957c:	464b      	mov	r3, r9
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	f7f7 fad1 	bl	8000b28 <__aeabi_dcmpgt>
 8009586:	b9c8      	cbnz	r0, 80095bc <_dtoa_r+0x6e4>
 8009588:	4642      	mov	r2, r8
 800958a:	464b      	mov	r3, r9
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009594:	b110      	cbz	r0, 800959c <_dtoa_r+0x6c4>
 8009596:	9b01      	ldr	r3, [sp, #4]
 8009598:	07db      	lsls	r3, r3, #31
 800959a:	d40f      	bmi.n	80095bc <_dtoa_r+0x6e4>
 800959c:	4651      	mov	r1, sl
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fbcc 	bl	8009d3c <_Bfree>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095a8:	702b      	strb	r3, [r5, #0]
 80095aa:	f10b 0301 	add.w	r3, fp, #1
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f43f ace2 	beq.w	8008f7c <_dtoa_r+0xa4>
 80095b8:	601d      	str	r5, [r3, #0]
 80095ba:	e4df      	b.n	8008f7c <_dtoa_r+0xa4>
 80095bc:	465f      	mov	r7, fp
 80095be:	462b      	mov	r3, r5
 80095c0:	461d      	mov	r5, r3
 80095c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095c6:	2a39      	cmp	r2, #57	; 0x39
 80095c8:	d106      	bne.n	80095d8 <_dtoa_r+0x700>
 80095ca:	9a00      	ldr	r2, [sp, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d1f7      	bne.n	80095c0 <_dtoa_r+0x6e8>
 80095d0:	9900      	ldr	r1, [sp, #0]
 80095d2:	2230      	movs	r2, #48	; 0x30
 80095d4:	3701      	adds	r7, #1
 80095d6:	700a      	strb	r2, [r1, #0]
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	3201      	adds	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
 80095de:	e790      	b.n	8009502 <_dtoa_r+0x62a>
 80095e0:	4ba3      	ldr	r3, [pc, #652]	; (8009870 <_dtoa_r+0x998>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	f7f7 f810 	bl	8000608 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f7 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d09e      	beq.n	8009536 <_dtoa_r+0x65e>
 80095f8:	e7d0      	b.n	800959c <_dtoa_r+0x6c4>
 80095fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f000 80ca 	beq.w	8009796 <_dtoa_r+0x8be>
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	2a01      	cmp	r2, #1
 8009606:	f300 80ad 	bgt.w	8009764 <_dtoa_r+0x88c>
 800960a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800960c:	2a00      	cmp	r2, #0
 800960e:	f000 80a5 	beq.w	800975c <_dtoa_r+0x884>
 8009612:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009616:	9e08      	ldr	r6, [sp, #32]
 8009618:	9d05      	ldr	r5, [sp, #20]
 800961a:	9a05      	ldr	r2, [sp, #20]
 800961c:	441a      	add	r2, r3
 800961e:	9205      	str	r2, [sp, #20]
 8009620:	9a06      	ldr	r2, [sp, #24]
 8009622:	2101      	movs	r1, #1
 8009624:	441a      	add	r2, r3
 8009626:	4620      	mov	r0, r4
 8009628:	9206      	str	r2, [sp, #24]
 800962a:	f000 fc87 	bl	8009f3c <__i2b>
 800962e:	4607      	mov	r7, r0
 8009630:	b165      	cbz	r5, 800964c <_dtoa_r+0x774>
 8009632:	9b06      	ldr	r3, [sp, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	dd09      	ble.n	800964c <_dtoa_r+0x774>
 8009638:	42ab      	cmp	r3, r5
 800963a:	9a05      	ldr	r2, [sp, #20]
 800963c:	bfa8      	it	ge
 800963e:	462b      	movge	r3, r5
 8009640:	1ad2      	subs	r2, r2, r3
 8009642:	9205      	str	r2, [sp, #20]
 8009644:	9a06      	ldr	r2, [sp, #24]
 8009646:	1aed      	subs	r5, r5, r3
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	9306      	str	r3, [sp, #24]
 800964c:	9b08      	ldr	r3, [sp, #32]
 800964e:	b1f3      	cbz	r3, 800968e <_dtoa_r+0x7b6>
 8009650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80a3 	beq.w	800979e <_dtoa_r+0x8c6>
 8009658:	2e00      	cmp	r6, #0
 800965a:	dd10      	ble.n	800967e <_dtoa_r+0x7a6>
 800965c:	4639      	mov	r1, r7
 800965e:	4632      	mov	r2, r6
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fd2b 	bl	800a0bc <__pow5mult>
 8009666:	4652      	mov	r2, sl
 8009668:	4601      	mov	r1, r0
 800966a:	4607      	mov	r7, r0
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fc7b 	bl	8009f68 <__multiply>
 8009672:	4651      	mov	r1, sl
 8009674:	4680      	mov	r8, r0
 8009676:	4620      	mov	r0, r4
 8009678:	f000 fb60 	bl	8009d3c <_Bfree>
 800967c:	46c2      	mov	sl, r8
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	1b9a      	subs	r2, r3, r6
 8009682:	d004      	beq.n	800968e <_dtoa_r+0x7b6>
 8009684:	4651      	mov	r1, sl
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fd18 	bl	800a0bc <__pow5mult>
 800968c:	4682      	mov	sl, r0
 800968e:	2101      	movs	r1, #1
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fc53 	bl	8009f3c <__i2b>
 8009696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	4606      	mov	r6, r0
 800969c:	f340 8081 	ble.w	80097a2 <_dtoa_r+0x8ca>
 80096a0:	461a      	mov	r2, r3
 80096a2:	4601      	mov	r1, r0
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fd09 	bl	800a0bc <__pow5mult>
 80096aa:	9b07      	ldr	r3, [sp, #28]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	4606      	mov	r6, r0
 80096b0:	dd7a      	ble.n	80097a8 <_dtoa_r+0x8d0>
 80096b2:	f04f 0800 	mov.w	r8, #0
 80096b6:	6933      	ldr	r3, [r6, #16]
 80096b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096bc:	6918      	ldr	r0, [r3, #16]
 80096be:	f000 fbef 	bl	8009ea0 <__hi0bits>
 80096c2:	f1c0 0020 	rsb	r0, r0, #32
 80096c6:	9b06      	ldr	r3, [sp, #24]
 80096c8:	4418      	add	r0, r3
 80096ca:	f010 001f 	ands.w	r0, r0, #31
 80096ce:	f000 8094 	beq.w	80097fa <_dtoa_r+0x922>
 80096d2:	f1c0 0320 	rsb	r3, r0, #32
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	f340 8085 	ble.w	80097e6 <_dtoa_r+0x90e>
 80096dc:	9b05      	ldr	r3, [sp, #20]
 80096de:	f1c0 001c 	rsb	r0, r0, #28
 80096e2:	4403      	add	r3, r0
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	9b06      	ldr	r3, [sp, #24]
 80096e8:	4403      	add	r3, r0
 80096ea:	4405      	add	r5, r0
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	9b05      	ldr	r3, [sp, #20]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dd05      	ble.n	8009700 <_dtoa_r+0x828>
 80096f4:	4651      	mov	r1, sl
 80096f6:	461a      	mov	r2, r3
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fd39 	bl	800a170 <__lshift>
 80096fe:	4682      	mov	sl, r0
 8009700:	9b06      	ldr	r3, [sp, #24]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dd05      	ble.n	8009712 <_dtoa_r+0x83a>
 8009706:	4631      	mov	r1, r6
 8009708:	461a      	mov	r2, r3
 800970a:	4620      	mov	r0, r4
 800970c:	f000 fd30 	bl	800a170 <__lshift>
 8009710:	4606      	mov	r6, r0
 8009712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009714:	2b00      	cmp	r3, #0
 8009716:	d072      	beq.n	80097fe <_dtoa_r+0x926>
 8009718:	4631      	mov	r1, r6
 800971a:	4650      	mov	r0, sl
 800971c:	f000 fd94 	bl	800a248 <__mcmp>
 8009720:	2800      	cmp	r0, #0
 8009722:	da6c      	bge.n	80097fe <_dtoa_r+0x926>
 8009724:	2300      	movs	r3, #0
 8009726:	4651      	mov	r1, sl
 8009728:	220a      	movs	r2, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f000 fb28 	bl	8009d80 <__multadd>
 8009730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009736:	4682      	mov	sl, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 81b0 	beq.w	8009a9e <_dtoa_r+0xbc6>
 800973e:	2300      	movs	r3, #0
 8009740:	4639      	mov	r1, r7
 8009742:	220a      	movs	r2, #10
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fb1b 	bl	8009d80 <__multadd>
 800974a:	9b01      	ldr	r3, [sp, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	4607      	mov	r7, r0
 8009750:	f300 8096 	bgt.w	8009880 <_dtoa_r+0x9a8>
 8009754:	9b07      	ldr	r3, [sp, #28]
 8009756:	2b02      	cmp	r3, #2
 8009758:	dc59      	bgt.n	800980e <_dtoa_r+0x936>
 800975a:	e091      	b.n	8009880 <_dtoa_r+0x9a8>
 800975c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800975e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009762:	e758      	b.n	8009616 <_dtoa_r+0x73e>
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	1e5e      	subs	r6, r3, #1
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	42b3      	cmp	r3, r6
 800976c:	bfbf      	itttt	lt
 800976e:	9b08      	ldrlt	r3, [sp, #32]
 8009770:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009772:	9608      	strlt	r6, [sp, #32]
 8009774:	1af3      	sublt	r3, r6, r3
 8009776:	bfb4      	ite	lt
 8009778:	18d2      	addlt	r2, r2, r3
 800977a:	1b9e      	subge	r6, r3, r6
 800977c:	9b04      	ldr	r3, [sp, #16]
 800977e:	bfbc      	itt	lt
 8009780:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009782:	2600      	movlt	r6, #0
 8009784:	2b00      	cmp	r3, #0
 8009786:	bfb7      	itett	lt
 8009788:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800978c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009790:	1a9d      	sublt	r5, r3, r2
 8009792:	2300      	movlt	r3, #0
 8009794:	e741      	b.n	800961a <_dtoa_r+0x742>
 8009796:	9e08      	ldr	r6, [sp, #32]
 8009798:	9d05      	ldr	r5, [sp, #20]
 800979a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800979c:	e748      	b.n	8009630 <_dtoa_r+0x758>
 800979e:	9a08      	ldr	r2, [sp, #32]
 80097a0:	e770      	b.n	8009684 <_dtoa_r+0x7ac>
 80097a2:	9b07      	ldr	r3, [sp, #28]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	dc19      	bgt.n	80097dc <_dtoa_r+0x904>
 80097a8:	9b02      	ldr	r3, [sp, #8]
 80097aa:	b9bb      	cbnz	r3, 80097dc <_dtoa_r+0x904>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b2:	b99b      	cbnz	r3, 80097dc <_dtoa_r+0x904>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097ba:	0d1b      	lsrs	r3, r3, #20
 80097bc:	051b      	lsls	r3, r3, #20
 80097be:	b183      	cbz	r3, 80097e2 <_dtoa_r+0x90a>
 80097c0:	9b05      	ldr	r3, [sp, #20]
 80097c2:	3301      	adds	r3, #1
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	9b06      	ldr	r3, [sp, #24]
 80097c8:	3301      	adds	r3, #1
 80097ca:	9306      	str	r3, [sp, #24]
 80097cc:	f04f 0801 	mov.w	r8, #1
 80097d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f47f af6f 	bne.w	80096b6 <_dtoa_r+0x7de>
 80097d8:	2001      	movs	r0, #1
 80097da:	e774      	b.n	80096c6 <_dtoa_r+0x7ee>
 80097dc:	f04f 0800 	mov.w	r8, #0
 80097e0:	e7f6      	b.n	80097d0 <_dtoa_r+0x8f8>
 80097e2:	4698      	mov	r8, r3
 80097e4:	e7f4      	b.n	80097d0 <_dtoa_r+0x8f8>
 80097e6:	d082      	beq.n	80096ee <_dtoa_r+0x816>
 80097e8:	9a05      	ldr	r2, [sp, #20]
 80097ea:	331c      	adds	r3, #28
 80097ec:	441a      	add	r2, r3
 80097ee:	9205      	str	r2, [sp, #20]
 80097f0:	9a06      	ldr	r2, [sp, #24]
 80097f2:	441a      	add	r2, r3
 80097f4:	441d      	add	r5, r3
 80097f6:	9206      	str	r2, [sp, #24]
 80097f8:	e779      	b.n	80096ee <_dtoa_r+0x816>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e7f4      	b.n	80097e8 <_dtoa_r+0x910>
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc37      	bgt.n	8009874 <_dtoa_r+0x99c>
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	2b02      	cmp	r3, #2
 8009808:	dd34      	ble.n	8009874 <_dtoa_r+0x99c>
 800980a:	9b04      	ldr	r3, [sp, #16]
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	b963      	cbnz	r3, 800982c <_dtoa_r+0x954>
 8009812:	4631      	mov	r1, r6
 8009814:	2205      	movs	r2, #5
 8009816:	4620      	mov	r0, r4
 8009818:	f000 fab2 	bl	8009d80 <__multadd>
 800981c:	4601      	mov	r1, r0
 800981e:	4606      	mov	r6, r0
 8009820:	4650      	mov	r0, sl
 8009822:	f000 fd11 	bl	800a248 <__mcmp>
 8009826:	2800      	cmp	r0, #0
 8009828:	f73f adbb 	bgt.w	80093a2 <_dtoa_r+0x4ca>
 800982c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982e:	9d00      	ldr	r5, [sp, #0]
 8009830:	ea6f 0b03 	mvn.w	fp, r3
 8009834:	f04f 0800 	mov.w	r8, #0
 8009838:	4631      	mov	r1, r6
 800983a:	4620      	mov	r0, r4
 800983c:	f000 fa7e 	bl	8009d3c <_Bfree>
 8009840:	2f00      	cmp	r7, #0
 8009842:	f43f aeab 	beq.w	800959c <_dtoa_r+0x6c4>
 8009846:	f1b8 0f00 	cmp.w	r8, #0
 800984a:	d005      	beq.n	8009858 <_dtoa_r+0x980>
 800984c:	45b8      	cmp	r8, r7
 800984e:	d003      	beq.n	8009858 <_dtoa_r+0x980>
 8009850:	4641      	mov	r1, r8
 8009852:	4620      	mov	r0, r4
 8009854:	f000 fa72 	bl	8009d3c <_Bfree>
 8009858:	4639      	mov	r1, r7
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fa6e 	bl	8009d3c <_Bfree>
 8009860:	e69c      	b.n	800959c <_dtoa_r+0x6c4>
 8009862:	2600      	movs	r6, #0
 8009864:	4637      	mov	r7, r6
 8009866:	e7e1      	b.n	800982c <_dtoa_r+0x954>
 8009868:	46bb      	mov	fp, r7
 800986a:	4637      	mov	r7, r6
 800986c:	e599      	b.n	80093a2 <_dtoa_r+0x4ca>
 800986e:	bf00      	nop
 8009870:	40240000 	.word	0x40240000
 8009874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 80c8 	beq.w	8009a0c <_dtoa_r+0xb34>
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	2d00      	cmp	r5, #0
 8009882:	dd05      	ble.n	8009890 <_dtoa_r+0x9b8>
 8009884:	4639      	mov	r1, r7
 8009886:	462a      	mov	r2, r5
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fc71 	bl	800a170 <__lshift>
 800988e:	4607      	mov	r7, r0
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	d05b      	beq.n	800994e <_dtoa_r+0xa76>
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fa0f 	bl	8009cbc <_Balloc>
 800989e:	4605      	mov	r5, r0
 80098a0:	b928      	cbnz	r0, 80098ae <_dtoa_r+0x9d6>
 80098a2:	4b83      	ldr	r3, [pc, #524]	; (8009ab0 <_dtoa_r+0xbd8>)
 80098a4:	4602      	mov	r2, r0
 80098a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80098aa:	f7ff bb2e 	b.w	8008f0a <_dtoa_r+0x32>
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	3202      	adds	r2, #2
 80098b2:	0092      	lsls	r2, r2, #2
 80098b4:	f107 010c 	add.w	r1, r7, #12
 80098b8:	300c      	adds	r0, #12
 80098ba:	f7ff fa6e 	bl	8008d9a <memcpy>
 80098be:	2201      	movs	r2, #1
 80098c0:	4629      	mov	r1, r5
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fc54 	bl	800a170 <__lshift>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098d2:	4413      	add	r3, r2
 80098d4:	9308      	str	r3, [sp, #32]
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	46b8      	mov	r8, r7
 80098de:	9306      	str	r3, [sp, #24]
 80098e0:	4607      	mov	r7, r0
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	4631      	mov	r1, r6
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4650      	mov	r0, sl
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	f7ff fa6a 	bl	8008dc4 <quorem>
 80098f0:	4641      	mov	r1, r8
 80098f2:	9002      	str	r0, [sp, #8]
 80098f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098f8:	4650      	mov	r0, sl
 80098fa:	f000 fca5 	bl	800a248 <__mcmp>
 80098fe:	463a      	mov	r2, r7
 8009900:	9005      	str	r0, [sp, #20]
 8009902:	4631      	mov	r1, r6
 8009904:	4620      	mov	r0, r4
 8009906:	f000 fcbb 	bl	800a280 <__mdiff>
 800990a:	68c2      	ldr	r2, [r0, #12]
 800990c:	4605      	mov	r5, r0
 800990e:	bb02      	cbnz	r2, 8009952 <_dtoa_r+0xa7a>
 8009910:	4601      	mov	r1, r0
 8009912:	4650      	mov	r0, sl
 8009914:	f000 fc98 	bl	800a248 <__mcmp>
 8009918:	4602      	mov	r2, r0
 800991a:	4629      	mov	r1, r5
 800991c:	4620      	mov	r0, r4
 800991e:	9209      	str	r2, [sp, #36]	; 0x24
 8009920:	f000 fa0c 	bl	8009d3c <_Bfree>
 8009924:	9b07      	ldr	r3, [sp, #28]
 8009926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009928:	9d04      	ldr	r5, [sp, #16]
 800992a:	ea43 0102 	orr.w	r1, r3, r2
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	4319      	orrs	r1, r3
 8009932:	d110      	bne.n	8009956 <_dtoa_r+0xa7e>
 8009934:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009938:	d029      	beq.n	800998e <_dtoa_r+0xab6>
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd02      	ble.n	8009946 <_dtoa_r+0xa6e>
 8009940:	9b02      	ldr	r3, [sp, #8]
 8009942:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	f883 9000 	strb.w	r9, [r3]
 800994c:	e774      	b.n	8009838 <_dtoa_r+0x960>
 800994e:	4638      	mov	r0, r7
 8009950:	e7ba      	b.n	80098c8 <_dtoa_r+0x9f0>
 8009952:	2201      	movs	r2, #1
 8009954:	e7e1      	b.n	800991a <_dtoa_r+0xa42>
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	db04      	blt.n	8009966 <_dtoa_r+0xa8e>
 800995c:	9907      	ldr	r1, [sp, #28]
 800995e:	430b      	orrs	r3, r1
 8009960:	9906      	ldr	r1, [sp, #24]
 8009962:	430b      	orrs	r3, r1
 8009964:	d120      	bne.n	80099a8 <_dtoa_r+0xad0>
 8009966:	2a00      	cmp	r2, #0
 8009968:	dded      	ble.n	8009946 <_dtoa_r+0xa6e>
 800996a:	4651      	mov	r1, sl
 800996c:	2201      	movs	r2, #1
 800996e:	4620      	mov	r0, r4
 8009970:	f000 fbfe 	bl	800a170 <__lshift>
 8009974:	4631      	mov	r1, r6
 8009976:	4682      	mov	sl, r0
 8009978:	f000 fc66 	bl	800a248 <__mcmp>
 800997c:	2800      	cmp	r0, #0
 800997e:	dc03      	bgt.n	8009988 <_dtoa_r+0xab0>
 8009980:	d1e1      	bne.n	8009946 <_dtoa_r+0xa6e>
 8009982:	f019 0f01 	tst.w	r9, #1
 8009986:	d0de      	beq.n	8009946 <_dtoa_r+0xa6e>
 8009988:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800998c:	d1d8      	bne.n	8009940 <_dtoa_r+0xa68>
 800998e:	9a01      	ldr	r2, [sp, #4]
 8009990:	2339      	movs	r3, #57	; 0x39
 8009992:	7013      	strb	r3, [r2, #0]
 8009994:	462b      	mov	r3, r5
 8009996:	461d      	mov	r5, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800999e:	2a39      	cmp	r2, #57	; 0x39
 80099a0:	d06c      	beq.n	8009a7c <_dtoa_r+0xba4>
 80099a2:	3201      	adds	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e747      	b.n	8009838 <_dtoa_r+0x960>
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	dd07      	ble.n	80099bc <_dtoa_r+0xae4>
 80099ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099b0:	d0ed      	beq.n	800998e <_dtoa_r+0xab6>
 80099b2:	9a01      	ldr	r2, [sp, #4]
 80099b4:	f109 0301 	add.w	r3, r9, #1
 80099b8:	7013      	strb	r3, [r2, #0]
 80099ba:	e73d      	b.n	8009838 <_dtoa_r+0x960>
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	9a08      	ldr	r2, [sp, #32]
 80099c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d043      	beq.n	8009a50 <_dtoa_r+0xb78>
 80099c8:	4651      	mov	r1, sl
 80099ca:	2300      	movs	r3, #0
 80099cc:	220a      	movs	r2, #10
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 f9d6 	bl	8009d80 <__multadd>
 80099d4:	45b8      	cmp	r8, r7
 80099d6:	4682      	mov	sl, r0
 80099d8:	f04f 0300 	mov.w	r3, #0
 80099dc:	f04f 020a 	mov.w	r2, #10
 80099e0:	4641      	mov	r1, r8
 80099e2:	4620      	mov	r0, r4
 80099e4:	d107      	bne.n	80099f6 <_dtoa_r+0xb1e>
 80099e6:	f000 f9cb 	bl	8009d80 <__multadd>
 80099ea:	4680      	mov	r8, r0
 80099ec:	4607      	mov	r7, r0
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	3301      	adds	r3, #1
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	e775      	b.n	80098e2 <_dtoa_r+0xa0a>
 80099f6:	f000 f9c3 	bl	8009d80 <__multadd>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4680      	mov	r8, r0
 80099fe:	2300      	movs	r3, #0
 8009a00:	220a      	movs	r2, #10
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f9bc 	bl	8009d80 <__multadd>
 8009a08:	4607      	mov	r7, r0
 8009a0a:	e7f0      	b.n	80099ee <_dtoa_r+0xb16>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	9d00      	ldr	r5, [sp, #0]
 8009a12:	4631      	mov	r1, r6
 8009a14:	4650      	mov	r0, sl
 8009a16:	f7ff f9d5 	bl	8008dc4 <quorem>
 8009a1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	f805 9b01 	strb.w	r9, [r5], #1
 8009a24:	1aea      	subs	r2, r5, r3
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	dd07      	ble.n	8009a3c <_dtoa_r+0xb64>
 8009a2c:	4651      	mov	r1, sl
 8009a2e:	2300      	movs	r3, #0
 8009a30:	220a      	movs	r2, #10
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 f9a4 	bl	8009d80 <__multadd>
 8009a38:	4682      	mov	sl, r0
 8009a3a:	e7ea      	b.n	8009a12 <_dtoa_r+0xb3a>
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfc8      	it	gt
 8009a42:	461d      	movgt	r5, r3
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	bfd8      	it	le
 8009a48:	2501      	movle	r5, #1
 8009a4a:	441d      	add	r5, r3
 8009a4c:	f04f 0800 	mov.w	r8, #0
 8009a50:	4651      	mov	r1, sl
 8009a52:	2201      	movs	r2, #1
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fb8b 	bl	800a170 <__lshift>
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	f000 fbf3 	bl	800a248 <__mcmp>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	dc96      	bgt.n	8009994 <_dtoa_r+0xabc>
 8009a66:	d102      	bne.n	8009a6e <_dtoa_r+0xb96>
 8009a68:	f019 0f01 	tst.w	r9, #1
 8009a6c:	d192      	bne.n	8009994 <_dtoa_r+0xabc>
 8009a6e:	462b      	mov	r3, r5
 8009a70:	461d      	mov	r5, r3
 8009a72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a76:	2a30      	cmp	r2, #48	; 0x30
 8009a78:	d0fa      	beq.n	8009a70 <_dtoa_r+0xb98>
 8009a7a:	e6dd      	b.n	8009838 <_dtoa_r+0x960>
 8009a7c:	9a00      	ldr	r2, [sp, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d189      	bne.n	8009996 <_dtoa_r+0xabe>
 8009a82:	f10b 0b01 	add.w	fp, fp, #1
 8009a86:	2331      	movs	r3, #49	; 0x31
 8009a88:	e796      	b.n	80099b8 <_dtoa_r+0xae0>
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <_dtoa_r+0xbdc>)
 8009a8c:	f7ff ba99 	b.w	8008fc2 <_dtoa_r+0xea>
 8009a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f47f aa6d 	bne.w	8008f72 <_dtoa_r+0x9a>
 8009a98:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <_dtoa_r+0xbe0>)
 8009a9a:	f7ff ba92 	b.w	8008fc2 <_dtoa_r+0xea>
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dcb5      	bgt.n	8009a10 <_dtoa_r+0xb38>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	f73f aeb1 	bgt.w	800980e <_dtoa_r+0x936>
 8009aac:	e7b0      	b.n	8009a10 <_dtoa_r+0xb38>
 8009aae:	bf00      	nop
 8009ab0:	0800c7cd 	.word	0x0800c7cd
 8009ab4:	0800c728 	.word	0x0800c728
 8009ab8:	0800c751 	.word	0x0800c751

08009abc <_free_r>:
 8009abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009abe:	2900      	cmp	r1, #0
 8009ac0:	d044      	beq.n	8009b4c <_free_r+0x90>
 8009ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac6:	9001      	str	r0, [sp, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f1a1 0404 	sub.w	r4, r1, #4
 8009ace:	bfb8      	it	lt
 8009ad0:	18e4      	addlt	r4, r4, r3
 8009ad2:	f000 f8e7 	bl	8009ca4 <__malloc_lock>
 8009ad6:	4a1e      	ldr	r2, [pc, #120]	; (8009b50 <_free_r+0x94>)
 8009ad8:	9801      	ldr	r0, [sp, #4]
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	b933      	cbnz	r3, 8009aec <_free_r+0x30>
 8009ade:	6063      	str	r3, [r4, #4]
 8009ae0:	6014      	str	r4, [r2, #0]
 8009ae2:	b003      	add	sp, #12
 8009ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae8:	f000 b8e2 	b.w	8009cb0 <__malloc_unlock>
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	d908      	bls.n	8009b02 <_free_r+0x46>
 8009af0:	6825      	ldr	r5, [r4, #0]
 8009af2:	1961      	adds	r1, r4, r5
 8009af4:	428b      	cmp	r3, r1
 8009af6:	bf01      	itttt	eq
 8009af8:	6819      	ldreq	r1, [r3, #0]
 8009afa:	685b      	ldreq	r3, [r3, #4]
 8009afc:	1949      	addeq	r1, r1, r5
 8009afe:	6021      	streq	r1, [r4, #0]
 8009b00:	e7ed      	b.n	8009ade <_free_r+0x22>
 8009b02:	461a      	mov	r2, r3
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	b10b      	cbz	r3, 8009b0c <_free_r+0x50>
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d9fa      	bls.n	8009b02 <_free_r+0x46>
 8009b0c:	6811      	ldr	r1, [r2, #0]
 8009b0e:	1855      	adds	r5, r2, r1
 8009b10:	42a5      	cmp	r5, r4
 8009b12:	d10b      	bne.n	8009b2c <_free_r+0x70>
 8009b14:	6824      	ldr	r4, [r4, #0]
 8009b16:	4421      	add	r1, r4
 8009b18:	1854      	adds	r4, r2, r1
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	6011      	str	r1, [r2, #0]
 8009b1e:	d1e0      	bne.n	8009ae2 <_free_r+0x26>
 8009b20:	681c      	ldr	r4, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	6053      	str	r3, [r2, #4]
 8009b26:	440c      	add	r4, r1
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	e7da      	b.n	8009ae2 <_free_r+0x26>
 8009b2c:	d902      	bls.n	8009b34 <_free_r+0x78>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	e7d6      	b.n	8009ae2 <_free_r+0x26>
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1961      	adds	r1, r4, r5
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	bf04      	itt	eq
 8009b3c:	6819      	ldreq	r1, [r3, #0]
 8009b3e:	685b      	ldreq	r3, [r3, #4]
 8009b40:	6063      	str	r3, [r4, #4]
 8009b42:	bf04      	itt	eq
 8009b44:	1949      	addeq	r1, r1, r5
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	6054      	str	r4, [r2, #4]
 8009b4a:	e7ca      	b.n	8009ae2 <_free_r+0x26>
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bd30      	pop	{r4, r5, pc}
 8009b50:	20004e68 	.word	0x20004e68

08009b54 <malloc>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <malloc+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f000 b823 	b.w	8009ba4 <_malloc_r>
 8009b5e:	bf00      	nop
 8009b60:	20000078 	.word	0x20000078

08009b64 <sbrk_aligned>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	4e0e      	ldr	r6, [pc, #56]	; (8009ba0 <sbrk_aligned+0x3c>)
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6831      	ldr	r1, [r6, #0]
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	b911      	cbnz	r1, 8009b76 <sbrk_aligned+0x12>
 8009b70:	f001 fe1a 	bl	800b7a8 <_sbrk_r>
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f001 fe15 	bl	800b7a8 <_sbrk_r>
 8009b7e:	1c43      	adds	r3, r0, #1
 8009b80:	d00a      	beq.n	8009b98 <sbrk_aligned+0x34>
 8009b82:	1cc4      	adds	r4, r0, #3
 8009b84:	f024 0403 	bic.w	r4, r4, #3
 8009b88:	42a0      	cmp	r0, r4
 8009b8a:	d007      	beq.n	8009b9c <sbrk_aligned+0x38>
 8009b8c:	1a21      	subs	r1, r4, r0
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f001 fe0a 	bl	800b7a8 <_sbrk_r>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d101      	bne.n	8009b9c <sbrk_aligned+0x38>
 8009b98:	f04f 34ff 	mov.w	r4, #4294967295
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	20004e6c 	.word	0x20004e6c

08009ba4 <_malloc_r>:
 8009ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	1ccd      	adds	r5, r1, #3
 8009baa:	f025 0503 	bic.w	r5, r5, #3
 8009bae:	3508      	adds	r5, #8
 8009bb0:	2d0c      	cmp	r5, #12
 8009bb2:	bf38      	it	cc
 8009bb4:	250c      	movcc	r5, #12
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	4607      	mov	r7, r0
 8009bba:	db01      	blt.n	8009bc0 <_malloc_r+0x1c>
 8009bbc:	42a9      	cmp	r1, r5
 8009bbe:	d905      	bls.n	8009bcc <_malloc_r+0x28>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca0 <_malloc_r+0xfc>
 8009bd0:	f000 f868 	bl	8009ca4 <__malloc_lock>
 8009bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd8:	461c      	mov	r4, r3
 8009bda:	bb5c      	cbnz	r4, 8009c34 <_malloc_r+0x90>
 8009bdc:	4629      	mov	r1, r5
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7ff ffc0 	bl	8009b64 <sbrk_aligned>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	4604      	mov	r4, r0
 8009be8:	d155      	bne.n	8009c96 <_malloc_r+0xf2>
 8009bea:	f8d8 4000 	ldr.w	r4, [r8]
 8009bee:	4626      	mov	r6, r4
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	d145      	bne.n	8009c80 <_malloc_r+0xdc>
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	d048      	beq.n	8009c8a <_malloc_r+0xe6>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	eb04 0903 	add.w	r9, r4, r3
 8009c02:	f001 fdd1 	bl	800b7a8 <_sbrk_r>
 8009c06:	4581      	cmp	r9, r0
 8009c08:	d13f      	bne.n	8009c8a <_malloc_r+0xe6>
 8009c0a:	6821      	ldr	r1, [r4, #0]
 8009c0c:	1a6d      	subs	r5, r5, r1
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7ff ffa7 	bl	8009b64 <sbrk_aligned>
 8009c16:	3001      	adds	r0, #1
 8009c18:	d037      	beq.n	8009c8a <_malloc_r+0xe6>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	442b      	add	r3, r5
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	f8d8 3000 	ldr.w	r3, [r8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d038      	beq.n	8009c9a <_malloc_r+0xf6>
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	d12b      	bne.n	8009c86 <_malloc_r+0xe2>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	605a      	str	r2, [r3, #4]
 8009c32:	e00f      	b.n	8009c54 <_malloc_r+0xb0>
 8009c34:	6822      	ldr	r2, [r4, #0]
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	d41f      	bmi.n	8009c7a <_malloc_r+0xd6>
 8009c3a:	2a0b      	cmp	r2, #11
 8009c3c:	d917      	bls.n	8009c6e <_malloc_r+0xca>
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	6025      	str	r5, [r4, #0]
 8009c44:	bf18      	it	ne
 8009c46:	6059      	strne	r1, [r3, #4]
 8009c48:	6863      	ldr	r3, [r4, #4]
 8009c4a:	bf08      	it	eq
 8009c4c:	f8c8 1000 	streq.w	r1, [r8]
 8009c50:	5162      	str	r2, [r4, r5]
 8009c52:	604b      	str	r3, [r1, #4]
 8009c54:	4638      	mov	r0, r7
 8009c56:	f104 060b 	add.w	r6, r4, #11
 8009c5a:	f000 f829 	bl	8009cb0 <__malloc_unlock>
 8009c5e:	f026 0607 	bic.w	r6, r6, #7
 8009c62:	1d23      	adds	r3, r4, #4
 8009c64:	1af2      	subs	r2, r6, r3
 8009c66:	d0ae      	beq.n	8009bc6 <_malloc_r+0x22>
 8009c68:	1b9b      	subs	r3, r3, r6
 8009c6a:	50a3      	str	r3, [r4, r2]
 8009c6c:	e7ab      	b.n	8009bc6 <_malloc_r+0x22>
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	6862      	ldr	r2, [r4, #4]
 8009c72:	d1dd      	bne.n	8009c30 <_malloc_r+0x8c>
 8009c74:	f8c8 2000 	str.w	r2, [r8]
 8009c78:	e7ec      	b.n	8009c54 <_malloc_r+0xb0>
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	6864      	ldr	r4, [r4, #4]
 8009c7e:	e7ac      	b.n	8009bda <_malloc_r+0x36>
 8009c80:	4634      	mov	r4, r6
 8009c82:	6876      	ldr	r6, [r6, #4]
 8009c84:	e7b4      	b.n	8009bf0 <_malloc_r+0x4c>
 8009c86:	4613      	mov	r3, r2
 8009c88:	e7cc      	b.n	8009c24 <_malloc_r+0x80>
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f000 f80e 	bl	8009cb0 <__malloc_unlock>
 8009c94:	e797      	b.n	8009bc6 <_malloc_r+0x22>
 8009c96:	6025      	str	r5, [r4, #0]
 8009c98:	e7dc      	b.n	8009c54 <_malloc_r+0xb0>
 8009c9a:	605b      	str	r3, [r3, #4]
 8009c9c:	deff      	udf	#255	; 0xff
 8009c9e:	bf00      	nop
 8009ca0:	20004e68 	.word	0x20004e68

08009ca4 <__malloc_lock>:
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <__malloc_lock+0x8>)
 8009ca6:	f7ff b876 	b.w	8008d96 <__retarget_lock_acquire_recursive>
 8009caa:	bf00      	nop
 8009cac:	20004e64 	.word	0x20004e64

08009cb0 <__malloc_unlock>:
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <__malloc_unlock+0x8>)
 8009cb2:	f7ff b871 	b.w	8008d98 <__retarget_lock_release_recursive>
 8009cb6:	bf00      	nop
 8009cb8:	20004e64 	.word	0x20004e64

08009cbc <_Balloc>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	69c6      	ldr	r6, [r0, #28]
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	b976      	cbnz	r6, 8009ce4 <_Balloc+0x28>
 8009cc6:	2010      	movs	r0, #16
 8009cc8:	f7ff ff44 	bl	8009b54 <malloc>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	61e0      	str	r0, [r4, #28]
 8009cd0:	b920      	cbnz	r0, 8009cdc <_Balloc+0x20>
 8009cd2:	4b18      	ldr	r3, [pc, #96]	; (8009d34 <_Balloc+0x78>)
 8009cd4:	4818      	ldr	r0, [pc, #96]	; (8009d38 <_Balloc+0x7c>)
 8009cd6:	216b      	movs	r1, #107	; 0x6b
 8009cd8:	f001 fd7e 	bl	800b7d8 <__assert_func>
 8009cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ce0:	6006      	str	r6, [r0, #0]
 8009ce2:	60c6      	str	r6, [r0, #12]
 8009ce4:	69e6      	ldr	r6, [r4, #28]
 8009ce6:	68f3      	ldr	r3, [r6, #12]
 8009ce8:	b183      	cbz	r3, 8009d0c <_Balloc+0x50>
 8009cea:	69e3      	ldr	r3, [r4, #28]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cf2:	b9b8      	cbnz	r0, 8009d24 <_Balloc+0x68>
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	fa01 f605 	lsl.w	r6, r1, r5
 8009cfa:	1d72      	adds	r2, r6, #5
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f001 fd88 	bl	800b814 <_calloc_r>
 8009d04:	b160      	cbz	r0, 8009d20 <_Balloc+0x64>
 8009d06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d0a:	e00e      	b.n	8009d2a <_Balloc+0x6e>
 8009d0c:	2221      	movs	r2, #33	; 0x21
 8009d0e:	2104      	movs	r1, #4
 8009d10:	4620      	mov	r0, r4
 8009d12:	f001 fd7f 	bl	800b814 <_calloc_r>
 8009d16:	69e3      	ldr	r3, [r4, #28]
 8009d18:	60f0      	str	r0, [r6, #12]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e4      	bne.n	8009cea <_Balloc+0x2e>
 8009d20:	2000      	movs	r0, #0
 8009d22:	bd70      	pop	{r4, r5, r6, pc}
 8009d24:	6802      	ldr	r2, [r0, #0]
 8009d26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d30:	e7f7      	b.n	8009d22 <_Balloc+0x66>
 8009d32:	bf00      	nop
 8009d34:	0800c75e 	.word	0x0800c75e
 8009d38:	0800c7de 	.word	0x0800c7de

08009d3c <_Bfree>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	69c6      	ldr	r6, [r0, #28]
 8009d40:	4605      	mov	r5, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	b976      	cbnz	r6, 8009d64 <_Bfree+0x28>
 8009d46:	2010      	movs	r0, #16
 8009d48:	f7ff ff04 	bl	8009b54 <malloc>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	61e8      	str	r0, [r5, #28]
 8009d50:	b920      	cbnz	r0, 8009d5c <_Bfree+0x20>
 8009d52:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <_Bfree+0x3c>)
 8009d54:	4809      	ldr	r0, [pc, #36]	; (8009d7c <_Bfree+0x40>)
 8009d56:	218f      	movs	r1, #143	; 0x8f
 8009d58:	f001 fd3e 	bl	800b7d8 <__assert_func>
 8009d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d60:	6006      	str	r6, [r0, #0]
 8009d62:	60c6      	str	r6, [r0, #12]
 8009d64:	b13c      	cbz	r4, 8009d76 <_Bfree+0x3a>
 8009d66:	69eb      	ldr	r3, [r5, #28]
 8009d68:	6862      	ldr	r2, [r4, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d70:	6021      	str	r1, [r4, #0]
 8009d72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	0800c75e 	.word	0x0800c75e
 8009d7c:	0800c7de 	.word	0x0800c7de

08009d80 <__multadd>:
 8009d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d84:	690d      	ldr	r5, [r1, #16]
 8009d86:	4607      	mov	r7, r0
 8009d88:	460c      	mov	r4, r1
 8009d8a:	461e      	mov	r6, r3
 8009d8c:	f101 0c14 	add.w	ip, r1, #20
 8009d90:	2000      	movs	r0, #0
 8009d92:	f8dc 3000 	ldr.w	r3, [ip]
 8009d96:	b299      	uxth	r1, r3
 8009d98:	fb02 6101 	mla	r1, r2, r1, r6
 8009d9c:	0c1e      	lsrs	r6, r3, #16
 8009d9e:	0c0b      	lsrs	r3, r1, #16
 8009da0:	fb02 3306 	mla	r3, r2, r6, r3
 8009da4:	b289      	uxth	r1, r1
 8009da6:	3001      	adds	r0, #1
 8009da8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009dac:	4285      	cmp	r5, r0
 8009dae:	f84c 1b04 	str.w	r1, [ip], #4
 8009db2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009db6:	dcec      	bgt.n	8009d92 <__multadd+0x12>
 8009db8:	b30e      	cbz	r6, 8009dfe <__multadd+0x7e>
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	dc19      	bgt.n	8009df4 <__multadd+0x74>
 8009dc0:	6861      	ldr	r1, [r4, #4]
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	3101      	adds	r1, #1
 8009dc6:	f7ff ff79 	bl	8009cbc <_Balloc>
 8009dca:	4680      	mov	r8, r0
 8009dcc:	b928      	cbnz	r0, 8009dda <__multadd+0x5a>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <__multadd+0x84>)
 8009dd2:	480d      	ldr	r0, [pc, #52]	; (8009e08 <__multadd+0x88>)
 8009dd4:	21ba      	movs	r1, #186	; 0xba
 8009dd6:	f001 fcff 	bl	800b7d8 <__assert_func>
 8009dda:	6922      	ldr	r2, [r4, #16]
 8009ddc:	3202      	adds	r2, #2
 8009dde:	f104 010c 	add.w	r1, r4, #12
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	300c      	adds	r0, #12
 8009de6:	f7fe ffd8 	bl	8008d9a <memcpy>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4638      	mov	r0, r7
 8009dee:	f7ff ffa5 	bl	8009d3c <_Bfree>
 8009df2:	4644      	mov	r4, r8
 8009df4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009df8:	3501      	adds	r5, #1
 8009dfa:	615e      	str	r6, [r3, #20]
 8009dfc:	6125      	str	r5, [r4, #16]
 8009dfe:	4620      	mov	r0, r4
 8009e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e04:	0800c7cd 	.word	0x0800c7cd
 8009e08:	0800c7de 	.word	0x0800c7de

08009e0c <__s2b>:
 8009e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e10:	460c      	mov	r4, r1
 8009e12:	4615      	mov	r5, r2
 8009e14:	461f      	mov	r7, r3
 8009e16:	2209      	movs	r2, #9
 8009e18:	3308      	adds	r3, #8
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e20:	2100      	movs	r1, #0
 8009e22:	2201      	movs	r2, #1
 8009e24:	429a      	cmp	r2, r3
 8009e26:	db09      	blt.n	8009e3c <__s2b+0x30>
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7ff ff47 	bl	8009cbc <_Balloc>
 8009e2e:	b940      	cbnz	r0, 8009e42 <__s2b+0x36>
 8009e30:	4602      	mov	r2, r0
 8009e32:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <__s2b+0x8c>)
 8009e34:	4819      	ldr	r0, [pc, #100]	; (8009e9c <__s2b+0x90>)
 8009e36:	21d3      	movs	r1, #211	; 0xd3
 8009e38:	f001 fcce 	bl	800b7d8 <__assert_func>
 8009e3c:	0052      	lsls	r2, r2, #1
 8009e3e:	3101      	adds	r1, #1
 8009e40:	e7f0      	b.n	8009e24 <__s2b+0x18>
 8009e42:	9b08      	ldr	r3, [sp, #32]
 8009e44:	6143      	str	r3, [r0, #20]
 8009e46:	2d09      	cmp	r5, #9
 8009e48:	f04f 0301 	mov.w	r3, #1
 8009e4c:	6103      	str	r3, [r0, #16]
 8009e4e:	dd16      	ble.n	8009e7e <__s2b+0x72>
 8009e50:	f104 0909 	add.w	r9, r4, #9
 8009e54:	46c8      	mov	r8, r9
 8009e56:	442c      	add	r4, r5
 8009e58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	3b30      	subs	r3, #48	; 0x30
 8009e60:	220a      	movs	r2, #10
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ff8c 	bl	8009d80 <__multadd>
 8009e68:	45a0      	cmp	r8, r4
 8009e6a:	d1f5      	bne.n	8009e58 <__s2b+0x4c>
 8009e6c:	f1a5 0408 	sub.w	r4, r5, #8
 8009e70:	444c      	add	r4, r9
 8009e72:	1b2d      	subs	r5, r5, r4
 8009e74:	1963      	adds	r3, r4, r5
 8009e76:	42bb      	cmp	r3, r7
 8009e78:	db04      	blt.n	8009e84 <__s2b+0x78>
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	340a      	adds	r4, #10
 8009e80:	2509      	movs	r5, #9
 8009e82:	e7f6      	b.n	8009e72 <__s2b+0x66>
 8009e84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e88:	4601      	mov	r1, r0
 8009e8a:	3b30      	subs	r3, #48	; 0x30
 8009e8c:	220a      	movs	r2, #10
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7ff ff76 	bl	8009d80 <__multadd>
 8009e94:	e7ee      	b.n	8009e74 <__s2b+0x68>
 8009e96:	bf00      	nop
 8009e98:	0800c7cd 	.word	0x0800c7cd
 8009e9c:	0800c7de 	.word	0x0800c7de

08009ea0 <__hi0bits>:
 8009ea0:	0c03      	lsrs	r3, r0, #16
 8009ea2:	041b      	lsls	r3, r3, #16
 8009ea4:	b9d3      	cbnz	r3, 8009edc <__hi0bits+0x3c>
 8009ea6:	0400      	lsls	r0, r0, #16
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009eae:	bf04      	itt	eq
 8009eb0:	0200      	lsleq	r0, r0, #8
 8009eb2:	3308      	addeq	r3, #8
 8009eb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009eb8:	bf04      	itt	eq
 8009eba:	0100      	lsleq	r0, r0, #4
 8009ebc:	3304      	addeq	r3, #4
 8009ebe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ec2:	bf04      	itt	eq
 8009ec4:	0080      	lsleq	r0, r0, #2
 8009ec6:	3302      	addeq	r3, #2
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	db05      	blt.n	8009ed8 <__hi0bits+0x38>
 8009ecc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ed0:	f103 0301 	add.w	r3, r3, #1
 8009ed4:	bf08      	it	eq
 8009ed6:	2320      	moveq	r3, #32
 8009ed8:	4618      	mov	r0, r3
 8009eda:	4770      	bx	lr
 8009edc:	2300      	movs	r3, #0
 8009ede:	e7e4      	b.n	8009eaa <__hi0bits+0xa>

08009ee0 <__lo0bits>:
 8009ee0:	6803      	ldr	r3, [r0, #0]
 8009ee2:	f013 0207 	ands.w	r2, r3, #7
 8009ee6:	d00c      	beq.n	8009f02 <__lo0bits+0x22>
 8009ee8:	07d9      	lsls	r1, r3, #31
 8009eea:	d422      	bmi.n	8009f32 <__lo0bits+0x52>
 8009eec:	079a      	lsls	r2, r3, #30
 8009eee:	bf49      	itett	mi
 8009ef0:	085b      	lsrmi	r3, r3, #1
 8009ef2:	089b      	lsrpl	r3, r3, #2
 8009ef4:	6003      	strmi	r3, [r0, #0]
 8009ef6:	2201      	movmi	r2, #1
 8009ef8:	bf5c      	itt	pl
 8009efa:	6003      	strpl	r3, [r0, #0]
 8009efc:	2202      	movpl	r2, #2
 8009efe:	4610      	mov	r0, r2
 8009f00:	4770      	bx	lr
 8009f02:	b299      	uxth	r1, r3
 8009f04:	b909      	cbnz	r1, 8009f0a <__lo0bits+0x2a>
 8009f06:	0c1b      	lsrs	r3, r3, #16
 8009f08:	2210      	movs	r2, #16
 8009f0a:	b2d9      	uxtb	r1, r3
 8009f0c:	b909      	cbnz	r1, 8009f12 <__lo0bits+0x32>
 8009f0e:	3208      	adds	r2, #8
 8009f10:	0a1b      	lsrs	r3, r3, #8
 8009f12:	0719      	lsls	r1, r3, #28
 8009f14:	bf04      	itt	eq
 8009f16:	091b      	lsreq	r3, r3, #4
 8009f18:	3204      	addeq	r2, #4
 8009f1a:	0799      	lsls	r1, r3, #30
 8009f1c:	bf04      	itt	eq
 8009f1e:	089b      	lsreq	r3, r3, #2
 8009f20:	3202      	addeq	r2, #2
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d403      	bmi.n	8009f2e <__lo0bits+0x4e>
 8009f26:	085b      	lsrs	r3, r3, #1
 8009f28:	f102 0201 	add.w	r2, r2, #1
 8009f2c:	d003      	beq.n	8009f36 <__lo0bits+0x56>
 8009f2e:	6003      	str	r3, [r0, #0]
 8009f30:	e7e5      	b.n	8009efe <__lo0bits+0x1e>
 8009f32:	2200      	movs	r2, #0
 8009f34:	e7e3      	b.n	8009efe <__lo0bits+0x1e>
 8009f36:	2220      	movs	r2, #32
 8009f38:	e7e1      	b.n	8009efe <__lo0bits+0x1e>
	...

08009f3c <__i2b>:
 8009f3c:	b510      	push	{r4, lr}
 8009f3e:	460c      	mov	r4, r1
 8009f40:	2101      	movs	r1, #1
 8009f42:	f7ff febb 	bl	8009cbc <_Balloc>
 8009f46:	4602      	mov	r2, r0
 8009f48:	b928      	cbnz	r0, 8009f56 <__i2b+0x1a>
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <__i2b+0x24>)
 8009f4c:	4805      	ldr	r0, [pc, #20]	; (8009f64 <__i2b+0x28>)
 8009f4e:	f240 1145 	movw	r1, #325	; 0x145
 8009f52:	f001 fc41 	bl	800b7d8 <__assert_func>
 8009f56:	2301      	movs	r3, #1
 8009f58:	6144      	str	r4, [r0, #20]
 8009f5a:	6103      	str	r3, [r0, #16]
 8009f5c:	bd10      	pop	{r4, pc}
 8009f5e:	bf00      	nop
 8009f60:	0800c7cd 	.word	0x0800c7cd
 8009f64:	0800c7de 	.word	0x0800c7de

08009f68 <__multiply>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	4691      	mov	r9, r2
 8009f6e:	690a      	ldr	r2, [r1, #16]
 8009f70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	bfb8      	it	lt
 8009f78:	460b      	movlt	r3, r1
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	bfbc      	itt	lt
 8009f7e:	464c      	movlt	r4, r9
 8009f80:	4699      	movlt	r9, r3
 8009f82:	6927      	ldr	r7, [r4, #16]
 8009f84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	6861      	ldr	r1, [r4, #4]
 8009f8c:	eb07 060a 	add.w	r6, r7, sl
 8009f90:	42b3      	cmp	r3, r6
 8009f92:	b085      	sub	sp, #20
 8009f94:	bfb8      	it	lt
 8009f96:	3101      	addlt	r1, #1
 8009f98:	f7ff fe90 	bl	8009cbc <_Balloc>
 8009f9c:	b930      	cbnz	r0, 8009fac <__multiply+0x44>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	4b44      	ldr	r3, [pc, #272]	; (800a0b4 <__multiply+0x14c>)
 8009fa2:	4845      	ldr	r0, [pc, #276]	; (800a0b8 <__multiply+0x150>)
 8009fa4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009fa8:	f001 fc16 	bl	800b7d8 <__assert_func>
 8009fac:	f100 0514 	add.w	r5, r0, #20
 8009fb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	4543      	cmp	r3, r8
 8009fba:	d321      	bcc.n	800a000 <__multiply+0x98>
 8009fbc:	f104 0314 	add.w	r3, r4, #20
 8009fc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fc4:	f109 0314 	add.w	r3, r9, #20
 8009fc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fcc:	9202      	str	r2, [sp, #8]
 8009fce:	1b3a      	subs	r2, r7, r4
 8009fd0:	3a15      	subs	r2, #21
 8009fd2:	f022 0203 	bic.w	r2, r2, #3
 8009fd6:	3204      	adds	r2, #4
 8009fd8:	f104 0115 	add.w	r1, r4, #21
 8009fdc:	428f      	cmp	r7, r1
 8009fde:	bf38      	it	cc
 8009fe0:	2204      	movcc	r2, #4
 8009fe2:	9201      	str	r2, [sp, #4]
 8009fe4:	9a02      	ldr	r2, [sp, #8]
 8009fe6:	9303      	str	r3, [sp, #12]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d80c      	bhi.n	800a006 <__multiply+0x9e>
 8009fec:	2e00      	cmp	r6, #0
 8009fee:	dd03      	ble.n	8009ff8 <__multiply+0x90>
 8009ff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05b      	beq.n	800a0b0 <__multiply+0x148>
 8009ff8:	6106      	str	r6, [r0, #16]
 8009ffa:	b005      	add	sp, #20
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	f843 2b04 	str.w	r2, [r3], #4
 800a004:	e7d8      	b.n	8009fb8 <__multiply+0x50>
 800a006:	f8b3 a000 	ldrh.w	sl, [r3]
 800a00a:	f1ba 0f00 	cmp.w	sl, #0
 800a00e:	d024      	beq.n	800a05a <__multiply+0xf2>
 800a010:	f104 0e14 	add.w	lr, r4, #20
 800a014:	46a9      	mov	r9, r5
 800a016:	f04f 0c00 	mov.w	ip, #0
 800a01a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a01e:	f8d9 1000 	ldr.w	r1, [r9]
 800a022:	fa1f fb82 	uxth.w	fp, r2
 800a026:	b289      	uxth	r1, r1
 800a028:	fb0a 110b 	mla	r1, sl, fp, r1
 800a02c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a030:	f8d9 2000 	ldr.w	r2, [r9]
 800a034:	4461      	add	r1, ip
 800a036:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a03a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a03e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a042:	b289      	uxth	r1, r1
 800a044:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a048:	4577      	cmp	r7, lr
 800a04a:	f849 1b04 	str.w	r1, [r9], #4
 800a04e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a052:	d8e2      	bhi.n	800a01a <__multiply+0xb2>
 800a054:	9a01      	ldr	r2, [sp, #4]
 800a056:	f845 c002 	str.w	ip, [r5, r2]
 800a05a:	9a03      	ldr	r2, [sp, #12]
 800a05c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a060:	3304      	adds	r3, #4
 800a062:	f1b9 0f00 	cmp.w	r9, #0
 800a066:	d021      	beq.n	800a0ac <__multiply+0x144>
 800a068:	6829      	ldr	r1, [r5, #0]
 800a06a:	f104 0c14 	add.w	ip, r4, #20
 800a06e:	46ae      	mov	lr, r5
 800a070:	f04f 0a00 	mov.w	sl, #0
 800a074:	f8bc b000 	ldrh.w	fp, [ip]
 800a078:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a07c:	fb09 220b 	mla	r2, r9, fp, r2
 800a080:	4452      	add	r2, sl
 800a082:	b289      	uxth	r1, r1
 800a084:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a088:	f84e 1b04 	str.w	r1, [lr], #4
 800a08c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a090:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a094:	f8be 1000 	ldrh.w	r1, [lr]
 800a098:	fb09 110a 	mla	r1, r9, sl, r1
 800a09c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a0a0:	4567      	cmp	r7, ip
 800a0a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0a6:	d8e5      	bhi.n	800a074 <__multiply+0x10c>
 800a0a8:	9a01      	ldr	r2, [sp, #4]
 800a0aa:	50a9      	str	r1, [r5, r2]
 800a0ac:	3504      	adds	r5, #4
 800a0ae:	e799      	b.n	8009fe4 <__multiply+0x7c>
 800a0b0:	3e01      	subs	r6, #1
 800a0b2:	e79b      	b.n	8009fec <__multiply+0x84>
 800a0b4:	0800c7cd 	.word	0x0800c7cd
 800a0b8:	0800c7de 	.word	0x0800c7de

0800a0bc <__pow5mult>:
 800a0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	4615      	mov	r5, r2
 800a0c2:	f012 0203 	ands.w	r2, r2, #3
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460f      	mov	r7, r1
 800a0ca:	d007      	beq.n	800a0dc <__pow5mult+0x20>
 800a0cc:	4c25      	ldr	r4, [pc, #148]	; (800a164 <__pow5mult+0xa8>)
 800a0ce:	3a01      	subs	r2, #1
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0d6:	f7ff fe53 	bl	8009d80 <__multadd>
 800a0da:	4607      	mov	r7, r0
 800a0dc:	10ad      	asrs	r5, r5, #2
 800a0de:	d03d      	beq.n	800a15c <__pow5mult+0xa0>
 800a0e0:	69f4      	ldr	r4, [r6, #28]
 800a0e2:	b97c      	cbnz	r4, 800a104 <__pow5mult+0x48>
 800a0e4:	2010      	movs	r0, #16
 800a0e6:	f7ff fd35 	bl	8009b54 <malloc>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	61f0      	str	r0, [r6, #28]
 800a0ee:	b928      	cbnz	r0, 800a0fc <__pow5mult+0x40>
 800a0f0:	4b1d      	ldr	r3, [pc, #116]	; (800a168 <__pow5mult+0xac>)
 800a0f2:	481e      	ldr	r0, [pc, #120]	; (800a16c <__pow5mult+0xb0>)
 800a0f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a0f8:	f001 fb6e 	bl	800b7d8 <__assert_func>
 800a0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a100:	6004      	str	r4, [r0, #0]
 800a102:	60c4      	str	r4, [r0, #12]
 800a104:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a10c:	b94c      	cbnz	r4, 800a122 <__pow5mult+0x66>
 800a10e:	f240 2171 	movw	r1, #625	; 0x271
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ff12 	bl	8009f3c <__i2b>
 800a118:	2300      	movs	r3, #0
 800a11a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a11e:	4604      	mov	r4, r0
 800a120:	6003      	str	r3, [r0, #0]
 800a122:	f04f 0900 	mov.w	r9, #0
 800a126:	07eb      	lsls	r3, r5, #31
 800a128:	d50a      	bpl.n	800a140 <__pow5mult+0x84>
 800a12a:	4639      	mov	r1, r7
 800a12c:	4622      	mov	r2, r4
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff ff1a 	bl	8009f68 <__multiply>
 800a134:	4639      	mov	r1, r7
 800a136:	4680      	mov	r8, r0
 800a138:	4630      	mov	r0, r6
 800a13a:	f7ff fdff 	bl	8009d3c <_Bfree>
 800a13e:	4647      	mov	r7, r8
 800a140:	106d      	asrs	r5, r5, #1
 800a142:	d00b      	beq.n	800a15c <__pow5mult+0xa0>
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	b938      	cbnz	r0, 800a158 <__pow5mult+0x9c>
 800a148:	4622      	mov	r2, r4
 800a14a:	4621      	mov	r1, r4
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff ff0b 	bl	8009f68 <__multiply>
 800a152:	6020      	str	r0, [r4, #0]
 800a154:	f8c0 9000 	str.w	r9, [r0]
 800a158:	4604      	mov	r4, r0
 800a15a:	e7e4      	b.n	800a126 <__pow5mult+0x6a>
 800a15c:	4638      	mov	r0, r7
 800a15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a162:	bf00      	nop
 800a164:	0800c928 	.word	0x0800c928
 800a168:	0800c75e 	.word	0x0800c75e
 800a16c:	0800c7de 	.word	0x0800c7de

0800a170 <__lshift>:
 800a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	460c      	mov	r4, r1
 800a176:	6849      	ldr	r1, [r1, #4]
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a17e:	68a3      	ldr	r3, [r4, #8]
 800a180:	4607      	mov	r7, r0
 800a182:	4691      	mov	r9, r2
 800a184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a188:	f108 0601 	add.w	r6, r8, #1
 800a18c:	42b3      	cmp	r3, r6
 800a18e:	db0b      	blt.n	800a1a8 <__lshift+0x38>
 800a190:	4638      	mov	r0, r7
 800a192:	f7ff fd93 	bl	8009cbc <_Balloc>
 800a196:	4605      	mov	r5, r0
 800a198:	b948      	cbnz	r0, 800a1ae <__lshift+0x3e>
 800a19a:	4602      	mov	r2, r0
 800a19c:	4b28      	ldr	r3, [pc, #160]	; (800a240 <__lshift+0xd0>)
 800a19e:	4829      	ldr	r0, [pc, #164]	; (800a244 <__lshift+0xd4>)
 800a1a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a1a4:	f001 fb18 	bl	800b7d8 <__assert_func>
 800a1a8:	3101      	adds	r1, #1
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	e7ee      	b.n	800a18c <__lshift+0x1c>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f100 0114 	add.w	r1, r0, #20
 800a1b4:	f100 0210 	add.w	r2, r0, #16
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	4553      	cmp	r3, sl
 800a1bc:	db33      	blt.n	800a226 <__lshift+0xb6>
 800a1be:	6920      	ldr	r0, [r4, #16]
 800a1c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1c4:	f104 0314 	add.w	r3, r4, #20
 800a1c8:	f019 091f 	ands.w	r9, r9, #31
 800a1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1d4:	d02b      	beq.n	800a22e <__lshift+0xbe>
 800a1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a1da:	468a      	mov	sl, r1
 800a1dc:	2200      	movs	r2, #0
 800a1de:	6818      	ldr	r0, [r3, #0]
 800a1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a1e4:	4310      	orrs	r0, r2
 800a1e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	459c      	cmp	ip, r3
 800a1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1f4:	d8f3      	bhi.n	800a1de <__lshift+0x6e>
 800a1f6:	ebac 0304 	sub.w	r3, ip, r4
 800a1fa:	3b15      	subs	r3, #21
 800a1fc:	f023 0303 	bic.w	r3, r3, #3
 800a200:	3304      	adds	r3, #4
 800a202:	f104 0015 	add.w	r0, r4, #21
 800a206:	4584      	cmp	ip, r0
 800a208:	bf38      	it	cc
 800a20a:	2304      	movcc	r3, #4
 800a20c:	50ca      	str	r2, [r1, r3]
 800a20e:	b10a      	cbz	r2, 800a214 <__lshift+0xa4>
 800a210:	f108 0602 	add.w	r6, r8, #2
 800a214:	3e01      	subs	r6, #1
 800a216:	4638      	mov	r0, r7
 800a218:	612e      	str	r6, [r5, #16]
 800a21a:	4621      	mov	r1, r4
 800a21c:	f7ff fd8e 	bl	8009d3c <_Bfree>
 800a220:	4628      	mov	r0, r5
 800a222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a226:	f842 0f04 	str.w	r0, [r2, #4]!
 800a22a:	3301      	adds	r3, #1
 800a22c:	e7c5      	b.n	800a1ba <__lshift+0x4a>
 800a22e:	3904      	subs	r1, #4
 800a230:	f853 2b04 	ldr.w	r2, [r3], #4
 800a234:	f841 2f04 	str.w	r2, [r1, #4]!
 800a238:	459c      	cmp	ip, r3
 800a23a:	d8f9      	bhi.n	800a230 <__lshift+0xc0>
 800a23c:	e7ea      	b.n	800a214 <__lshift+0xa4>
 800a23e:	bf00      	nop
 800a240:	0800c7cd 	.word	0x0800c7cd
 800a244:	0800c7de 	.word	0x0800c7de

0800a248 <__mcmp>:
 800a248:	b530      	push	{r4, r5, lr}
 800a24a:	6902      	ldr	r2, [r0, #16]
 800a24c:	690c      	ldr	r4, [r1, #16]
 800a24e:	1b12      	subs	r2, r2, r4
 800a250:	d10e      	bne.n	800a270 <__mcmp+0x28>
 800a252:	f100 0314 	add.w	r3, r0, #20
 800a256:	3114      	adds	r1, #20
 800a258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a25c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a268:	42a5      	cmp	r5, r4
 800a26a:	d003      	beq.n	800a274 <__mcmp+0x2c>
 800a26c:	d305      	bcc.n	800a27a <__mcmp+0x32>
 800a26e:	2201      	movs	r2, #1
 800a270:	4610      	mov	r0, r2
 800a272:	bd30      	pop	{r4, r5, pc}
 800a274:	4283      	cmp	r3, r0
 800a276:	d3f3      	bcc.n	800a260 <__mcmp+0x18>
 800a278:	e7fa      	b.n	800a270 <__mcmp+0x28>
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295
 800a27e:	e7f7      	b.n	800a270 <__mcmp+0x28>

0800a280 <__mdiff>:
 800a280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	4606      	mov	r6, r0
 800a288:	4611      	mov	r1, r2
 800a28a:	4620      	mov	r0, r4
 800a28c:	4690      	mov	r8, r2
 800a28e:	f7ff ffdb 	bl	800a248 <__mcmp>
 800a292:	1e05      	subs	r5, r0, #0
 800a294:	d110      	bne.n	800a2b8 <__mdiff+0x38>
 800a296:	4629      	mov	r1, r5
 800a298:	4630      	mov	r0, r6
 800a29a:	f7ff fd0f 	bl	8009cbc <_Balloc>
 800a29e:	b930      	cbnz	r0, 800a2ae <__mdiff+0x2e>
 800a2a0:	4b3a      	ldr	r3, [pc, #232]	; (800a38c <__mdiff+0x10c>)
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	f240 2137 	movw	r1, #567	; 0x237
 800a2a8:	4839      	ldr	r0, [pc, #228]	; (800a390 <__mdiff+0x110>)
 800a2aa:	f001 fa95 	bl	800b7d8 <__assert_func>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	bfa4      	itt	ge
 800a2ba:	4643      	movge	r3, r8
 800a2bc:	46a0      	movge	r8, r4
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2c4:	bfa6      	itte	ge
 800a2c6:	461c      	movge	r4, r3
 800a2c8:	2500      	movge	r5, #0
 800a2ca:	2501      	movlt	r5, #1
 800a2cc:	f7ff fcf6 	bl	8009cbc <_Balloc>
 800a2d0:	b920      	cbnz	r0, 800a2dc <__mdiff+0x5c>
 800a2d2:	4b2e      	ldr	r3, [pc, #184]	; (800a38c <__mdiff+0x10c>)
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	f240 2145 	movw	r1, #581	; 0x245
 800a2da:	e7e5      	b.n	800a2a8 <__mdiff+0x28>
 800a2dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2e0:	6926      	ldr	r6, [r4, #16]
 800a2e2:	60c5      	str	r5, [r0, #12]
 800a2e4:	f104 0914 	add.w	r9, r4, #20
 800a2e8:	f108 0514 	add.w	r5, r8, #20
 800a2ec:	f100 0e14 	add.w	lr, r0, #20
 800a2f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2f8:	f108 0210 	add.w	r2, r8, #16
 800a2fc:	46f2      	mov	sl, lr
 800a2fe:	2100      	movs	r1, #0
 800a300:	f859 3b04 	ldr.w	r3, [r9], #4
 800a304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a308:	fa11 f88b 	uxtah	r8, r1, fp
 800a30c:	b299      	uxth	r1, r3
 800a30e:	0c1b      	lsrs	r3, r3, #16
 800a310:	eba8 0801 	sub.w	r8, r8, r1
 800a314:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a318:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a31c:	fa1f f888 	uxth.w	r8, r8
 800a320:	1419      	asrs	r1, r3, #16
 800a322:	454e      	cmp	r6, r9
 800a324:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a328:	f84a 3b04 	str.w	r3, [sl], #4
 800a32c:	d8e8      	bhi.n	800a300 <__mdiff+0x80>
 800a32e:	1b33      	subs	r3, r6, r4
 800a330:	3b15      	subs	r3, #21
 800a332:	f023 0303 	bic.w	r3, r3, #3
 800a336:	3304      	adds	r3, #4
 800a338:	3415      	adds	r4, #21
 800a33a:	42a6      	cmp	r6, r4
 800a33c:	bf38      	it	cc
 800a33e:	2304      	movcc	r3, #4
 800a340:	441d      	add	r5, r3
 800a342:	4473      	add	r3, lr
 800a344:	469e      	mov	lr, r3
 800a346:	462e      	mov	r6, r5
 800a348:	4566      	cmp	r6, ip
 800a34a:	d30e      	bcc.n	800a36a <__mdiff+0xea>
 800a34c:	f10c 0203 	add.w	r2, ip, #3
 800a350:	1b52      	subs	r2, r2, r5
 800a352:	f022 0203 	bic.w	r2, r2, #3
 800a356:	3d03      	subs	r5, #3
 800a358:	45ac      	cmp	ip, r5
 800a35a:	bf38      	it	cc
 800a35c:	2200      	movcc	r2, #0
 800a35e:	4413      	add	r3, r2
 800a360:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a364:	b17a      	cbz	r2, 800a386 <__mdiff+0x106>
 800a366:	6107      	str	r7, [r0, #16]
 800a368:	e7a4      	b.n	800a2b4 <__mdiff+0x34>
 800a36a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a36e:	fa11 f288 	uxtah	r2, r1, r8
 800a372:	1414      	asrs	r4, r2, #16
 800a374:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a378:	b292      	uxth	r2, r2
 800a37a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a37e:	f84e 2b04 	str.w	r2, [lr], #4
 800a382:	1421      	asrs	r1, r4, #16
 800a384:	e7e0      	b.n	800a348 <__mdiff+0xc8>
 800a386:	3f01      	subs	r7, #1
 800a388:	e7ea      	b.n	800a360 <__mdiff+0xe0>
 800a38a:	bf00      	nop
 800a38c:	0800c7cd 	.word	0x0800c7cd
 800a390:	0800c7de 	.word	0x0800c7de

0800a394 <__ulp>:
 800a394:	b082      	sub	sp, #8
 800a396:	ed8d 0b00 	vstr	d0, [sp]
 800a39a:	9a01      	ldr	r2, [sp, #4]
 800a39c:	4b0f      	ldr	r3, [pc, #60]	; (800a3dc <__ulp+0x48>)
 800a39e:	4013      	ands	r3, r2
 800a3a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	dc08      	bgt.n	800a3ba <__ulp+0x26>
 800a3a8:	425b      	negs	r3, r3
 800a3aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a3ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3b2:	da04      	bge.n	800a3be <__ulp+0x2a>
 800a3b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3b8:	4113      	asrs	r3, r2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	e008      	b.n	800a3d0 <__ulp+0x3c>
 800a3be:	f1a2 0314 	sub.w	r3, r2, #20
 800a3c2:	2b1e      	cmp	r3, #30
 800a3c4:	bfda      	itte	le
 800a3c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a3ca:	40da      	lsrle	r2, r3
 800a3cc:	2201      	movgt	r2, #1
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	ec41 0b10 	vmov	d0, r0, r1
 800a3d8:	b002      	add	sp, #8
 800a3da:	4770      	bx	lr
 800a3dc:	7ff00000 	.word	0x7ff00000

0800a3e0 <__b2d>:
 800a3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e4:	6906      	ldr	r6, [r0, #16]
 800a3e6:	f100 0814 	add.w	r8, r0, #20
 800a3ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a3ee:	1f37      	subs	r7, r6, #4
 800a3f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7ff fd53 	bl	8009ea0 <__hi0bits>
 800a3fa:	f1c0 0320 	rsb	r3, r0, #32
 800a3fe:	280a      	cmp	r0, #10
 800a400:	600b      	str	r3, [r1, #0]
 800a402:	491b      	ldr	r1, [pc, #108]	; (800a470 <__b2d+0x90>)
 800a404:	dc15      	bgt.n	800a432 <__b2d+0x52>
 800a406:	f1c0 0c0b 	rsb	ip, r0, #11
 800a40a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a40e:	45b8      	cmp	r8, r7
 800a410:	ea43 0501 	orr.w	r5, r3, r1
 800a414:	bf34      	ite	cc
 800a416:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a41a:	2300      	movcs	r3, #0
 800a41c:	3015      	adds	r0, #21
 800a41e:	fa02 f000 	lsl.w	r0, r2, r0
 800a422:	fa23 f30c 	lsr.w	r3, r3, ip
 800a426:	4303      	orrs	r3, r0
 800a428:	461c      	mov	r4, r3
 800a42a:	ec45 4b10 	vmov	d0, r4, r5
 800a42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a432:	45b8      	cmp	r8, r7
 800a434:	bf3a      	itte	cc
 800a436:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a43a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a43e:	2300      	movcs	r3, #0
 800a440:	380b      	subs	r0, #11
 800a442:	d012      	beq.n	800a46a <__b2d+0x8a>
 800a444:	f1c0 0120 	rsb	r1, r0, #32
 800a448:	fa23 f401 	lsr.w	r4, r3, r1
 800a44c:	4082      	lsls	r2, r0
 800a44e:	4322      	orrs	r2, r4
 800a450:	4547      	cmp	r7, r8
 800a452:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a456:	bf8c      	ite	hi
 800a458:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a45c:	2200      	movls	r2, #0
 800a45e:	4083      	lsls	r3, r0
 800a460:	40ca      	lsrs	r2, r1
 800a462:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a466:	4313      	orrs	r3, r2
 800a468:	e7de      	b.n	800a428 <__b2d+0x48>
 800a46a:	ea42 0501 	orr.w	r5, r2, r1
 800a46e:	e7db      	b.n	800a428 <__b2d+0x48>
 800a470:	3ff00000 	.word	0x3ff00000

0800a474 <__d2b>:
 800a474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a478:	460f      	mov	r7, r1
 800a47a:	2101      	movs	r1, #1
 800a47c:	ec59 8b10 	vmov	r8, r9, d0
 800a480:	4616      	mov	r6, r2
 800a482:	f7ff fc1b 	bl	8009cbc <_Balloc>
 800a486:	4604      	mov	r4, r0
 800a488:	b930      	cbnz	r0, 800a498 <__d2b+0x24>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4b24      	ldr	r3, [pc, #144]	; (800a520 <__d2b+0xac>)
 800a48e:	4825      	ldr	r0, [pc, #148]	; (800a524 <__d2b+0xb0>)
 800a490:	f240 310f 	movw	r1, #783	; 0x30f
 800a494:	f001 f9a0 	bl	800b7d8 <__assert_func>
 800a498:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a49c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4a0:	bb2d      	cbnz	r5, 800a4ee <__d2b+0x7a>
 800a4a2:	9301      	str	r3, [sp, #4]
 800a4a4:	f1b8 0300 	subs.w	r3, r8, #0
 800a4a8:	d026      	beq.n	800a4f8 <__d2b+0x84>
 800a4aa:	4668      	mov	r0, sp
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	f7ff fd17 	bl	8009ee0 <__lo0bits>
 800a4b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4b6:	b1e8      	cbz	r0, 800a4f4 <__d2b+0x80>
 800a4b8:	f1c0 0320 	rsb	r3, r0, #32
 800a4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	40c2      	lsrs	r2, r0
 800a4c4:	6163      	str	r3, [r4, #20]
 800a4c6:	9201      	str	r2, [sp, #4]
 800a4c8:	9b01      	ldr	r3, [sp, #4]
 800a4ca:	61a3      	str	r3, [r4, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	bf14      	ite	ne
 800a4d0:	2202      	movne	r2, #2
 800a4d2:	2201      	moveq	r2, #1
 800a4d4:	6122      	str	r2, [r4, #16]
 800a4d6:	b1bd      	cbz	r5, 800a508 <__d2b+0x94>
 800a4d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4dc:	4405      	add	r5, r0
 800a4de:	603d      	str	r5, [r7, #0]
 800a4e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4e4:	6030      	str	r0, [r6, #0]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	b003      	add	sp, #12
 800a4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4f2:	e7d6      	b.n	800a4a2 <__d2b+0x2e>
 800a4f4:	6161      	str	r1, [r4, #20]
 800a4f6:	e7e7      	b.n	800a4c8 <__d2b+0x54>
 800a4f8:	a801      	add	r0, sp, #4
 800a4fa:	f7ff fcf1 	bl	8009ee0 <__lo0bits>
 800a4fe:	9b01      	ldr	r3, [sp, #4]
 800a500:	6163      	str	r3, [r4, #20]
 800a502:	3020      	adds	r0, #32
 800a504:	2201      	movs	r2, #1
 800a506:	e7e5      	b.n	800a4d4 <__d2b+0x60>
 800a508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a50c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a510:	6038      	str	r0, [r7, #0]
 800a512:	6918      	ldr	r0, [r3, #16]
 800a514:	f7ff fcc4 	bl	8009ea0 <__hi0bits>
 800a518:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a51c:	e7e2      	b.n	800a4e4 <__d2b+0x70>
 800a51e:	bf00      	nop
 800a520:	0800c7cd 	.word	0x0800c7cd
 800a524:	0800c7de 	.word	0x0800c7de

0800a528 <__ratio>:
 800a528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	4688      	mov	r8, r1
 800a52e:	4669      	mov	r1, sp
 800a530:	4681      	mov	r9, r0
 800a532:	f7ff ff55 	bl	800a3e0 <__b2d>
 800a536:	a901      	add	r1, sp, #4
 800a538:	4640      	mov	r0, r8
 800a53a:	ec55 4b10 	vmov	r4, r5, d0
 800a53e:	f7ff ff4f 	bl	800a3e0 <__b2d>
 800a542:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a546:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a54a:	eba3 0c02 	sub.w	ip, r3, r2
 800a54e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a558:	ec51 0b10 	vmov	r0, r1, d0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfd6      	itet	le
 800a560:	460a      	movle	r2, r1
 800a562:	462a      	movgt	r2, r5
 800a564:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a568:	468b      	mov	fp, r1
 800a56a:	462f      	mov	r7, r5
 800a56c:	bfd4      	ite	le
 800a56e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a572:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a576:	4620      	mov	r0, r4
 800a578:	ee10 2a10 	vmov	r2, s0
 800a57c:	465b      	mov	r3, fp
 800a57e:	4639      	mov	r1, r7
 800a580:	f7f6 f96c 	bl	800085c <__aeabi_ddiv>
 800a584:	ec41 0b10 	vmov	d0, r0, r1
 800a588:	b003      	add	sp, #12
 800a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a58e <__copybits>:
 800a58e:	3901      	subs	r1, #1
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	1149      	asrs	r1, r1, #5
 800a594:	6914      	ldr	r4, [r2, #16]
 800a596:	3101      	adds	r1, #1
 800a598:	f102 0314 	add.w	r3, r2, #20
 800a59c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5a4:	1f05      	subs	r5, r0, #4
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	d30c      	bcc.n	800a5c4 <__copybits+0x36>
 800a5aa:	1aa3      	subs	r3, r4, r2
 800a5ac:	3b11      	subs	r3, #17
 800a5ae:	f023 0303 	bic.w	r3, r3, #3
 800a5b2:	3211      	adds	r2, #17
 800a5b4:	42a2      	cmp	r2, r4
 800a5b6:	bf88      	it	hi
 800a5b8:	2300      	movhi	r3, #0
 800a5ba:	4418      	add	r0, r3
 800a5bc:	2300      	movs	r3, #0
 800a5be:	4288      	cmp	r0, r1
 800a5c0:	d305      	bcc.n	800a5ce <__copybits+0x40>
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5cc:	e7eb      	b.n	800a5a6 <__copybits+0x18>
 800a5ce:	f840 3b04 	str.w	r3, [r0], #4
 800a5d2:	e7f4      	b.n	800a5be <__copybits+0x30>

0800a5d4 <__any_on>:
 800a5d4:	f100 0214 	add.w	r2, r0, #20
 800a5d8:	6900      	ldr	r0, [r0, #16]
 800a5da:	114b      	asrs	r3, r1, #5
 800a5dc:	4298      	cmp	r0, r3
 800a5de:	b510      	push	{r4, lr}
 800a5e0:	db11      	blt.n	800a606 <__any_on+0x32>
 800a5e2:	dd0a      	ble.n	800a5fa <__any_on+0x26>
 800a5e4:	f011 011f 	ands.w	r1, r1, #31
 800a5e8:	d007      	beq.n	800a5fa <__any_on+0x26>
 800a5ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5ee:	fa24 f001 	lsr.w	r0, r4, r1
 800a5f2:	fa00 f101 	lsl.w	r1, r0, r1
 800a5f6:	428c      	cmp	r4, r1
 800a5f8:	d10b      	bne.n	800a612 <__any_on+0x3e>
 800a5fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d803      	bhi.n	800a60a <__any_on+0x36>
 800a602:	2000      	movs	r0, #0
 800a604:	bd10      	pop	{r4, pc}
 800a606:	4603      	mov	r3, r0
 800a608:	e7f7      	b.n	800a5fa <__any_on+0x26>
 800a60a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a60e:	2900      	cmp	r1, #0
 800a610:	d0f5      	beq.n	800a5fe <__any_on+0x2a>
 800a612:	2001      	movs	r0, #1
 800a614:	e7f6      	b.n	800a604 <__any_on+0x30>

0800a616 <sulp>:
 800a616:	b570      	push	{r4, r5, r6, lr}
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	ec45 4b10 	vmov	d0, r4, r5
 800a620:	4616      	mov	r6, r2
 800a622:	f7ff feb7 	bl	800a394 <__ulp>
 800a626:	ec51 0b10 	vmov	r0, r1, d0
 800a62a:	b17e      	cbz	r6, 800a64c <sulp+0x36>
 800a62c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a630:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a634:	2b00      	cmp	r3, #0
 800a636:	dd09      	ble.n	800a64c <sulp+0x36>
 800a638:	051b      	lsls	r3, r3, #20
 800a63a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a63e:	2400      	movs	r4, #0
 800a640:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a644:	4622      	mov	r2, r4
 800a646:	462b      	mov	r3, r5
 800a648:	f7f5 ffde 	bl	8000608 <__aeabi_dmul>
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a650 <_strtod_l>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	ed2d 8b02 	vpush	{d8}
 800a658:	b09b      	sub	sp, #108	; 0x6c
 800a65a:	4604      	mov	r4, r0
 800a65c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a65e:	2200      	movs	r2, #0
 800a660:	9216      	str	r2, [sp, #88]	; 0x58
 800a662:	460d      	mov	r5, r1
 800a664:	f04f 0800 	mov.w	r8, #0
 800a668:	f04f 0900 	mov.w	r9, #0
 800a66c:	460a      	mov	r2, r1
 800a66e:	9215      	str	r2, [sp, #84]	; 0x54
 800a670:	7811      	ldrb	r1, [r2, #0]
 800a672:	292b      	cmp	r1, #43	; 0x2b
 800a674:	d04c      	beq.n	800a710 <_strtod_l+0xc0>
 800a676:	d83a      	bhi.n	800a6ee <_strtod_l+0x9e>
 800a678:	290d      	cmp	r1, #13
 800a67a:	d834      	bhi.n	800a6e6 <_strtod_l+0x96>
 800a67c:	2908      	cmp	r1, #8
 800a67e:	d834      	bhi.n	800a6ea <_strtod_l+0x9a>
 800a680:	2900      	cmp	r1, #0
 800a682:	d03d      	beq.n	800a700 <_strtod_l+0xb0>
 800a684:	2200      	movs	r2, #0
 800a686:	920a      	str	r2, [sp, #40]	; 0x28
 800a688:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a68a:	7832      	ldrb	r2, [r6, #0]
 800a68c:	2a30      	cmp	r2, #48	; 0x30
 800a68e:	f040 80b4 	bne.w	800a7fa <_strtod_l+0x1aa>
 800a692:	7872      	ldrb	r2, [r6, #1]
 800a694:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a698:	2a58      	cmp	r2, #88	; 0x58
 800a69a:	d170      	bne.n	800a77e <_strtod_l+0x12e>
 800a69c:	9302      	str	r3, [sp, #8]
 800a69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	ab16      	add	r3, sp, #88	; 0x58
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	4a8e      	ldr	r2, [pc, #568]	; (800a8e0 <_strtod_l+0x290>)
 800a6a8:	ab17      	add	r3, sp, #92	; 0x5c
 800a6aa:	a915      	add	r1, sp, #84	; 0x54
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f001 f92f 	bl	800b910 <__gethex>
 800a6b2:	f010 070f 	ands.w	r7, r0, #15
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	d005      	beq.n	800a6c6 <_strtod_l+0x76>
 800a6ba:	2f06      	cmp	r7, #6
 800a6bc:	d12a      	bne.n	800a714 <_strtod_l+0xc4>
 800a6be:	3601      	adds	r6, #1
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9615      	str	r6, [sp, #84]	; 0x54
 800a6c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f040 857f 	bne.w	800b1cc <_strtod_l+0xb7c>
 800a6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d0:	b1db      	cbz	r3, 800a70a <_strtod_l+0xba>
 800a6d2:	4642      	mov	r2, r8
 800a6d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a6d8:	ec43 2b10 	vmov	d0, r2, r3
 800a6dc:	b01b      	add	sp, #108	; 0x6c
 800a6de:	ecbd 8b02 	vpop	{d8}
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	2920      	cmp	r1, #32
 800a6e8:	d1cc      	bne.n	800a684 <_strtod_l+0x34>
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	e7bf      	b.n	800a66e <_strtod_l+0x1e>
 800a6ee:	292d      	cmp	r1, #45	; 0x2d
 800a6f0:	d1c8      	bne.n	800a684 <_strtod_l+0x34>
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	910a      	str	r1, [sp, #40]	; 0x28
 800a6f6:	1c51      	adds	r1, r2, #1
 800a6f8:	9115      	str	r1, [sp, #84]	; 0x54
 800a6fa:	7852      	ldrb	r2, [r2, #1]
 800a6fc:	2a00      	cmp	r2, #0
 800a6fe:	d1c3      	bne.n	800a688 <_strtod_l+0x38>
 800a700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a702:	9515      	str	r5, [sp, #84]	; 0x54
 800a704:	2b00      	cmp	r3, #0
 800a706:	f040 855f 	bne.w	800b1c8 <_strtod_l+0xb78>
 800a70a:	4642      	mov	r2, r8
 800a70c:	464b      	mov	r3, r9
 800a70e:	e7e3      	b.n	800a6d8 <_strtod_l+0x88>
 800a710:	2100      	movs	r1, #0
 800a712:	e7ef      	b.n	800a6f4 <_strtod_l+0xa4>
 800a714:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a716:	b13a      	cbz	r2, 800a728 <_strtod_l+0xd8>
 800a718:	2135      	movs	r1, #53	; 0x35
 800a71a:	a818      	add	r0, sp, #96	; 0x60
 800a71c:	f7ff ff37 	bl	800a58e <__copybits>
 800a720:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a722:	4620      	mov	r0, r4
 800a724:	f7ff fb0a 	bl	8009d3c <_Bfree>
 800a728:	3f01      	subs	r7, #1
 800a72a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a72c:	2f04      	cmp	r7, #4
 800a72e:	d806      	bhi.n	800a73e <_strtod_l+0xee>
 800a730:	e8df f007 	tbb	[pc, r7]
 800a734:	201d0314 	.word	0x201d0314
 800a738:	14          	.byte	0x14
 800a739:	00          	.byte	0x00
 800a73a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a73e:	05e9      	lsls	r1, r5, #23
 800a740:	bf48      	it	mi
 800a742:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a74a:	0d1b      	lsrs	r3, r3, #20
 800a74c:	051b      	lsls	r3, r3, #20
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1b9      	bne.n	800a6c6 <_strtod_l+0x76>
 800a752:	f7fe faf5 	bl	8008d40 <__errno>
 800a756:	2322      	movs	r3, #34	; 0x22
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	e7b4      	b.n	800a6c6 <_strtod_l+0x76>
 800a75c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a760:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a764:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a768:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a76c:	e7e7      	b.n	800a73e <_strtod_l+0xee>
 800a76e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a8e8 <_strtod_l+0x298>
 800a772:	e7e4      	b.n	800a73e <_strtod_l+0xee>
 800a774:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a778:	f04f 38ff 	mov.w	r8, #4294967295
 800a77c:	e7df      	b.n	800a73e <_strtod_l+0xee>
 800a77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a780:	1c5a      	adds	r2, r3, #1
 800a782:	9215      	str	r2, [sp, #84]	; 0x54
 800a784:	785b      	ldrb	r3, [r3, #1]
 800a786:	2b30      	cmp	r3, #48	; 0x30
 800a788:	d0f9      	beq.n	800a77e <_strtod_l+0x12e>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d09b      	beq.n	800a6c6 <_strtod_l+0x76>
 800a78e:	2301      	movs	r3, #1
 800a790:	f04f 0a00 	mov.w	sl, #0
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a798:	930b      	str	r3, [sp, #44]	; 0x2c
 800a79a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a79e:	46d3      	mov	fp, sl
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a7a4:	7806      	ldrb	r6, [r0, #0]
 800a7a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a7aa:	b2d9      	uxtb	r1, r3
 800a7ac:	2909      	cmp	r1, #9
 800a7ae:	d926      	bls.n	800a7fe <_strtod_l+0x1ae>
 800a7b0:	494c      	ldr	r1, [pc, #304]	; (800a8e4 <_strtod_l+0x294>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f000 ffe6 	bl	800b784 <strncmp>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d030      	beq.n	800a81e <_strtod_l+0x1ce>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	4632      	mov	r2, r6
 800a7c0:	9005      	str	r0, [sp, #20]
 800a7c2:	465e      	mov	r6, fp
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2a65      	cmp	r2, #101	; 0x65
 800a7c8:	d001      	beq.n	800a7ce <_strtod_l+0x17e>
 800a7ca:	2a45      	cmp	r2, #69	; 0x45
 800a7cc:	d113      	bne.n	800a7f6 <_strtod_l+0x1a6>
 800a7ce:	b91e      	cbnz	r6, 800a7d8 <_strtod_l+0x188>
 800a7d0:	9a04      	ldr	r2, [sp, #16]
 800a7d2:	4302      	orrs	r2, r0
 800a7d4:	d094      	beq.n	800a700 <_strtod_l+0xb0>
 800a7d6:	2600      	movs	r6, #0
 800a7d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a7da:	1c6a      	adds	r2, r5, #1
 800a7dc:	9215      	str	r2, [sp, #84]	; 0x54
 800a7de:	786a      	ldrb	r2, [r5, #1]
 800a7e0:	2a2b      	cmp	r2, #43	; 0x2b
 800a7e2:	d074      	beq.n	800a8ce <_strtod_l+0x27e>
 800a7e4:	2a2d      	cmp	r2, #45	; 0x2d
 800a7e6:	d078      	beq.n	800a8da <_strtod_l+0x28a>
 800a7e8:	f04f 0c00 	mov.w	ip, #0
 800a7ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a7f0:	2909      	cmp	r1, #9
 800a7f2:	d97f      	bls.n	800a8f4 <_strtod_l+0x2a4>
 800a7f4:	9515      	str	r5, [sp, #84]	; 0x54
 800a7f6:	2700      	movs	r7, #0
 800a7f8:	e09e      	b.n	800a938 <_strtod_l+0x2e8>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e7c8      	b.n	800a790 <_strtod_l+0x140>
 800a7fe:	f1bb 0f08 	cmp.w	fp, #8
 800a802:	bfd8      	it	le
 800a804:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a806:	f100 0001 	add.w	r0, r0, #1
 800a80a:	bfda      	itte	le
 800a80c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a810:	9309      	strle	r3, [sp, #36]	; 0x24
 800a812:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a816:	f10b 0b01 	add.w	fp, fp, #1
 800a81a:	9015      	str	r0, [sp, #84]	; 0x54
 800a81c:	e7c1      	b.n	800a7a2 <_strtod_l+0x152>
 800a81e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	9215      	str	r2, [sp, #84]	; 0x54
 800a824:	785a      	ldrb	r2, [r3, #1]
 800a826:	f1bb 0f00 	cmp.w	fp, #0
 800a82a:	d037      	beq.n	800a89c <_strtod_l+0x24c>
 800a82c:	9005      	str	r0, [sp, #20]
 800a82e:	465e      	mov	r6, fp
 800a830:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a834:	2b09      	cmp	r3, #9
 800a836:	d912      	bls.n	800a85e <_strtod_l+0x20e>
 800a838:	2301      	movs	r3, #1
 800a83a:	e7c4      	b.n	800a7c6 <_strtod_l+0x176>
 800a83c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	9215      	str	r2, [sp, #84]	; 0x54
 800a842:	785a      	ldrb	r2, [r3, #1]
 800a844:	3001      	adds	r0, #1
 800a846:	2a30      	cmp	r2, #48	; 0x30
 800a848:	d0f8      	beq.n	800a83c <_strtod_l+0x1ec>
 800a84a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a84e:	2b08      	cmp	r3, #8
 800a850:	f200 84c1 	bhi.w	800b1d6 <_strtod_l+0xb86>
 800a854:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a856:	9005      	str	r0, [sp, #20]
 800a858:	2000      	movs	r0, #0
 800a85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85c:	4606      	mov	r6, r0
 800a85e:	3a30      	subs	r2, #48	; 0x30
 800a860:	f100 0301 	add.w	r3, r0, #1
 800a864:	d014      	beq.n	800a890 <_strtod_l+0x240>
 800a866:	9905      	ldr	r1, [sp, #20]
 800a868:	4419      	add	r1, r3
 800a86a:	9105      	str	r1, [sp, #20]
 800a86c:	4633      	mov	r3, r6
 800a86e:	eb00 0c06 	add.w	ip, r0, r6
 800a872:	210a      	movs	r1, #10
 800a874:	4563      	cmp	r3, ip
 800a876:	d113      	bne.n	800a8a0 <_strtod_l+0x250>
 800a878:	1833      	adds	r3, r6, r0
 800a87a:	2b08      	cmp	r3, #8
 800a87c:	f106 0601 	add.w	r6, r6, #1
 800a880:	4406      	add	r6, r0
 800a882:	dc1a      	bgt.n	800a8ba <_strtod_l+0x26a>
 800a884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a886:	230a      	movs	r3, #10
 800a888:	fb03 2301 	mla	r3, r3, r1, r2
 800a88c:	9309      	str	r3, [sp, #36]	; 0x24
 800a88e:	2300      	movs	r3, #0
 800a890:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a892:	1c51      	adds	r1, r2, #1
 800a894:	9115      	str	r1, [sp, #84]	; 0x54
 800a896:	7852      	ldrb	r2, [r2, #1]
 800a898:	4618      	mov	r0, r3
 800a89a:	e7c9      	b.n	800a830 <_strtod_l+0x1e0>
 800a89c:	4658      	mov	r0, fp
 800a89e:	e7d2      	b.n	800a846 <_strtod_l+0x1f6>
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	f103 0301 	add.w	r3, r3, #1
 800a8a6:	dc03      	bgt.n	800a8b0 <_strtod_l+0x260>
 800a8a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8aa:	434f      	muls	r7, r1
 800a8ac:	9709      	str	r7, [sp, #36]	; 0x24
 800a8ae:	e7e1      	b.n	800a874 <_strtod_l+0x224>
 800a8b0:	2b10      	cmp	r3, #16
 800a8b2:	bfd8      	it	le
 800a8b4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a8b8:	e7dc      	b.n	800a874 <_strtod_l+0x224>
 800a8ba:	2e10      	cmp	r6, #16
 800a8bc:	bfdc      	itt	le
 800a8be:	230a      	movle	r3, #10
 800a8c0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a8c4:	e7e3      	b.n	800a88e <_strtod_l+0x23e>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	9305      	str	r3, [sp, #20]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e780      	b.n	800a7d0 <_strtod_l+0x180>
 800a8ce:	f04f 0c00 	mov.w	ip, #0
 800a8d2:	1caa      	adds	r2, r5, #2
 800a8d4:	9215      	str	r2, [sp, #84]	; 0x54
 800a8d6:	78aa      	ldrb	r2, [r5, #2]
 800a8d8:	e788      	b.n	800a7ec <_strtod_l+0x19c>
 800a8da:	f04f 0c01 	mov.w	ip, #1
 800a8de:	e7f8      	b.n	800a8d2 <_strtod_l+0x282>
 800a8e0:	0800c938 	.word	0x0800c938
 800a8e4:	0800c934 	.word	0x0800c934
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a8ee:	1c51      	adds	r1, r2, #1
 800a8f0:	9115      	str	r1, [sp, #84]	; 0x54
 800a8f2:	7852      	ldrb	r2, [r2, #1]
 800a8f4:	2a30      	cmp	r2, #48	; 0x30
 800a8f6:	d0f9      	beq.n	800a8ec <_strtod_l+0x29c>
 800a8f8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a8fc:	2908      	cmp	r1, #8
 800a8fe:	f63f af7a 	bhi.w	800a7f6 <_strtod_l+0x1a6>
 800a902:	3a30      	subs	r2, #48	; 0x30
 800a904:	9208      	str	r2, [sp, #32]
 800a906:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a908:	920c      	str	r2, [sp, #48]	; 0x30
 800a90a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a90c:	1c57      	adds	r7, r2, #1
 800a90e:	9715      	str	r7, [sp, #84]	; 0x54
 800a910:	7852      	ldrb	r2, [r2, #1]
 800a912:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a916:	f1be 0f09 	cmp.w	lr, #9
 800a91a:	d938      	bls.n	800a98e <_strtod_l+0x33e>
 800a91c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a91e:	1a7f      	subs	r7, r7, r1
 800a920:	2f08      	cmp	r7, #8
 800a922:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a926:	dc03      	bgt.n	800a930 <_strtod_l+0x2e0>
 800a928:	9908      	ldr	r1, [sp, #32]
 800a92a:	428f      	cmp	r7, r1
 800a92c:	bfa8      	it	ge
 800a92e:	460f      	movge	r7, r1
 800a930:	f1bc 0f00 	cmp.w	ip, #0
 800a934:	d000      	beq.n	800a938 <_strtod_l+0x2e8>
 800a936:	427f      	negs	r7, r7
 800a938:	2e00      	cmp	r6, #0
 800a93a:	d14f      	bne.n	800a9dc <_strtod_l+0x38c>
 800a93c:	9904      	ldr	r1, [sp, #16]
 800a93e:	4301      	orrs	r1, r0
 800a940:	f47f aec1 	bne.w	800a6c6 <_strtod_l+0x76>
 800a944:	2b00      	cmp	r3, #0
 800a946:	f47f aedb 	bne.w	800a700 <_strtod_l+0xb0>
 800a94a:	2a69      	cmp	r2, #105	; 0x69
 800a94c:	d029      	beq.n	800a9a2 <_strtod_l+0x352>
 800a94e:	dc26      	bgt.n	800a99e <_strtod_l+0x34e>
 800a950:	2a49      	cmp	r2, #73	; 0x49
 800a952:	d026      	beq.n	800a9a2 <_strtod_l+0x352>
 800a954:	2a4e      	cmp	r2, #78	; 0x4e
 800a956:	f47f aed3 	bne.w	800a700 <_strtod_l+0xb0>
 800a95a:	499b      	ldr	r1, [pc, #620]	; (800abc8 <_strtod_l+0x578>)
 800a95c:	a815      	add	r0, sp, #84	; 0x54
 800a95e:	f001 fa17 	bl	800bd90 <__match>
 800a962:	2800      	cmp	r0, #0
 800a964:	f43f aecc 	beq.w	800a700 <_strtod_l+0xb0>
 800a968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b28      	cmp	r3, #40	; 0x28
 800a96e:	d12f      	bne.n	800a9d0 <_strtod_l+0x380>
 800a970:	4996      	ldr	r1, [pc, #600]	; (800abcc <_strtod_l+0x57c>)
 800a972:	aa18      	add	r2, sp, #96	; 0x60
 800a974:	a815      	add	r0, sp, #84	; 0x54
 800a976:	f001 fa1f 	bl	800bdb8 <__hexnan>
 800a97a:	2805      	cmp	r0, #5
 800a97c:	d128      	bne.n	800a9d0 <_strtod_l+0x380>
 800a97e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a980:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a984:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a988:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a98c:	e69b      	b.n	800a6c6 <_strtod_l+0x76>
 800a98e:	9f08      	ldr	r7, [sp, #32]
 800a990:	210a      	movs	r1, #10
 800a992:	fb01 2107 	mla	r1, r1, r7, r2
 800a996:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a99a:	9208      	str	r2, [sp, #32]
 800a99c:	e7b5      	b.n	800a90a <_strtod_l+0x2ba>
 800a99e:	2a6e      	cmp	r2, #110	; 0x6e
 800a9a0:	e7d9      	b.n	800a956 <_strtod_l+0x306>
 800a9a2:	498b      	ldr	r1, [pc, #556]	; (800abd0 <_strtod_l+0x580>)
 800a9a4:	a815      	add	r0, sp, #84	; 0x54
 800a9a6:	f001 f9f3 	bl	800bd90 <__match>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f43f aea8 	beq.w	800a700 <_strtod_l+0xb0>
 800a9b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9b2:	4988      	ldr	r1, [pc, #544]	; (800abd4 <_strtod_l+0x584>)
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	a815      	add	r0, sp, #84	; 0x54
 800a9b8:	9315      	str	r3, [sp, #84]	; 0x54
 800a9ba:	f001 f9e9 	bl	800bd90 <__match>
 800a9be:	b910      	cbnz	r0, 800a9c6 <_strtod_l+0x376>
 800a9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	9315      	str	r3, [sp, #84]	; 0x54
 800a9c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800abe4 <_strtod_l+0x594>
 800a9ca:	f04f 0800 	mov.w	r8, #0
 800a9ce:	e67a      	b.n	800a6c6 <_strtod_l+0x76>
 800a9d0:	4881      	ldr	r0, [pc, #516]	; (800abd8 <_strtod_l+0x588>)
 800a9d2:	f000 fef9 	bl	800b7c8 <nan>
 800a9d6:	ec59 8b10 	vmov	r8, r9, d0
 800a9da:	e674      	b.n	800a6c6 <_strtod_l+0x76>
 800a9dc:	9b05      	ldr	r3, [sp, #20]
 800a9de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9e0:	1afb      	subs	r3, r7, r3
 800a9e2:	f1bb 0f00 	cmp.w	fp, #0
 800a9e6:	bf08      	it	eq
 800a9e8:	46b3      	moveq	fp, r6
 800a9ea:	2e10      	cmp	r6, #16
 800a9ec:	9308      	str	r3, [sp, #32]
 800a9ee:	4635      	mov	r5, r6
 800a9f0:	bfa8      	it	ge
 800a9f2:	2510      	movge	r5, #16
 800a9f4:	f7f5 fd8e 	bl	8000514 <__aeabi_ui2d>
 800a9f8:	2e09      	cmp	r6, #9
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	4689      	mov	r9, r1
 800a9fe:	dd13      	ble.n	800aa28 <_strtod_l+0x3d8>
 800aa00:	4b76      	ldr	r3, [pc, #472]	; (800abdc <_strtod_l+0x58c>)
 800aa02:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa0a:	f7f5 fdfd 	bl	8000608 <__aeabi_dmul>
 800aa0e:	4680      	mov	r8, r0
 800aa10:	4650      	mov	r0, sl
 800aa12:	4689      	mov	r9, r1
 800aa14:	f7f5 fd7e 	bl	8000514 <__aeabi_ui2d>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 fc3c 	bl	800029c <__adddf3>
 800aa24:	4680      	mov	r8, r0
 800aa26:	4689      	mov	r9, r1
 800aa28:	2e0f      	cmp	r6, #15
 800aa2a:	dc38      	bgt.n	800aa9e <_strtod_l+0x44e>
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f43f ae49 	beq.w	800a6c6 <_strtod_l+0x76>
 800aa34:	dd24      	ble.n	800aa80 <_strtod_l+0x430>
 800aa36:	2b16      	cmp	r3, #22
 800aa38:	dc0b      	bgt.n	800aa52 <_strtod_l+0x402>
 800aa3a:	4968      	ldr	r1, [pc, #416]	; (800abdc <_strtod_l+0x58c>)
 800aa3c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa44:	4642      	mov	r2, r8
 800aa46:	464b      	mov	r3, r9
 800aa48:	f7f5 fdde 	bl	8000608 <__aeabi_dmul>
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	4689      	mov	r9, r1
 800aa50:	e639      	b.n	800a6c6 <_strtod_l+0x76>
 800aa52:	9a08      	ldr	r2, [sp, #32]
 800aa54:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	db20      	blt.n	800aa9e <_strtod_l+0x44e>
 800aa5c:	4c5f      	ldr	r4, [pc, #380]	; (800abdc <_strtod_l+0x58c>)
 800aa5e:	f1c6 060f 	rsb	r6, r6, #15
 800aa62:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aa66:	4642      	mov	r2, r8
 800aa68:	464b      	mov	r3, r9
 800aa6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6e:	f7f5 fdcb 	bl	8000608 <__aeabi_dmul>
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	1b9e      	subs	r6, r3, r6
 800aa76:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aa7a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa7e:	e7e3      	b.n	800aa48 <_strtod_l+0x3f8>
 800aa80:	9b08      	ldr	r3, [sp, #32]
 800aa82:	3316      	adds	r3, #22
 800aa84:	db0b      	blt.n	800aa9e <_strtod_l+0x44e>
 800aa86:	9b05      	ldr	r3, [sp, #20]
 800aa88:	1bdf      	subs	r7, r3, r7
 800aa8a:	4b54      	ldr	r3, [pc, #336]	; (800abdc <_strtod_l+0x58c>)
 800aa8c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aa90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fee0 	bl	800085c <__aeabi_ddiv>
 800aa9c:	e7d6      	b.n	800aa4c <_strtod_l+0x3fc>
 800aa9e:	9b08      	ldr	r3, [sp, #32]
 800aaa0:	1b75      	subs	r5, r6, r5
 800aaa2:	441d      	add	r5, r3
 800aaa4:	2d00      	cmp	r5, #0
 800aaa6:	dd70      	ble.n	800ab8a <_strtod_l+0x53a>
 800aaa8:	f015 030f 	ands.w	r3, r5, #15
 800aaac:	d00a      	beq.n	800aac4 <_strtod_l+0x474>
 800aaae:	494b      	ldr	r1, [pc, #300]	; (800abdc <_strtod_l+0x58c>)
 800aab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aabc:	f7f5 fda4 	bl	8000608 <__aeabi_dmul>
 800aac0:	4680      	mov	r8, r0
 800aac2:	4689      	mov	r9, r1
 800aac4:	f035 050f 	bics.w	r5, r5, #15
 800aac8:	d04d      	beq.n	800ab66 <_strtod_l+0x516>
 800aaca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800aace:	dd22      	ble.n	800ab16 <_strtod_l+0x4c6>
 800aad0:	2500      	movs	r5, #0
 800aad2:	46ab      	mov	fp, r5
 800aad4:	9509      	str	r5, [sp, #36]	; 0x24
 800aad6:	9505      	str	r5, [sp, #20]
 800aad8:	2322      	movs	r3, #34	; 0x22
 800aada:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800abe4 <_strtod_l+0x594>
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	f04f 0800 	mov.w	r8, #0
 800aae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f43f aded 	beq.w	800a6c6 <_strtod_l+0x76>
 800aaec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f7ff f924 	bl	8009d3c <_Bfree>
 800aaf4:	9905      	ldr	r1, [sp, #20]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7ff f920 	bl	8009d3c <_Bfree>
 800aafc:	4659      	mov	r1, fp
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7ff f91c 	bl	8009d3c <_Bfree>
 800ab04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff f918 	bl	8009d3c <_Bfree>
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f7ff f914 	bl	8009d3c <_Bfree>
 800ab14:	e5d7      	b.n	800a6c6 <_strtod_l+0x76>
 800ab16:	4b32      	ldr	r3, [pc, #200]	; (800abe0 <_strtod_l+0x590>)
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	112d      	asrs	r5, r5, #4
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	469a      	mov	sl, r3
 800ab24:	2d01      	cmp	r5, #1
 800ab26:	dc21      	bgt.n	800ab6c <_strtod_l+0x51c>
 800ab28:	b10b      	cbz	r3, 800ab2e <_strtod_l+0x4de>
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	4689      	mov	r9, r1
 800ab2e:	492c      	ldr	r1, [pc, #176]	; (800abe0 <_strtod_l+0x590>)
 800ab30:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ab34:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ab38:	4642      	mov	r2, r8
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab40:	f7f5 fd62 	bl	8000608 <__aeabi_dmul>
 800ab44:	4b27      	ldr	r3, [pc, #156]	; (800abe4 <_strtod_l+0x594>)
 800ab46:	460a      	mov	r2, r1
 800ab48:	400b      	ands	r3, r1
 800ab4a:	4927      	ldr	r1, [pc, #156]	; (800abe8 <_strtod_l+0x598>)
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	4680      	mov	r8, r0
 800ab50:	d8be      	bhi.n	800aad0 <_strtod_l+0x480>
 800ab52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab56:	428b      	cmp	r3, r1
 800ab58:	bf86      	itte	hi
 800ab5a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800abec <_strtod_l+0x59c>
 800ab5e:	f04f 38ff 	movhi.w	r8, #4294967295
 800ab62:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ab66:	2300      	movs	r3, #0
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	e07b      	b.n	800ac64 <_strtod_l+0x614>
 800ab6c:	07ea      	lsls	r2, r5, #31
 800ab6e:	d505      	bpl.n	800ab7c <_strtod_l+0x52c>
 800ab70:	9b04      	ldr	r3, [sp, #16]
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fd47 	bl	8000608 <__aeabi_dmul>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	9a04      	ldr	r2, [sp, #16]
 800ab7e:	3208      	adds	r2, #8
 800ab80:	f10a 0a01 	add.w	sl, sl, #1
 800ab84:	106d      	asrs	r5, r5, #1
 800ab86:	9204      	str	r2, [sp, #16]
 800ab88:	e7cc      	b.n	800ab24 <_strtod_l+0x4d4>
 800ab8a:	d0ec      	beq.n	800ab66 <_strtod_l+0x516>
 800ab8c:	426d      	negs	r5, r5
 800ab8e:	f015 020f 	ands.w	r2, r5, #15
 800ab92:	d00a      	beq.n	800abaa <_strtod_l+0x55a>
 800ab94:	4b11      	ldr	r3, [pc, #68]	; (800abdc <_strtod_l+0x58c>)
 800ab96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	f7f5 fe5b 	bl	800085c <__aeabi_ddiv>
 800aba6:	4680      	mov	r8, r0
 800aba8:	4689      	mov	r9, r1
 800abaa:	112d      	asrs	r5, r5, #4
 800abac:	d0db      	beq.n	800ab66 <_strtod_l+0x516>
 800abae:	2d1f      	cmp	r5, #31
 800abb0:	dd1e      	ble.n	800abf0 <_strtod_l+0x5a0>
 800abb2:	2500      	movs	r5, #0
 800abb4:	46ab      	mov	fp, r5
 800abb6:	9509      	str	r5, [sp, #36]	; 0x24
 800abb8:	9505      	str	r5, [sp, #20]
 800abba:	2322      	movs	r3, #34	; 0x22
 800abbc:	f04f 0800 	mov.w	r8, #0
 800abc0:	f04f 0900 	mov.w	r9, #0
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	e78d      	b.n	800aae4 <_strtod_l+0x494>
 800abc8:	0800c725 	.word	0x0800c725
 800abcc:	0800c94c 	.word	0x0800c94c
 800abd0:	0800c71d 	.word	0x0800c71d
 800abd4:	0800c754 	.word	0x0800c754
 800abd8:	0800cadd 	.word	0x0800cadd
 800abdc:	0800c860 	.word	0x0800c860
 800abe0:	0800c838 	.word	0x0800c838
 800abe4:	7ff00000 	.word	0x7ff00000
 800abe8:	7ca00000 	.word	0x7ca00000
 800abec:	7fefffff 	.word	0x7fefffff
 800abf0:	f015 0310 	ands.w	r3, r5, #16
 800abf4:	bf18      	it	ne
 800abf6:	236a      	movne	r3, #106	; 0x6a
 800abf8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800af9c <_strtod_l+0x94c>
 800abfc:	9304      	str	r3, [sp, #16]
 800abfe:	4640      	mov	r0, r8
 800ac00:	4649      	mov	r1, r9
 800ac02:	2300      	movs	r3, #0
 800ac04:	07ea      	lsls	r2, r5, #31
 800ac06:	d504      	bpl.n	800ac12 <_strtod_l+0x5c2>
 800ac08:	e9da 2300 	ldrd	r2, r3, [sl]
 800ac0c:	f7f5 fcfc 	bl	8000608 <__aeabi_dmul>
 800ac10:	2301      	movs	r3, #1
 800ac12:	106d      	asrs	r5, r5, #1
 800ac14:	f10a 0a08 	add.w	sl, sl, #8
 800ac18:	d1f4      	bne.n	800ac04 <_strtod_l+0x5b4>
 800ac1a:	b10b      	cbz	r3, 800ac20 <_strtod_l+0x5d0>
 800ac1c:	4680      	mov	r8, r0
 800ac1e:	4689      	mov	r9, r1
 800ac20:	9b04      	ldr	r3, [sp, #16]
 800ac22:	b1bb      	cbz	r3, 800ac54 <_strtod_l+0x604>
 800ac24:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ac28:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	4649      	mov	r1, r9
 800ac30:	dd10      	ble.n	800ac54 <_strtod_l+0x604>
 800ac32:	2b1f      	cmp	r3, #31
 800ac34:	f340 811e 	ble.w	800ae74 <_strtod_l+0x824>
 800ac38:	2b34      	cmp	r3, #52	; 0x34
 800ac3a:	bfde      	ittt	le
 800ac3c:	f04f 33ff 	movle.w	r3, #4294967295
 800ac40:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ac44:	4093      	lslle	r3, r2
 800ac46:	f04f 0800 	mov.w	r8, #0
 800ac4a:	bfcc      	ite	gt
 800ac4c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ac50:	ea03 0901 	andle.w	r9, r3, r1
 800ac54:	2200      	movs	r2, #0
 800ac56:	2300      	movs	r3, #0
 800ac58:	4640      	mov	r0, r8
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 ff3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1a6      	bne.n	800abb2 <_strtod_l+0x562>
 800ac64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac6a:	4633      	mov	r3, r6
 800ac6c:	465a      	mov	r2, fp
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f7ff f8cc 	bl	8009e0c <__s2b>
 800ac74:	9009      	str	r0, [sp, #36]	; 0x24
 800ac76:	2800      	cmp	r0, #0
 800ac78:	f43f af2a 	beq.w	800aad0 <_strtod_l+0x480>
 800ac7c:	9a08      	ldr	r2, [sp, #32]
 800ac7e:	9b05      	ldr	r3, [sp, #20]
 800ac80:	2a00      	cmp	r2, #0
 800ac82:	eba3 0307 	sub.w	r3, r3, r7
 800ac86:	bfa8      	it	ge
 800ac88:	2300      	movge	r3, #0
 800ac8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ac8c:	2500      	movs	r5, #0
 800ac8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac92:	9312      	str	r3, [sp, #72]	; 0x48
 800ac94:	46ab      	mov	fp, r5
 800ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac98:	4620      	mov	r0, r4
 800ac9a:	6859      	ldr	r1, [r3, #4]
 800ac9c:	f7ff f80e 	bl	8009cbc <_Balloc>
 800aca0:	9005      	str	r0, [sp, #20]
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f43f af18 	beq.w	800aad8 <_strtod_l+0x488>
 800aca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	3202      	adds	r2, #2
 800acae:	f103 010c 	add.w	r1, r3, #12
 800acb2:	0092      	lsls	r2, r2, #2
 800acb4:	300c      	adds	r0, #12
 800acb6:	f7fe f870 	bl	8008d9a <memcpy>
 800acba:	ec49 8b10 	vmov	d0, r8, r9
 800acbe:	aa18      	add	r2, sp, #96	; 0x60
 800acc0:	a917      	add	r1, sp, #92	; 0x5c
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7ff fbd6 	bl	800a474 <__d2b>
 800acc8:	ec49 8b18 	vmov	d8, r8, r9
 800accc:	9016      	str	r0, [sp, #88]	; 0x58
 800acce:	2800      	cmp	r0, #0
 800acd0:	f43f af02 	beq.w	800aad8 <_strtod_l+0x488>
 800acd4:	2101      	movs	r1, #1
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7ff f930 	bl	8009f3c <__i2b>
 800acdc:	4683      	mov	fp, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f aefa 	beq.w	800aad8 <_strtod_l+0x488>
 800ace4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ace6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ace8:	2e00      	cmp	r6, #0
 800acea:	bfab      	itete	ge
 800acec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800acee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800acf0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800acf2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800acf6:	bfac      	ite	ge
 800acf8:	eb06 0a03 	addge.w	sl, r6, r3
 800acfc:	1b9f      	sublt	r7, r3, r6
 800acfe:	9b04      	ldr	r3, [sp, #16]
 800ad00:	1af6      	subs	r6, r6, r3
 800ad02:	4416      	add	r6, r2
 800ad04:	4ba0      	ldr	r3, [pc, #640]	; (800af88 <_strtod_l+0x938>)
 800ad06:	3e01      	subs	r6, #1
 800ad08:	429e      	cmp	r6, r3
 800ad0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad0e:	f280 80c4 	bge.w	800ae9a <_strtod_l+0x84a>
 800ad12:	1b9b      	subs	r3, r3, r6
 800ad14:	2b1f      	cmp	r3, #31
 800ad16:	eba2 0203 	sub.w	r2, r2, r3
 800ad1a:	f04f 0101 	mov.w	r1, #1
 800ad1e:	f300 80b0 	bgt.w	800ae82 <_strtod_l+0x832>
 800ad22:	fa01 f303 	lsl.w	r3, r1, r3
 800ad26:	930e      	str	r3, [sp, #56]	; 0x38
 800ad28:	2300      	movs	r3, #0
 800ad2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad2c:	eb0a 0602 	add.w	r6, sl, r2
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	45b2      	cmp	sl, r6
 800ad34:	4417      	add	r7, r2
 800ad36:	441f      	add	r7, r3
 800ad38:	4653      	mov	r3, sl
 800ad3a:	bfa8      	it	ge
 800ad3c:	4633      	movge	r3, r6
 800ad3e:	42bb      	cmp	r3, r7
 800ad40:	bfa8      	it	ge
 800ad42:	463b      	movge	r3, r7
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfc2      	ittt	gt
 800ad48:	1af6      	subgt	r6, r6, r3
 800ad4a:	1aff      	subgt	r7, r7, r3
 800ad4c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ad50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dd17      	ble.n	800ad86 <_strtod_l+0x736>
 800ad56:	4659      	mov	r1, fp
 800ad58:	461a      	mov	r2, r3
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff f9ae 	bl	800a0bc <__pow5mult>
 800ad60:	4683      	mov	fp, r0
 800ad62:	2800      	cmp	r0, #0
 800ad64:	f43f aeb8 	beq.w	800aad8 <_strtod_l+0x488>
 800ad68:	4601      	mov	r1, r0
 800ad6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7ff f8fb 	bl	8009f68 <__multiply>
 800ad72:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f43f aeaf 	beq.w	800aad8 <_strtod_l+0x488>
 800ad7a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7fe ffdd 	bl	8009d3c <_Bfree>
 800ad82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad84:	9316      	str	r3, [sp, #88]	; 0x58
 800ad86:	2e00      	cmp	r6, #0
 800ad88:	f300 808c 	bgt.w	800aea4 <_strtod_l+0x854>
 800ad8c:	9b08      	ldr	r3, [sp, #32]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd08      	ble.n	800ada4 <_strtod_l+0x754>
 800ad92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad94:	9905      	ldr	r1, [sp, #20]
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7ff f990 	bl	800a0bc <__pow5mult>
 800ad9c:	9005      	str	r0, [sp, #20]
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	f43f ae9a 	beq.w	800aad8 <_strtod_l+0x488>
 800ada4:	2f00      	cmp	r7, #0
 800ada6:	dd08      	ble.n	800adba <_strtod_l+0x76a>
 800ada8:	9905      	ldr	r1, [sp, #20]
 800adaa:	463a      	mov	r2, r7
 800adac:	4620      	mov	r0, r4
 800adae:	f7ff f9df 	bl	800a170 <__lshift>
 800adb2:	9005      	str	r0, [sp, #20]
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f43f ae8f 	beq.w	800aad8 <_strtod_l+0x488>
 800adba:	f1ba 0f00 	cmp.w	sl, #0
 800adbe:	dd08      	ble.n	800add2 <_strtod_l+0x782>
 800adc0:	4659      	mov	r1, fp
 800adc2:	4652      	mov	r2, sl
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7ff f9d3 	bl	800a170 <__lshift>
 800adca:	4683      	mov	fp, r0
 800adcc:	2800      	cmp	r0, #0
 800adce:	f43f ae83 	beq.w	800aad8 <_strtod_l+0x488>
 800add2:	9a05      	ldr	r2, [sp, #20]
 800add4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff fa52 	bl	800a280 <__mdiff>
 800addc:	4605      	mov	r5, r0
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f ae7a 	beq.w	800aad8 <_strtod_l+0x488>
 800ade4:	68c3      	ldr	r3, [r0, #12]
 800ade6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade8:	2300      	movs	r3, #0
 800adea:	60c3      	str	r3, [r0, #12]
 800adec:	4659      	mov	r1, fp
 800adee:	f7ff fa2b 	bl	800a248 <__mcmp>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	da60      	bge.n	800aeb8 <_strtod_l+0x868>
 800adf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf8:	ea53 0308 	orrs.w	r3, r3, r8
 800adfc:	f040 8084 	bne.w	800af08 <_strtod_l+0x8b8>
 800ae00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d17f      	bne.n	800af08 <_strtod_l+0x8b8>
 800ae08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae0c:	0d1b      	lsrs	r3, r3, #20
 800ae0e:	051b      	lsls	r3, r3, #20
 800ae10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae14:	d978      	bls.n	800af08 <_strtod_l+0x8b8>
 800ae16:	696b      	ldr	r3, [r5, #20]
 800ae18:	b913      	cbnz	r3, 800ae20 <_strtod_l+0x7d0>
 800ae1a:	692b      	ldr	r3, [r5, #16]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	dd73      	ble.n	800af08 <_strtod_l+0x8b8>
 800ae20:	4629      	mov	r1, r5
 800ae22:	2201      	movs	r2, #1
 800ae24:	4620      	mov	r0, r4
 800ae26:	f7ff f9a3 	bl	800a170 <__lshift>
 800ae2a:	4659      	mov	r1, fp
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	f7ff fa0b 	bl	800a248 <__mcmp>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	dd68      	ble.n	800af08 <_strtod_l+0x8b8>
 800ae36:	9904      	ldr	r1, [sp, #16]
 800ae38:	4a54      	ldr	r2, [pc, #336]	; (800af8c <_strtod_l+0x93c>)
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	2900      	cmp	r1, #0
 800ae3e:	f000 8084 	beq.w	800af4a <_strtod_l+0x8fa>
 800ae42:	ea02 0109 	and.w	r1, r2, r9
 800ae46:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae4a:	dc7e      	bgt.n	800af4a <_strtod_l+0x8fa>
 800ae4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae50:	f77f aeb3 	ble.w	800abba <_strtod_l+0x56a>
 800ae54:	4b4e      	ldr	r3, [pc, #312]	; (800af90 <_strtod_l+0x940>)
 800ae56:	4640      	mov	r0, r8
 800ae58:	4649      	mov	r1, r9
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f7f5 fbd4 	bl	8000608 <__aeabi_dmul>
 800ae60:	4b4a      	ldr	r3, [pc, #296]	; (800af8c <_strtod_l+0x93c>)
 800ae62:	400b      	ands	r3, r1
 800ae64:	4680      	mov	r8, r0
 800ae66:	4689      	mov	r9, r1
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f47f ae3f 	bne.w	800aaec <_strtod_l+0x49c>
 800ae6e:	2322      	movs	r3, #34	; 0x22
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	e63b      	b.n	800aaec <_strtod_l+0x49c>
 800ae74:	f04f 32ff 	mov.w	r2, #4294967295
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	ea03 0808 	and.w	r8, r3, r8
 800ae80:	e6e8      	b.n	800ac54 <_strtod_l+0x604>
 800ae82:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ae86:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ae8a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ae8e:	36e2      	adds	r6, #226	; 0xe2
 800ae90:	fa01 f306 	lsl.w	r3, r1, r6
 800ae94:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ae98:	e748      	b.n	800ad2c <_strtod_l+0x6dc>
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800aea2:	e743      	b.n	800ad2c <_strtod_l+0x6dc>
 800aea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aea6:	4632      	mov	r2, r6
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f7ff f961 	bl	800a170 <__lshift>
 800aeae:	9016      	str	r0, [sp, #88]	; 0x58
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f47f af6b 	bne.w	800ad8c <_strtod_l+0x73c>
 800aeb6:	e60f      	b.n	800aad8 <_strtod_l+0x488>
 800aeb8:	46ca      	mov	sl, r9
 800aeba:	d171      	bne.n	800afa0 <_strtod_l+0x950>
 800aebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aebe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aec2:	b352      	cbz	r2, 800af1a <_strtod_l+0x8ca>
 800aec4:	4a33      	ldr	r2, [pc, #204]	; (800af94 <_strtod_l+0x944>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d12a      	bne.n	800af20 <_strtod_l+0x8d0>
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	4641      	mov	r1, r8
 800aece:	b1fb      	cbz	r3, 800af10 <_strtod_l+0x8c0>
 800aed0:	4b2e      	ldr	r3, [pc, #184]	; (800af8c <_strtod_l+0x93c>)
 800aed2:	ea09 0303 	and.w	r3, r9, r3
 800aed6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aeda:	f04f 32ff 	mov.w	r2, #4294967295
 800aede:	d81a      	bhi.n	800af16 <_strtod_l+0x8c6>
 800aee0:	0d1b      	lsrs	r3, r3, #20
 800aee2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aee6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeea:	4299      	cmp	r1, r3
 800aeec:	d118      	bne.n	800af20 <_strtod_l+0x8d0>
 800aeee:	4b2a      	ldr	r3, [pc, #168]	; (800af98 <_strtod_l+0x948>)
 800aef0:	459a      	cmp	sl, r3
 800aef2:	d102      	bne.n	800aefa <_strtod_l+0x8aa>
 800aef4:	3101      	adds	r1, #1
 800aef6:	f43f adef 	beq.w	800aad8 <_strtod_l+0x488>
 800aefa:	4b24      	ldr	r3, [pc, #144]	; (800af8c <_strtod_l+0x93c>)
 800aefc:	ea0a 0303 	and.w	r3, sl, r3
 800af00:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af04:	f04f 0800 	mov.w	r8, #0
 800af08:	9b04      	ldr	r3, [sp, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1a2      	bne.n	800ae54 <_strtod_l+0x804>
 800af0e:	e5ed      	b.n	800aaec <_strtod_l+0x49c>
 800af10:	f04f 33ff 	mov.w	r3, #4294967295
 800af14:	e7e9      	b.n	800aeea <_strtod_l+0x89a>
 800af16:	4613      	mov	r3, r2
 800af18:	e7e7      	b.n	800aeea <_strtod_l+0x89a>
 800af1a:	ea53 0308 	orrs.w	r3, r3, r8
 800af1e:	d08a      	beq.n	800ae36 <_strtod_l+0x7e6>
 800af20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af22:	b1e3      	cbz	r3, 800af5e <_strtod_l+0x90e>
 800af24:	ea13 0f0a 	tst.w	r3, sl
 800af28:	d0ee      	beq.n	800af08 <_strtod_l+0x8b8>
 800af2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af2c:	9a04      	ldr	r2, [sp, #16]
 800af2e:	4640      	mov	r0, r8
 800af30:	4649      	mov	r1, r9
 800af32:	b1c3      	cbz	r3, 800af66 <_strtod_l+0x916>
 800af34:	f7ff fb6f 	bl	800a616 <sulp>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	ec51 0b18 	vmov	r0, r1, d8
 800af40:	f7f5 f9ac 	bl	800029c <__adddf3>
 800af44:	4680      	mov	r8, r0
 800af46:	4689      	mov	r9, r1
 800af48:	e7de      	b.n	800af08 <_strtod_l+0x8b8>
 800af4a:	4013      	ands	r3, r2
 800af4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af50:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800af54:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800af58:	f04f 38ff 	mov.w	r8, #4294967295
 800af5c:	e7d4      	b.n	800af08 <_strtod_l+0x8b8>
 800af5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af60:	ea13 0f08 	tst.w	r3, r8
 800af64:	e7e0      	b.n	800af28 <_strtod_l+0x8d8>
 800af66:	f7ff fb56 	bl	800a616 <sulp>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	ec51 0b18 	vmov	r0, r1, d8
 800af72:	f7f5 f991 	bl	8000298 <__aeabi_dsub>
 800af76:	2200      	movs	r2, #0
 800af78:	2300      	movs	r3, #0
 800af7a:	4680      	mov	r8, r0
 800af7c:	4689      	mov	r9, r1
 800af7e:	f7f5 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 800af82:	2800      	cmp	r0, #0
 800af84:	d0c0      	beq.n	800af08 <_strtod_l+0x8b8>
 800af86:	e618      	b.n	800abba <_strtod_l+0x56a>
 800af88:	fffffc02 	.word	0xfffffc02
 800af8c:	7ff00000 	.word	0x7ff00000
 800af90:	39500000 	.word	0x39500000
 800af94:	000fffff 	.word	0x000fffff
 800af98:	7fefffff 	.word	0x7fefffff
 800af9c:	0800c960 	.word	0x0800c960
 800afa0:	4659      	mov	r1, fp
 800afa2:	4628      	mov	r0, r5
 800afa4:	f7ff fac0 	bl	800a528 <__ratio>
 800afa8:	ec57 6b10 	vmov	r6, r7, d0
 800afac:	ee10 0a10 	vmov	r0, s0
 800afb0:	2200      	movs	r2, #0
 800afb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fda2 	bl	8000b00 <__aeabi_dcmple>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d071      	beq.n	800b0a4 <_strtod_l+0xa54>
 800afc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d17c      	bne.n	800b0c0 <_strtod_l+0xa70>
 800afc6:	f1b8 0f00 	cmp.w	r8, #0
 800afca:	d15a      	bne.n	800b082 <_strtod_l+0xa32>
 800afcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d15d      	bne.n	800b090 <_strtod_l+0xa40>
 800afd4:	4b90      	ldr	r3, [pc, #576]	; (800b218 <_strtod_l+0xbc8>)
 800afd6:	2200      	movs	r2, #0
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 fd86 	bl	8000aec <__aeabi_dcmplt>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d15c      	bne.n	800b09e <_strtod_l+0xa4e>
 800afe4:	4630      	mov	r0, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	4b8c      	ldr	r3, [pc, #560]	; (800b21c <_strtod_l+0xbcc>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 fb0c 	bl	8000608 <__aeabi_dmul>
 800aff0:	4606      	mov	r6, r0
 800aff2:	460f      	mov	r7, r1
 800aff4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aff8:	9606      	str	r6, [sp, #24]
 800affa:	9307      	str	r3, [sp, #28]
 800affc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b000:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b004:	4b86      	ldr	r3, [pc, #536]	; (800b220 <_strtod_l+0xbd0>)
 800b006:	ea0a 0303 	and.w	r3, sl, r3
 800b00a:	930d      	str	r3, [sp, #52]	; 0x34
 800b00c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b00e:	4b85      	ldr	r3, [pc, #532]	; (800b224 <_strtod_l+0xbd4>)
 800b010:	429a      	cmp	r2, r3
 800b012:	f040 8090 	bne.w	800b136 <_strtod_l+0xae6>
 800b016:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b01a:	ec49 8b10 	vmov	d0, r8, r9
 800b01e:	f7ff f9b9 	bl	800a394 <__ulp>
 800b022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b026:	ec51 0b10 	vmov	r0, r1, d0
 800b02a:	f7f5 faed 	bl	8000608 <__aeabi_dmul>
 800b02e:	4642      	mov	r2, r8
 800b030:	464b      	mov	r3, r9
 800b032:	f7f5 f933 	bl	800029c <__adddf3>
 800b036:	460b      	mov	r3, r1
 800b038:	4979      	ldr	r1, [pc, #484]	; (800b220 <_strtod_l+0xbd0>)
 800b03a:	4a7b      	ldr	r2, [pc, #492]	; (800b228 <_strtod_l+0xbd8>)
 800b03c:	4019      	ands	r1, r3
 800b03e:	4291      	cmp	r1, r2
 800b040:	4680      	mov	r8, r0
 800b042:	d944      	bls.n	800b0ce <_strtod_l+0xa7e>
 800b044:	ee18 2a90 	vmov	r2, s17
 800b048:	4b78      	ldr	r3, [pc, #480]	; (800b22c <_strtod_l+0xbdc>)
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d104      	bne.n	800b058 <_strtod_l+0xa08>
 800b04e:	ee18 3a10 	vmov	r3, s16
 800b052:	3301      	adds	r3, #1
 800b054:	f43f ad40 	beq.w	800aad8 <_strtod_l+0x488>
 800b058:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b22c <_strtod_l+0xbdc>
 800b05c:	f04f 38ff 	mov.w	r8, #4294967295
 800b060:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b062:	4620      	mov	r0, r4
 800b064:	f7fe fe6a 	bl	8009d3c <_Bfree>
 800b068:	9905      	ldr	r1, [sp, #20]
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7fe fe66 	bl	8009d3c <_Bfree>
 800b070:	4659      	mov	r1, fp
 800b072:	4620      	mov	r0, r4
 800b074:	f7fe fe62 	bl	8009d3c <_Bfree>
 800b078:	4629      	mov	r1, r5
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7fe fe5e 	bl	8009d3c <_Bfree>
 800b080:	e609      	b.n	800ac96 <_strtod_l+0x646>
 800b082:	f1b8 0f01 	cmp.w	r8, #1
 800b086:	d103      	bne.n	800b090 <_strtod_l+0xa40>
 800b088:	f1b9 0f00 	cmp.w	r9, #0
 800b08c:	f43f ad95 	beq.w	800abba <_strtod_l+0x56a>
 800b090:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b1e8 <_strtod_l+0xb98>
 800b094:	4f60      	ldr	r7, [pc, #384]	; (800b218 <_strtod_l+0xbc8>)
 800b096:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b09a:	2600      	movs	r6, #0
 800b09c:	e7ae      	b.n	800affc <_strtod_l+0x9ac>
 800b09e:	4f5f      	ldr	r7, [pc, #380]	; (800b21c <_strtod_l+0xbcc>)
 800b0a0:	2600      	movs	r6, #0
 800b0a2:	e7a7      	b.n	800aff4 <_strtod_l+0x9a4>
 800b0a4:	4b5d      	ldr	r3, [pc, #372]	; (800b21c <_strtod_l+0xbcc>)
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f7f5 faac 	bl	8000608 <__aeabi_dmul>
 800b0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d09c      	beq.n	800aff4 <_strtod_l+0x9a4>
 800b0ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b0be:	e79d      	b.n	800affc <_strtod_l+0x9ac>
 800b0c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b1f0 <_strtod_l+0xba0>
 800b0c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0c8:	ec57 6b17 	vmov	r6, r7, d7
 800b0cc:	e796      	b.n	800affc <_strtod_l+0x9ac>
 800b0ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b0d2:	9b04      	ldr	r3, [sp, #16]
 800b0d4:	46ca      	mov	sl, r9
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1c2      	bne.n	800b060 <_strtod_l+0xa10>
 800b0da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0e0:	0d1b      	lsrs	r3, r3, #20
 800b0e2:	051b      	lsls	r3, r3, #20
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d1bb      	bne.n	800b060 <_strtod_l+0xa10>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 fdec 	bl	8000cc8 <__aeabi_d2lz>
 800b0f0:	f7f5 fa5c 	bl	80005ac <__aeabi_l2d>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	f7f5 f8cc 	bl	8000298 <__aeabi_dsub>
 800b100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b102:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b106:	ea43 0308 	orr.w	r3, r3, r8
 800b10a:	4313      	orrs	r3, r2
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	d054      	beq.n	800b1bc <_strtod_l+0xb6c>
 800b112:	a339      	add	r3, pc, #228	; (adr r3, 800b1f8 <_strtod_l+0xba8>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	f7f5 fce8 	bl	8000aec <__aeabi_dcmplt>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	f47f ace5 	bne.w	800aaec <_strtod_l+0x49c>
 800b122:	a337      	add	r3, pc, #220	; (adr r3, 800b200 <_strtod_l+0xbb0>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	4630      	mov	r0, r6
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7f5 fcfc 	bl	8000b28 <__aeabi_dcmpgt>
 800b130:	2800      	cmp	r0, #0
 800b132:	d095      	beq.n	800b060 <_strtod_l+0xa10>
 800b134:	e4da      	b.n	800aaec <_strtod_l+0x49c>
 800b136:	9b04      	ldr	r3, [sp, #16]
 800b138:	b333      	cbz	r3, 800b188 <_strtod_l+0xb38>
 800b13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b13c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b140:	d822      	bhi.n	800b188 <_strtod_l+0xb38>
 800b142:	a331      	add	r3, pc, #196	; (adr r3, 800b208 <_strtod_l+0xbb8>)
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	4630      	mov	r0, r6
 800b14a:	4639      	mov	r1, r7
 800b14c:	f7f5 fcd8 	bl	8000b00 <__aeabi_dcmple>
 800b150:	b1a0      	cbz	r0, 800b17c <_strtod_l+0xb2c>
 800b152:	4639      	mov	r1, r7
 800b154:	4630      	mov	r0, r6
 800b156:	f7f5 fd2f 	bl	8000bb8 <__aeabi_d2uiz>
 800b15a:	2801      	cmp	r0, #1
 800b15c:	bf38      	it	cc
 800b15e:	2001      	movcc	r0, #1
 800b160:	f7f5 f9d8 	bl	8000514 <__aeabi_ui2d>
 800b164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	bb23      	cbnz	r3, 800b1b6 <_strtod_l+0xb66>
 800b16c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b170:	9010      	str	r0, [sp, #64]	; 0x40
 800b172:	9311      	str	r3, [sp, #68]	; 0x44
 800b174:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b178:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b17e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b180:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	930f      	str	r3, [sp, #60]	; 0x3c
 800b188:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b18c:	eeb0 0a48 	vmov.f32	s0, s16
 800b190:	eef0 0a68 	vmov.f32	s1, s17
 800b194:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b198:	f7ff f8fc 	bl	800a394 <__ulp>
 800b19c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1a0:	ec53 2b10 	vmov	r2, r3, d0
 800b1a4:	f7f5 fa30 	bl	8000608 <__aeabi_dmul>
 800b1a8:	ec53 2b18 	vmov	r2, r3, d8
 800b1ac:	f7f5 f876 	bl	800029c <__adddf3>
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	4689      	mov	r9, r1
 800b1b4:	e78d      	b.n	800b0d2 <_strtod_l+0xa82>
 800b1b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b1ba:	e7db      	b.n	800b174 <_strtod_l+0xb24>
 800b1bc:	a314      	add	r3, pc, #80	; (adr r3, 800b210 <_strtod_l+0xbc0>)
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	f7f5 fc93 	bl	8000aec <__aeabi_dcmplt>
 800b1c6:	e7b3      	b.n	800b130 <_strtod_l+0xae0>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b1cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	f7ff ba7c 	b.w	800a6ce <_strtod_l+0x7e>
 800b1d6:	2a65      	cmp	r2, #101	; 0x65
 800b1d8:	f43f ab75 	beq.w	800a8c6 <_strtod_l+0x276>
 800b1dc:	2a45      	cmp	r2, #69	; 0x45
 800b1de:	f43f ab72 	beq.w	800a8c6 <_strtod_l+0x276>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f7ff bbaa 	b.w	800a93c <_strtod_l+0x2ec>
 800b1e8:	00000000 	.word	0x00000000
 800b1ec:	bff00000 	.word	0xbff00000
 800b1f0:	00000000 	.word	0x00000000
 800b1f4:	3ff00000 	.word	0x3ff00000
 800b1f8:	94a03595 	.word	0x94a03595
 800b1fc:	3fdfffff 	.word	0x3fdfffff
 800b200:	35afe535 	.word	0x35afe535
 800b204:	3fe00000 	.word	0x3fe00000
 800b208:	ffc00000 	.word	0xffc00000
 800b20c:	41dfffff 	.word	0x41dfffff
 800b210:	94a03595 	.word	0x94a03595
 800b214:	3fcfffff 	.word	0x3fcfffff
 800b218:	3ff00000 	.word	0x3ff00000
 800b21c:	3fe00000 	.word	0x3fe00000
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	7fe00000 	.word	0x7fe00000
 800b228:	7c9fffff 	.word	0x7c9fffff
 800b22c:	7fefffff 	.word	0x7fefffff

0800b230 <_strtod_r>:
 800b230:	4b01      	ldr	r3, [pc, #4]	; (800b238 <_strtod_r+0x8>)
 800b232:	f7ff ba0d 	b.w	800a650 <_strtod_l>
 800b236:	bf00      	nop
 800b238:	2000007c 	.word	0x2000007c

0800b23c <_strtol_l.constprop.0>:
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b242:	d001      	beq.n	800b248 <_strtol_l.constprop.0+0xc>
 800b244:	2b24      	cmp	r3, #36	; 0x24
 800b246:	d906      	bls.n	800b256 <_strtol_l.constprop.0+0x1a>
 800b248:	f7fd fd7a 	bl	8008d40 <__errno>
 800b24c:	2316      	movs	r3, #22
 800b24e:	6003      	str	r3, [r0, #0]
 800b250:	2000      	movs	r0, #0
 800b252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b256:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b33c <_strtol_l.constprop.0+0x100>
 800b25a:	460d      	mov	r5, r1
 800b25c:	462e      	mov	r6, r5
 800b25e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b262:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b266:	f017 0708 	ands.w	r7, r7, #8
 800b26a:	d1f7      	bne.n	800b25c <_strtol_l.constprop.0+0x20>
 800b26c:	2c2d      	cmp	r4, #45	; 0x2d
 800b26e:	d132      	bne.n	800b2d6 <_strtol_l.constprop.0+0x9a>
 800b270:	782c      	ldrb	r4, [r5, #0]
 800b272:	2701      	movs	r7, #1
 800b274:	1cb5      	adds	r5, r6, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d05b      	beq.n	800b332 <_strtol_l.constprop.0+0xf6>
 800b27a:	2b10      	cmp	r3, #16
 800b27c:	d109      	bne.n	800b292 <_strtol_l.constprop.0+0x56>
 800b27e:	2c30      	cmp	r4, #48	; 0x30
 800b280:	d107      	bne.n	800b292 <_strtol_l.constprop.0+0x56>
 800b282:	782c      	ldrb	r4, [r5, #0]
 800b284:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b288:	2c58      	cmp	r4, #88	; 0x58
 800b28a:	d14d      	bne.n	800b328 <_strtol_l.constprop.0+0xec>
 800b28c:	786c      	ldrb	r4, [r5, #1]
 800b28e:	2310      	movs	r3, #16
 800b290:	3502      	adds	r5, #2
 800b292:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b296:	f108 38ff 	add.w	r8, r8, #4294967295
 800b29a:	f04f 0e00 	mov.w	lr, #0
 800b29e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2a2:	4676      	mov	r6, lr
 800b2a4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b2a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b2ac:	f1bc 0f09 	cmp.w	ip, #9
 800b2b0:	d816      	bhi.n	800b2e0 <_strtol_l.constprop.0+0xa4>
 800b2b2:	4664      	mov	r4, ip
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	dd24      	ble.n	800b302 <_strtol_l.constprop.0+0xc6>
 800b2b8:	f1be 3fff 	cmp.w	lr, #4294967295
 800b2bc:	d008      	beq.n	800b2d0 <_strtol_l.constprop.0+0x94>
 800b2be:	45b1      	cmp	r9, r6
 800b2c0:	d31c      	bcc.n	800b2fc <_strtol_l.constprop.0+0xc0>
 800b2c2:	d101      	bne.n	800b2c8 <_strtol_l.constprop.0+0x8c>
 800b2c4:	45a2      	cmp	sl, r4
 800b2c6:	db19      	blt.n	800b2fc <_strtol_l.constprop.0+0xc0>
 800b2c8:	fb06 4603 	mla	r6, r6, r3, r4
 800b2cc:	f04f 0e01 	mov.w	lr, #1
 800b2d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2d4:	e7e8      	b.n	800b2a8 <_strtol_l.constprop.0+0x6c>
 800b2d6:	2c2b      	cmp	r4, #43	; 0x2b
 800b2d8:	bf04      	itt	eq
 800b2da:	782c      	ldrbeq	r4, [r5, #0]
 800b2dc:	1cb5      	addeq	r5, r6, #2
 800b2de:	e7ca      	b.n	800b276 <_strtol_l.constprop.0+0x3a>
 800b2e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b2e4:	f1bc 0f19 	cmp.w	ip, #25
 800b2e8:	d801      	bhi.n	800b2ee <_strtol_l.constprop.0+0xb2>
 800b2ea:	3c37      	subs	r4, #55	; 0x37
 800b2ec:	e7e2      	b.n	800b2b4 <_strtol_l.constprop.0+0x78>
 800b2ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b2f2:	f1bc 0f19 	cmp.w	ip, #25
 800b2f6:	d804      	bhi.n	800b302 <_strtol_l.constprop.0+0xc6>
 800b2f8:	3c57      	subs	r4, #87	; 0x57
 800b2fa:	e7db      	b.n	800b2b4 <_strtol_l.constprop.0+0x78>
 800b2fc:	f04f 3eff 	mov.w	lr, #4294967295
 800b300:	e7e6      	b.n	800b2d0 <_strtol_l.constprop.0+0x94>
 800b302:	f1be 3fff 	cmp.w	lr, #4294967295
 800b306:	d105      	bne.n	800b314 <_strtol_l.constprop.0+0xd8>
 800b308:	2322      	movs	r3, #34	; 0x22
 800b30a:	6003      	str	r3, [r0, #0]
 800b30c:	4646      	mov	r6, r8
 800b30e:	b942      	cbnz	r2, 800b322 <_strtol_l.constprop.0+0xe6>
 800b310:	4630      	mov	r0, r6
 800b312:	e79e      	b.n	800b252 <_strtol_l.constprop.0+0x16>
 800b314:	b107      	cbz	r7, 800b318 <_strtol_l.constprop.0+0xdc>
 800b316:	4276      	negs	r6, r6
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d0f9      	beq.n	800b310 <_strtol_l.constprop.0+0xd4>
 800b31c:	f1be 0f00 	cmp.w	lr, #0
 800b320:	d000      	beq.n	800b324 <_strtol_l.constprop.0+0xe8>
 800b322:	1e69      	subs	r1, r5, #1
 800b324:	6011      	str	r1, [r2, #0]
 800b326:	e7f3      	b.n	800b310 <_strtol_l.constprop.0+0xd4>
 800b328:	2430      	movs	r4, #48	; 0x30
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1b1      	bne.n	800b292 <_strtol_l.constprop.0+0x56>
 800b32e:	2308      	movs	r3, #8
 800b330:	e7af      	b.n	800b292 <_strtol_l.constprop.0+0x56>
 800b332:	2c30      	cmp	r4, #48	; 0x30
 800b334:	d0a5      	beq.n	800b282 <_strtol_l.constprop.0+0x46>
 800b336:	230a      	movs	r3, #10
 800b338:	e7ab      	b.n	800b292 <_strtol_l.constprop.0+0x56>
 800b33a:	bf00      	nop
 800b33c:	0800c989 	.word	0x0800c989

0800b340 <_strtol_r>:
 800b340:	f7ff bf7c 	b.w	800b23c <_strtol_l.constprop.0>

0800b344 <__ssputs_r>:
 800b344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b348:	688e      	ldr	r6, [r1, #8]
 800b34a:	461f      	mov	r7, r3
 800b34c:	42be      	cmp	r6, r7
 800b34e:	680b      	ldr	r3, [r1, #0]
 800b350:	4682      	mov	sl, r0
 800b352:	460c      	mov	r4, r1
 800b354:	4690      	mov	r8, r2
 800b356:	d82c      	bhi.n	800b3b2 <__ssputs_r+0x6e>
 800b358:	898a      	ldrh	r2, [r1, #12]
 800b35a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b35e:	d026      	beq.n	800b3ae <__ssputs_r+0x6a>
 800b360:	6965      	ldr	r5, [r4, #20]
 800b362:	6909      	ldr	r1, [r1, #16]
 800b364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b368:	eba3 0901 	sub.w	r9, r3, r1
 800b36c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b370:	1c7b      	adds	r3, r7, #1
 800b372:	444b      	add	r3, r9
 800b374:	106d      	asrs	r5, r5, #1
 800b376:	429d      	cmp	r5, r3
 800b378:	bf38      	it	cc
 800b37a:	461d      	movcc	r5, r3
 800b37c:	0553      	lsls	r3, r2, #21
 800b37e:	d527      	bpl.n	800b3d0 <__ssputs_r+0x8c>
 800b380:	4629      	mov	r1, r5
 800b382:	f7fe fc0f 	bl	8009ba4 <_malloc_r>
 800b386:	4606      	mov	r6, r0
 800b388:	b360      	cbz	r0, 800b3e4 <__ssputs_r+0xa0>
 800b38a:	6921      	ldr	r1, [r4, #16]
 800b38c:	464a      	mov	r2, r9
 800b38e:	f7fd fd04 	bl	8008d9a <memcpy>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	6126      	str	r6, [r4, #16]
 800b3a0:	6165      	str	r5, [r4, #20]
 800b3a2:	444e      	add	r6, r9
 800b3a4:	eba5 0509 	sub.w	r5, r5, r9
 800b3a8:	6026      	str	r6, [r4, #0]
 800b3aa:	60a5      	str	r5, [r4, #8]
 800b3ac:	463e      	mov	r6, r7
 800b3ae:	42be      	cmp	r6, r7
 800b3b0:	d900      	bls.n	800b3b4 <__ssputs_r+0x70>
 800b3b2:	463e      	mov	r6, r7
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	f000 f9c9 	bl	800b750 <memmove>
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	1b9b      	subs	r3, r3, r6
 800b3c2:	60a3      	str	r3, [r4, #8]
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	4433      	add	r3, r6
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	f000 fd9e 	bl	800bf12 <_realloc_r>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d1e0      	bne.n	800b39e <__ssputs_r+0x5a>
 800b3dc:	6921      	ldr	r1, [r4, #16]
 800b3de:	4650      	mov	r0, sl
 800b3e0:	f7fe fb6c 	bl	8009abc <_free_r>
 800b3e4:	230c      	movs	r3, #12
 800b3e6:	f8ca 3000 	str.w	r3, [sl]
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f6:	e7e9      	b.n	800b3cc <__ssputs_r+0x88>

0800b3f8 <_svfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	4698      	mov	r8, r3
 800b3fe:	898b      	ldrh	r3, [r1, #12]
 800b400:	061b      	lsls	r3, r3, #24
 800b402:	b09d      	sub	sp, #116	; 0x74
 800b404:	4607      	mov	r7, r0
 800b406:	460d      	mov	r5, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	d50e      	bpl.n	800b42a <_svfiprintf_r+0x32>
 800b40c:	690b      	ldr	r3, [r1, #16]
 800b40e:	b963      	cbnz	r3, 800b42a <_svfiprintf_r+0x32>
 800b410:	2140      	movs	r1, #64	; 0x40
 800b412:	f7fe fbc7 	bl	8009ba4 <_malloc_r>
 800b416:	6028      	str	r0, [r5, #0]
 800b418:	6128      	str	r0, [r5, #16]
 800b41a:	b920      	cbnz	r0, 800b426 <_svfiprintf_r+0x2e>
 800b41c:	230c      	movs	r3, #12
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	e0d0      	b.n	800b5c8 <_svfiprintf_r+0x1d0>
 800b426:	2340      	movs	r3, #64	; 0x40
 800b428:	616b      	str	r3, [r5, #20]
 800b42a:	2300      	movs	r3, #0
 800b42c:	9309      	str	r3, [sp, #36]	; 0x24
 800b42e:	2320      	movs	r3, #32
 800b430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b434:	f8cd 800c 	str.w	r8, [sp, #12]
 800b438:	2330      	movs	r3, #48	; 0x30
 800b43a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5e0 <_svfiprintf_r+0x1e8>
 800b43e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b442:	f04f 0901 	mov.w	r9, #1
 800b446:	4623      	mov	r3, r4
 800b448:	469a      	mov	sl, r3
 800b44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b44e:	b10a      	cbz	r2, 800b454 <_svfiprintf_r+0x5c>
 800b450:	2a25      	cmp	r2, #37	; 0x25
 800b452:	d1f9      	bne.n	800b448 <_svfiprintf_r+0x50>
 800b454:	ebba 0b04 	subs.w	fp, sl, r4
 800b458:	d00b      	beq.n	800b472 <_svfiprintf_r+0x7a>
 800b45a:	465b      	mov	r3, fp
 800b45c:	4622      	mov	r2, r4
 800b45e:	4629      	mov	r1, r5
 800b460:	4638      	mov	r0, r7
 800b462:	f7ff ff6f 	bl	800b344 <__ssputs_r>
 800b466:	3001      	adds	r0, #1
 800b468:	f000 80a9 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46e:	445a      	add	r2, fp
 800b470:	9209      	str	r2, [sp, #36]	; 0x24
 800b472:	f89a 3000 	ldrb.w	r3, [sl]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 80a1 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b47c:	2300      	movs	r3, #0
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b486:	f10a 0a01 	add.w	sl, sl, #1
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	9307      	str	r3, [sp, #28]
 800b48e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b492:	931a      	str	r3, [sp, #104]	; 0x68
 800b494:	4654      	mov	r4, sl
 800b496:	2205      	movs	r2, #5
 800b498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b49c:	4850      	ldr	r0, [pc, #320]	; (800b5e0 <_svfiprintf_r+0x1e8>)
 800b49e:	f7f4 fe9f 	bl	80001e0 <memchr>
 800b4a2:	9a04      	ldr	r2, [sp, #16]
 800b4a4:	b9d8      	cbnz	r0, 800b4de <_svfiprintf_r+0xe6>
 800b4a6:	06d0      	lsls	r0, r2, #27
 800b4a8:	bf44      	itt	mi
 800b4aa:	2320      	movmi	r3, #32
 800b4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4b0:	0711      	lsls	r1, r2, #28
 800b4b2:	bf44      	itt	mi
 800b4b4:	232b      	movmi	r3, #43	; 0x2b
 800b4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b4be:	2b2a      	cmp	r3, #42	; 0x2a
 800b4c0:	d015      	beq.n	800b4ee <_svfiprintf_r+0xf6>
 800b4c2:	9a07      	ldr	r2, [sp, #28]
 800b4c4:	4654      	mov	r4, sl
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f04f 0c0a 	mov.w	ip, #10
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4d2:	3b30      	subs	r3, #48	; 0x30
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	d94d      	bls.n	800b574 <_svfiprintf_r+0x17c>
 800b4d8:	b1b0      	cbz	r0, 800b508 <_svfiprintf_r+0x110>
 800b4da:	9207      	str	r2, [sp, #28]
 800b4dc:	e014      	b.n	800b508 <_svfiprintf_r+0x110>
 800b4de:	eba0 0308 	sub.w	r3, r0, r8
 800b4e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	9304      	str	r3, [sp, #16]
 800b4ea:	46a2      	mov	sl, r4
 800b4ec:	e7d2      	b.n	800b494 <_svfiprintf_r+0x9c>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	1d19      	adds	r1, r3, #4
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	9103      	str	r1, [sp, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	bfbb      	ittet	lt
 800b4fa:	425b      	neglt	r3, r3
 800b4fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b500:	9307      	strge	r3, [sp, #28]
 800b502:	9307      	strlt	r3, [sp, #28]
 800b504:	bfb8      	it	lt
 800b506:	9204      	strlt	r2, [sp, #16]
 800b508:	7823      	ldrb	r3, [r4, #0]
 800b50a:	2b2e      	cmp	r3, #46	; 0x2e
 800b50c:	d10c      	bne.n	800b528 <_svfiprintf_r+0x130>
 800b50e:	7863      	ldrb	r3, [r4, #1]
 800b510:	2b2a      	cmp	r3, #42	; 0x2a
 800b512:	d134      	bne.n	800b57e <_svfiprintf_r+0x186>
 800b514:	9b03      	ldr	r3, [sp, #12]
 800b516:	1d1a      	adds	r2, r3, #4
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	9203      	str	r2, [sp, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb8      	it	lt
 800b520:	f04f 33ff 	movlt.w	r3, #4294967295
 800b524:	3402      	adds	r4, #2
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b5f0 <_svfiprintf_r+0x1f8>
 800b52c:	7821      	ldrb	r1, [r4, #0]
 800b52e:	2203      	movs	r2, #3
 800b530:	4650      	mov	r0, sl
 800b532:	f7f4 fe55 	bl	80001e0 <memchr>
 800b536:	b138      	cbz	r0, 800b548 <_svfiprintf_r+0x150>
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	eba0 000a 	sub.w	r0, r0, sl
 800b53e:	2240      	movs	r2, #64	; 0x40
 800b540:	4082      	lsls	r2, r0
 800b542:	4313      	orrs	r3, r2
 800b544:	3401      	adds	r4, #1
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54c:	4825      	ldr	r0, [pc, #148]	; (800b5e4 <_svfiprintf_r+0x1ec>)
 800b54e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b552:	2206      	movs	r2, #6
 800b554:	f7f4 fe44 	bl	80001e0 <memchr>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d038      	beq.n	800b5ce <_svfiprintf_r+0x1d6>
 800b55c:	4b22      	ldr	r3, [pc, #136]	; (800b5e8 <_svfiprintf_r+0x1f0>)
 800b55e:	bb1b      	cbnz	r3, 800b5a8 <_svfiprintf_r+0x1b0>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	3307      	adds	r3, #7
 800b564:	f023 0307 	bic.w	r3, r3, #7
 800b568:	3308      	adds	r3, #8
 800b56a:	9303      	str	r3, [sp, #12]
 800b56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56e:	4433      	add	r3, r6
 800b570:	9309      	str	r3, [sp, #36]	; 0x24
 800b572:	e768      	b.n	800b446 <_svfiprintf_r+0x4e>
 800b574:	fb0c 3202 	mla	r2, ip, r2, r3
 800b578:	460c      	mov	r4, r1
 800b57a:	2001      	movs	r0, #1
 800b57c:	e7a6      	b.n	800b4cc <_svfiprintf_r+0xd4>
 800b57e:	2300      	movs	r3, #0
 800b580:	3401      	adds	r4, #1
 800b582:	9305      	str	r3, [sp, #20]
 800b584:	4619      	mov	r1, r3
 800b586:	f04f 0c0a 	mov.w	ip, #10
 800b58a:	4620      	mov	r0, r4
 800b58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b590:	3a30      	subs	r2, #48	; 0x30
 800b592:	2a09      	cmp	r2, #9
 800b594:	d903      	bls.n	800b59e <_svfiprintf_r+0x1a6>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0c6      	beq.n	800b528 <_svfiprintf_r+0x130>
 800b59a:	9105      	str	r1, [sp, #20]
 800b59c:	e7c4      	b.n	800b528 <_svfiprintf_r+0x130>
 800b59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e7f0      	b.n	800b58a <_svfiprintf_r+0x192>
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <_svfiprintf_r+0x1f4>)
 800b5b0:	a904      	add	r1, sp, #16
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	f7fc fc42 	bl	8007e3c <_printf_float>
 800b5b8:	1c42      	adds	r2, r0, #1
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	d1d6      	bne.n	800b56c <_svfiprintf_r+0x174>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	065b      	lsls	r3, r3, #25
 800b5c2:	f53f af2d 	bmi.w	800b420 <_svfiprintf_r+0x28>
 800b5c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c8:	b01d      	add	sp, #116	; 0x74
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	ab03      	add	r3, sp, #12
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	462a      	mov	r2, r5
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <_svfiprintf_r+0x1f4>)
 800b5d6:	a904      	add	r1, sp, #16
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7fc fed3 	bl	8008384 <_printf_i>
 800b5de:	e7eb      	b.n	800b5b8 <_svfiprintf_r+0x1c0>
 800b5e0:	0800ca89 	.word	0x0800ca89
 800b5e4:	0800ca93 	.word	0x0800ca93
 800b5e8:	08007e3d 	.word	0x08007e3d
 800b5ec:	0800b345 	.word	0x0800b345
 800b5f0:	0800ca8f 	.word	0x0800ca8f

0800b5f4 <__sflush_r>:
 800b5f4:	898a      	ldrh	r2, [r1, #12]
 800b5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	0710      	lsls	r0, r2, #28
 800b5fe:	460c      	mov	r4, r1
 800b600:	d458      	bmi.n	800b6b4 <__sflush_r+0xc0>
 800b602:	684b      	ldr	r3, [r1, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	dc05      	bgt.n	800b614 <__sflush_r+0x20>
 800b608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dc02      	bgt.n	800b614 <__sflush_r+0x20>
 800b60e:	2000      	movs	r0, #0
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b616:	2e00      	cmp	r6, #0
 800b618:	d0f9      	beq.n	800b60e <__sflush_r+0x1a>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b620:	682f      	ldr	r7, [r5, #0]
 800b622:	6a21      	ldr	r1, [r4, #32]
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	d032      	beq.n	800b68e <__sflush_r+0x9a>
 800b628:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	075a      	lsls	r2, r3, #29
 800b62e:	d505      	bpl.n	800b63c <__sflush_r+0x48>
 800b630:	6863      	ldr	r3, [r4, #4]
 800b632:	1ac0      	subs	r0, r0, r3
 800b634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b636:	b10b      	cbz	r3, 800b63c <__sflush_r+0x48>
 800b638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b63a:	1ac0      	subs	r0, r0, r3
 800b63c:	2300      	movs	r3, #0
 800b63e:	4602      	mov	r2, r0
 800b640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b642:	6a21      	ldr	r1, [r4, #32]
 800b644:	4628      	mov	r0, r5
 800b646:	47b0      	blx	r6
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	d106      	bne.n	800b65c <__sflush_r+0x68>
 800b64e:	6829      	ldr	r1, [r5, #0]
 800b650:	291d      	cmp	r1, #29
 800b652:	d82b      	bhi.n	800b6ac <__sflush_r+0xb8>
 800b654:	4a29      	ldr	r2, [pc, #164]	; (800b6fc <__sflush_r+0x108>)
 800b656:	410a      	asrs	r2, r1
 800b658:	07d6      	lsls	r6, r2, #31
 800b65a:	d427      	bmi.n	800b6ac <__sflush_r+0xb8>
 800b65c:	2200      	movs	r2, #0
 800b65e:	6062      	str	r2, [r4, #4]
 800b660:	04d9      	lsls	r1, r3, #19
 800b662:	6922      	ldr	r2, [r4, #16]
 800b664:	6022      	str	r2, [r4, #0]
 800b666:	d504      	bpl.n	800b672 <__sflush_r+0x7e>
 800b668:	1c42      	adds	r2, r0, #1
 800b66a:	d101      	bne.n	800b670 <__sflush_r+0x7c>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b903      	cbnz	r3, 800b672 <__sflush_r+0x7e>
 800b670:	6560      	str	r0, [r4, #84]	; 0x54
 800b672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b674:	602f      	str	r7, [r5, #0]
 800b676:	2900      	cmp	r1, #0
 800b678:	d0c9      	beq.n	800b60e <__sflush_r+0x1a>
 800b67a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b67e:	4299      	cmp	r1, r3
 800b680:	d002      	beq.n	800b688 <__sflush_r+0x94>
 800b682:	4628      	mov	r0, r5
 800b684:	f7fe fa1a 	bl	8009abc <_free_r>
 800b688:	2000      	movs	r0, #0
 800b68a:	6360      	str	r0, [r4, #52]	; 0x34
 800b68c:	e7c0      	b.n	800b610 <__sflush_r+0x1c>
 800b68e:	2301      	movs	r3, #1
 800b690:	4628      	mov	r0, r5
 800b692:	47b0      	blx	r6
 800b694:	1c41      	adds	r1, r0, #1
 800b696:	d1c8      	bne.n	800b62a <__sflush_r+0x36>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0c5      	beq.n	800b62a <__sflush_r+0x36>
 800b69e:	2b1d      	cmp	r3, #29
 800b6a0:	d001      	beq.n	800b6a6 <__sflush_r+0xb2>
 800b6a2:	2b16      	cmp	r3, #22
 800b6a4:	d101      	bne.n	800b6aa <__sflush_r+0xb6>
 800b6a6:	602f      	str	r7, [r5, #0]
 800b6a8:	e7b1      	b.n	800b60e <__sflush_r+0x1a>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	e7ad      	b.n	800b610 <__sflush_r+0x1c>
 800b6b4:	690f      	ldr	r7, [r1, #16]
 800b6b6:	2f00      	cmp	r7, #0
 800b6b8:	d0a9      	beq.n	800b60e <__sflush_r+0x1a>
 800b6ba:	0793      	lsls	r3, r2, #30
 800b6bc:	680e      	ldr	r6, [r1, #0]
 800b6be:	bf08      	it	eq
 800b6c0:	694b      	ldreq	r3, [r1, #20]
 800b6c2:	600f      	str	r7, [r1, #0]
 800b6c4:	bf18      	it	ne
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	eba6 0807 	sub.w	r8, r6, r7
 800b6cc:	608b      	str	r3, [r1, #8]
 800b6ce:	f1b8 0f00 	cmp.w	r8, #0
 800b6d2:	dd9c      	ble.n	800b60e <__sflush_r+0x1a>
 800b6d4:	6a21      	ldr	r1, [r4, #32]
 800b6d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6d8:	4643      	mov	r3, r8
 800b6da:	463a      	mov	r2, r7
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b0      	blx	r6
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	dc06      	bgt.n	800b6f2 <__sflush_r+0xfe>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	e78e      	b.n	800b610 <__sflush_r+0x1c>
 800b6f2:	4407      	add	r7, r0
 800b6f4:	eba8 0800 	sub.w	r8, r8, r0
 800b6f8:	e7e9      	b.n	800b6ce <__sflush_r+0xda>
 800b6fa:	bf00      	nop
 800b6fc:	dfbffffe 	.word	0xdfbffffe

0800b700 <_fflush_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	690b      	ldr	r3, [r1, #16]
 800b704:	4605      	mov	r5, r0
 800b706:	460c      	mov	r4, r1
 800b708:	b913      	cbnz	r3, 800b710 <_fflush_r+0x10>
 800b70a:	2500      	movs	r5, #0
 800b70c:	4628      	mov	r0, r5
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	b118      	cbz	r0, 800b71a <_fflush_r+0x1a>
 800b712:	6a03      	ldr	r3, [r0, #32]
 800b714:	b90b      	cbnz	r3, 800b71a <_fflush_r+0x1a>
 800b716:	f7fd f9f3 	bl	8008b00 <__sinit>
 800b71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0f3      	beq.n	800b70a <_fflush_r+0xa>
 800b722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b724:	07d0      	lsls	r0, r2, #31
 800b726:	d404      	bmi.n	800b732 <_fflush_r+0x32>
 800b728:	0599      	lsls	r1, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_fflush_r+0x32>
 800b72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b72e:	f7fd fb32 	bl	8008d96 <__retarget_lock_acquire_recursive>
 800b732:	4628      	mov	r0, r5
 800b734:	4621      	mov	r1, r4
 800b736:	f7ff ff5d 	bl	800b5f4 <__sflush_r>
 800b73a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b73c:	07da      	lsls	r2, r3, #31
 800b73e:	4605      	mov	r5, r0
 800b740:	d4e4      	bmi.n	800b70c <_fflush_r+0xc>
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	059b      	lsls	r3, r3, #22
 800b746:	d4e1      	bmi.n	800b70c <_fflush_r+0xc>
 800b748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b74a:	f7fd fb25 	bl	8008d98 <__retarget_lock_release_recursive>
 800b74e:	e7dd      	b.n	800b70c <_fflush_r+0xc>

0800b750 <memmove>:
 800b750:	4288      	cmp	r0, r1
 800b752:	b510      	push	{r4, lr}
 800b754:	eb01 0402 	add.w	r4, r1, r2
 800b758:	d902      	bls.n	800b760 <memmove+0x10>
 800b75a:	4284      	cmp	r4, r0
 800b75c:	4623      	mov	r3, r4
 800b75e:	d807      	bhi.n	800b770 <memmove+0x20>
 800b760:	1e43      	subs	r3, r0, #1
 800b762:	42a1      	cmp	r1, r4
 800b764:	d008      	beq.n	800b778 <memmove+0x28>
 800b766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b76e:	e7f8      	b.n	800b762 <memmove+0x12>
 800b770:	4402      	add	r2, r0
 800b772:	4601      	mov	r1, r0
 800b774:	428a      	cmp	r2, r1
 800b776:	d100      	bne.n	800b77a <memmove+0x2a>
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b782:	e7f7      	b.n	800b774 <memmove+0x24>

0800b784 <strncmp>:
 800b784:	b510      	push	{r4, lr}
 800b786:	b16a      	cbz	r2, 800b7a4 <strncmp+0x20>
 800b788:	3901      	subs	r1, #1
 800b78a:	1884      	adds	r4, r0, r2
 800b78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b790:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b794:	429a      	cmp	r2, r3
 800b796:	d103      	bne.n	800b7a0 <strncmp+0x1c>
 800b798:	42a0      	cmp	r0, r4
 800b79a:	d001      	beq.n	800b7a0 <strncmp+0x1c>
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	d1f5      	bne.n	800b78c <strncmp+0x8>
 800b7a0:	1ad0      	subs	r0, r2, r3
 800b7a2:	bd10      	pop	{r4, pc}
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	e7fc      	b.n	800b7a2 <strncmp+0x1e>

0800b7a8 <_sbrk_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d06      	ldr	r5, [pc, #24]	; (800b7c4 <_sbrk_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	f7f6 fcfa 	bl	80021ac <_sbrk>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_sbrk_r+0x1a>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_sbrk_r+0x1a>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	20004e60 	.word	0x20004e60

0800b7c8 <nan>:
 800b7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b7d0 <nan+0x8>
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	00000000 	.word	0x00000000
 800b7d4:	7ff80000 	.word	0x7ff80000

0800b7d8 <__assert_func>:
 800b7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7da:	4614      	mov	r4, r2
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4b09      	ldr	r3, [pc, #36]	; (800b804 <__assert_func+0x2c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	68d8      	ldr	r0, [r3, #12]
 800b7e6:	b14c      	cbz	r4, 800b7fc <__assert_func+0x24>
 800b7e8:	4b07      	ldr	r3, [pc, #28]	; (800b808 <__assert_func+0x30>)
 800b7ea:	9100      	str	r1, [sp, #0]
 800b7ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7f0:	4906      	ldr	r1, [pc, #24]	; (800b80c <__assert_func+0x34>)
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	f000 fbca 	bl	800bf8c <fiprintf>
 800b7f8:	f000 fbda 	bl	800bfb0 <abort>
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <__assert_func+0x38>)
 800b7fe:	461c      	mov	r4, r3
 800b800:	e7f3      	b.n	800b7ea <__assert_func+0x12>
 800b802:	bf00      	nop
 800b804:	20000078 	.word	0x20000078
 800b808:	0800caa2 	.word	0x0800caa2
 800b80c:	0800caaf 	.word	0x0800caaf
 800b810:	0800cadd 	.word	0x0800cadd

0800b814 <_calloc_r>:
 800b814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b816:	fba1 2402 	umull	r2, r4, r1, r2
 800b81a:	b94c      	cbnz	r4, 800b830 <_calloc_r+0x1c>
 800b81c:	4611      	mov	r1, r2
 800b81e:	9201      	str	r2, [sp, #4]
 800b820:	f7fe f9c0 	bl	8009ba4 <_malloc_r>
 800b824:	9a01      	ldr	r2, [sp, #4]
 800b826:	4605      	mov	r5, r0
 800b828:	b930      	cbnz	r0, 800b838 <_calloc_r+0x24>
 800b82a:	4628      	mov	r0, r5
 800b82c:	b003      	add	sp, #12
 800b82e:	bd30      	pop	{r4, r5, pc}
 800b830:	220c      	movs	r2, #12
 800b832:	6002      	str	r2, [r0, #0]
 800b834:	2500      	movs	r5, #0
 800b836:	e7f8      	b.n	800b82a <_calloc_r+0x16>
 800b838:	4621      	mov	r1, r4
 800b83a:	f7fd fa2e 	bl	8008c9a <memset>
 800b83e:	e7f4      	b.n	800b82a <_calloc_r+0x16>

0800b840 <rshift>:
 800b840:	6903      	ldr	r3, [r0, #16]
 800b842:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b84a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b84e:	f100 0414 	add.w	r4, r0, #20
 800b852:	dd45      	ble.n	800b8e0 <rshift+0xa0>
 800b854:	f011 011f 	ands.w	r1, r1, #31
 800b858:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b85c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b860:	d10c      	bne.n	800b87c <rshift+0x3c>
 800b862:	f100 0710 	add.w	r7, r0, #16
 800b866:	4629      	mov	r1, r5
 800b868:	42b1      	cmp	r1, r6
 800b86a:	d334      	bcc.n	800b8d6 <rshift+0x96>
 800b86c:	1a9b      	subs	r3, r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	1eea      	subs	r2, r5, #3
 800b872:	4296      	cmp	r6, r2
 800b874:	bf38      	it	cc
 800b876:	2300      	movcc	r3, #0
 800b878:	4423      	add	r3, r4
 800b87a:	e015      	b.n	800b8a8 <rshift+0x68>
 800b87c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b880:	f1c1 0820 	rsb	r8, r1, #32
 800b884:	40cf      	lsrs	r7, r1
 800b886:	f105 0e04 	add.w	lr, r5, #4
 800b88a:	46a1      	mov	r9, r4
 800b88c:	4576      	cmp	r6, lr
 800b88e:	46f4      	mov	ip, lr
 800b890:	d815      	bhi.n	800b8be <rshift+0x7e>
 800b892:	1a9a      	subs	r2, r3, r2
 800b894:	0092      	lsls	r2, r2, #2
 800b896:	3a04      	subs	r2, #4
 800b898:	3501      	adds	r5, #1
 800b89a:	42ae      	cmp	r6, r5
 800b89c:	bf38      	it	cc
 800b89e:	2200      	movcc	r2, #0
 800b8a0:	18a3      	adds	r3, r4, r2
 800b8a2:	50a7      	str	r7, [r4, r2]
 800b8a4:	b107      	cbz	r7, 800b8a8 <rshift+0x68>
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	1b1a      	subs	r2, r3, r4
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8b0:	bf08      	it	eq
 800b8b2:	2300      	moveq	r3, #0
 800b8b4:	6102      	str	r2, [r0, #16]
 800b8b6:	bf08      	it	eq
 800b8b8:	6143      	streq	r3, [r0, #20]
 800b8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8be:	f8dc c000 	ldr.w	ip, [ip]
 800b8c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8c6:	ea4c 0707 	orr.w	r7, ip, r7
 800b8ca:	f849 7b04 	str.w	r7, [r9], #4
 800b8ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8d2:	40cf      	lsrs	r7, r1
 800b8d4:	e7da      	b.n	800b88c <rshift+0x4c>
 800b8d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b8da:	f847 cf04 	str.w	ip, [r7, #4]!
 800b8de:	e7c3      	b.n	800b868 <rshift+0x28>
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	e7e1      	b.n	800b8a8 <rshift+0x68>

0800b8e4 <__hexdig_fun>:
 800b8e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b8e8:	2b09      	cmp	r3, #9
 800b8ea:	d802      	bhi.n	800b8f2 <__hexdig_fun+0xe>
 800b8ec:	3820      	subs	r0, #32
 800b8ee:	b2c0      	uxtb	r0, r0
 800b8f0:	4770      	bx	lr
 800b8f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b8f6:	2b05      	cmp	r3, #5
 800b8f8:	d801      	bhi.n	800b8fe <__hexdig_fun+0x1a>
 800b8fa:	3847      	subs	r0, #71	; 0x47
 800b8fc:	e7f7      	b.n	800b8ee <__hexdig_fun+0xa>
 800b8fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b902:	2b05      	cmp	r3, #5
 800b904:	d801      	bhi.n	800b90a <__hexdig_fun+0x26>
 800b906:	3827      	subs	r0, #39	; 0x27
 800b908:	e7f1      	b.n	800b8ee <__hexdig_fun+0xa>
 800b90a:	2000      	movs	r0, #0
 800b90c:	4770      	bx	lr
	...

0800b910 <__gethex>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	4617      	mov	r7, r2
 800b916:	680a      	ldr	r2, [r1, #0]
 800b918:	b085      	sub	sp, #20
 800b91a:	f102 0b02 	add.w	fp, r2, #2
 800b91e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b922:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b926:	4681      	mov	r9, r0
 800b928:	468a      	mov	sl, r1
 800b92a:	9302      	str	r3, [sp, #8]
 800b92c:	32fe      	adds	r2, #254	; 0xfe
 800b92e:	eb02 030b 	add.w	r3, r2, fp
 800b932:	46d8      	mov	r8, fp
 800b934:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	2830      	cmp	r0, #48	; 0x30
 800b93c:	d0f7      	beq.n	800b92e <__gethex+0x1e>
 800b93e:	f7ff ffd1 	bl	800b8e4 <__hexdig_fun>
 800b942:	4604      	mov	r4, r0
 800b944:	2800      	cmp	r0, #0
 800b946:	d138      	bne.n	800b9ba <__gethex+0xaa>
 800b948:	49a7      	ldr	r1, [pc, #668]	; (800bbe8 <__gethex+0x2d8>)
 800b94a:	2201      	movs	r2, #1
 800b94c:	4640      	mov	r0, r8
 800b94e:	f7ff ff19 	bl	800b784 <strncmp>
 800b952:	4606      	mov	r6, r0
 800b954:	2800      	cmp	r0, #0
 800b956:	d169      	bne.n	800ba2c <__gethex+0x11c>
 800b958:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b95c:	465d      	mov	r5, fp
 800b95e:	f7ff ffc1 	bl	800b8e4 <__hexdig_fun>
 800b962:	2800      	cmp	r0, #0
 800b964:	d064      	beq.n	800ba30 <__gethex+0x120>
 800b966:	465a      	mov	r2, fp
 800b968:	7810      	ldrb	r0, [r2, #0]
 800b96a:	2830      	cmp	r0, #48	; 0x30
 800b96c:	4690      	mov	r8, r2
 800b96e:	f102 0201 	add.w	r2, r2, #1
 800b972:	d0f9      	beq.n	800b968 <__gethex+0x58>
 800b974:	f7ff ffb6 	bl	800b8e4 <__hexdig_fun>
 800b978:	2301      	movs	r3, #1
 800b97a:	fab0 f480 	clz	r4, r0
 800b97e:	0964      	lsrs	r4, r4, #5
 800b980:	465e      	mov	r6, fp
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	4642      	mov	r2, r8
 800b986:	4615      	mov	r5, r2
 800b988:	3201      	adds	r2, #1
 800b98a:	7828      	ldrb	r0, [r5, #0]
 800b98c:	f7ff ffaa 	bl	800b8e4 <__hexdig_fun>
 800b990:	2800      	cmp	r0, #0
 800b992:	d1f8      	bne.n	800b986 <__gethex+0x76>
 800b994:	4994      	ldr	r1, [pc, #592]	; (800bbe8 <__gethex+0x2d8>)
 800b996:	2201      	movs	r2, #1
 800b998:	4628      	mov	r0, r5
 800b99a:	f7ff fef3 	bl	800b784 <strncmp>
 800b99e:	b978      	cbnz	r0, 800b9c0 <__gethex+0xb0>
 800b9a0:	b946      	cbnz	r6, 800b9b4 <__gethex+0xa4>
 800b9a2:	1c6e      	adds	r6, r5, #1
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	4615      	mov	r5, r2
 800b9a8:	3201      	adds	r2, #1
 800b9aa:	7828      	ldrb	r0, [r5, #0]
 800b9ac:	f7ff ff9a 	bl	800b8e4 <__hexdig_fun>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1f8      	bne.n	800b9a6 <__gethex+0x96>
 800b9b4:	1b73      	subs	r3, r6, r5
 800b9b6:	009e      	lsls	r6, r3, #2
 800b9b8:	e004      	b.n	800b9c4 <__gethex+0xb4>
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	4626      	mov	r6, r4
 800b9be:	e7e1      	b.n	800b984 <__gethex+0x74>
 800b9c0:	2e00      	cmp	r6, #0
 800b9c2:	d1f7      	bne.n	800b9b4 <__gethex+0xa4>
 800b9c4:	782b      	ldrb	r3, [r5, #0]
 800b9c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9ca:	2b50      	cmp	r3, #80	; 0x50
 800b9cc:	d13d      	bne.n	800ba4a <__gethex+0x13a>
 800b9ce:	786b      	ldrb	r3, [r5, #1]
 800b9d0:	2b2b      	cmp	r3, #43	; 0x2b
 800b9d2:	d02f      	beq.n	800ba34 <__gethex+0x124>
 800b9d4:	2b2d      	cmp	r3, #45	; 0x2d
 800b9d6:	d031      	beq.n	800ba3c <__gethex+0x12c>
 800b9d8:	1c69      	adds	r1, r5, #1
 800b9da:	f04f 0b00 	mov.w	fp, #0
 800b9de:	7808      	ldrb	r0, [r1, #0]
 800b9e0:	f7ff ff80 	bl	800b8e4 <__hexdig_fun>
 800b9e4:	1e42      	subs	r2, r0, #1
 800b9e6:	b2d2      	uxtb	r2, r2
 800b9e8:	2a18      	cmp	r2, #24
 800b9ea:	d82e      	bhi.n	800ba4a <__gethex+0x13a>
 800b9ec:	f1a0 0210 	sub.w	r2, r0, #16
 800b9f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9f4:	f7ff ff76 	bl	800b8e4 <__hexdig_fun>
 800b9f8:	f100 3cff 	add.w	ip, r0, #4294967295
 800b9fc:	fa5f fc8c 	uxtb.w	ip, ip
 800ba00:	f1bc 0f18 	cmp.w	ip, #24
 800ba04:	d91d      	bls.n	800ba42 <__gethex+0x132>
 800ba06:	f1bb 0f00 	cmp.w	fp, #0
 800ba0a:	d000      	beq.n	800ba0e <__gethex+0xfe>
 800ba0c:	4252      	negs	r2, r2
 800ba0e:	4416      	add	r6, r2
 800ba10:	f8ca 1000 	str.w	r1, [sl]
 800ba14:	b1dc      	cbz	r4, 800ba4e <__gethex+0x13e>
 800ba16:	9b01      	ldr	r3, [sp, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bf14      	ite	ne
 800ba1c:	f04f 0800 	movne.w	r8, #0
 800ba20:	f04f 0806 	moveq.w	r8, #6
 800ba24:	4640      	mov	r0, r8
 800ba26:	b005      	add	sp, #20
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2c:	4645      	mov	r5, r8
 800ba2e:	4626      	mov	r6, r4
 800ba30:	2401      	movs	r4, #1
 800ba32:	e7c7      	b.n	800b9c4 <__gethex+0xb4>
 800ba34:	f04f 0b00 	mov.w	fp, #0
 800ba38:	1ca9      	adds	r1, r5, #2
 800ba3a:	e7d0      	b.n	800b9de <__gethex+0xce>
 800ba3c:	f04f 0b01 	mov.w	fp, #1
 800ba40:	e7fa      	b.n	800ba38 <__gethex+0x128>
 800ba42:	230a      	movs	r3, #10
 800ba44:	fb03 0002 	mla	r0, r3, r2, r0
 800ba48:	e7d0      	b.n	800b9ec <__gethex+0xdc>
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	e7e0      	b.n	800ba10 <__gethex+0x100>
 800ba4e:	eba5 0308 	sub.w	r3, r5, r8
 800ba52:	3b01      	subs	r3, #1
 800ba54:	4621      	mov	r1, r4
 800ba56:	2b07      	cmp	r3, #7
 800ba58:	dc0a      	bgt.n	800ba70 <__gethex+0x160>
 800ba5a:	4648      	mov	r0, r9
 800ba5c:	f7fe f92e 	bl	8009cbc <_Balloc>
 800ba60:	4604      	mov	r4, r0
 800ba62:	b940      	cbnz	r0, 800ba76 <__gethex+0x166>
 800ba64:	4b61      	ldr	r3, [pc, #388]	; (800bbec <__gethex+0x2dc>)
 800ba66:	4602      	mov	r2, r0
 800ba68:	21e4      	movs	r1, #228	; 0xe4
 800ba6a:	4861      	ldr	r0, [pc, #388]	; (800bbf0 <__gethex+0x2e0>)
 800ba6c:	f7ff feb4 	bl	800b7d8 <__assert_func>
 800ba70:	3101      	adds	r1, #1
 800ba72:	105b      	asrs	r3, r3, #1
 800ba74:	e7ef      	b.n	800ba56 <__gethex+0x146>
 800ba76:	f100 0a14 	add.w	sl, r0, #20
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	495a      	ldr	r1, [pc, #360]	; (800bbe8 <__gethex+0x2d8>)
 800ba7e:	f8cd a004 	str.w	sl, [sp, #4]
 800ba82:	469b      	mov	fp, r3
 800ba84:	45a8      	cmp	r8, r5
 800ba86:	d342      	bcc.n	800bb0e <__gethex+0x1fe>
 800ba88:	9801      	ldr	r0, [sp, #4]
 800ba8a:	f840 bb04 	str.w	fp, [r0], #4
 800ba8e:	eba0 000a 	sub.w	r0, r0, sl
 800ba92:	1080      	asrs	r0, r0, #2
 800ba94:	6120      	str	r0, [r4, #16]
 800ba96:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ba9a:	4658      	mov	r0, fp
 800ba9c:	f7fe fa00 	bl	8009ea0 <__hi0bits>
 800baa0:	683d      	ldr	r5, [r7, #0]
 800baa2:	eba8 0000 	sub.w	r0, r8, r0
 800baa6:	42a8      	cmp	r0, r5
 800baa8:	dd59      	ble.n	800bb5e <__gethex+0x24e>
 800baaa:	eba0 0805 	sub.w	r8, r0, r5
 800baae:	4641      	mov	r1, r8
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7fe fd8f 	bl	800a5d4 <__any_on>
 800bab6:	4683      	mov	fp, r0
 800bab8:	b1b8      	cbz	r0, 800baea <__gethex+0x1da>
 800baba:	f108 33ff 	add.w	r3, r8, #4294967295
 800babe:	1159      	asrs	r1, r3, #5
 800bac0:	f003 021f 	and.w	r2, r3, #31
 800bac4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bac8:	f04f 0b01 	mov.w	fp, #1
 800bacc:	fa0b f202 	lsl.w	r2, fp, r2
 800bad0:	420a      	tst	r2, r1
 800bad2:	d00a      	beq.n	800baea <__gethex+0x1da>
 800bad4:	455b      	cmp	r3, fp
 800bad6:	dd06      	ble.n	800bae6 <__gethex+0x1d6>
 800bad8:	f1a8 0102 	sub.w	r1, r8, #2
 800badc:	4620      	mov	r0, r4
 800bade:	f7fe fd79 	bl	800a5d4 <__any_on>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d138      	bne.n	800bb58 <__gethex+0x248>
 800bae6:	f04f 0b02 	mov.w	fp, #2
 800baea:	4641      	mov	r1, r8
 800baec:	4620      	mov	r0, r4
 800baee:	f7ff fea7 	bl	800b840 <rshift>
 800baf2:	4446      	add	r6, r8
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	42b3      	cmp	r3, r6
 800baf8:	da41      	bge.n	800bb7e <__gethex+0x26e>
 800bafa:	4621      	mov	r1, r4
 800bafc:	4648      	mov	r0, r9
 800bafe:	f7fe f91d 	bl	8009d3c <_Bfree>
 800bb02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb04:	2300      	movs	r3, #0
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bb0c:	e78a      	b.n	800ba24 <__gethex+0x114>
 800bb0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bb12:	2a2e      	cmp	r2, #46	; 0x2e
 800bb14:	d014      	beq.n	800bb40 <__gethex+0x230>
 800bb16:	2b20      	cmp	r3, #32
 800bb18:	d106      	bne.n	800bb28 <__gethex+0x218>
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	f843 bb04 	str.w	fp, [r3], #4
 800bb20:	f04f 0b00 	mov.w	fp, #0
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	465b      	mov	r3, fp
 800bb28:	7828      	ldrb	r0, [r5, #0]
 800bb2a:	9303      	str	r3, [sp, #12]
 800bb2c:	f7ff feda 	bl	800b8e4 <__hexdig_fun>
 800bb30:	9b03      	ldr	r3, [sp, #12]
 800bb32:	f000 000f 	and.w	r0, r0, #15
 800bb36:	4098      	lsls	r0, r3
 800bb38:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	e7a1      	b.n	800ba84 <__gethex+0x174>
 800bb40:	45a8      	cmp	r8, r5
 800bb42:	d8e8      	bhi.n	800bb16 <__gethex+0x206>
 800bb44:	2201      	movs	r2, #1
 800bb46:	4628      	mov	r0, r5
 800bb48:	9303      	str	r3, [sp, #12]
 800bb4a:	f7ff fe1b 	bl	800b784 <strncmp>
 800bb4e:	4926      	ldr	r1, [pc, #152]	; (800bbe8 <__gethex+0x2d8>)
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d1df      	bne.n	800bb16 <__gethex+0x206>
 800bb56:	e795      	b.n	800ba84 <__gethex+0x174>
 800bb58:	f04f 0b03 	mov.w	fp, #3
 800bb5c:	e7c5      	b.n	800baea <__gethex+0x1da>
 800bb5e:	da0b      	bge.n	800bb78 <__gethex+0x268>
 800bb60:	eba5 0800 	sub.w	r8, r5, r0
 800bb64:	4621      	mov	r1, r4
 800bb66:	4642      	mov	r2, r8
 800bb68:	4648      	mov	r0, r9
 800bb6a:	f7fe fb01 	bl	800a170 <__lshift>
 800bb6e:	eba6 0608 	sub.w	r6, r6, r8
 800bb72:	4604      	mov	r4, r0
 800bb74:	f100 0a14 	add.w	sl, r0, #20
 800bb78:	f04f 0b00 	mov.w	fp, #0
 800bb7c:	e7ba      	b.n	800baf4 <__gethex+0x1e4>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	42b3      	cmp	r3, r6
 800bb82:	dd73      	ble.n	800bc6c <__gethex+0x35c>
 800bb84:	1b9e      	subs	r6, r3, r6
 800bb86:	42b5      	cmp	r5, r6
 800bb88:	dc34      	bgt.n	800bbf4 <__gethex+0x2e4>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d023      	beq.n	800bbd8 <__gethex+0x2c8>
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d025      	beq.n	800bbe0 <__gethex+0x2d0>
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d115      	bne.n	800bbc4 <__gethex+0x2b4>
 800bb98:	42b5      	cmp	r5, r6
 800bb9a:	d113      	bne.n	800bbc4 <__gethex+0x2b4>
 800bb9c:	2d01      	cmp	r5, #1
 800bb9e:	d10b      	bne.n	800bbb8 <__gethex+0x2a8>
 800bba0:	9a02      	ldr	r2, [sp, #8]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	2301      	movs	r3, #1
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	f8ca 3000 	str.w	r3, [sl]
 800bbae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbb0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bbb4:	601c      	str	r4, [r3, #0]
 800bbb6:	e735      	b.n	800ba24 <__gethex+0x114>
 800bbb8:	1e69      	subs	r1, r5, #1
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f7fe fd0a 	bl	800a5d4 <__any_on>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d1ed      	bne.n	800bba0 <__gethex+0x290>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4648      	mov	r0, r9
 800bbc8:	f7fe f8b8 	bl	8009d3c <_Bfree>
 800bbcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbce:	2300      	movs	r3, #0
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bbd6:	e725      	b.n	800ba24 <__gethex+0x114>
 800bbd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1f2      	bne.n	800bbc4 <__gethex+0x2b4>
 800bbde:	e7df      	b.n	800bba0 <__gethex+0x290>
 800bbe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1dc      	bne.n	800bba0 <__gethex+0x290>
 800bbe6:	e7ed      	b.n	800bbc4 <__gethex+0x2b4>
 800bbe8:	0800c934 	.word	0x0800c934
 800bbec:	0800c7cd 	.word	0x0800c7cd
 800bbf0:	0800cade 	.word	0x0800cade
 800bbf4:	f106 38ff 	add.w	r8, r6, #4294967295
 800bbf8:	f1bb 0f00 	cmp.w	fp, #0
 800bbfc:	d133      	bne.n	800bc66 <__gethex+0x356>
 800bbfe:	f1b8 0f00 	cmp.w	r8, #0
 800bc02:	d004      	beq.n	800bc0e <__gethex+0x2fe>
 800bc04:	4641      	mov	r1, r8
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7fe fce4 	bl	800a5d4 <__any_on>
 800bc0c:	4683      	mov	fp, r0
 800bc0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bc12:	2301      	movs	r3, #1
 800bc14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc18:	f008 081f 	and.w	r8, r8, #31
 800bc1c:	fa03 f308 	lsl.w	r3, r3, r8
 800bc20:	4213      	tst	r3, r2
 800bc22:	4631      	mov	r1, r6
 800bc24:	4620      	mov	r0, r4
 800bc26:	bf18      	it	ne
 800bc28:	f04b 0b02 	orrne.w	fp, fp, #2
 800bc2c:	1bad      	subs	r5, r5, r6
 800bc2e:	f7ff fe07 	bl	800b840 <rshift>
 800bc32:	687e      	ldr	r6, [r7, #4]
 800bc34:	f04f 0802 	mov.w	r8, #2
 800bc38:	f1bb 0f00 	cmp.w	fp, #0
 800bc3c:	d04a      	beq.n	800bcd4 <__gethex+0x3c4>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d016      	beq.n	800bc72 <__gethex+0x362>
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d018      	beq.n	800bc7a <__gethex+0x36a>
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d109      	bne.n	800bc60 <__gethex+0x350>
 800bc4c:	f01b 0f02 	tst.w	fp, #2
 800bc50:	d006      	beq.n	800bc60 <__gethex+0x350>
 800bc52:	f8da 3000 	ldr.w	r3, [sl]
 800bc56:	ea4b 0b03 	orr.w	fp, fp, r3
 800bc5a:	f01b 0f01 	tst.w	fp, #1
 800bc5e:	d10f      	bne.n	800bc80 <__gethex+0x370>
 800bc60:	f048 0810 	orr.w	r8, r8, #16
 800bc64:	e036      	b.n	800bcd4 <__gethex+0x3c4>
 800bc66:	f04f 0b01 	mov.w	fp, #1
 800bc6a:	e7d0      	b.n	800bc0e <__gethex+0x2fe>
 800bc6c:	f04f 0801 	mov.w	r8, #1
 800bc70:	e7e2      	b.n	800bc38 <__gethex+0x328>
 800bc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc74:	f1c3 0301 	rsb	r3, r3, #1
 800bc78:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0ef      	beq.n	800bc60 <__gethex+0x350>
 800bc80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc84:	f104 0214 	add.w	r2, r4, #20
 800bc88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bc92:	2300      	movs	r3, #0
 800bc94:	4694      	mov	ip, r2
 800bc96:	f852 1b04 	ldr.w	r1, [r2], #4
 800bc9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bc9e:	d01e      	beq.n	800bcde <__gethex+0x3ce>
 800bca0:	3101      	adds	r1, #1
 800bca2:	f8cc 1000 	str.w	r1, [ip]
 800bca6:	f1b8 0f02 	cmp.w	r8, #2
 800bcaa:	f104 0214 	add.w	r2, r4, #20
 800bcae:	d13d      	bne.n	800bd2c <__gethex+0x41c>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	42ab      	cmp	r3, r5
 800bcb6:	d10b      	bne.n	800bcd0 <__gethex+0x3c0>
 800bcb8:	1169      	asrs	r1, r5, #5
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f005 051f 	and.w	r5, r5, #31
 800bcc0:	fa03 f505 	lsl.w	r5, r3, r5
 800bcc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcc8:	421d      	tst	r5, r3
 800bcca:	bf18      	it	ne
 800bccc:	f04f 0801 	movne.w	r8, #1
 800bcd0:	f048 0820 	orr.w	r8, r8, #32
 800bcd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcd6:	601c      	str	r4, [r3, #0]
 800bcd8:	9b02      	ldr	r3, [sp, #8]
 800bcda:	601e      	str	r6, [r3, #0]
 800bcdc:	e6a2      	b.n	800ba24 <__gethex+0x114>
 800bcde:	4290      	cmp	r0, r2
 800bce0:	f842 3c04 	str.w	r3, [r2, #-4]
 800bce4:	d8d6      	bhi.n	800bc94 <__gethex+0x384>
 800bce6:	68a2      	ldr	r2, [r4, #8]
 800bce8:	4593      	cmp	fp, r2
 800bcea:	db17      	blt.n	800bd1c <__gethex+0x40c>
 800bcec:	6861      	ldr	r1, [r4, #4]
 800bcee:	4648      	mov	r0, r9
 800bcf0:	3101      	adds	r1, #1
 800bcf2:	f7fd ffe3 	bl	8009cbc <_Balloc>
 800bcf6:	4682      	mov	sl, r0
 800bcf8:	b918      	cbnz	r0, 800bd02 <__gethex+0x3f2>
 800bcfa:	4b1b      	ldr	r3, [pc, #108]	; (800bd68 <__gethex+0x458>)
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	2184      	movs	r1, #132	; 0x84
 800bd00:	e6b3      	b.n	800ba6a <__gethex+0x15a>
 800bd02:	6922      	ldr	r2, [r4, #16]
 800bd04:	3202      	adds	r2, #2
 800bd06:	f104 010c 	add.w	r1, r4, #12
 800bd0a:	0092      	lsls	r2, r2, #2
 800bd0c:	300c      	adds	r0, #12
 800bd0e:	f7fd f844 	bl	8008d9a <memcpy>
 800bd12:	4621      	mov	r1, r4
 800bd14:	4648      	mov	r0, r9
 800bd16:	f7fe f811 	bl	8009d3c <_Bfree>
 800bd1a:	4654      	mov	r4, sl
 800bd1c:	6922      	ldr	r2, [r4, #16]
 800bd1e:	1c51      	adds	r1, r2, #1
 800bd20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd24:	6121      	str	r1, [r4, #16]
 800bd26:	2101      	movs	r1, #1
 800bd28:	6151      	str	r1, [r2, #20]
 800bd2a:	e7bc      	b.n	800bca6 <__gethex+0x396>
 800bd2c:	6921      	ldr	r1, [r4, #16]
 800bd2e:	4559      	cmp	r1, fp
 800bd30:	dd0b      	ble.n	800bd4a <__gethex+0x43a>
 800bd32:	2101      	movs	r1, #1
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7ff fd83 	bl	800b840 <rshift>
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	3601      	adds	r6, #1
 800bd3e:	42b3      	cmp	r3, r6
 800bd40:	f6ff aedb 	blt.w	800bafa <__gethex+0x1ea>
 800bd44:	f04f 0801 	mov.w	r8, #1
 800bd48:	e7c2      	b.n	800bcd0 <__gethex+0x3c0>
 800bd4a:	f015 051f 	ands.w	r5, r5, #31
 800bd4e:	d0f9      	beq.n	800bd44 <__gethex+0x434>
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	441a      	add	r2, r3
 800bd54:	f1c5 0520 	rsb	r5, r5, #32
 800bd58:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bd5c:	f7fe f8a0 	bl	8009ea0 <__hi0bits>
 800bd60:	42a8      	cmp	r0, r5
 800bd62:	dbe6      	blt.n	800bd32 <__gethex+0x422>
 800bd64:	e7ee      	b.n	800bd44 <__gethex+0x434>
 800bd66:	bf00      	nop
 800bd68:	0800c7cd 	.word	0x0800c7cd

0800bd6c <L_shift>:
 800bd6c:	f1c2 0208 	rsb	r2, r2, #8
 800bd70:	0092      	lsls	r2, r2, #2
 800bd72:	b570      	push	{r4, r5, r6, lr}
 800bd74:	f1c2 0620 	rsb	r6, r2, #32
 800bd78:	6843      	ldr	r3, [r0, #4]
 800bd7a:	6804      	ldr	r4, [r0, #0]
 800bd7c:	fa03 f506 	lsl.w	r5, r3, r6
 800bd80:	432c      	orrs	r4, r5
 800bd82:	40d3      	lsrs	r3, r2
 800bd84:	6004      	str	r4, [r0, #0]
 800bd86:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd8a:	4288      	cmp	r0, r1
 800bd8c:	d3f4      	bcc.n	800bd78 <L_shift+0xc>
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}

0800bd90 <__match>:
 800bd90:	b530      	push	{r4, r5, lr}
 800bd92:	6803      	ldr	r3, [r0, #0]
 800bd94:	3301      	adds	r3, #1
 800bd96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd9a:	b914      	cbnz	r4, 800bda2 <__match+0x12>
 800bd9c:	6003      	str	r3, [r0, #0]
 800bd9e:	2001      	movs	r0, #1
 800bda0:	bd30      	pop	{r4, r5, pc}
 800bda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bda6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bdaa:	2d19      	cmp	r5, #25
 800bdac:	bf98      	it	ls
 800bdae:	3220      	addls	r2, #32
 800bdb0:	42a2      	cmp	r2, r4
 800bdb2:	d0f0      	beq.n	800bd96 <__match+0x6>
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	e7f3      	b.n	800bda0 <__match+0x10>

0800bdb8 <__hexnan>:
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	680b      	ldr	r3, [r1, #0]
 800bdbe:	6801      	ldr	r1, [r0, #0]
 800bdc0:	115e      	asrs	r6, r3, #5
 800bdc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdc6:	f013 031f 	ands.w	r3, r3, #31
 800bdca:	b087      	sub	sp, #28
 800bdcc:	bf18      	it	ne
 800bdce:	3604      	addne	r6, #4
 800bdd0:	2500      	movs	r5, #0
 800bdd2:	1f37      	subs	r7, r6, #4
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	4690      	mov	r8, r2
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdde:	46b9      	mov	r9, r7
 800bde0:	463c      	mov	r4, r7
 800bde2:	9502      	str	r5, [sp, #8]
 800bde4:	46ab      	mov	fp, r5
 800bde6:	784a      	ldrb	r2, [r1, #1]
 800bde8:	1c4b      	adds	r3, r1, #1
 800bdea:	9303      	str	r3, [sp, #12]
 800bdec:	b342      	cbz	r2, 800be40 <__hexnan+0x88>
 800bdee:	4610      	mov	r0, r2
 800bdf0:	9105      	str	r1, [sp, #20]
 800bdf2:	9204      	str	r2, [sp, #16]
 800bdf4:	f7ff fd76 	bl	800b8e4 <__hexdig_fun>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d14f      	bne.n	800be9c <__hexnan+0xe4>
 800bdfc:	9a04      	ldr	r2, [sp, #16]
 800bdfe:	9905      	ldr	r1, [sp, #20]
 800be00:	2a20      	cmp	r2, #32
 800be02:	d818      	bhi.n	800be36 <__hexnan+0x7e>
 800be04:	9b02      	ldr	r3, [sp, #8]
 800be06:	459b      	cmp	fp, r3
 800be08:	dd13      	ble.n	800be32 <__hexnan+0x7a>
 800be0a:	454c      	cmp	r4, r9
 800be0c:	d206      	bcs.n	800be1c <__hexnan+0x64>
 800be0e:	2d07      	cmp	r5, #7
 800be10:	dc04      	bgt.n	800be1c <__hexnan+0x64>
 800be12:	462a      	mov	r2, r5
 800be14:	4649      	mov	r1, r9
 800be16:	4620      	mov	r0, r4
 800be18:	f7ff ffa8 	bl	800bd6c <L_shift>
 800be1c:	4544      	cmp	r4, r8
 800be1e:	d950      	bls.n	800bec2 <__hexnan+0x10a>
 800be20:	2300      	movs	r3, #0
 800be22:	f1a4 0904 	sub.w	r9, r4, #4
 800be26:	f844 3c04 	str.w	r3, [r4, #-4]
 800be2a:	f8cd b008 	str.w	fp, [sp, #8]
 800be2e:	464c      	mov	r4, r9
 800be30:	461d      	mov	r5, r3
 800be32:	9903      	ldr	r1, [sp, #12]
 800be34:	e7d7      	b.n	800bde6 <__hexnan+0x2e>
 800be36:	2a29      	cmp	r2, #41	; 0x29
 800be38:	d155      	bne.n	800bee6 <__hexnan+0x12e>
 800be3a:	3102      	adds	r1, #2
 800be3c:	f8ca 1000 	str.w	r1, [sl]
 800be40:	f1bb 0f00 	cmp.w	fp, #0
 800be44:	d04f      	beq.n	800bee6 <__hexnan+0x12e>
 800be46:	454c      	cmp	r4, r9
 800be48:	d206      	bcs.n	800be58 <__hexnan+0xa0>
 800be4a:	2d07      	cmp	r5, #7
 800be4c:	dc04      	bgt.n	800be58 <__hexnan+0xa0>
 800be4e:	462a      	mov	r2, r5
 800be50:	4649      	mov	r1, r9
 800be52:	4620      	mov	r0, r4
 800be54:	f7ff ff8a 	bl	800bd6c <L_shift>
 800be58:	4544      	cmp	r4, r8
 800be5a:	d934      	bls.n	800bec6 <__hexnan+0x10e>
 800be5c:	f1a8 0204 	sub.w	r2, r8, #4
 800be60:	4623      	mov	r3, r4
 800be62:	f853 1b04 	ldr.w	r1, [r3], #4
 800be66:	f842 1f04 	str.w	r1, [r2, #4]!
 800be6a:	429f      	cmp	r7, r3
 800be6c:	d2f9      	bcs.n	800be62 <__hexnan+0xaa>
 800be6e:	1b3b      	subs	r3, r7, r4
 800be70:	f023 0303 	bic.w	r3, r3, #3
 800be74:	3304      	adds	r3, #4
 800be76:	3e03      	subs	r6, #3
 800be78:	3401      	adds	r4, #1
 800be7a:	42a6      	cmp	r6, r4
 800be7c:	bf38      	it	cc
 800be7e:	2304      	movcc	r3, #4
 800be80:	4443      	add	r3, r8
 800be82:	2200      	movs	r2, #0
 800be84:	f843 2b04 	str.w	r2, [r3], #4
 800be88:	429f      	cmp	r7, r3
 800be8a:	d2fb      	bcs.n	800be84 <__hexnan+0xcc>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	b91b      	cbnz	r3, 800be98 <__hexnan+0xe0>
 800be90:	4547      	cmp	r7, r8
 800be92:	d126      	bne.n	800bee2 <__hexnan+0x12a>
 800be94:	2301      	movs	r3, #1
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	2005      	movs	r0, #5
 800be9a:	e025      	b.n	800bee8 <__hexnan+0x130>
 800be9c:	3501      	adds	r5, #1
 800be9e:	2d08      	cmp	r5, #8
 800bea0:	f10b 0b01 	add.w	fp, fp, #1
 800bea4:	dd06      	ble.n	800beb4 <__hexnan+0xfc>
 800bea6:	4544      	cmp	r4, r8
 800bea8:	d9c3      	bls.n	800be32 <__hexnan+0x7a>
 800beaa:	2300      	movs	r3, #0
 800beac:	f844 3c04 	str.w	r3, [r4, #-4]
 800beb0:	2501      	movs	r5, #1
 800beb2:	3c04      	subs	r4, #4
 800beb4:	6822      	ldr	r2, [r4, #0]
 800beb6:	f000 000f 	and.w	r0, r0, #15
 800beba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bebe:	6020      	str	r0, [r4, #0]
 800bec0:	e7b7      	b.n	800be32 <__hexnan+0x7a>
 800bec2:	2508      	movs	r5, #8
 800bec4:	e7b5      	b.n	800be32 <__hexnan+0x7a>
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d0df      	beq.n	800be8c <__hexnan+0xd4>
 800becc:	f1c3 0320 	rsb	r3, r3, #32
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	40da      	lsrs	r2, r3
 800bed6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800beda:	4013      	ands	r3, r2
 800bedc:	f846 3c04 	str.w	r3, [r6, #-4]
 800bee0:	e7d4      	b.n	800be8c <__hexnan+0xd4>
 800bee2:	3f04      	subs	r7, #4
 800bee4:	e7d2      	b.n	800be8c <__hexnan+0xd4>
 800bee6:	2004      	movs	r0, #4
 800bee8:	b007      	add	sp, #28
 800beea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800beee <__ascii_mbtowc>:
 800beee:	b082      	sub	sp, #8
 800bef0:	b901      	cbnz	r1, 800bef4 <__ascii_mbtowc+0x6>
 800bef2:	a901      	add	r1, sp, #4
 800bef4:	b142      	cbz	r2, 800bf08 <__ascii_mbtowc+0x1a>
 800bef6:	b14b      	cbz	r3, 800bf0c <__ascii_mbtowc+0x1e>
 800bef8:	7813      	ldrb	r3, [r2, #0]
 800befa:	600b      	str	r3, [r1, #0]
 800befc:	7812      	ldrb	r2, [r2, #0]
 800befe:	1e10      	subs	r0, r2, #0
 800bf00:	bf18      	it	ne
 800bf02:	2001      	movne	r0, #1
 800bf04:	b002      	add	sp, #8
 800bf06:	4770      	bx	lr
 800bf08:	4610      	mov	r0, r2
 800bf0a:	e7fb      	b.n	800bf04 <__ascii_mbtowc+0x16>
 800bf0c:	f06f 0001 	mvn.w	r0, #1
 800bf10:	e7f8      	b.n	800bf04 <__ascii_mbtowc+0x16>

0800bf12 <_realloc_r>:
 800bf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf16:	4680      	mov	r8, r0
 800bf18:	4614      	mov	r4, r2
 800bf1a:	460e      	mov	r6, r1
 800bf1c:	b921      	cbnz	r1, 800bf28 <_realloc_r+0x16>
 800bf1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf22:	4611      	mov	r1, r2
 800bf24:	f7fd be3e 	b.w	8009ba4 <_malloc_r>
 800bf28:	b92a      	cbnz	r2, 800bf36 <_realloc_r+0x24>
 800bf2a:	f7fd fdc7 	bl	8009abc <_free_r>
 800bf2e:	4625      	mov	r5, r4
 800bf30:	4628      	mov	r0, r5
 800bf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf36:	f000 f842 	bl	800bfbe <_malloc_usable_size_r>
 800bf3a:	4284      	cmp	r4, r0
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	d802      	bhi.n	800bf46 <_realloc_r+0x34>
 800bf40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf44:	d812      	bhi.n	800bf6c <_realloc_r+0x5a>
 800bf46:	4621      	mov	r1, r4
 800bf48:	4640      	mov	r0, r8
 800bf4a:	f7fd fe2b 	bl	8009ba4 <_malloc_r>
 800bf4e:	4605      	mov	r5, r0
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d0ed      	beq.n	800bf30 <_realloc_r+0x1e>
 800bf54:	42bc      	cmp	r4, r7
 800bf56:	4622      	mov	r2, r4
 800bf58:	4631      	mov	r1, r6
 800bf5a:	bf28      	it	cs
 800bf5c:	463a      	movcs	r2, r7
 800bf5e:	f7fc ff1c 	bl	8008d9a <memcpy>
 800bf62:	4631      	mov	r1, r6
 800bf64:	4640      	mov	r0, r8
 800bf66:	f7fd fda9 	bl	8009abc <_free_r>
 800bf6a:	e7e1      	b.n	800bf30 <_realloc_r+0x1e>
 800bf6c:	4635      	mov	r5, r6
 800bf6e:	e7df      	b.n	800bf30 <_realloc_r+0x1e>

0800bf70 <__ascii_wctomb>:
 800bf70:	b149      	cbz	r1, 800bf86 <__ascii_wctomb+0x16>
 800bf72:	2aff      	cmp	r2, #255	; 0xff
 800bf74:	bf85      	ittet	hi
 800bf76:	238a      	movhi	r3, #138	; 0x8a
 800bf78:	6003      	strhi	r3, [r0, #0]
 800bf7a:	700a      	strbls	r2, [r1, #0]
 800bf7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf80:	bf98      	it	ls
 800bf82:	2001      	movls	r0, #1
 800bf84:	4770      	bx	lr
 800bf86:	4608      	mov	r0, r1
 800bf88:	4770      	bx	lr
	...

0800bf8c <fiprintf>:
 800bf8c:	b40e      	push	{r1, r2, r3}
 800bf8e:	b503      	push	{r0, r1, lr}
 800bf90:	4601      	mov	r1, r0
 800bf92:	ab03      	add	r3, sp, #12
 800bf94:	4805      	ldr	r0, [pc, #20]	; (800bfac <fiprintf+0x20>)
 800bf96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9a:	6800      	ldr	r0, [r0, #0]
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	f000 f83f 	bl	800c020 <_vfiprintf_r>
 800bfa2:	b002      	add	sp, #8
 800bfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa8:	b003      	add	sp, #12
 800bfaa:	4770      	bx	lr
 800bfac:	20000078 	.word	0x20000078

0800bfb0 <abort>:
 800bfb0:	b508      	push	{r3, lr}
 800bfb2:	2006      	movs	r0, #6
 800bfb4:	f000 fa0c 	bl	800c3d0 <raise>
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f7f6 f87f 	bl	80020bc <_exit>

0800bfbe <_malloc_usable_size_r>:
 800bfbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfc2:	1f18      	subs	r0, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfbc      	itt	lt
 800bfc8:	580b      	ldrlt	r3, [r1, r0]
 800bfca:	18c0      	addlt	r0, r0, r3
 800bfcc:	4770      	bx	lr

0800bfce <__sfputc_r>:
 800bfce:	6893      	ldr	r3, [r2, #8]
 800bfd0:	3b01      	subs	r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	b410      	push	{r4}
 800bfd6:	6093      	str	r3, [r2, #8]
 800bfd8:	da08      	bge.n	800bfec <__sfputc_r+0x1e>
 800bfda:	6994      	ldr	r4, [r2, #24]
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	db01      	blt.n	800bfe4 <__sfputc_r+0x16>
 800bfe0:	290a      	cmp	r1, #10
 800bfe2:	d103      	bne.n	800bfec <__sfputc_r+0x1e>
 800bfe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe8:	f000 b934 	b.w	800c254 <__swbuf_r>
 800bfec:	6813      	ldr	r3, [r2, #0]
 800bfee:	1c58      	adds	r0, r3, #1
 800bff0:	6010      	str	r0, [r2, #0]
 800bff2:	7019      	strb	r1, [r3, #0]
 800bff4:	4608      	mov	r0, r1
 800bff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <__sfputs_r>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	4606      	mov	r6, r0
 800c000:	460f      	mov	r7, r1
 800c002:	4614      	mov	r4, r2
 800c004:	18d5      	adds	r5, r2, r3
 800c006:	42ac      	cmp	r4, r5
 800c008:	d101      	bne.n	800c00e <__sfputs_r+0x12>
 800c00a:	2000      	movs	r0, #0
 800c00c:	e007      	b.n	800c01e <__sfputs_r+0x22>
 800c00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c012:	463a      	mov	r2, r7
 800c014:	4630      	mov	r0, r6
 800c016:	f7ff ffda 	bl	800bfce <__sfputc_r>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d1f3      	bne.n	800c006 <__sfputs_r+0xa>
 800c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c020 <_vfiprintf_r>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	460d      	mov	r5, r1
 800c026:	b09d      	sub	sp, #116	; 0x74
 800c028:	4614      	mov	r4, r2
 800c02a:	4698      	mov	r8, r3
 800c02c:	4606      	mov	r6, r0
 800c02e:	b118      	cbz	r0, 800c038 <_vfiprintf_r+0x18>
 800c030:	6a03      	ldr	r3, [r0, #32]
 800c032:	b90b      	cbnz	r3, 800c038 <_vfiprintf_r+0x18>
 800c034:	f7fc fd64 	bl	8008b00 <__sinit>
 800c038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c03a:	07d9      	lsls	r1, r3, #31
 800c03c:	d405      	bmi.n	800c04a <_vfiprintf_r+0x2a>
 800c03e:	89ab      	ldrh	r3, [r5, #12]
 800c040:	059a      	lsls	r2, r3, #22
 800c042:	d402      	bmi.n	800c04a <_vfiprintf_r+0x2a>
 800c044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c046:	f7fc fea6 	bl	8008d96 <__retarget_lock_acquire_recursive>
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	071b      	lsls	r3, r3, #28
 800c04e:	d501      	bpl.n	800c054 <_vfiprintf_r+0x34>
 800c050:	692b      	ldr	r3, [r5, #16]
 800c052:	b99b      	cbnz	r3, 800c07c <_vfiprintf_r+0x5c>
 800c054:	4629      	mov	r1, r5
 800c056:	4630      	mov	r0, r6
 800c058:	f000 f93a 	bl	800c2d0 <__swsetup_r>
 800c05c:	b170      	cbz	r0, 800c07c <_vfiprintf_r+0x5c>
 800c05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c060:	07dc      	lsls	r4, r3, #31
 800c062:	d504      	bpl.n	800c06e <_vfiprintf_r+0x4e>
 800c064:	f04f 30ff 	mov.w	r0, #4294967295
 800c068:	b01d      	add	sp, #116	; 0x74
 800c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06e:	89ab      	ldrh	r3, [r5, #12]
 800c070:	0598      	lsls	r0, r3, #22
 800c072:	d4f7      	bmi.n	800c064 <_vfiprintf_r+0x44>
 800c074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c076:	f7fc fe8f 	bl	8008d98 <__retarget_lock_release_recursive>
 800c07a:	e7f3      	b.n	800c064 <_vfiprintf_r+0x44>
 800c07c:	2300      	movs	r3, #0
 800c07e:	9309      	str	r3, [sp, #36]	; 0x24
 800c080:	2320      	movs	r3, #32
 800c082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c086:	f8cd 800c 	str.w	r8, [sp, #12]
 800c08a:	2330      	movs	r3, #48	; 0x30
 800c08c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c240 <_vfiprintf_r+0x220>
 800c090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c094:	f04f 0901 	mov.w	r9, #1
 800c098:	4623      	mov	r3, r4
 800c09a:	469a      	mov	sl, r3
 800c09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0a0:	b10a      	cbz	r2, 800c0a6 <_vfiprintf_r+0x86>
 800c0a2:	2a25      	cmp	r2, #37	; 0x25
 800c0a4:	d1f9      	bne.n	800c09a <_vfiprintf_r+0x7a>
 800c0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c0aa:	d00b      	beq.n	800c0c4 <_vfiprintf_r+0xa4>
 800c0ac:	465b      	mov	r3, fp
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f7ff ffa2 	bl	800bffc <__sfputs_r>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	f000 80a9 	beq.w	800c210 <_vfiprintf_r+0x1f0>
 800c0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0c0:	445a      	add	r2, fp
 800c0c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80a1 	beq.w	800c210 <_vfiprintf_r+0x1f0>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d8:	f10a 0a01 	add.w	sl, sl, #1
 800c0dc:	9304      	str	r3, [sp, #16]
 800c0de:	9307      	str	r3, [sp, #28]
 800c0e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c0e6:	4654      	mov	r4, sl
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ee:	4854      	ldr	r0, [pc, #336]	; (800c240 <_vfiprintf_r+0x220>)
 800c0f0:	f7f4 f876 	bl	80001e0 <memchr>
 800c0f4:	9a04      	ldr	r2, [sp, #16]
 800c0f6:	b9d8      	cbnz	r0, 800c130 <_vfiprintf_r+0x110>
 800c0f8:	06d1      	lsls	r1, r2, #27
 800c0fa:	bf44      	itt	mi
 800c0fc:	2320      	movmi	r3, #32
 800c0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c102:	0713      	lsls	r3, r2, #28
 800c104:	bf44      	itt	mi
 800c106:	232b      	movmi	r3, #43	; 0x2b
 800c108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c10c:	f89a 3000 	ldrb.w	r3, [sl]
 800c110:	2b2a      	cmp	r3, #42	; 0x2a
 800c112:	d015      	beq.n	800c140 <_vfiprintf_r+0x120>
 800c114:	9a07      	ldr	r2, [sp, #28]
 800c116:	4654      	mov	r4, sl
 800c118:	2000      	movs	r0, #0
 800c11a:	f04f 0c0a 	mov.w	ip, #10
 800c11e:	4621      	mov	r1, r4
 800c120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c124:	3b30      	subs	r3, #48	; 0x30
 800c126:	2b09      	cmp	r3, #9
 800c128:	d94d      	bls.n	800c1c6 <_vfiprintf_r+0x1a6>
 800c12a:	b1b0      	cbz	r0, 800c15a <_vfiprintf_r+0x13a>
 800c12c:	9207      	str	r2, [sp, #28]
 800c12e:	e014      	b.n	800c15a <_vfiprintf_r+0x13a>
 800c130:	eba0 0308 	sub.w	r3, r0, r8
 800c134:	fa09 f303 	lsl.w	r3, r9, r3
 800c138:	4313      	orrs	r3, r2
 800c13a:	9304      	str	r3, [sp, #16]
 800c13c:	46a2      	mov	sl, r4
 800c13e:	e7d2      	b.n	800c0e6 <_vfiprintf_r+0xc6>
 800c140:	9b03      	ldr	r3, [sp, #12]
 800c142:	1d19      	adds	r1, r3, #4
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	9103      	str	r1, [sp, #12]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	bfbb      	ittet	lt
 800c14c:	425b      	neglt	r3, r3
 800c14e:	f042 0202 	orrlt.w	r2, r2, #2
 800c152:	9307      	strge	r3, [sp, #28]
 800c154:	9307      	strlt	r3, [sp, #28]
 800c156:	bfb8      	it	lt
 800c158:	9204      	strlt	r2, [sp, #16]
 800c15a:	7823      	ldrb	r3, [r4, #0]
 800c15c:	2b2e      	cmp	r3, #46	; 0x2e
 800c15e:	d10c      	bne.n	800c17a <_vfiprintf_r+0x15a>
 800c160:	7863      	ldrb	r3, [r4, #1]
 800c162:	2b2a      	cmp	r3, #42	; 0x2a
 800c164:	d134      	bne.n	800c1d0 <_vfiprintf_r+0x1b0>
 800c166:	9b03      	ldr	r3, [sp, #12]
 800c168:	1d1a      	adds	r2, r3, #4
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	9203      	str	r2, [sp, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	bfb8      	it	lt
 800c172:	f04f 33ff 	movlt.w	r3, #4294967295
 800c176:	3402      	adds	r4, #2
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c250 <_vfiprintf_r+0x230>
 800c17e:	7821      	ldrb	r1, [r4, #0]
 800c180:	2203      	movs	r2, #3
 800c182:	4650      	mov	r0, sl
 800c184:	f7f4 f82c 	bl	80001e0 <memchr>
 800c188:	b138      	cbz	r0, 800c19a <_vfiprintf_r+0x17a>
 800c18a:	9b04      	ldr	r3, [sp, #16]
 800c18c:	eba0 000a 	sub.w	r0, r0, sl
 800c190:	2240      	movs	r2, #64	; 0x40
 800c192:	4082      	lsls	r2, r0
 800c194:	4313      	orrs	r3, r2
 800c196:	3401      	adds	r4, #1
 800c198:	9304      	str	r3, [sp, #16]
 800c19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c19e:	4829      	ldr	r0, [pc, #164]	; (800c244 <_vfiprintf_r+0x224>)
 800c1a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1a4:	2206      	movs	r2, #6
 800c1a6:	f7f4 f81b 	bl	80001e0 <memchr>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d03f      	beq.n	800c22e <_vfiprintf_r+0x20e>
 800c1ae:	4b26      	ldr	r3, [pc, #152]	; (800c248 <_vfiprintf_r+0x228>)
 800c1b0:	bb1b      	cbnz	r3, 800c1fa <_vfiprintf_r+0x1da>
 800c1b2:	9b03      	ldr	r3, [sp, #12]
 800c1b4:	3307      	adds	r3, #7
 800c1b6:	f023 0307 	bic.w	r3, r3, #7
 800c1ba:	3308      	adds	r3, #8
 800c1bc:	9303      	str	r3, [sp, #12]
 800c1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c0:	443b      	add	r3, r7
 800c1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c4:	e768      	b.n	800c098 <_vfiprintf_r+0x78>
 800c1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	e7a6      	b.n	800c11e <_vfiprintf_r+0xfe>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	3401      	adds	r4, #1
 800c1d4:	9305      	str	r3, [sp, #20]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	f04f 0c0a 	mov.w	ip, #10
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1e2:	3a30      	subs	r2, #48	; 0x30
 800c1e4:	2a09      	cmp	r2, #9
 800c1e6:	d903      	bls.n	800c1f0 <_vfiprintf_r+0x1d0>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d0c6      	beq.n	800c17a <_vfiprintf_r+0x15a>
 800c1ec:	9105      	str	r1, [sp, #20]
 800c1ee:	e7c4      	b.n	800c17a <_vfiprintf_r+0x15a>
 800c1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e7f0      	b.n	800c1dc <_vfiprintf_r+0x1bc>
 800c1fa:	ab03      	add	r3, sp, #12
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	462a      	mov	r2, r5
 800c200:	4b12      	ldr	r3, [pc, #72]	; (800c24c <_vfiprintf_r+0x22c>)
 800c202:	a904      	add	r1, sp, #16
 800c204:	4630      	mov	r0, r6
 800c206:	f7fb fe19 	bl	8007e3c <_printf_float>
 800c20a:	4607      	mov	r7, r0
 800c20c:	1c78      	adds	r0, r7, #1
 800c20e:	d1d6      	bne.n	800c1be <_vfiprintf_r+0x19e>
 800c210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c212:	07d9      	lsls	r1, r3, #31
 800c214:	d405      	bmi.n	800c222 <_vfiprintf_r+0x202>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	059a      	lsls	r2, r3, #22
 800c21a:	d402      	bmi.n	800c222 <_vfiprintf_r+0x202>
 800c21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c21e:	f7fc fdbb 	bl	8008d98 <__retarget_lock_release_recursive>
 800c222:	89ab      	ldrh	r3, [r5, #12]
 800c224:	065b      	lsls	r3, r3, #25
 800c226:	f53f af1d 	bmi.w	800c064 <_vfiprintf_r+0x44>
 800c22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c22c:	e71c      	b.n	800c068 <_vfiprintf_r+0x48>
 800c22e:	ab03      	add	r3, sp, #12
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	462a      	mov	r2, r5
 800c234:	4b05      	ldr	r3, [pc, #20]	; (800c24c <_vfiprintf_r+0x22c>)
 800c236:	a904      	add	r1, sp, #16
 800c238:	4630      	mov	r0, r6
 800c23a:	f7fc f8a3 	bl	8008384 <_printf_i>
 800c23e:	e7e4      	b.n	800c20a <_vfiprintf_r+0x1ea>
 800c240:	0800ca89 	.word	0x0800ca89
 800c244:	0800ca93 	.word	0x0800ca93
 800c248:	08007e3d 	.word	0x08007e3d
 800c24c:	0800bffd 	.word	0x0800bffd
 800c250:	0800ca8f 	.word	0x0800ca8f

0800c254 <__swbuf_r>:
 800c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c256:	460e      	mov	r6, r1
 800c258:	4614      	mov	r4, r2
 800c25a:	4605      	mov	r5, r0
 800c25c:	b118      	cbz	r0, 800c266 <__swbuf_r+0x12>
 800c25e:	6a03      	ldr	r3, [r0, #32]
 800c260:	b90b      	cbnz	r3, 800c266 <__swbuf_r+0x12>
 800c262:	f7fc fc4d 	bl	8008b00 <__sinit>
 800c266:	69a3      	ldr	r3, [r4, #24]
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	071a      	lsls	r2, r3, #28
 800c26e:	d525      	bpl.n	800c2bc <__swbuf_r+0x68>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	b31b      	cbz	r3, 800c2bc <__swbuf_r+0x68>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	6922      	ldr	r2, [r4, #16]
 800c278:	1a98      	subs	r0, r3, r2
 800c27a:	6963      	ldr	r3, [r4, #20]
 800c27c:	b2f6      	uxtb	r6, r6
 800c27e:	4283      	cmp	r3, r0
 800c280:	4637      	mov	r7, r6
 800c282:	dc04      	bgt.n	800c28e <__swbuf_r+0x3a>
 800c284:	4621      	mov	r1, r4
 800c286:	4628      	mov	r0, r5
 800c288:	f7ff fa3a 	bl	800b700 <_fflush_r>
 800c28c:	b9e0      	cbnz	r0, 800c2c8 <__swbuf_r+0x74>
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	3b01      	subs	r3, #1
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	1c5a      	adds	r2, r3, #1
 800c298:	6022      	str	r2, [r4, #0]
 800c29a:	701e      	strb	r6, [r3, #0]
 800c29c:	6962      	ldr	r2, [r4, #20]
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d004      	beq.n	800c2ae <__swbuf_r+0x5a>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	07db      	lsls	r3, r3, #31
 800c2a8:	d506      	bpl.n	800c2b8 <__swbuf_r+0x64>
 800c2aa:	2e0a      	cmp	r6, #10
 800c2ac:	d104      	bne.n	800c2b8 <__swbuf_r+0x64>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f7ff fa25 	bl	800b700 <_fflush_r>
 800c2b6:	b938      	cbnz	r0, 800c2c8 <__swbuf_r+0x74>
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2bc:	4621      	mov	r1, r4
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f000 f806 	bl	800c2d0 <__swsetup_r>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d0d5      	beq.n	800c274 <__swbuf_r+0x20>
 800c2c8:	f04f 37ff 	mov.w	r7, #4294967295
 800c2cc:	e7f4      	b.n	800c2b8 <__swbuf_r+0x64>
	...

0800c2d0 <__swsetup_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4b2a      	ldr	r3, [pc, #168]	; (800c37c <__swsetup_r+0xac>)
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	460c      	mov	r4, r1
 800c2da:	b118      	cbz	r0, 800c2e4 <__swsetup_r+0x14>
 800c2dc:	6a03      	ldr	r3, [r0, #32]
 800c2de:	b90b      	cbnz	r3, 800c2e4 <__swsetup_r+0x14>
 800c2e0:	f7fc fc0e 	bl	8008b00 <__sinit>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2ea:	0718      	lsls	r0, r3, #28
 800c2ec:	d422      	bmi.n	800c334 <__swsetup_r+0x64>
 800c2ee:	06d9      	lsls	r1, r3, #27
 800c2f0:	d407      	bmi.n	800c302 <__swsetup_r+0x32>
 800c2f2:	2309      	movs	r3, #9
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2fa:	81a3      	strh	r3, [r4, #12]
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	e034      	b.n	800c36c <__swsetup_r+0x9c>
 800c302:	0758      	lsls	r0, r3, #29
 800c304:	d512      	bpl.n	800c32c <__swsetup_r+0x5c>
 800c306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c308:	b141      	cbz	r1, 800c31c <__swsetup_r+0x4c>
 800c30a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c30e:	4299      	cmp	r1, r3
 800c310:	d002      	beq.n	800c318 <__swsetup_r+0x48>
 800c312:	4628      	mov	r0, r5
 800c314:	f7fd fbd2 	bl	8009abc <_free_r>
 800c318:	2300      	movs	r3, #0
 800c31a:	6363      	str	r3, [r4, #52]	; 0x34
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	2300      	movs	r3, #0
 800c326:	6063      	str	r3, [r4, #4]
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f043 0308 	orr.w	r3, r3, #8
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	b94b      	cbnz	r3, 800c34c <__swsetup_r+0x7c>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c33e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c342:	d003      	beq.n	800c34c <__swsetup_r+0x7c>
 800c344:	4621      	mov	r1, r4
 800c346:	4628      	mov	r0, r5
 800c348:	f000 f884 	bl	800c454 <__smakebuf_r>
 800c34c:	89a0      	ldrh	r0, [r4, #12]
 800c34e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c352:	f010 0301 	ands.w	r3, r0, #1
 800c356:	d00a      	beq.n	800c36e <__swsetup_r+0x9e>
 800c358:	2300      	movs	r3, #0
 800c35a:	60a3      	str	r3, [r4, #8]
 800c35c:	6963      	ldr	r3, [r4, #20]
 800c35e:	425b      	negs	r3, r3
 800c360:	61a3      	str	r3, [r4, #24]
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	b943      	cbnz	r3, 800c378 <__swsetup_r+0xa8>
 800c366:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c36a:	d1c4      	bne.n	800c2f6 <__swsetup_r+0x26>
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	0781      	lsls	r1, r0, #30
 800c370:	bf58      	it	pl
 800c372:	6963      	ldrpl	r3, [r4, #20]
 800c374:	60a3      	str	r3, [r4, #8]
 800c376:	e7f4      	b.n	800c362 <__swsetup_r+0x92>
 800c378:	2000      	movs	r0, #0
 800c37a:	e7f7      	b.n	800c36c <__swsetup_r+0x9c>
 800c37c:	20000078 	.word	0x20000078

0800c380 <_raise_r>:
 800c380:	291f      	cmp	r1, #31
 800c382:	b538      	push	{r3, r4, r5, lr}
 800c384:	4604      	mov	r4, r0
 800c386:	460d      	mov	r5, r1
 800c388:	d904      	bls.n	800c394 <_raise_r+0x14>
 800c38a:	2316      	movs	r3, #22
 800c38c:	6003      	str	r3, [r0, #0]
 800c38e:	f04f 30ff 	mov.w	r0, #4294967295
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c396:	b112      	cbz	r2, 800c39e <_raise_r+0x1e>
 800c398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c39c:	b94b      	cbnz	r3, 800c3b2 <_raise_r+0x32>
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 f830 	bl	800c404 <_getpid_r>
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ae:	f000 b817 	b.w	800c3e0 <_kill_r>
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d00a      	beq.n	800c3cc <_raise_r+0x4c>
 800c3b6:	1c59      	adds	r1, r3, #1
 800c3b8:	d103      	bne.n	800c3c2 <_raise_r+0x42>
 800c3ba:	2316      	movs	r3, #22
 800c3bc:	6003      	str	r3, [r0, #0]
 800c3be:	2001      	movs	r0, #1
 800c3c0:	e7e7      	b.n	800c392 <_raise_r+0x12>
 800c3c2:	2400      	movs	r4, #0
 800c3c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	4798      	blx	r3
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7e0      	b.n	800c392 <_raise_r+0x12>

0800c3d0 <raise>:
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <raise+0xc>)
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	f7ff bfd3 	b.w	800c380 <_raise_r>
 800c3da:	bf00      	nop
 800c3dc:	20000078 	.word	0x20000078

0800c3e0 <_kill_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	; (800c400 <_kill_r+0x20>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	602b      	str	r3, [r5, #0]
 800c3ee:	f7f5 fe55 	bl	800209c <_kill>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	d102      	bne.n	800c3fc <_kill_r+0x1c>
 800c3f6:	682b      	ldr	r3, [r5, #0]
 800c3f8:	b103      	cbz	r3, 800c3fc <_kill_r+0x1c>
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	bd38      	pop	{r3, r4, r5, pc}
 800c3fe:	bf00      	nop
 800c400:	20004e60 	.word	0x20004e60

0800c404 <_getpid_r>:
 800c404:	f7f5 be42 	b.w	800208c <_getpid>

0800c408 <__swhatbuf_r>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	460c      	mov	r4, r1
 800c40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c410:	2900      	cmp	r1, #0
 800c412:	b096      	sub	sp, #88	; 0x58
 800c414:	4615      	mov	r5, r2
 800c416:	461e      	mov	r6, r3
 800c418:	da0d      	bge.n	800c436 <__swhatbuf_r+0x2e>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c420:	f04f 0100 	mov.w	r1, #0
 800c424:	bf0c      	ite	eq
 800c426:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c42a:	2340      	movne	r3, #64	; 0x40
 800c42c:	2000      	movs	r0, #0
 800c42e:	6031      	str	r1, [r6, #0]
 800c430:	602b      	str	r3, [r5, #0]
 800c432:	b016      	add	sp, #88	; 0x58
 800c434:	bd70      	pop	{r4, r5, r6, pc}
 800c436:	466a      	mov	r2, sp
 800c438:	f000 f848 	bl	800c4cc <_fstat_r>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	dbec      	blt.n	800c41a <__swhatbuf_r+0x12>
 800c440:	9901      	ldr	r1, [sp, #4]
 800c442:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c446:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c44a:	4259      	negs	r1, r3
 800c44c:	4159      	adcs	r1, r3
 800c44e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c452:	e7eb      	b.n	800c42c <__swhatbuf_r+0x24>

0800c454 <__smakebuf_r>:
 800c454:	898b      	ldrh	r3, [r1, #12]
 800c456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c458:	079d      	lsls	r5, r3, #30
 800c45a:	4606      	mov	r6, r0
 800c45c:	460c      	mov	r4, r1
 800c45e:	d507      	bpl.n	800c470 <__smakebuf_r+0x1c>
 800c460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	6123      	str	r3, [r4, #16]
 800c468:	2301      	movs	r3, #1
 800c46a:	6163      	str	r3, [r4, #20]
 800c46c:	b002      	add	sp, #8
 800c46e:	bd70      	pop	{r4, r5, r6, pc}
 800c470:	ab01      	add	r3, sp, #4
 800c472:	466a      	mov	r2, sp
 800c474:	f7ff ffc8 	bl	800c408 <__swhatbuf_r>
 800c478:	9900      	ldr	r1, [sp, #0]
 800c47a:	4605      	mov	r5, r0
 800c47c:	4630      	mov	r0, r6
 800c47e:	f7fd fb91 	bl	8009ba4 <_malloc_r>
 800c482:	b948      	cbnz	r0, 800c498 <__smakebuf_r+0x44>
 800c484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c488:	059a      	lsls	r2, r3, #22
 800c48a:	d4ef      	bmi.n	800c46c <__smakebuf_r+0x18>
 800c48c:	f023 0303 	bic.w	r3, r3, #3
 800c490:	f043 0302 	orr.w	r3, r3, #2
 800c494:	81a3      	strh	r3, [r4, #12]
 800c496:	e7e3      	b.n	800c460 <__smakebuf_r+0xc>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	6020      	str	r0, [r4, #0]
 800c49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	9b00      	ldr	r3, [sp, #0]
 800c4a4:	6163      	str	r3, [r4, #20]
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	6120      	str	r0, [r4, #16]
 800c4aa:	b15b      	cbz	r3, 800c4c4 <__smakebuf_r+0x70>
 800c4ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f000 f81d 	bl	800c4f0 <_isatty_r>
 800c4b6:	b128      	cbz	r0, 800c4c4 <__smakebuf_r+0x70>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	f023 0303 	bic.w	r3, r3, #3
 800c4be:	f043 0301 	orr.w	r3, r3, #1
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	89a3      	ldrh	r3, [r4, #12]
 800c4c6:	431d      	orrs	r5, r3
 800c4c8:	81a5      	strh	r5, [r4, #12]
 800c4ca:	e7cf      	b.n	800c46c <__smakebuf_r+0x18>

0800c4cc <_fstat_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d07      	ldr	r5, [pc, #28]	; (800c4ec <_fstat_r+0x20>)
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	f7f5 fe3e 	bl	800215a <_fstat>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	d102      	bne.n	800c4e8 <_fstat_r+0x1c>
 800c4e2:	682b      	ldr	r3, [r5, #0]
 800c4e4:	b103      	cbz	r3, 800c4e8 <_fstat_r+0x1c>
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20004e60 	.word	0x20004e60

0800c4f0 <_isatty_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d06      	ldr	r5, [pc, #24]	; (800c50c <_isatty_r+0x1c>)
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	602b      	str	r3, [r5, #0]
 800c4fc:	f7f5 fe3d 	bl	800217a <_isatty>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_isatty_r+0x1a>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_isatty_r+0x1a>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	20004e60 	.word	0x20004e60

0800c510 <_init>:
 800c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c512:	bf00      	nop
 800c514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c516:	bc08      	pop	{r3}
 800c518:	469e      	mov	lr, r3
 800c51a:	4770      	bx	lr

0800c51c <_fini>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr
