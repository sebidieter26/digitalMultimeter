
digitalMultimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c35c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800c500  0800c500  0000d500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb38  0800cb38  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb38  0800cb38  0000db38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb40  0800cb40  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb40  0800cb40  0000db40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb44  0800cb44  0000db44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cb48  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca0  200001e8  0800cd30  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e88  0800cd30  0000ee88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b864  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b7c  00000000  00000000  00029a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013e5  00000000  00000000  0002ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053ab  00000000  00000000  0003034d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6b8  00000000  00000000  000356f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a84fc  00000000  00000000  00051db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa2ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000817c  00000000  00000000  000fa2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010246c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4e4 	.word	0x0800c4e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c4e4 	.word	0x0800c4e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000ffe:	4a38      	ldr	r2, [pc, #224]	@ (80010e0 <HD44780_Init+0xec>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001004:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <HD44780_Init+0xf0>)
 8001006:	2208      	movs	r2, #8
 8001008:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800100a:	4b37      	ldr	r3, [pc, #220]	@ (80010e8 <HD44780_Init+0xf4>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001010:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HD44780_Init+0xec>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d907      	bls.n	8001028 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001018:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <HD44780_Init+0xf4>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <HD44780_Init+0xf4>)
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e006      	b.n	8001036 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001028:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <HD44780_Init+0xf4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b2d      	ldr	r3, [pc, #180]	@ (80010e8 <HD44780_Init+0xf4>)
 8001034:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001036:	f000 f985 	bl	8001344 <DelayInit>
  HAL_Delay(50);
 800103a:	2032      	movs	r0, #50	@ 0x32
 800103c:	f001 f98e 	bl	800235c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <HD44780_Init+0xf0>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f943 	bl	80012d0 <ExpanderWrite>
  HAL_Delay(1000);
 800104a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104e:	f001 f985 	bl	800235c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001052:	2030      	movs	r0, #48	@ 0x30
 8001054:	f000 f92b 	bl	80012ae <Write4Bits>
  DelayUS(4500);
 8001058:	f241 1094 	movw	r0, #4500	@ 0x1194
 800105c:	f000 f99c 	bl	8001398 <DelayUS>

  Write4Bits(0x03 << 4);
 8001060:	2030      	movs	r0, #48	@ 0x30
 8001062:	f000 f924 	bl	80012ae <Write4Bits>
  DelayUS(4500);
 8001066:	f241 1094 	movw	r0, #4500	@ 0x1194
 800106a:	f000 f995 	bl	8001398 <DelayUS>

  Write4Bits(0x03 << 4);
 800106e:	2030      	movs	r0, #48	@ 0x30
 8001070:	f000 f91d 	bl	80012ae <Write4Bits>
  DelayUS(4500);
 8001074:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001078:	f000 f98e 	bl	8001398 <DelayUS>

  Write4Bits(0x02 << 4);
 800107c:	2020      	movs	r0, #32
 800107e:	f000 f916 	bl	80012ae <Write4Bits>
  DelayUS(100);
 8001082:	2064      	movs	r0, #100	@ 0x64
 8001084:	f000 f988 	bl	8001398 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HD44780_Init+0xf4>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f8ce 	bl	8001234 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HD44780_Init+0xf8>)
 800109a:	2204      	movs	r2, #4
 800109c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800109e:	f000 f875 	bl	800118c <HD44780_Display>
  HD44780_Clear();
 80010a2:	f000 f82b 	bl	80010fc <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HD44780_Init+0xfc>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HD44780_Init+0xfc>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8bc 	bl	8001234 <SendCommand>
  DelayUS(4500);
 80010bc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80010c0:	f000 f96a 	bl	8001398 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010c4:	490b      	ldr	r1, [pc, #44]	@ (80010f4 <HD44780_Init+0x100>)
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f876 	bl	80011b8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010cc:	490a      	ldr	r1, [pc, #40]	@ (80010f8 <HD44780_Init+0x104>)
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 f872 	bl	80011b8 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010d4:	f000 f81d 	bl	8001112 <HD44780_Home>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000207 	.word	0x20000207
 80010e4:	20000208 	.word	0x20000208
 80010e8:	20000204 	.word	0x20000204
 80010ec:	20000205 	.word	0x20000205
 80010f0:	20000206 	.word	0x20000206
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008

080010fc <HD44780_Clear>:

void HD44780_Clear()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001100:	2001      	movs	r0, #1
 8001102:	f000 f897 	bl	8001234 <SendCommand>
  DelayUS(2000);
 8001106:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800110a:	f000 f945 	bl	8001398 <DelayUS>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <HD44780_Home>:

void HD44780_Home()
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001116:	2002      	movs	r0, #2
 8001118:	f000 f88c 	bl	8001234 <SendCommand>
  DelayUS(2000);
 800111c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001120:	f000 f93a 	bl	8001398 <DelayUS>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HD44780_SetCursor+0x5c>)
 800113a:	f107 0408 	add.w	r4, r7, #8
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HD44780_SetCursor+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	429a      	cmp	r2, r3
 800114c:	d303      	bcc.n	8001156 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HD44780_SetCursor+0x60>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	3318      	adds	r3, #24
 800115c:	443b      	add	r3, r7
 800115e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4413      	add	r3, r2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	b25b      	sxtb	r3, r3
 800116c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001170:	b25b      	sxtb	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f85d 	bl	8001234 <SendCommand>
}
 800117a:	bf00      	nop
 800117c:	371c      	adds	r7, #28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	0800c500 	.word	0x0800c500
 8001188:	20000207 	.word	0x20000207

0800118c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HD44780_Display+0x28>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HD44780_Display+0x28>)
 800119c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HD44780_Display+0x28>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f843 	bl	8001234 <SendCommand>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000205 	.word	0x20000205

080011b8 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f82a 	bl	8001234 <SendCommand>
  for (int i=0; i<8; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e009      	b.n	80011fa <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f82e 	bl	8001250 <SendChar>
  for (int i=0; i<8; i++)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	ddf2      	ble.n	80011e6 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001212:	e006      	b.n	8001222 <HD44780_PrintStr+0x18>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f817 	bl	8001250 <SendChar>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f4      	bne.n	8001214 <HD44780_PrintStr+0xa>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f812 	bl	800126c <Send>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2101      	movs	r1, #1
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f804 	bl	800126c <Send>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f023 030f 	bic.w	r3, r3, #15
 8001282:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	4313      	orrs	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f80b 	bl	80012ae <Write4Bits>
  Write4Bits((lownib)|mode);
 8001298:	7bba      	ldrb	r2, [r7, #14]
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	4313      	orrs	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f804 	bl	80012ae <Write4Bits>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f808 	bl	80012d0 <ExpanderWrite>
  PulseEnable(value);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f820 	bl	8001308 <PulseEnable>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <ExpanderWrite+0x30>)
 80012dc:	781a      	ldrb	r2, [r3, #0]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012e6:	f107 020f 	add.w	r2, r7, #15
 80012ea:	230a      	movs	r3, #10
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	214e      	movs	r1, #78	@ 0x4e
 80012f2:	4804      	ldr	r0, [pc, #16]	@ (8001304 <ExpanderWrite+0x34>)
 80012f4:	f001 ffe0 	bl	80032b8 <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000208 	.word	0x20000208
 8001304:	20000254 	.word	0x20000254

08001308 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffd8 	bl	80012d0 <ExpanderWrite>
  DelayUS(20);
 8001320:	2014      	movs	r0, #20
 8001322:	f000 f839 	bl	8001398 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f023 0304 	bic.w	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffce 	bl	80012d0 <ExpanderWrite>
  DelayUS(20);
 8001334:	2014      	movs	r0, #20
 8001336:	f000 f82f 	bl	8001398 <DelayUS>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <DelayInit>:

static void DelayInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <DelayInit+0x4c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	4a10      	ldr	r2, [pc, #64]	@ (8001390 <DelayInit+0x4c>)
 800134e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001352:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <DelayInit+0x4c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <DelayInit+0x4c>)
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800135e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <DelayInit+0x50>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <DelayInit+0x50>)
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <DelayInit+0x50>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <DelayInit+0x50>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <DelayInit+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800137e:	bf00      	nop
  __ASM volatile ("NOP");
 8001380:	bf00      	nop
  __ASM volatile ("NOP");
 8001382:	bf00      	nop
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000edf0 	.word	0xe000edf0
 8001394:	e0001000 	.word	0xe0001000

08001398 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <DelayUS+0x44>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <DelayUS+0x48>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9a      	lsrs	r2, r3, #18
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <DelayUS+0x4c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <DelayUS+0x4c>)
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f6      	bhi.n	80013ba <DelayUS+0x22>
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000010 	.word	0x20000010
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	e0001000 	.word	0xe0001000

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ec:	f000 ff74 	bl	80022d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f87a 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f000 f9b6 	bl	8001764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013f8:	f000 f98a 	bl	8001710 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013fc:	f000 f930 	bl	8001660 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001400:	f000 f8dc 	bl	80015bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001404:	f000 f95a 	bl	80016bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001408:	f003 fcf6 	bl	8004df8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of voltQueue */
  voltQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &voltQueue_attributes);
 800140c:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <main+0xac>)
 800140e:	2102      	movs	r1, #2
 8001410:	2010      	movs	r0, #16
 8001412:	f003 fe2a 	bl	800506a <osMessageQueueNew>
 8001416:	4603      	mov	r3, r0
 8001418:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <main+0xb0>)
 800141a:	6013      	str	r3, [r2, #0]

  /* creation of queueAmper */
  queueAmperHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueAmper_attributes);
 800141c:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <main+0xb4>)
 800141e:	2102      	movs	r1, #2
 8001420:	2010      	movs	r0, #16
 8001422:	f003 fe22 	bl	800506a <osMessageQueueNew>
 8001426:	4603      	mov	r3, r0
 8001428:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <main+0xb8>)
 800142a:	6013      	str	r3, [r2, #0]

  /* creation of queueOhm */
  queueOhmHandle = osMessageQueueNew (16, sizeof(uint16_t), &queueOhm_attributes);
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <main+0xbc>)
 800142e:	2102      	movs	r1, #2
 8001430:	2010      	movs	r0, #16
 8001432:	f003 fe1a 	bl	800506a <osMessageQueueNew>
 8001436:	4603      	mov	r3, r0
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <main+0xc0>)
 800143a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of voltMeter */
  voltMeterHandle = osThreadNew(StartVoltMeter, NULL, &voltMeter_attributes);
 800143c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <main+0xc4>)
 800143e:	2100      	movs	r1, #0
 8001440:	481b      	ldr	r0, [pc, #108]	@ (80014b0 <main+0xc8>)
 8001442:	f003 fd23 	bl	8004e8c <osThreadNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a1a      	ldr	r2, [pc, #104]	@ (80014b4 <main+0xcc>)
 800144a:	6013      	str	r3, [r2, #0]

  /* creation of amperMeter */
  amperMeterHandle = osThreadNew(StartAmperMeter, NULL, &amperMeter_attributes);
 800144c:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <main+0xd0>)
 800144e:	2100      	movs	r1, #0
 8001450:	481a      	ldr	r0, [pc, #104]	@ (80014bc <main+0xd4>)
 8001452:	f003 fd1b 	bl	8004e8c <osThreadNew>
 8001456:	4603      	mov	r3, r0
 8001458:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <main+0xd8>)
 800145a:	6013      	str	r3, [r2, #0]

  /* creation of ohmmeter */
  ohmmeterHandle = osThreadNew(StartOhmMeter, NULL, &ohmmeter_attributes);
 800145c:	4a19      	ldr	r2, [pc, #100]	@ (80014c4 <main+0xdc>)
 800145e:	2100      	movs	r1, #0
 8001460:	4819      	ldr	r0, [pc, #100]	@ (80014c8 <main+0xe0>)
 8001462:	f003 fd13 	bl	8004e8c <osThreadNew>
 8001466:	4603      	mov	r3, r0
 8001468:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <main+0xe4>)
 800146a:	6013      	str	r3, [r2, #0]

  /* creation of defaultPrint */
  defaultPrintHandle = osThreadNew(StartPrint, NULL, &defaultPrint_attributes);
 800146c:	4a18      	ldr	r2, [pc, #96]	@ (80014d0 <main+0xe8>)
 800146e:	2100      	movs	r1, #0
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <main+0xec>)
 8001472:	f003 fd0b 	bl	8004e8c <osThreadNew>
 8001476:	4603      	mov	r3, r0
 8001478:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <main+0xf0>)
 800147a:	6013      	str	r3, [r2, #0]

  /* creation of adcAcquire */
  adcAcquireHandle = osThreadNew(StartADC, NULL, &adcAcquire_attributes);
 800147c:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <main+0xf4>)
 800147e:	2100      	movs	r1, #0
 8001480:	4817      	ldr	r0, [pc, #92]	@ (80014e0 <main+0xf8>)
 8001482:	f003 fd03 	bl	8004e8c <osThreadNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <main+0xfc>)
 800148a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800148c:	f003 fcd8 	bl	8004e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <main+0xa8>
 8001494:	0800c6a8 	.word	0x0800c6a8
 8001498:	2000034c 	.word	0x2000034c
 800149c:	0800c6c0 	.word	0x0800c6c0
 80014a0:	20000350 	.word	0x20000350
 80014a4:	0800c6d8 	.word	0x0800c6d8
 80014a8:	20000354 	.word	0x20000354
 80014ac:	0800c5f4 	.word	0x0800c5f4
 80014b0:	08001935 	.word	0x08001935
 80014b4:	20000338 	.word	0x20000338
 80014b8:	0800c618 	.word	0x0800c618
 80014bc:	08001a09 	.word	0x08001a09
 80014c0:	2000033c 	.word	0x2000033c
 80014c4:	0800c63c 	.word	0x0800c63c
 80014c8:	08001add 	.word	0x08001add
 80014cc:	20000340 	.word	0x20000340
 80014d0:	0800c660 	.word	0x0800c660
 80014d4:	08001bb1 	.word	0x08001bb1
 80014d8:	20000344 	.word	0x20000344
 80014dc:	0800c684 	.word	0x0800c684
 80014e0:	08001c65 	.word	0x08001c65
 80014e4:	20000348 	.word	0x20000348

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	@ 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	2230      	movs	r2, #48	@ 0x30
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f007 fc1b 	bl	8008d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <SystemClock_Config+0xcc>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	4a27      	ldr	r2, [pc, #156]	@ (80015b4 <SystemClock_Config+0xcc>)
 8001516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	@ 0x40
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <SystemClock_Config+0xcc>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <SystemClock_Config+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001534:	4a20      	ldr	r2, [pc, #128]	@ (80015b8 <SystemClock_Config+0xd0>)
 8001536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <SystemClock_Config+0xd0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001548:	2302      	movs	r3, #2
 800154a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154c:	2301      	movs	r3, #1
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001550:	2310      	movs	r3, #16
 8001552:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001554:	2302      	movs	r3, #2
 8001556:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800155c:	2308      	movs	r3, #8
 800155e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001560:	2354      	movs	r3, #84	@ 0x54
 8001562:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001568:	2307      	movs	r3, #7
 800156a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f002 f9fb 	bl	800396c <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800157c:	f000 fbb7 	bl	8001cee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2302      	movs	r3, #2
 8001586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fc5d 	bl	8003e5c <HAL_RCC_ClockConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015a8:	f000 fba1 	bl	8001cee <Error_Handler>
  }
}
 80015ac:	bf00      	nop
 80015ae:	3750      	adds	r7, #80	@ 0x50
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000

080015bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	463b      	mov	r3, r7
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015d0:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <MX_ADC1_Init+0x9c>)
 80015d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <MX_ADC1_Init+0x98>)
 80015fe:	4a17      	ldr	r2, [pc, #92]	@ (800165c <MX_ADC1_Init+0xa0>)
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_ADC1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <MX_ADC1_Init+0x98>)
 800160a:	2201      	movs	r2, #1
 800160c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <MX_ADC1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_ADC1_Init+0x98>)
 8001618:	2201      	movs	r2, #1
 800161a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_ADC1_Init+0x98>)
 800161e:	f000 fec1 	bl	80023a4 <HAL_ADC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001628:	f000 fb61 	bl	8001cee <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	@ (8001654 <MX_ADC1_Init+0x98>)
 800163e:	f001 f841 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001648:	f000 fb51 	bl	8001cee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000020c 	.word	0x2000020c
 8001658:	40012000 	.word	0x40012000
 800165c:	0f000001 	.word	0x0f000001

08001660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <MX_I2C1_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <MX_I2C1_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_I2C1_Init+0x50>)
 800169e:	f001 fcc7 	bl	8003030 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 fb21 	bl	8001cee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000254 	.word	0x20000254
 80016b4:	40005400 	.word	0x40005400
 80016b8:	000186a0 	.word	0x000186a0

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <MX_USART1_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_USART1_UART_Init+0x4c>)
 80016f4:	f003 f878 	bl	80047e8 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 faf6 	bl	8001cee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002a8 	.word	0x200002a8
 800170c:	40011000 	.word	0x40011000

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f003 f84e 	bl	80047e8 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 facc 	bl	8001cee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002f0 	.word	0x200002f0
 8001760:	40004400 	.word	0x40004400

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <MX_GPIO_Init+0x140>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a48      	ldr	r2, [pc, #288]	@ (80018a4 <MX_GPIO_Init+0x140>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b46      	ldr	r3, [pc, #280]	@ (80018a4 <MX_GPIO_Init+0x140>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b42      	ldr	r3, [pc, #264]	@ (80018a4 <MX_GPIO_Init+0x140>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a41      	ldr	r2, [pc, #260]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a3a      	ldr	r2, [pc, #232]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a33      	ldr	r2, [pc, #204]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <MX_GPIO_Init+0x140>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2120      	movs	r1, #32
 80017ee:	482e      	ldr	r0, [pc, #184]	@ (80018a8 <MX_GPIO_Init+0x144>)
 80017f0:	f001 fbec 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4828      	ldr	r0, [pc, #160]	@ (80018ac <MX_GPIO_Init+0x148>)
 800180c:	f001 fa5a 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001810:	2320      	movs	r3, #32
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4820      	ldr	r0, [pc, #128]	@ (80018a8 <MX_GPIO_Init+0x144>)
 8001828:	f001 fa4c 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Amper_Button_Pin */
  GPIO_InitStruct.Pin = Amper_Button_Pin;
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001830:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Amper_Button_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	481a      	ldr	r0, [pc, #104]	@ (80018ac <MX_GPIO_Init+0x148>)
 8001842:	f001 fa3f 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Volt_Button_Pin */
  GPIO_InitStruct.Pin = Volt_Button_Pin;
 8001846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Volt_Button_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4812      	ldr	r0, [pc, #72]	@ (80018a8 <MX_GPIO_Init+0x144>)
 800185e:	f001 fa31 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ohm_Button_Pin */
  GPIO_InitStruct.Pin = Ohm_Button_Pin;
 8001862:	2340      	movs	r3, #64	@ 0x40
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001866:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ohm_Button_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	480e      	ldr	r0, [pc, #56]	@ (80018b0 <MX_GPIO_Init+0x14c>)
 8001878:	f001 fa24 	bl	8002cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2105      	movs	r1, #5
 8001880:	2017      	movs	r0, #23
 8001882:	f001 f9f5 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001886:	2017      	movs	r0, #23
 8001888:	f001 fa0e 	bl	8002ca8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2105      	movs	r1, #5
 8001890:	2028      	movs	r0, #40	@ 0x28
 8001892:	f001 f9ed 	bl	8002c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001896:	2028      	movs	r0, #40	@ 0x28
 8001898:	f001 fa06 	bl	8002ca8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	@ 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_EXTI_Callback+0x2e>
 80018c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ca:	dc28      	bgt.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d0:	d00f      	beq.n	80018f2 <HAL_GPIO_EXTI_Callback+0x3e>
 80018d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d6:	dc22      	bgt.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
 80018d8:	2b40      	cmp	r3, #64	@ 0x40
 80018da:	d019      	beq.n	8001910 <HAL_GPIO_EXTI_Callback+0x5c>
 80018dc:	2b80      	cmp	r3, #128	@ 0x80
 80018de:	d010      	beq.n	8001902 <HAL_GPIO_EXTI_Callback+0x4e>
		Button_Pressed = Ohm_Button_Pin;
		mod = modohm;
		break;
	}

}
 80018e0:	e01d      	b.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
		Button_Pressed = B1_Pin;
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_GPIO_EXTI_Callback+0x78>)
 80018e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018e8:	801a      	strh	r2, [r3, #0]
		mod = modprint;
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
		break;
 80018f0:	e015      	b.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
		Button_Pressed = Volt_Button_Pin;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_GPIO_EXTI_Callback+0x78>)
 80018f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018f8:	801a      	strh	r2, [r3, #0]
		mod = modvolt;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x7c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
		break;
 8001900:	e00d      	b.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
		Button_Pressed = Amper_Button_Pin;
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_GPIO_EXTI_Callback+0x78>)
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	801a      	strh	r2, [r3, #0]
		mod = modamper;
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x7c>)
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
		break;
 800190e:	e006      	b.n	800191e <HAL_GPIO_EXTI_Callback+0x6a>
		Button_Pressed = Ohm_Button_Pin;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_GPIO_EXTI_Callback+0x78>)
 8001912:	2240      	movs	r2, #64	@ 0x40
 8001914:	801a      	strh	r2, [r3, #0]
		mod = modohm;
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001918:	2203      	movs	r2, #3
 800191a:	701a      	strb	r2, [r3, #0]
		break;
 800191c:	bf00      	nop
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000039a 	.word	0x2000039a
 8001930:	20000398 	.word	0x20000398

08001934 <StartVoltMeter>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartVoltMeter */
void StartVoltMeter(void *argument)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af02      	add	r7, sp, #8
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osThreadSuspend(defaultPrintHandle);
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <StartVoltMeter+0xb8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fb35 	bl	8004fb0 <osThreadSuspend>
	osThreadSuspend(amperMeterHandle);
 8001946:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <StartVoltMeter+0xbc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 fb30 	bl	8004fb0 <osThreadSuspend>
	osThreadSuspend(ohmmeterHandle);
 8001950:	4b28      	ldr	r3, [pc, #160]	@ (80019f4 <StartVoltMeter+0xc0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fb2b 	bl	8004fb0 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {

	switch(mod){
 800195a:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <StartVoltMeter+0xc4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d8fb      	bhi.n	800195a <StartVoltMeter+0x26>
 8001962:	a201      	add	r2, pc, #4	@ (adr r2, 8001968 <StartVoltMeter+0x34>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001979 	.word	0x08001979
 800196c:	0800199d 	.word	0x0800199d
 8001970:	08001985 	.word	0x08001985
 8001974:	08001991 	.word	0x08001991
	case modprint:
		osThreadResume(defaultPrintHandle);
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <StartVoltMeter+0xb8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fb38 	bl	8004ff2 <osThreadResume>
		break;
 8001982:	e032      	b.n	80019ea <StartVoltMeter+0xb6>
	case modamper:
		osThreadResume(amperMeterHandle);
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <StartVoltMeter+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fb32 	bl	8004ff2 <osThreadResume>
		break;
 800198e:	e02c      	b.n	80019ea <StartVoltMeter+0xb6>
	case modohm:
		osThreadResume(ohmmeterHandle);
 8001990:	4b18      	ldr	r3, [pc, #96]	@ (80019f4 <StartVoltMeter+0xc0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fb2c 	bl	8004ff2 <osThreadResume>
		break;
 800199a:	e026      	b.n	80019ea <StartVoltMeter+0xb6>
	case modvolt:
	HD44780_Init(2);
 800199c:	2002      	movs	r0, #2
 800199e:	f7ff fb29 	bl	8000ff4 <HD44780_Init>
	HD44780_Clear();
 80019a2:	f7ff fbab 	bl	80010fc <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fbbd 	bl	8001128 <HD44780_SetCursor>
	HD44780_PrintStr("VOLTMETER");
 80019ae:	4813      	ldr	r0, [pc, #76]	@ (80019fc <StartVoltMeter+0xc8>)
 80019b0:	f7ff fc2b 	bl	800120a <HD44780_PrintStr>
    float voltage = 0;
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
    snprintf(voltageStr, sizeof(voltageStr), "%.2f V", voltage);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7fe fdcc 	bl	8000558 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9cd 2300 	strd	r2, r3, [sp]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <StartVoltMeter+0xcc>)
 80019ca:	2114      	movs	r1, #20
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <StartVoltMeter+0xd0>)
 80019ce:	f007 f919 	bl	8008c04 <sniprintf>
    HD44780_SetCursor(0,1);
 80019d2:	2101      	movs	r1, #1
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fba7 	bl	8001128 <HD44780_SetCursor>
    HD44780_PrintStr(voltageStr);
 80019da:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <StartVoltMeter+0xd0>)
 80019dc:	f7ff fc15 	bl	800120a <HD44780_PrintStr>
    osDelay(100);
 80019e0:	2064      	movs	r0, #100	@ 0x64
 80019e2:	f003 fb27 	bl	8005034 <osDelay>
    break;
 80019e6:	bf00      	nop
 80019e8:	e7b7      	b.n	800195a <StartVoltMeter+0x26>
	switch(mod){
 80019ea:	e7b6      	b.n	800195a <StartVoltMeter+0x26>
 80019ec:	20000344 	.word	0x20000344
 80019f0:	2000033c 	.word	0x2000033c
 80019f4:	20000340 	.word	0x20000340
 80019f8:	20000398 	.word	0x20000398
 80019fc:	0800c574 	.word	0x0800c574
 8001a00:	0800c580 	.word	0x0800c580
 8001a04:	2000035c 	.word	0x2000035c

08001a08 <StartAmperMeter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAmperMeter */
void StartAmperMeter(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAmperMeter */
	osThreadSuspend(defaultPrintHandle);
 8001a10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <StartAmperMeter+0xb8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 facb 	bl	8004fb0 <osThreadSuspend>
	osThreadSuspend(voltMeterHandle);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <StartAmperMeter+0xbc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fac6 	bl	8004fb0 <osThreadSuspend>
	osThreadSuspend(ohmmeterHandle);
 8001a24:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <StartAmperMeter+0xc0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fac1 	bl	8004fb0 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
	  switch(mod){
 8001a2e:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <StartAmperMeter+0xc4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d8fb      	bhi.n	8001a2e <StartAmperMeter+0x26>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <StartAmperMeter+0x34>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a59 	.word	0x08001a59
 8001a44:	08001a71 	.word	0x08001a71
 8001a48:	08001a65 	.word	0x08001a65
	case modprint:
		osThreadResume(defaultPrintHandle);
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <StartAmperMeter+0xb8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 face 	bl	8004ff2 <osThreadResume>
		break;
 8001a56:	e032      	b.n	8001abe <StartAmperMeter+0xb6>
	case modvolt:
		osThreadResume(voltMeterHandle);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <StartAmperMeter+0xbc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fac8 	bl	8004ff2 <osThreadResume>
		break;
 8001a62:	e02c      	b.n	8001abe <StartAmperMeter+0xb6>
	case modohm:
		osThreadResume(ohmmeterHandle);
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <StartAmperMeter+0xc0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fac2 	bl	8004ff2 <osThreadResume>
		break;
 8001a6e:	e026      	b.n	8001abe <StartAmperMeter+0xb6>
	case modamper:
	HD44780_Init(2);
 8001a70:	2002      	movs	r0, #2
 8001a72:	f7ff fabf 	bl	8000ff4 <HD44780_Init>
	HD44780_Clear();
 8001a76:	f7ff fb41 	bl	80010fc <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fb53 	bl	8001128 <HD44780_SetCursor>
	HD44780_PrintStr("AMPERMETER");
 8001a82:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <StartAmperMeter+0xc8>)
 8001a84:	f7ff fbc1 	bl	800120a <HD44780_PrintStr>

	float ampers = 0;
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
	snprintf(amperStr, sizeof(amperStr), "%.2f A", ampers);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7fe fd62 	bl	8000558 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9cd 2300 	strd	r2, r3, [sp]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <StartAmperMeter+0xcc>)
 8001a9e:	2114      	movs	r1, #20
 8001aa0:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <StartAmperMeter+0xd0>)
 8001aa2:	f007 f8af 	bl	8008c04 <sniprintf>
	HD44780_SetCursor(0,1);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fb3d 	bl	8001128 <HD44780_SetCursor>
	HD44780_PrintStr(amperStr);
 8001aae:	480a      	ldr	r0, [pc, #40]	@ (8001ad8 <StartAmperMeter+0xd0>)
 8001ab0:	f7ff fbab 	bl	800120a <HD44780_PrintStr>
    osDelay(100);
 8001ab4:	2064      	movs	r0, #100	@ 0x64
 8001ab6:	f003 fabd 	bl	8005034 <osDelay>
    break;
 8001aba:	bf00      	nop
 8001abc:	e7b7      	b.n	8001a2e <StartAmperMeter+0x26>
	  switch(mod){
 8001abe:	e7b6      	b.n	8001a2e <StartAmperMeter+0x26>
 8001ac0:	20000344 	.word	0x20000344
 8001ac4:	20000338 	.word	0x20000338
 8001ac8:	20000340 	.word	0x20000340
 8001acc:	20000398 	.word	0x20000398
 8001ad0:	0800c588 	.word	0x0800c588
 8001ad4:	0800c594 	.word	0x0800c594
 8001ad8:	20000370 	.word	0x20000370

08001adc <StartOhmMeter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOhmMeter */
void StartOhmMeter(void *argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOhmMeter */
osThreadSuspend(defaultPrintHandle);
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <StartOhmMeter+0xb8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fa61 	bl	8004fb0 <osThreadSuspend>
osThreadSuspend(voltMeterHandle);
 8001aee:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <StartOhmMeter+0xbc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fa5c 	bl	8004fb0 <osThreadSuspend>
osThreadSuspend(amperMeterHandle);
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <StartOhmMeter+0xc0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fa57 	bl	8004fb0 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {
	  switch(mod){
 8001b02:	4b27      	ldr	r3, [pc, #156]	@ (8001ba0 <StartOhmMeter+0xc4>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d8fb      	bhi.n	8001b02 <StartOhmMeter+0x26>
 8001b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b10 <StartOhmMeter+0x34>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b39 	.word	0x08001b39
 8001b1c:	08001b45 	.word	0x08001b45
	case modprint:
		osThreadResume(defaultPrintHandle);
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <StartOhmMeter+0xb8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fa64 	bl	8004ff2 <osThreadResume>
		break;
 8001b2a:	e032      	b.n	8001b92 <StartOhmMeter+0xb6>
	case modvolt:
		osThreadResume(voltMeterHandle);
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <StartOhmMeter+0xbc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fa5e 	bl	8004ff2 <osThreadResume>
		break;
 8001b36:	e02c      	b.n	8001b92 <StartOhmMeter+0xb6>
	case modamper:
		osThreadResume(amperMeterHandle);
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <StartOhmMeter+0xc0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fa58 	bl	8004ff2 <osThreadResume>
		break;
 8001b42:	e026      	b.n	8001b92 <StartOhmMeter+0xb6>
	case modohm:
	  	HD44780_Init(2);
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7ff fa55 	bl	8000ff4 <HD44780_Init>
	  	HD44780_Clear();
 8001b4a:	f7ff fad7 	bl	80010fc <HD44780_Clear>
	  	HD44780_SetCursor(0,0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fae9 	bl	8001128 <HD44780_SetCursor>
	  	HD44780_PrintStr("OHMMETER");
 8001b56:	4813      	ldr	r0, [pc, #76]	@ (8001ba4 <StartOhmMeter+0xc8>)
 8001b58:	f7ff fb57 	bl	800120a <HD44780_PrintStr>
	  	float ohms = 0;
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
	  	snprintf(ohmStr, sizeof(ohmStr), "%.2f ohm", ohms);
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7fe fcf8 	bl	8000558 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <StartOhmMeter+0xcc>)
 8001b72:	2114      	movs	r1, #20
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <StartOhmMeter+0xd0>)
 8001b76:	f007 f845 	bl	8008c04 <sniprintf>
	  	HD44780_SetCursor(0,1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fad3 	bl	8001128 <HD44780_SetCursor>
	  	HD44780_PrintStr(ohmStr);
 8001b82:	480a      	ldr	r0, [pc, #40]	@ (8001bac <StartOhmMeter+0xd0>)
 8001b84:	f7ff fb41 	bl	800120a <HD44780_PrintStr>
	    osDelay(100);
 8001b88:	2064      	movs	r0, #100	@ 0x64
 8001b8a:	f003 fa53 	bl	8005034 <osDelay>
	    break;
 8001b8e:	bf00      	nop
 8001b90:	e7b7      	b.n	8001b02 <StartOhmMeter+0x26>
	  switch(mod){
 8001b92:	e7b6      	b.n	8001b02 <StartOhmMeter+0x26>
 8001b94:	20000344 	.word	0x20000344
 8001b98:	20000338 	.word	0x20000338
 8001b9c:	2000033c 	.word	0x2000033c
 8001ba0:	20000398 	.word	0x20000398
 8001ba4:	0800c59c 	.word	0x0800c59c
 8001ba8:	0800c5a8 	.word	0x0800c5a8
 8001bac:	20000384 	.word	0x20000384

08001bb0 <StartPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrint */
void StartPrint(void *argument)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrint */
osThreadSuspend(voltMeterHandle);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <StartPrint+0x9c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f9f7 	bl	8004fb0 <osThreadSuspend>
osThreadSuspend(amperMeterHandle);
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <StartPrint+0xa0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 f9f2 	bl	8004fb0 <osThreadSuspend>
osThreadSuspend(ohmmeterHandle);
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <StartPrint+0xa4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 f9ed 	bl	8004fb0 <osThreadSuspend>
  /* Infinite loop */
  for(;;)
  {

	  switch(mod){
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <StartPrint+0xa8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d8fb      	bhi.n	8001bd6 <StartPrint+0x26>
 8001bde:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <StartPrint+0x34>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001c19 	.word	0x08001c19
 8001be8:	08001c01 	.word	0x08001c01
 8001bec:	08001c0d 	.word	0x08001c0d
 8001bf0:	08001bf5 	.word	0x08001bf5
	case modohm:
		osThreadResume(ohmmeterHandle);
 8001bf4:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <StartPrint+0xa4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 f9fa 	bl	8004ff2 <osThreadResume>
		break;
 8001bfe:	e023      	b.n	8001c48 <StartPrint+0x98>
	case modvolt:
		osThreadResume(voltMeterHandle);
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <StartPrint+0x9c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 f9f4 	bl	8004ff2 <osThreadResume>
		break;
 8001c0a:	e01d      	b.n	8001c48 <StartPrint+0x98>
	case modamper:
		osThreadResume(amperMeterHandle);
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <StartPrint+0xa0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 f9ee 	bl	8004ff2 <osThreadResume>
		break;
 8001c16:	e017      	b.n	8001c48 <StartPrint+0x98>
	case modprint:
	  HD44780_Init(2);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7ff f9eb 	bl	8000ff4 <HD44780_Init>
	  HD44780_Clear();
 8001c1e:	f7ff fa6d 	bl	80010fc <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8001c22:	2100      	movs	r1, #0
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fa7f 	bl	8001128 <HD44780_SetCursor>
	  HD44780_PrintStr("/////DIGITAL////");
 8001c2a:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <StartPrint+0xac>)
 8001c2c:	f7ff faed 	bl	800120a <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 8001c30:	2101      	movs	r1, #1
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fa78 	bl	8001128 <HD44780_SetCursor>
	  HD44780_PrintStr("///MULTIMETER///");
 8001c38:	4809      	ldr	r0, [pc, #36]	@ (8001c60 <StartPrint+0xb0>)
 8001c3a:	f7ff fae6 	bl	800120a <HD44780_PrintStr>
	  osDelay(100);
 8001c3e:	2064      	movs	r0, #100	@ 0x64
 8001c40:	f003 f9f8 	bl	8005034 <osDelay>
	  break;
 8001c44:	bf00      	nop
 8001c46:	e7c6      	b.n	8001bd6 <StartPrint+0x26>
	  switch(mod){
 8001c48:	e7c5      	b.n	8001bd6 <StartPrint+0x26>
 8001c4a:	bf00      	nop
 8001c4c:	20000338 	.word	0x20000338
 8001c50:	2000033c 	.word	0x2000033c
 8001c54:	20000340 	.word	0x20000340
 8001c58:	20000398 	.word	0x20000398
 8001c5c:	0800c5b4 	.word	0x0800c5b4
 8001c60:	0800c5c8 	.word	0x0800c5c8

08001c64 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8001c6c:	4813      	ldr	r0, [pc, #76]	@ (8001cbc <StartADC+0x58>)
 8001c6e:	f000 fbdd 	bl	800242c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,100);
 8001c72:	2164      	movs	r1, #100	@ 0x64
 8001c74:	4811      	ldr	r0, [pc, #68]	@ (8001cbc <StartADC+0x58>)
 8001c76:	f000 fc8d 	bl	8002594 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8001c7a:	4810      	ldr	r0, [pc, #64]	@ (8001cbc <StartADC+0x58>)
 8001c7c:	f000 fd15 	bl	80026aa <HAL_ADC_GetValue>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <StartADC+0x5c>)
 8001c86:	801a      	strh	r2, [r3, #0]
	osMessageQueuePut(voltQueueHandle, &raw, 1, 10);
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <StartADC+0x60>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	2201      	movs	r2, #1
 8001c90:	490b      	ldr	r1, [pc, #44]	@ (8001cc0 <StartADC+0x5c>)
 8001c92:	f003 fa5d 	bl	8005150 <osMessageQueuePut>
	osMessageQueuePut(queueAmperHandle, &raw, 1, 10);
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <StartADC+0x64>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <StartADC+0x5c>)
 8001ca0:	f003 fa56 	bl	8005150 <osMessageQueuePut>
	osMessageQueuePut(queueOhmHandle, &raw, 1, 10);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <StartADC+0x68>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	230a      	movs	r3, #10
 8001caa:	2201      	movs	r2, #1
 8001cac:	4904      	ldr	r1, [pc, #16]	@ (8001cc0 <StartADC+0x5c>)
 8001cae:	f003 fa4f 	bl	8005150 <osMessageQueuePut>
    osDelay(100);
 8001cb2:	2064      	movs	r0, #100	@ 0x64
 8001cb4:	f003 f9be 	bl	8005034 <osDelay>
	HAL_ADC_Start(&hadc1);
 8001cb8:	bf00      	nop
 8001cba:	e7d7      	b.n	8001c6c <StartADC+0x8>
 8001cbc:	2000020c 	.word	0x2000020c
 8001cc0:	20000358 	.word	0x20000358
 8001cc4:	2000034c 	.word	0x2000034c
 8001cc8:	20000350 	.word	0x20000350
 8001ccc:	20000354 	.word	0x20000354

08001cd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ce2:	f000 fb1b 	bl	800231c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf2:	b672      	cpsid	i
}
 8001cf4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf6:	bf00      	nop
 8001cf8:	e7fd      	b.n	8001cf6 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	4a11      	ldr	r2, [pc, #68]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	f06f 0001 	mvn.w	r0, #1
 8001d42:	f000 ff95 	bl	8002c70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a17      	ldr	r2, [pc, #92]	@ (8001dd0 <HAL_ADC_MspInit+0x7c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d127      	bne.n	8001dc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_ADC_MspInit+0x80>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db2:	2303      	movs	r3, #3
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <HAL_ADC_MspInit+0x84>)
 8001dc2:	f000 ff7f 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	@ 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	@ 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	@ (8001e60 <HAL_I2C_MspInit+0x84>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12c      	bne.n	8001e58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_I2C_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_I2C_MspInit+0x88>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_I2C_MspInit+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	2312      	movs	r3, #18
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <HAL_I2C_MspInit+0x8c>)
 8001e38:	f000 ff44 	bl	8002cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_I2C_MspInit+0x88>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_I2C_MspInit+0x88>)
 8001e46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_I2C_MspInit+0x88>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40005400 	.word	0x40005400
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020400 	.word	0x40020400

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a32      	ldr	r2, [pc, #200]	@ (8001f54 <HAL_UART_MspInit+0xe8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d12d      	bne.n	8001eea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a30      	ldr	r2, [pc, #192]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001e98:	f043 0310 	orr.w	r3, r3, #16
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ec6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ed8:	2307      	movs	r3, #7
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481e      	ldr	r0, [pc, #120]	@ (8001f5c <HAL_UART_MspInit+0xf0>)
 8001ee4:	f000 feee 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ee8:	e030      	b.n	8001f4c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	@ (8001f60 <HAL_UART_MspInit+0xf4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12b      	bne.n	8001f4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	4a16      	ldr	r2, [pc, #88]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_UART_MspInit+0xec>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <HAL_UART_MspInit+0xf0>)
 8001f48:	f000 febc 	bl	8002cc4 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40011000 	.word	0x40011000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40004400 	.word	0x40004400

08001f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08e      	sub	sp, #56	@ 0x38
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_InitTick+0xe8>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4a33      	ldr	r2, [pc, #204]	@ (800204c <HAL_InitTick+0xe8>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f84:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_InitTick+0xe8>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f90:	f107 0210 	add.w	r2, r7, #16
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 f97e 	bl	800429c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001faa:	f002 f94f 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8001fae:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fb0:	e004      	b.n	8001fbc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fb2:	f002 f94b 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fbe:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_InitTick+0xec>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001fca:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_InitTick+0xf0>)
 8001fcc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_InitTick+0xf0>)
 8001fd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fd8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001fda:	4a1e      	ldr	r2, [pc, #120]	@ (8002054 <HAL_InitTick+0xf0>)
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_InitTick+0xf0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_InitTick+0xf0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_InitTick+0xf0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001ff2:	4818      	ldr	r0, [pc, #96]	@ (8002054 <HAL_InitTick+0xf0>)
 8001ff4:	f002 f984 	bl	8004300 <HAL_TIM_Base_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11b      	bne.n	800203e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002006:	4813      	ldr	r0, [pc, #76]	@ (8002054 <HAL_InitTick+0xf0>)
 8002008:	f002 f9d4 	bl	80043b4 <HAL_TIM_Base_Start_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002012:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002016:	2b00      	cmp	r3, #0
 8002018:	d111      	bne.n	800203e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800201a:	201c      	movs	r0, #28
 800201c:	f000 fe44 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	d808      	bhi.n	8002038 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002026:	2200      	movs	r2, #0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	201c      	movs	r0, #28
 800202c:	f000 fe20 	bl	8002c70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002030:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_InitTick+0xf4>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e002      	b.n	800203e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800203e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002042:	4618      	mov	r0, r3
 8002044:	3738      	adds	r7, #56	@ 0x38
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	431bde83 	.word	0x431bde83
 8002054:	2000039c 	.word	0x2000039c
 8002058:	20000014 	.word	0x20000014

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <NMI_Handler+0x4>

08002064 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <MemManage_Handler+0x4>

08002074 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <BusFault_Handler+0x4>

0800207c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <UsageFault_Handler+0x4>

08002084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ohm_Button_Pin);
 8002096:	2040      	movs	r0, #64	@ 0x40
 8002098:	f000 ffb2 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Amper_Button_Pin);
 800209c:	2080      	movs	r0, #128	@ 0x80
 800209e:	f000 ffaf 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Volt_Button_Pin);
 80020a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020a6:	f000 ffab 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f002 f9df 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000039c 	.word	0x2000039c

080020c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020cc:	f000 ff98 	bl	8003000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_kill>:

int _kill(int pid, int sig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ee:	f006 fe73 	bl	8008dd8 <__errno>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2216      	movs	r2, #22
 80020f6:	601a      	str	r2, [r3, #0]
  return -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_exit>:

void _exit (int status)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ffe7 	bl	80020e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002116:	bf00      	nop
 8002118:	e7fd      	b.n	8002116 <_exit+0x12>

0800211a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e00a      	b.n	8002142 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800212c:	f3af 8000 	nop.w
 8002130:	4601      	mov	r1, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	b2ca      	uxtb	r2, r1
 800213a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	429a      	cmp	r2, r3
 8002148:	dbf0      	blt.n	800212c <_read+0x12>
  }

  return len;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e009      	b.n	800217a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	dbf1      	blt.n	8002166 <_write+0x12>
  }
  return len;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_close>:

int _close(int file)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b4:	605a      	str	r2, [r3, #4]
  return 0;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_isatty>:

int _isatty(int file)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021fc:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <_sbrk+0x5c>)
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <_sbrk+0x60>)
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <_sbrk+0x64>)
 8002212:	4a12      	ldr	r2, [pc, #72]	@ (800225c <_sbrk+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d207      	bcs.n	8002234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002224:	f006 fdd8 	bl	8008dd8 <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	220c      	movs	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e009      	b.n	8002248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <_sbrk+0x64>)
 8002244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20018000 	.word	0x20018000
 8002254:	00000400 	.word	0x00000400
 8002258:	200003e4 	.word	0x200003e4
 800225c:	20004e88 	.word	0x20004e88

08002260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <SystemInit+0x20>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <SystemInit+0x20>)
 800226c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002288:	f7ff ffea 	bl	8002260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800228e:	490d      	ldr	r1, [pc, #52]	@ (80022c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a4:	4c0a      	ldr	r4, [pc, #40]	@ (80022d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022b2:	f006 fd97 	bl	8008de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b6:	f7ff f897 	bl	80013e8 <main>
  bx  lr    
 80022ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80022c8:	0800cb48 	.word	0x0800cb48
  ldr r2, =_sbss
 80022cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80022d0:	20004e88 	.word	0x20004e88

080022d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d4:	e7fe      	b.n	80022d4 <ADC_IRQHandler>
	...

080022d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <HAL_Init+0x40>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_Init+0x40>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <HAL_Init+0x40>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
 8002302:	f000 fcaa 	bl	8002c5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002306:	200f      	movs	r0, #15
 8002308:	f7ff fe2c 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230c:	f7ff fcf6 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000018 	.word	0x20000018
 8002340:	200003e8 	.word	0x200003e8

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200003e8 	.word	0x200003e8

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000018 	.word	0x20000018

080023a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e033      	b.n	8002422 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fcc6 	bl	8001d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ea:	f023 0302 	bic.w	r3, r3, #2
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fa86 	bl	8002908 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40
 8002412:	e001      	b.n	8002418 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_ADC_Start+0x1a>
 8002442:	2302      	movs	r3, #2
 8002444:	e097      	b.n	8002576 <HAL_ADC_Start+0x14a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d018      	beq.n	800248e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800246c:	4b45      	ldr	r3, [pc, #276]	@ (8002584 <HAL_ADC_Start+0x158>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a45      	ldr	r2, [pc, #276]	@ (8002588 <HAL_ADC_Start+0x15c>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9a      	lsrs	r2, r3, #18
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002480:	e002      	b.n	8002488 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3b01      	subs	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f9      	bne.n	8002482 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d15f      	bne.n	800255c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024da:	d106      	bne.n	80024ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	f023 0206 	bic.w	r2, r3, #6
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f8:	4b24      	ldr	r3, [pc, #144]	@ (800258c <HAL_ADC_Start+0x160>)
 80024fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002504:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d129      	bne.n	8002574 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e020      	b.n	8002574 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a16      	ldr	r2, [pc, #88]	@ (8002590 <HAL_ADC_Start+0x164>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d11b      	bne.n	8002574 <HAL_ADC_Start+0x148>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d114      	bne.n	8002574 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	e00b      	b.n	8002574 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000010 	.word	0x20000010
 8002588:	431bde83 	.word	0x431bde83
 800258c:	40012300 	.word	0x40012300
 8002590:	40012000 	.word	0x40012000

08002594 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b0:	d113      	bne.n	80025da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c0:	d10b      	bne.n	80025da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e063      	b.n	80026a2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80025da:	f7ff feb3 	bl	8002344 <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025e0:	e021      	b.n	8002626 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d01d      	beq.n	8002626 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_ADC_PollForConversion+0x6c>
 80025f0:	f7ff fea8 	bl	8002344 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d212      	bcs.n	8002626 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d00b      	beq.n	8002626 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e03d      	b.n	80026a2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b02      	cmp	r3, #2
 8002632:	d1d6      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0212 	mvn.w	r2, #18
 800263c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d123      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d11f      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002678:	2b00      	cmp	r3, #0
 800267a:	d111      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d105      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f043 0201 	orr.w	r2, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e105      	b.n	80028ec <HAL_ADC_ConfigChannel+0x228>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b09      	cmp	r3, #9
 80026ee:	d925      	bls.n	800273c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68d9      	ldr	r1, [r3, #12]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	3b1e      	subs	r3, #30
 8002706:	2207      	movs	r2, #7
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43da      	mvns	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	400a      	ands	r2, r1
 8002714:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68d9      	ldr	r1, [r3, #12]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	4603      	mov	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4403      	add	r3, r0
 800272e:	3b1e      	subs	r3, #30
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	e022      	b.n	8002782 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	2207      	movs	r2, #7
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	4603      	mov	r3, r0
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4403      	add	r3, r0
 8002778:	409a      	lsls	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b06      	cmp	r3, #6
 8002788:	d824      	bhi.n	80027d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b05      	subs	r3, #5
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	3b05      	subs	r3, #5
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027d2:	e04c      	b.n	800286e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b0c      	cmp	r3, #12
 80027da:	d824      	bhi.n	8002826 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b23      	subs	r3, #35	@ 0x23
 80027ee:	221f      	movs	r2, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43da      	mvns	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	400a      	ands	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b23      	subs	r3, #35	@ 0x23
 8002818:	fa00 f203 	lsl.w	r2, r0, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
 8002824:	e023      	b.n	800286e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	3b41      	subs	r3, #65	@ 0x41
 8002838:	221f      	movs	r2, #31
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	400a      	ands	r2, r1
 8002846:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	3b41      	subs	r3, #65	@ 0x41
 8002862:	fa00 f203 	lsl.w	r2, r0, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286e:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <HAL_ADC_ConfigChannel+0x234>)
 8002870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a21      	ldr	r2, [pc, #132]	@ (80028fc <HAL_ADC_ConfigChannel+0x238>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d109      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1cc>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d105      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a19      	ldr	r2, [pc, #100]	@ (80028fc <HAL_ADC_ConfigChannel+0x238>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d123      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d003      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x1e6>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b11      	cmp	r3, #17
 80028a8:	d11b      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d111      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_ADC_ConfigChannel+0x23c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a10      	ldr	r2, [pc, #64]	@ (8002904 <HAL_ADC_ConfigChannel+0x240>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9a      	lsrs	r2, r3, #18
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40012300 	.word	0x40012300
 80028fc:	40012000 	.word	0x40012000
 8002900:	20000010 	.word	0x20000010
 8002904:	431bde83 	.word	0x431bde83

08002908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002910:	4b79      	ldr	r3, [pc, #484]	@ (8002af8 <ADC_Init+0x1f0>)
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	021a      	lsls	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	4a58      	ldr	r2, [pc, #352]	@ (8002afc <ADC_Init+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	e00f      	b.n	8002a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0202 	bic.w	r2, r2, #2
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
 8002a20:	005a      	lsls	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	035a      	lsls	r2, r3, #13
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	e007      	b.n	8002a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	051a      	lsls	r2, r3, #20
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002abe:	025a      	lsls	r2, r3, #9
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	029a      	lsls	r2, r3, #10
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	0f000001 	.word	0x0f000001

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	@ (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	@ (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	@ 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff4c 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c82:	f7ff ff61 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff ffb1 	bl	8002bf4 <NVIC_EncodePriority>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff80 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff54 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e159      	b.n	8002f94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	f040 8148 	bne.w	8002f8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d005      	beq.n	8002d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d130      	bne.n	8002d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 0201 	and.w	r2, r3, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d017      	beq.n	8002db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d123      	bne.n	8002e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a2 	beq.w	8002f8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4b57      	ldr	r3, [pc, #348]	@ (8002fac <HAL_GPIO_Init+0x2e8>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a56      	ldr	r2, [pc, #344]	@ (8002fac <HAL_GPIO_Init+0x2e8>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b54      	ldr	r3, [pc, #336]	@ (8002fac <HAL_GPIO_Init+0x2e8>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e66:	4a52      	ldr	r2, [pc, #328]	@ (8002fb0 <HAL_GPIO_Init+0x2ec>)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a49      	ldr	r2, [pc, #292]	@ (8002fb4 <HAL_GPIO_Init+0x2f0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <HAL_GPIO_Init+0x202>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a48      	ldr	r2, [pc, #288]	@ (8002fb8 <HAL_GPIO_Init+0x2f4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_GPIO_Init+0x1fe>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a47      	ldr	r2, [pc, #284]	@ (8002fbc <HAL_GPIO_Init+0x2f8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00d      	beq.n	8002ebe <HAL_GPIO_Init+0x1fa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a46      	ldr	r2, [pc, #280]	@ (8002fc0 <HAL_GPIO_Init+0x2fc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <HAL_GPIO_Init+0x1f6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <HAL_GPIO_Init+0x300>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_GPIO_Init+0x1f2>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e008      	b.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	e006      	b.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e004      	b.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_GPIO_Init+0x204>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f002 0203 	and.w	r2, r2, #3
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed8:	4935      	ldr	r1, [pc, #212]	@ (8002fb0 <HAL_GPIO_Init+0x2ec>)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee6:	4b38      	ldr	r3, [pc, #224]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f10:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f64:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f88:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	f67f aea2 	bls.w	8002ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3724      	adds	r7, #36	@ 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020c00 	.word	0x40020c00
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003016:	4a05      	ldr	r2, [pc, #20]	@ (800302c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fc48 	bl	80018b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40013c00 	.word	0x40013c00

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e12b      	b.n	800329a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe fec0 	bl	8001ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003094:	f001 f8da 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a81      	ldr	r2, [pc, #516]	@ (80032a4 <HAL_I2C_Init+0x274>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d807      	bhi.n	80030b4 <HAL_I2C_Init+0x84>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a80      	ldr	r2, [pc, #512]	@ (80032a8 <HAL_I2C_Init+0x278>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e006      	b.n	80030c2 <HAL_I2C_Init+0x92>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a7d      	ldr	r2, [pc, #500]	@ (80032ac <HAL_I2C_Init+0x27c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0e7      	b.n	800329a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a78      	ldr	r2, [pc, #480]	@ (80032b0 <HAL_I2C_Init+0x280>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a6a      	ldr	r2, [pc, #424]	@ (80032a4 <HAL_I2C_Init+0x274>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d802      	bhi.n	8003104 <HAL_I2C_Init+0xd4>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3301      	adds	r3, #1
 8003102:	e009      	b.n	8003118 <HAL_I2C_Init+0xe8>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <HAL_I2C_Init+0x284>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	3301      	adds	r3, #1
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800312a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	495c      	ldr	r1, [pc, #368]	@ (80032a4 <HAL_I2C_Init+0x274>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d819      	bhi.n	800316c <HAL_I2C_Init+0x13c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e59      	subs	r1, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fbb1 f3f3 	udiv	r3, r1, r3
 8003146:	1c59      	adds	r1, r3, #1
 8003148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800314c:	400b      	ands	r3, r1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_I2C_Init+0x138>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e59      	subs	r1, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	e051      	b.n	800320c <HAL_I2C_Init+0x1dc>
 8003168:	2304      	movs	r3, #4
 800316a:	e04f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d111      	bne.n	8003198 <HAL_I2C_Init+0x168>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e012      	b.n	80031be <HAL_I2C_Init+0x18e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x196>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <HAL_I2C_Init+0x1bc>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e58      	subs	r0, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ea:	e00f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6809      	ldr	r1, [r1, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800323a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6911      	ldr	r1, [r2, #16]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	430b      	orrs	r3, r1
 800324e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	000186a0 	.word	0x000186a0
 80032a8:	001e847f 	.word	0x001e847f
 80032ac:	003d08ff 	.word	0x003d08ff
 80032b0:	431bde83 	.word	0x431bde83
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	817b      	strh	r3, [r7, #10]
 80032c8:	4613      	mov	r3, r2
 80032ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff f83a 	bl	8002344 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f040 80e0 	bne.w	80034a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2319      	movs	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	4970      	ldr	r1, [pc, #448]	@ (80034ac <HAL_I2C_Master_Transmit+0x1f4>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f964 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e0d3      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_I2C_Master_Transmit+0x50>
 8003304:	2302      	movs	r3, #2
 8003306:	e0cc      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d007      	beq.n	800332e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2221      	movs	r2, #33	@ 0x21
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2210      	movs	r2, #16
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	893a      	ldrh	r2, [r7, #8]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a50      	ldr	r2, [pc, #320]	@ (80034b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800336e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f89c 	bl	80034b4 <I2C_MasterRequestWrite>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e08d      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800339c:	e066      	b.n	800346c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	6a39      	ldr	r1, [r7, #32]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fa22 	bl	80037ec <I2C_WaitOnTXEFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d107      	bne.n	80033c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11b      	bne.n	8003440 <HAL_I2C_Master_Transmit+0x188>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d017      	beq.n	8003440 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fa19 	bl	800387c <I2C_WaitOnBTFFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	2b04      	cmp	r3, #4
 8003456:	d107      	bne.n	8003468 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003466:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01a      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d194      	bne.n	800339e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	00100002 	.word	0x00100002
 80034b0:	ffff0000 	.word	0xffff0000

080034b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	460b      	mov	r3, r1
 80034c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d006      	beq.n	80034de <I2C_MasterRequestWrite+0x2a>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d003      	beq.n	80034de <I2C_MasterRequestWrite+0x2a>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034dc:	d108      	bne.n	80034f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e00b      	b.n	8003508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	2b12      	cmp	r3, #18
 80034f6:	d107      	bne.n	8003508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003506:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f84f 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352e:	d103      	bne.n	8003538 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e035      	b.n	80035a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003544:	d108      	bne.n	8003558 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003554:	611a      	str	r2, [r3, #16]
 8003556:	e01b      	b.n	8003590 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003558:	897b      	ldrh	r3, [r7, #10]
 800355a:	11db      	asrs	r3, r3, #7
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0306 	and.w	r3, r3, #6
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f063 030f 	orn	r3, r3, #15
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	490e      	ldr	r1, [pc, #56]	@ (80035b0 <I2C_MasterRequestWrite+0xfc>)
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f898 	bl	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e010      	b.n	80035a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4907      	ldr	r1, [pc, #28]	@ (80035b4 <I2C_MasterRequestWrite+0x100>)
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f888 	bl	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	00010008 	.word	0x00010008
 80035b4:	00010002 	.word	0x00010002

080035b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	e048      	b.n	800365c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d044      	beq.n	800365c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fe feb7 	bl	8002344 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d139      	bne.n	800365c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10d      	bne.n	800360e <I2C_WaitOnFlagUntilTimeout+0x56>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	e00c      	b.n	8003628 <I2C_WaitOnFlagUntilTimeout+0x70>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d116      	bne.n	800365c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e023      	b.n	80036a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10d      	bne.n	8003682 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	43da      	mvns	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	e00c      	b.n	800369c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	43da      	mvns	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4013      	ands	r3, r2
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d093      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ba:	e071      	b.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ca:	d123      	bne.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	f043 0204 	orr.w	r2, r3, #4
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e067      	b.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d041      	beq.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371c:	f7fe fe12 	bl	8002344 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d136      	bne.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10c      	bne.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e00b      	b.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	43da      	mvns	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e021      	b.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10c      	bne.n	80037c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	43da      	mvns	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e00b      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f47f af6d 	bne.w	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f8:	e034      	b.n	8003864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f886 	bl	800390c <I2C_IsAcknowledgeFailed>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e034      	b.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d028      	beq.n	8003864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fe fd97 	bl	8002344 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11d      	bne.n	8003864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003832:	2b80      	cmp	r3, #128	@ 0x80
 8003834:	d016      	beq.n	8003864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	f043 0220 	orr.w	r2, r3, #32
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e007      	b.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b80      	cmp	r3, #128	@ 0x80
 8003870:	d1c3      	bne.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003888:	e034      	b.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f83e 	bl	800390c <I2C_IsAcknowledgeFailed>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e034      	b.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d028      	beq.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe fd4f 	bl	8002344 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11d      	bne.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d016      	beq.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e007      	b.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d1c3      	bne.n	800388a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003922:	d11b      	bne.n	800395c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800392c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	f043 0204 	orr.w	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e267      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b82      	ldr	r3, [pc, #520]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b7e      	ldr	r3, [pc, #504]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d157      	bne.n	8003a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e242      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x74>
 80039d2:	4b76      	ldr	r3, [pc, #472]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a75      	ldr	r2, [pc, #468]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x98>
 80039ea:	4b70      	ldr	r3, [pc, #448]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6c      	ldr	r2, [pc, #432]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 8003a04:	4b69      	ldr	r3, [pc, #420]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b66      	ldr	r3, [pc, #408]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe fc8e 	bl	8002344 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fc8a 	bl	8002344 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e207      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xc0>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fc7a 	bl	8002344 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe fc76 	bl	8002344 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1f3      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	4b51      	ldr	r3, [pc, #324]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0xe8>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a82:	4b4a      	ldr	r3, [pc, #296]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b44      	ldr	r3, [pc, #272]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	4b41      	ldr	r3, [pc, #260]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1c7      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4937      	ldr	r1, [pc, #220]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	e03a      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fe fc2f 	bl	8002344 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fe fc2b 	bl	8002344 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e1a8      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b28      	ldr	r3, [pc, #160]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4925      	ldr	r1, [pc, #148]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fc0e 	bl	8002344 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fc0a 	bl	8002344 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e187      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d036      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe fbee 	bl	8002344 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fe fbea 	bl	8002344 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e167      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x200>
 8003b8a:	e01b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fe fbd7 	bl	8002344 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9a:	f7fe fbd3 	bl	8002344 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d907      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e150      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b88      	ldr	r3, [pc, #544]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ea      	bne.n	8003b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b81      	ldr	r3, [pc, #516]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	4a7c      	ldr	r2, [pc, #496]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b77      	ldr	r3, [pc, #476]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b74      	ldr	r3, [pc, #464]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fb93 	bl	8002344 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fe fb8f 	bl	8002344 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e10c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b6a      	ldr	r3, [pc, #424]	@ (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2ea>
 8003c48:	4b64      	ldr	r3, [pc, #400]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4c:	4a63      	ldr	r2, [pc, #396]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x30c>
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5e      	ldr	r2, [pc, #376]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c78:	4b58      	ldr	r3, [pc, #352]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a57      	ldr	r2, [pc, #348]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c84:	4b55      	ldr	r3, [pc, #340]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c88:	4a54      	ldr	r2, [pc, #336]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fe fb54 	bl	8002344 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fe fb50 	bl	8002344 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0cb      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ee      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x334>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fe fb3e 	bl	8002344 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fe fb3a 	bl	8002344 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0b5      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	4a38      	ldr	r2, [pc, #224]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a1 	beq.w	8003e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0a:	4b34      	ldr	r3, [pc, #208]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d05c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d141      	bne.n	8003da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b31      	ldr	r3, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fb0e 	bl	8002344 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fb0a 	bl	8002344 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e087      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	491b      	ldr	r1, [pc, #108]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe fae3 	bl	8002344 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fe fadf 	bl	8002344 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e05c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x416>
 8003da0:	e054      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b10      	ldr	r3, [pc, #64]	@ (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe facc 	bl	8002344 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fe fac8 	bl	8002344 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e045      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x444>
 8003dce:	e03d      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e038      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x4ec>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d028      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d121      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0cc      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e70:	4b68      	ldr	r3, [pc, #416]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90c      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b63      	ldr	r3, [pc, #396]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b8      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb0:	4b59      	ldr	r3, [pc, #356]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec8:	4b53      	ldr	r3, [pc, #332]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b50      	ldr	r3, [pc, #320]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	494d      	ldr	r1, [pc, #308]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d119      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e067      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b37      	ldr	r3, [pc, #220]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4934      	ldr	r1, [pc, #208]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fe f9fa 	bl	8002344 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fe f9f6 	bl	8002344 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e04f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d20c      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e032      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4916      	ldr	r1, [pc, #88]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fce:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490e      	ldr	r1, [pc, #56]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fe2:	f000 f821 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490a      	ldr	r1, [pc, #40]	@ (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a09      	ldr	r2, [pc, #36]	@ (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd ffae 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00
 8004018:	40023800 	.word	0x40023800
 800401c:	0800c6f0 	.word	0x0800c6f0
 8004020:	20000010 	.word	0x20000010
 8004024:	20000014 	.word	0x20000014

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b094      	sub	sp, #80	@ 0x50
 800402e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	647b      	str	r3, [r7, #68]	@ 0x44
 8004034:	2300      	movs	r3, #0
 8004036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004038:	2300      	movs	r3, #0
 800403a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004040:	4b79      	ldr	r3, [pc, #484]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d00d      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x40>
 800404c:	2b08      	cmp	r3, #8
 800404e:	f200 80e1 	bhi.w	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004056:	2b04      	cmp	r3, #4
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x3a>
 800405a:	e0db      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b73      	ldr	r3, [pc, #460]	@ (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 800405e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004060:	e0db      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004062:	4b73      	ldr	r3, [pc, #460]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x208>)
 8004064:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004066:	e0d8      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b6f      	ldr	r3, [pc, #444]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004070:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b6d      	ldr	r3, [pc, #436]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004088:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	633b      	str	r3, [r7, #48]	@ 0x30
 8004092:	2300      	movs	r3, #0
 8004094:	637b      	str	r3, [r7, #52]	@ 0x34
 8004096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	6139      	str	r1, [r7, #16]
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040cc:	4659      	mov	r1, fp
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4651      	mov	r1, sl
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	4651      	mov	r1, sl
 80040dc:	ebb2 0801 	subs.w	r8, r2, r1
 80040e0:	4659      	mov	r1, fp
 80040e2:	eb63 0901 	sbc.w	r9, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb18 0303 	adds.w	r3, r8, r3
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	462b      	mov	r3, r5
 8004108:	eb49 0303 	adc.w	r3, r9, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800411a:	4629      	mov	r1, r5
 800411c:	024b      	lsls	r3, r1, #9
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004124:	4621      	mov	r1, r4
 8004126:	024a      	lsls	r2, r1, #9
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004138:	f7fc fdae 	bl	8000c98 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004144:	e058      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	4618      	mov	r0, r3
 8004150:	4611      	mov	r1, r2
 8004152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	@ 0x24
 800415c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004172:	0150      	lsls	r0, r2, #5
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4641      	mov	r1, r8
 800417a:	ebb2 0a01 	subs.w	sl, r2, r1
 800417e:	4649      	mov	r1, r9
 8004180:	eb63 0b01 	sbc.w	fp, r3, r1
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004198:	ebb2 040a 	subs.w	r4, r2, sl
 800419c:	eb63 050b 	sbc.w	r5, r3, fp
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb45 0303 	adc.w	r3, r5, r3
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ce:	4629      	mov	r1, r5
 80041d0:	028b      	lsls	r3, r1, #10
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d8:	4621      	mov	r1, r4
 80041da:	028a      	lsls	r2, r1, #10
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e2:	2200      	movs	r2, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	61fa      	str	r2, [r7, #28]
 80041e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ec:	f7fc fd54 	bl	8000c98 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	3301      	adds	r3, #1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800420a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800421c:	4618      	mov	r0, r3
 800421e:	3750      	adds	r7, #80	@ 0x50
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b03      	ldr	r3, [pc, #12]	@ (8004248 <HAL_RCC_GetHCLKFreq+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	20000010 	.word	0x20000010

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff0 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	0800c700 	.word	0x0800c700

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffdc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0b5b      	lsrs	r3, r3, #13
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	@ (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	0800c700 	.word	0x0800c700

0800429c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	220f      	movs	r2, #15
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042ac:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <HAL_RCC_GetClockConfig+0x5c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0203 	and.w	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042b8:	4b0f      	ldr	r3, [pc, #60]	@ (80042f8 <HAL_RCC_GetClockConfig+0x5c>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <HAL_RCC_GetClockConfig+0x5c>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042d0:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_GetClockConfig+0x5c>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	08db      	lsrs	r3, r3, #3
 80042d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042de:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <HAL_RCC_GetClockConfig+0x60>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0207 	and.w	r2, r3, #7
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40023c00 	.word	0x40023c00

08004300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e041      	b.n	8004396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f839 	bl	800439e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f000 f9b2 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e044      	b.n	8004456 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x6c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f6:	d013      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x6c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004468 <HAL_TIM_Base_Start_IT+0xb4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x6c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a19      	ldr	r2, [pc, #100]	@ (800446c <HAL_TIM_Base_Start_IT+0xb8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x6c>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <HAL_TIM_Base_Start_IT+0xbc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x6c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a16      	ldr	r2, [pc, #88]	@ (8004474 <HAL_TIM_Base_Start_IT+0xc0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d111      	bne.n	8004444 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b06      	cmp	r3, #6
 8004430:	d010      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004442:	e007      	b.n	8004454 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000

08004478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0202 	mvn.w	r2, #2
 80044ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8d2 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8c4 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8d5 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0204 	mvn.w	r2, #4
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8ac 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f89e 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8af 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0208 	mvn.w	r2, #8
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f886 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f878 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f889 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0210 	mvn.w	r2, #16
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2208      	movs	r2, #8
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f860 	bl	800466c <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f852 	bl	8004658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f863 	bl	8004680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00c      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0201 	mvn.w	r2, #1
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd fb76 	bl	8001cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8e6 	bl	80047d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f834 	bl	8004694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0220 	mvn.w	r2, #32
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8b8 	bl	80047c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	@ (80047a4 <TIM_Base_SetConfig+0xfc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a37      	ldr	r2, [pc, #220]	@ (80047a8 <TIM_Base_SetConfig+0x100>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a36      	ldr	r2, [pc, #216]	@ (80047ac <TIM_Base_SetConfig+0x104>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <TIM_Base_SetConfig+0x108>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <TIM_Base_SetConfig+0xfc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01b      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004700:	d017      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a28      	ldr	r2, [pc, #160]	@ (80047a8 <TIM_Base_SetConfig+0x100>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <TIM_Base_SetConfig+0x104>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <TIM_Base_SetConfig+0x108>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <TIM_Base_SetConfig+0x10c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <TIM_Base_SetConfig+0x110>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <TIM_Base_SetConfig+0x114>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0e      	ldr	r2, [pc, #56]	@ (80047a4 <TIM_Base_SetConfig+0xfc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  }
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800

080047c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e042      	b.n	8004880 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd fb2c 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2224      	movs	r2, #36	@ 0x24
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800482a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f82b 	bl	8004888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b0c0      	sub	sp, #256	@ 0x100
 800488e:	af00      	add	r7, sp, #0
 8004890:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	ea40 0301 	orr.w	r3, r0, r1
 80048b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	431a      	orrs	r2, r3
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048e0:	f021 010c 	bic.w	r1, r1, #12
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048ee:	430b      	orrs	r3, r1
 80048f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004902:	6999      	ldr	r1, [r3, #24]
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	ea40 0301 	orr.w	r3, r0, r1
 800490e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b8f      	ldr	r3, [pc, #572]	@ (8004b54 <UART_SetConfig+0x2cc>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d005      	beq.n	8004928 <UART_SetConfig+0xa0>
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8d      	ldr	r3, [pc, #564]	@ (8004b58 <UART_SetConfig+0x2d0>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d104      	bne.n	8004932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004928:	f7ff fca4 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 800492c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004930:	e003      	b.n	800493a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004932:	f7ff fc8b 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004936:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004944:	f040 810c 	bne.w	8004b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800494c:	2200      	movs	r2, #0
 800494e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004952:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800495a:	4622      	mov	r2, r4
 800495c:	462b      	mov	r3, r5
 800495e:	1891      	adds	r1, r2, r2
 8004960:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004962:	415b      	adcs	r3, r3
 8004964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800496a:	4621      	mov	r1, r4
 800496c:	eb12 0801 	adds.w	r8, r2, r1
 8004970:	4629      	mov	r1, r5
 8004972:	eb43 0901 	adc.w	r9, r3, r1
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498a:	4690      	mov	r8, r2
 800498c:	4699      	mov	r9, r3
 800498e:	4623      	mov	r3, r4
 8004990:	eb18 0303 	adds.w	r3, r8, r3
 8004994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004998:	462b      	mov	r3, r5
 800499a:	eb49 0303 	adc.w	r3, r9, r3
 800499e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049b6:	460b      	mov	r3, r1
 80049b8:	18db      	adds	r3, r3, r3
 80049ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80049bc:	4613      	mov	r3, r2
 80049be:	eb42 0303 	adc.w	r3, r2, r3
 80049c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049cc:	f7fc f964 	bl	8000c98 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b61      	ldr	r3, [pc, #388]	@ (8004b5c <UART_SetConfig+0x2d4>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049f8:	415b      	adcs	r3, r3
 80049fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a00:	4641      	mov	r1, r8
 8004a02:	eb12 0a01 	adds.w	sl, r2, r1
 8004a06:	4649      	mov	r1, r9
 8004a08:	eb43 0b01 	adc.w	fp, r3, r1
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a20:	4692      	mov	sl, r2
 8004a22:	469b      	mov	fp, r3
 8004a24:	4643      	mov	r3, r8
 8004a26:	eb1a 0303 	adds.w	r3, sl, r3
 8004a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	eb4b 0303 	adc.w	r3, fp, r3
 8004a34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	18db      	adds	r3, r3, r3
 8004a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a52:	4613      	mov	r3, r2
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a62:	f7fc f919 	bl	8000c98 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2264      	movs	r2, #100	@ 0x64
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	1acb      	subs	r3, r1, r3
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a82:	4b36      	ldr	r3, [pc, #216]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004a84:	fba3 2302 	umull	r2, r3, r3, r2
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a90:	441c      	add	r4, r3
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004aac:	415b      	adcs	r3, r3
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	1851      	adds	r1, r2, r1
 8004ab8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004aba:	4649      	mov	r1, r9
 8004abc:	414b      	adcs	r3, r1
 8004abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004acc:	4659      	mov	r1, fp
 8004ace:	00cb      	lsls	r3, r1, #3
 8004ad0:	4651      	mov	r1, sl
 8004ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	00ca      	lsls	r2, r1, #3
 8004ada:	4610      	mov	r0, r2
 8004adc:	4619      	mov	r1, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	189b      	adds	r3, r3, r2
 8004ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ae8:	464b      	mov	r3, r9
 8004aea:	460a      	mov	r2, r1
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b08:	460b      	mov	r3, r1
 8004b0a:	18db      	adds	r3, r3, r3
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b0e:	4613      	mov	r3, r2
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b1e:	f7fc f8bb 	bl	8000c98 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4b0d      	ldr	r3, [pc, #52]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2164      	movs	r1, #100	@ 0x64
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	3332      	adds	r3, #50	@ 0x32
 8004b3a:	4a08      	ldr	r2, [pc, #32]	@ (8004b5c <UART_SetConfig+0x2d4>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 0207 	and.w	r2, r3, #7
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4422      	add	r2, r4
 8004b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b50:	e106      	b.n	8004d60 <UART_SetConfig+0x4d8>
 8004b52:	bf00      	nop
 8004b54:	40011000 	.word	0x40011000
 8004b58:	40011400 	.word	0x40011400
 8004b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	6239      	str	r1, [r7, #32]
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b82:	4641      	mov	r1, r8
 8004b84:	1854      	adds	r4, r2, r1
 8004b86:	4649      	mov	r1, r9
 8004b88:	eb43 0501 	adc.w	r5, r3, r1
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ba8:	464b      	mov	r3, r9
 8004baa:	eb45 0303 	adc.w	r3, r5, r3
 8004bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bce:	4629      	mov	r1, r5
 8004bd0:	008b      	lsls	r3, r1, #2
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd8:	4621      	mov	r1, r4
 8004bda:	008a      	lsls	r2, r1, #2
 8004bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004be0:	f7fc f85a 	bl	8000c98 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b60      	ldr	r3, [pc, #384]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004bea:	fba3 2302 	umull	r2, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	011c      	lsls	r4, r3, #4
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	61b9      	str	r1, [r7, #24]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6139      	str	r1, [r7, #16]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c48:	464b      	mov	r3, r9
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	008b      	lsls	r3, r1, #2
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c76:	4641      	mov	r1, r8
 8004c78:	008a      	lsls	r2, r1, #2
 8004c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c7e:	f7fc f80b 	bl	8000c98 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	4b38      	ldr	r3, [pc, #224]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2264      	movs	r2, #100	@ 0x64
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	1acb      	subs	r3, r1, r3
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	3332      	adds	r3, #50	@ 0x32
 8004c9c:	4a33      	ldr	r2, [pc, #204]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca8:	441c      	add	r4, r3
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	2200      	movs	r2, #0
 8004cb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6039      	str	r1, [r7, #0]
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	460a      	mov	r2, r1
 8004cfe:	eb42 0303 	adc.w	r3, r2, r3
 8004d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	008b      	lsls	r3, r1, #2
 8004d20:	4641      	mov	r1, r8
 8004d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d26:	4641      	mov	r1, r8
 8004d28:	008a      	lsls	r2, r1, #2
 8004d2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d2e:	f7fb ffb3 	bl	8000c98 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004d38:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	2164      	movs	r1, #100	@ 0x64
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	3332      	adds	r3, #50	@ 0x32
 8004d4a:	4a08      	ldr	r2, [pc, #32]	@ (8004d6c <UART_SetConfig+0x4e4>)
 8004d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	f003 020f 	and.w	r2, r3, #15
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4422      	add	r2, r4
 8004d5e:	609a      	str	r2, [r3, #8]
}
 8004d60:	bf00      	nop
 8004d62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d66:	46bd      	mov	sp, r7
 8004d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6c:	51eb851f 	.word	0x51eb851f

08004d70 <__NVIC_SetPriority>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	6039      	str	r1, [r7, #0]
 8004d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	db0a      	blt.n	8004d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	490c      	ldr	r1, [pc, #48]	@ (8004dbc <__NVIC_SetPriority+0x4c>)
 8004d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8e:	0112      	lsls	r2, r2, #4
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	440b      	add	r3, r1
 8004d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d98:	e00a      	b.n	8004db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	4908      	ldr	r1, [pc, #32]	@ (8004dc0 <__NVIC_SetPriority+0x50>)
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	3b04      	subs	r3, #4
 8004da8:	0112      	lsls	r2, r2, #4
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	440b      	add	r3, r1
 8004dae:	761a      	strb	r2, [r3, #24]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	e000e100 	.word	0xe000e100
 8004dc0:	e000ed00 	.word	0xe000ed00

08004dc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <SysTick_Handler+0x1c>)
 8004dca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004dcc:	f001 ff70 	bl	8006cb0 <xTaskGetSchedulerState>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004dd6:	f002 fd67 	bl	80078a8 <xPortSysTickHandler>
  }
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	e000e010 	.word	0xe000e010

08004de4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004de8:	2100      	movs	r1, #0
 8004dea:	f06f 0004 	mvn.w	r0, #4
 8004dee:	f7ff ffbf 	bl	8004d70 <__NVIC_SetPriority>
#endif
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dfe:	f3ef 8305 	mrs	r3, IPSR
 8004e02:	603b      	str	r3, [r7, #0]
  return(result);
 8004e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e0a:	f06f 0305 	mvn.w	r3, #5
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	e00c      	b.n	8004e2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e12:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <osKernelInitialize+0x44>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e1a:	4b08      	ldr	r3, [pc, #32]	@ (8004e3c <osKernelInitialize+0x44>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	607b      	str	r3, [r7, #4]
 8004e24:	e002      	b.n	8004e2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e2c:	687b      	ldr	r3, [r7, #4]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	200003ec 	.word	0x200003ec

08004e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e46:	f3ef 8305 	mrs	r3, IPSR
 8004e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e52:	f06f 0305 	mvn.w	r3, #5
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	e010      	b.n	8004e7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <osKernelStart+0x48>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d109      	bne.n	8004e76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e62:	f7ff ffbf 	bl	8004de4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e66:	4b08      	ldr	r3, [pc, #32]	@ (8004e88 <osKernelStart+0x48>)
 8004e68:	2202      	movs	r2, #2
 8004e6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e6c:	f001 fad2 	bl	8006414 <vTaskStartScheduler>
      stat = osOK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	e002      	b.n	8004e7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e7c:	687b      	ldr	r3, [r7, #4]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200003ec 	.word	0x200003ec

08004e8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	@ 0x38
 8004e90:	af04      	add	r7, sp, #16
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e9c:	f3ef 8305 	mrs	r3, IPSR
 8004ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ea2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d17e      	bne.n	8004fa6 <osThreadNew+0x11a>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d07b      	beq.n	8004fa6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004eae:	2380      	movs	r3, #128	@ 0x80
 8004eb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004eb2:	2318      	movs	r3, #24
 8004eb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d045      	beq.n	8004f52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <osThreadNew+0x48>
        name = attr->name;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <osThreadNew+0x6e>
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b38      	cmp	r3, #56	@ 0x38
 8004eec:	d805      	bhi.n	8004efa <osThreadNew+0x6e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <osThreadNew+0x72>
        return (NULL);
 8004efa:	2300      	movs	r3, #0
 8004efc:	e054      	b.n	8004fa8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00e      	beq.n	8004f34 <osThreadNew+0xa8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b5b      	cmp	r3, #91	@ 0x5b
 8004f1c:	d90a      	bls.n	8004f34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d006      	beq.n	8004f34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <osThreadNew+0xa8>
        mem = 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e010      	b.n	8004f56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10c      	bne.n	8004f56 <osThreadNew+0xca>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d108      	bne.n	8004f56 <osThreadNew+0xca>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <osThreadNew+0xca>
          mem = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e001      	b.n	8004f56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d110      	bne.n	8004f7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f64:	9202      	str	r2, [sp, #8]
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 ff6a 	bl	8005e4c <xTaskCreateStatic>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e013      	b.n	8004fa6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d110      	bne.n	8004fa6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	f107 0310 	add.w	r3, r7, #16
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 ffb8 	bl	8005f0c <xTaskCreate>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d001      	beq.n	8004fa6 <osThreadNew+0x11a>
            hTask = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fa6:	693b      	ldr	r3, [r7, #16]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3728      	adds	r7, #40	@ 0x28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fbc:	f3ef 8305 	mrs	r3, IPSR
 8004fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004fc8:	f06f 0305 	mvn.w	r3, #5
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e00b      	b.n	8004fe8 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004fd6:	f06f 0303 	mvn.w	r3, #3
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e004      	b.n	8004fe8 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004fe2:	6938      	ldr	r0, [r7, #16]
 8004fe4:	f001 f90e 	bl	8006204 <vTaskSuspend>
  }

  return (stat);
 8004fe8:	697b      	ldr	r3, [r7, #20]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffe:	f3ef 8305 	mrs	r3, IPSR
 8005002:	60fb      	str	r3, [r7, #12]
  return(result);
 8005004:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <osThreadResume+0x20>
    stat = osErrorISR;
 800500a:	f06f 0305 	mvn.w	r3, #5
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e00b      	b.n	800502a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8005018:	f06f 0303 	mvn.w	r3, #3
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e004      	b.n	800502a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8005024:	6938      	ldr	r0, [r7, #16]
 8005026:	f001 f995 	bl	8006354 <vTaskResume>
  }

  return (stat);
 800502a:	697b      	ldr	r3, [r7, #20]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800503c:	f3ef 8305 	mrs	r3, IPSR
 8005040:	60bb      	str	r3, [r7, #8]
  return(result);
 8005042:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <osDelay+0x1c>
    stat = osErrorISR;
 8005048:	f06f 0305 	mvn.w	r3, #5
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e007      	b.n	8005060 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <osDelay+0x2c>
      vTaskDelay(ticks);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 f89c 	bl	8006198 <vTaskDelay>
    }
  }

  return (stat);
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800506a:	b580      	push	{r7, lr}
 800506c:	b08a      	sub	sp, #40	@ 0x28
 800506e:	af02      	add	r7, sp, #8
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800507a:	f3ef 8305 	mrs	r3, IPSR
 800507e:	613b      	str	r3, [r7, #16]
  return(result);
 8005080:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005082:	2b00      	cmp	r3, #0
 8005084:	d15f      	bne.n	8005146 <osMessageQueueNew+0xdc>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05c      	beq.n	8005146 <osMessageQueueNew+0xdc>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d059      	beq.n	8005146 <osMessageQueueNew+0xdc>
    mem = -1;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d029      	beq.n	80050f2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <osMessageQueueNew+0x62>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b4f      	cmp	r3, #79	@ 0x4f
 80050ac:	d90e      	bls.n	80050cc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <osMessageQueueNew+0x62>
        mem = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	e014      	b.n	80050f6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d110      	bne.n	80050f6 <osMessageQueueNew+0x8c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10c      	bne.n	80050f6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <osMessageQueueNew+0x8c>
          mem = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e001      	b.n	80050f6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d10b      	bne.n	8005114 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2100      	movs	r1, #0
 8005106:	9100      	str	r1, [sp, #0]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f9d2 	bl	80054b4 <xQueueGenericCreateStatic>
 8005110:	61f8      	str	r0, [r7, #28]
 8005112:	e008      	b.n	8005126 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800511a:	2200      	movs	r2, #0
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fa45 	bl	80055ae <xQueueGenericCreate>
 8005124:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00c      	beq.n	8005146 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e001      	b.n	800513e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800513e:	6979      	ldr	r1, [r7, #20]
 8005140:	69f8      	ldr	r0, [r7, #28]
 8005142:	f000 fe25 	bl	8005d90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005146:	69fb      	ldr	r3, [r7, #28]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005168:	f3ef 8305 	mrs	r3, IPSR
 800516c:	617b      	str	r3, [r7, #20]
  return(result);
 800516e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005170:	2b00      	cmp	r3, #0
 8005172:	d028      	beq.n	80051c6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <osMessageQueuePut+0x36>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <osMessageQueuePut+0x36>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005186:	f06f 0303 	mvn.w	r3, #3
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	e038      	b.n	8005200 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005192:	f107 0210 	add.w	r2, r7, #16
 8005196:	2300      	movs	r3, #0
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	69b8      	ldr	r0, [r7, #24]
 800519c:	f000 fb68 	bl	8005870 <xQueueGenericSendFromISR>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d003      	beq.n	80051ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80051a6:	f06f 0302 	mvn.w	r3, #2
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	e028      	b.n	8005200 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d025      	beq.n	8005200 <osMessageQueuePut+0xb0>
 80051b4:	4b15      	ldr	r3, [pc, #84]	@ (800520c <osMessageQueuePut+0xbc>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	e01c      	b.n	8005200 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <osMessageQueuePut+0x82>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80051d2:	f06f 0303 	mvn.w	r3, #3
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	e012      	b.n	8005200 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051da:	2300      	movs	r3, #0
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	69b8      	ldr	r0, [r7, #24]
 80051e2:	f000 fa43 	bl	800566c <xQueueGenericSend>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d009      	beq.n	8005200 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80051f2:	f06f 0301 	mvn.w	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	e002      	b.n	8005200 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80051fa:	f06f 0302 	mvn.w	r3, #2
 80051fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005200:	69fb      	ldr	r3, [r7, #28]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a07      	ldr	r2, [pc, #28]	@ (800523c <vApplicationGetIdleTaskMemory+0x2c>)
 8005220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a06      	ldr	r2, [pc, #24]	@ (8005240 <vApplicationGetIdleTaskMemory+0x30>)
 8005226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2280      	movs	r2, #128	@ 0x80
 800522c:	601a      	str	r2, [r3, #0]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	200003f0 	.word	0x200003f0
 8005240:	2000044c 	.word	0x2000044c

08005244 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a07      	ldr	r2, [pc, #28]	@ (8005270 <vApplicationGetTimerTaskMemory+0x2c>)
 8005254:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a06      	ldr	r2, [pc, #24]	@ (8005274 <vApplicationGetTimerTaskMemory+0x30>)
 800525a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005262:	601a      	str	r2, [r3, #0]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	2000064c 	.word	0x2000064c
 8005274:	200006a8 	.word	0x200006a8

08005278 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f103 0208 	add.w	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f04f 32ff 	mov.w	r2, #4294967295
 8005290:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f103 0208 	add.w	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0208 	add.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d103      	bne.n	800533a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e00c      	b.n	8005354 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3308      	adds	r3, #8
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	e002      	b.n	8005348 <vListInsert+0x2e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	d2f6      	bcs.n	8005342 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6892      	ldr	r2, [r2, #8]
 80053a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6852      	ldr	r2, [r2, #4]
 80053ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d103      	bne.n	80053c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800540c:	f002 f9bc 	bl	8007788 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543c:	3b01      	subs	r3, #1
 800543e:	68f9      	ldr	r1, [r7, #12]
 8005440:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	22ff      	movs	r2, #255	@ 0xff
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	22ff      	movs	r2, #255	@ 0xff
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d114      	bne.n	800548c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01a      	beq.n	80054a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3310      	adds	r3, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f001 fa5e 	bl	8006930 <xTaskRemoveFromEventList>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d012      	beq.n	80054a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800547a:	4b0d      	ldr	r3, [pc, #52]	@ (80054b0 <xQueueGenericReset+0xd0>)
 800547c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	e009      	b.n	80054a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3310      	adds	r3, #16
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fef1 	bl	8005278 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3324      	adds	r3, #36	@ 0x24
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff feec 	bl	8005278 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054a0:	f002 f9a4 	bl	80077ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054a4:	2301      	movs	r3, #1
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08e      	sub	sp, #56	@ 0x38
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10b      	bne.n	80054e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <xQueueGenericCreateStatic+0x56>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <xQueueGenericCreateStatic+0x5a>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericCreateStatic+0x5c>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	623b      	str	r3, [r7, #32]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <xQueueGenericCreateStatic+0x84>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueGenericCreateStatic+0x88>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <xQueueGenericCreateStatic+0x8a>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	61fb      	str	r3, [r7, #28]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800555a:	2350      	movs	r3, #80	@ 0x50
 800555c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b50      	cmp	r3, #80	@ 0x50
 8005562:	d00b      	beq.n	800557c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800557c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005590:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4613      	mov	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f840 	bl	8005624 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3730      	adds	r7, #48	@ 0x30
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b08a      	sub	sp, #40	@ 0x28
 80055b2:	af02      	add	r7, sp, #8
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <xQueueGenericCreate+0x2c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	613b      	str	r3, [r7, #16]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3350      	adds	r3, #80	@ 0x50
 80055e8:	4618      	mov	r0, r3
 80055ea:	f002 f9ef 	bl	80079cc <pvPortMalloc>
 80055ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d011      	beq.n	800561a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3350      	adds	r3, #80	@ 0x50
 80055fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005608:	79fa      	ldrb	r2, [r7, #7]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f805 	bl	8005624 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800561a:	69bb      	ldr	r3, [r7, #24]
	}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e002      	b.n	8005646 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005652:	2101      	movs	r1, #1
 8005654:	69b8      	ldr	r0, [r7, #24]
 8005656:	f7ff fec3 	bl	80053e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005662:	bf00      	nop
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	@ 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <xQueueGenericSend+0x34>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSend+0x42>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSend+0x46>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSend+0x48>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <xQueueGenericSend+0x64>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d103      	bne.n	80056de <xQueueGenericSend+0x72>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <xQueueGenericSend+0x76>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericSend+0x78>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <xQueueGenericSend+0x94>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005700:	f001 fad6 	bl	8006cb0 <xTaskGetSchedulerState>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <xQueueGenericSend+0xa4>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <xQueueGenericSend+0xa8>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <xQueueGenericSend+0xaa>
 8005714:	2300      	movs	r3, #0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <xQueueGenericSend+0xc6>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	61fb      	str	r3, [r7, #28]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005732:	f002 f829 	bl	8007788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <xQueueGenericSend+0xdc>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d129      	bne.n	800579c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800574e:	f000 fa0f 	bl	8005b70 <prvCopyDataToQueue>
 8005752:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	3324      	adds	r3, #36	@ 0x24
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f8e5 	bl	8006930 <xTaskRemoveFromEventList>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800576c:	4b3f      	ldr	r3, [pc, #252]	@ (800586c <xQueueGenericSend+0x200>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	e00a      	b.n	8005794 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005784:	4b39      	ldr	r3, [pc, #228]	@ (800586c <xQueueGenericSend+0x200>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005794:	f002 f82a 	bl	80077ec <vPortExitCritical>
				return pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	e063      	b.n	8005864 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a2:	f002 f823 	bl	80077ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e05c      	b.n	8005864 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f91f 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057be:	f002 f815 	bl	80077ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c2:	f000 fe8f 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c6:	f001 ffdf 	bl	8007788 <vPortEnterCritical>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d103      	bne.n	80057e0 <xQueueGenericSend+0x174>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e6:	b25b      	sxtb	r3, r3
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x18a>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f6:	f001 fff9 	bl	80077ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f90e 	bl	8006a24 <xTaskCheckForTimeOut>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d124      	bne.n	8005858 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800580e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005810:	f000 faa6 	bl	8005d60 <prvIsQueueFull>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	3310      	adds	r3, #16
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f832 	bl	800688c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800582a:	f000 fa31 	bl	8005c90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800582e:	f000 fe67 	bl	8006500 <xTaskResumeAll>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	f47f af7c 	bne.w	8005732 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <xQueueGenericSend+0x200>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	e772      	b.n	8005732 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800584c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800584e:	f000 fa1f 	bl	8005c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005852:	f000 fe55 	bl	8006500 <xTaskResumeAll>
 8005856:	e76c      	b.n	8005732 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800585a:	f000 fa19 	bl	8005c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585e:	f000 fe4f 	bl	8006500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005862:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005864:	4618      	mov	r0, r3
 8005866:	3738      	adds	r7, #56	@ 0x38
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b090      	sub	sp, #64	@ 0x40
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10b      	bne.n	80058a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	e7fd      	b.n	800589c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <xQueueGenericSendFromISR+0x3e>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <xQueueGenericSendFromISR+0x42>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <xQueueGenericSendFromISR+0x44>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d103      	bne.n	80058de <xQueueGenericSendFromISR+0x6e>
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <xQueueGenericSendFromISR+0x72>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <xQueueGenericSendFromISR+0x74>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	623b      	str	r3, [r7, #32]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005900:	f002 f822 	bl	8007948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005904:	f3ef 8211 	mrs	r2, BASEPRI
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	61fa      	str	r2, [r7, #28]
 800591a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800591c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <xQueueGenericSendFromISR+0xc2>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d12f      	bne.n	8005992 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005938:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005948:	f000 f912 	bl	8005b70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800594c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d112      	bne.n	800597c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800595e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005960:	3324      	adds	r3, #36	@ 0x24
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ffe4 	bl	8006930 <xTaskRemoveFromEventList>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e007      	b.n	800598c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800597c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005980:	3301      	adds	r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	b25a      	sxtb	r2, r3
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005990:	e001      	b.n	8005996 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005992:	2300      	movs	r3, #0
 8005994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005998:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3740      	adds	r7, #64	@ 0x40
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08c      	sub	sp, #48	@ 0x30
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <xQueueReceive+0x32>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	623b      	str	r3, [r7, #32]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <xQueueReceive+0x40>
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <xQueueReceive+0x44>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <xQueueReceive+0x46>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <xQueueReceive+0x62>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	61fb      	str	r3, [r7, #28]
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a0e:	f001 f94f 	bl	8006cb0 <xTaskGetSchedulerState>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <xQueueReceive+0x72>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <xQueueReceive+0x76>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <xQueueReceive+0x78>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <xQueueReceive+0x94>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	61bb      	str	r3, [r7, #24]
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	e7fd      	b.n	8005a3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a40:	f001 fea2 	bl	8007788 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01f      	beq.n	8005a90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a54:	f000 f8f6 	bl	8005c44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	1e5a      	subs	r2, r3, #1
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 ff5f 	bl	8006930 <xTaskRemoveFromEventList>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a78:	4b3c      	ldr	r3, [pc, #240]	@ (8005b6c <xQueueReceive+0x1c0>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a88:	f001 feb0 	bl	80077ec <vPortExitCritical>
				return pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e069      	b.n	8005b64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a96:	f001 fea9 	bl	80077ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e062      	b.n	8005b64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 ffa5 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab2:	f001 fe9b 	bl	80077ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ab6:	f000 fd15 	bl	80064e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aba:	f001 fe65 	bl	8007788 <vPortEnterCritical>
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <xQueueReceive+0x128>
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d103      	bne.n	8005aea <xQueueReceive+0x13e>
 8005ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aea:	f001 fe7f 	bl	80077ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aee:	1d3a      	adds	r2, r7, #4
 8005af0:	f107 0310 	add.w	r3, r7, #16
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 ff94 	bl	8006a24 <xTaskCheckForTimeOut>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d123      	bne.n	8005b4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b04:	f000 f916 	bl	8005d34 <prvIsQueueEmpty>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d017      	beq.n	8005b3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	3324      	adds	r3, #36	@ 0x24
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 feb8 	bl	800688c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b1e:	f000 f8b7 	bl	8005c90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b22:	f000 fced 	bl	8006500 <xTaskResumeAll>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d189      	bne.n	8005a40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b6c <xQueueReceive+0x1c0>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	e780      	b.n	8005a40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b40:	f000 f8a6 	bl	8005c90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b44:	f000 fcdc 	bl	8006500 <xTaskResumeAll>
 8005b48:	e77a      	b.n	8005a40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b4c:	f000 f8a0 	bl	8005c90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b50:	f000 fcd6 	bl	8006500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b56:	f000 f8ed 	bl	8005d34 <prvIsQueueEmpty>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f43f af6f 	beq.w	8005a40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3730      	adds	r7, #48	@ 0x30
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d14d      	bne.n	8005c32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 f8a6 	bl	8006cec <xTaskPriorityDisinherit>
 8005ba0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	e043      	b.n	8005c32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d119      	bne.n	8005be4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6858      	ldr	r0, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	f003 f939 	bl	8008e32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d32b      	bcc.n	8005c32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	e026      	b.n	8005c32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68d8      	ldr	r0, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	461a      	mov	r2, r3
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	f003 f91f 	bl	8008e32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d207      	bcs.n	8005c20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c18:	425b      	negs	r3, r3
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d105      	bne.n	8005c32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c3a:	697b      	ldr	r3, [r7, #20]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d303      	bcc.n	8005c78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68d9      	ldr	r1, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	461a      	mov	r2, r3
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f003 f8d5 	bl	8008e32 <memcpy>
	}
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c98:	f001 fd76 	bl	8007788 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ca2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca4:	e011      	b.n	8005cca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3324      	adds	r3, #36	@ 0x24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fe3c 	bl	8006930 <xTaskRemoveFromEventList>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cbe:	f000 ff15 	bl	8006aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	dce9      	bgt.n	8005ca6 <prvUnlockQueue+0x16>
 8005cd2:	e000      	b.n	8005cd6 <prvUnlockQueue+0x46>
					break;
 8005cd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	22ff      	movs	r2, #255	@ 0xff
 8005cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 fd85 	bl	80077ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ce2:	f001 fd51 	bl	8007788 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cee:	e011      	b.n	8005d14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d012      	beq.n	8005d1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3310      	adds	r3, #16
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fe17 	bl	8006930 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d08:	f000 fef0 	bl	8006aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dce9      	bgt.n	8005cf0 <prvUnlockQueue+0x60>
 8005d1c:	e000      	b.n	8005d20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	22ff      	movs	r2, #255	@ 0xff
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d28:	f001 fd60 	bl	80077ec <vPortExitCritical>
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d3c:	f001 fd24 	bl	8007788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e001      	b.n	8005d52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f001 fd4b 	bl	80077ec <vPortExitCritical>

	return xReturn;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d68:	f001 fd0e 	bl	8007788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d102      	bne.n	8005d7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e001      	b.n	8005d82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d82:	f001 fd33 	bl	80077ec <vPortExitCritical>

	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e014      	b.n	8005dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da0:	4a0f      	ldr	r2, [pc, #60]	@ (8005de0 <vQueueAddToRegistry+0x50>)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10b      	bne.n	8005dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dac:	490c      	ldr	r1, [pc, #48]	@ (8005de0 <vQueueAddToRegistry+0x50>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	683a      	ldr	r2, [r7, #0]
 8005db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005db6:	4a0a      	ldr	r2, [pc, #40]	@ (8005de0 <vQueueAddToRegistry+0x50>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc2:	e006      	b.n	8005dd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b07      	cmp	r3, #7
 8005dce:	d9e7      	bls.n	8005da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000aa8 	.word	0x20000aa8

08005de4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df4:	f001 fcc8 	bl	8007788 <vPortEnterCritical>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d103      	bne.n	8005e0e <vQueueWaitForMessageRestricted+0x2a>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e14:	b25b      	sxtb	r3, r3
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d103      	bne.n	8005e24 <vQueueWaitForMessageRestricted+0x40>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e24:	f001 fce2 	bl	80077ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3324      	adds	r3, #36	@ 0x24
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fd4d 	bl	80068d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7ff ff26 	bl	8005c90 <prvUnlockQueue>
	}
 8005e44:	bf00      	nop
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08e      	sub	sp, #56	@ 0x38
 8005e50:	af04      	add	r7, sp, #16
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10b      	bne.n	8005e78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	623b      	str	r3, [r7, #32]
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10b      	bne.n	8005e96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	61fb      	str	r3, [r7, #28]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e96:	235c      	movs	r3, #92	@ 0x5c
 8005e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e9e:	d00b      	beq.n	8005eb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61bb      	str	r3, [r7, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01e      	beq.n	8005efe <xTaskCreateStatic+0xb2>
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01b      	beq.n	8005efe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ece:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	9302      	str	r3, [sp, #8]
 8005ee0:	f107 0314 	add.w	r3, r7, #20
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f850 	bl	8005f96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ef8:	f000 f8de 	bl	80060b8 <prvAddNewTaskToReadyList>
 8005efc:	e001      	b.n	8005f02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f02:	697b      	ldr	r3, [r7, #20]
	}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	@ 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08c      	sub	sp, #48	@ 0x30
 8005f10:	af04      	add	r7, sp, #16
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 fd53 	bl	80079cc <pvPortMalloc>
 8005f26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00e      	beq.n	8005f4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f2e:	205c      	movs	r0, #92	@ 0x5c
 8005f30:	f001 fd4c 	bl	80079cc <pvPortMalloc>
 8005f34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f42:	e005      	b.n	8005f50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f44:	6978      	ldr	r0, [r7, #20]
 8005f46:	f001 fe0f 	bl	8007b68 <vPortFree>
 8005f4a:	e001      	b.n	8005f50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d017      	beq.n	8005f86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	2300      	movs	r3, #0
 8005f62:	9303      	str	r3, [sp, #12]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	9302      	str	r3, [sp, #8]
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f80e 	bl	8005f96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f7a:	69f8      	ldr	r0, [r7, #28]
 8005f7c:	f000 f89c 	bl	80060b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f80:	2301      	movs	r3, #1
 8005f82:	61bb      	str	r3, [r7, #24]
 8005f84:	e002      	b.n	8005f8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	461a      	mov	r2, r3
 8005fae:	21a5      	movs	r1, #165	@ 0xa5
 8005fb0:	f002 febf 	bl	8008d32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00b      	beq.n	8005ff0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	617b      	str	r3, [r7, #20]
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	e7fd      	b.n	8005fec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01f      	beq.n	8006036 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	e012      	b.n	8006022 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	7819      	ldrb	r1, [r3, #0]
 8006004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	3334      	adds	r3, #52	@ 0x34
 800600c:	460a      	mov	r2, r1
 800600e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d006      	beq.n	800602a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3301      	adds	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d9e9      	bls.n	8005ffc <prvInitialiseNewTask+0x66>
 8006028:	e000      	b.n	800602c <prvInitialiseNewTask+0x96>
			{
				break;
 800602a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006034:	e003      	b.n	800603e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	2b37      	cmp	r3, #55	@ 0x37
 8006042:	d901      	bls.n	8006048 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006044:	2337      	movs	r3, #55	@ 0x37
 8006046:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800604c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006052:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	2200      	movs	r2, #0
 8006058:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605c:	3304      	adds	r3, #4
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff f92a 	bl	80052b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	3318      	adds	r3, #24
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff f925 	bl	80052b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	2200      	movs	r2, #0
 8006088:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	69b8      	ldr	r0, [r7, #24]
 8006098:	f001 fa46 	bl	8007528 <pxPortInitialiseStack>
 800609c:	4602      	mov	r2, r0
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ae:	bf00      	nop
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c0:	f001 fb62 	bl	8007788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c4:	4b2d      	ldr	r3, [pc, #180]	@ (800617c <prvAddNewTaskToReadyList+0xc4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	4a2c      	ldr	r2, [pc, #176]	@ (800617c <prvAddNewTaskToReadyList+0xc4>)
 80060cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006180 <prvAddNewTaskToReadyList+0xc8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006180 <prvAddNewTaskToReadyList+0xc8>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060dc:	4b27      	ldr	r3, [pc, #156]	@ (800617c <prvAddNewTaskToReadyList+0xc4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d110      	bne.n	8006106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e4:	f000 fd26 	bl	8006b34 <prvInitialiseTaskLists>
 80060e8:	e00d      	b.n	8006106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060ea:	4b26      	ldr	r3, [pc, #152]	@ (8006184 <prvAddNewTaskToReadyList+0xcc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060f2:	4b23      	ldr	r3, [pc, #140]	@ (8006180 <prvAddNewTaskToReadyList+0xc8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d802      	bhi.n	8006106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006100:	4a1f      	ldr	r2, [pc, #124]	@ (8006180 <prvAddNewTaskToReadyList+0xc8>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006106:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <prvAddNewTaskToReadyList+0xd0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	4a1e      	ldr	r2, [pc, #120]	@ (8006188 <prvAddNewTaskToReadyList+0xd0>)
 800610e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006110:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <prvAddNewTaskToReadyList+0xd0>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611c:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <prvAddNewTaskToReadyList+0xd4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	429a      	cmp	r2, r3
 8006122:	d903      	bls.n	800612c <prvAddNewTaskToReadyList+0x74>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006128:	4a18      	ldr	r2, [pc, #96]	@ (800618c <prvAddNewTaskToReadyList+0xd4>)
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4a15      	ldr	r2, [pc, #84]	@ (8006190 <prvAddNewTaskToReadyList+0xd8>)
 800613a:	441a      	add	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	4619      	mov	r1, r3
 8006142:	4610      	mov	r0, r2
 8006144:	f7ff f8c5 	bl	80052d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006148:	f001 fb50 	bl	80077ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800614c:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <prvAddNewTaskToReadyList+0xcc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006154:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <prvAddNewTaskToReadyList+0xc8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	429a      	cmp	r2, r3
 8006160:	d207      	bcs.n	8006172 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006162:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <prvAddNewTaskToReadyList+0xdc>)
 8006164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000fbc 	.word	0x20000fbc
 8006180:	20000ae8 	.word	0x20000ae8
 8006184:	20000fc8 	.word	0x20000fc8
 8006188:	20000fd8 	.word	0x20000fd8
 800618c:	20000fc4 	.word	0x20000fc4
 8006190:	20000aec 	.word	0x20000aec
 8006194:	e000ed04 	.word	0xe000ed04

08006198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061aa:	4b14      	ldr	r3, [pc, #80]	@ (80061fc <vTaskDelay+0x64>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <vTaskDelay+0x32>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	60bb      	str	r3, [r7, #8]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061ca:	f000 f98b 	bl	80064e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061ce:	2100      	movs	r1, #0
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fdfb 	bl	8006dcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d6:	f000 f993 	bl	8006500 <xTaskResumeAll>
 80061da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d107      	bne.n	80061f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80061e2:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <vTaskDelay+0x68>)
 80061e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000fe4 	.word	0x20000fe4
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800620c:	f001 fabc 	bl	8007788 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <vTaskSuspend+0x18>
 8006216:	4b30      	ldr	r3, [pc, #192]	@ (80062d8 <vTaskSuspend+0xd4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	e000      	b.n	800621e <vTaskSuspend+0x1a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3304      	adds	r3, #4
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff f8b1 	bl	800538c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3318      	adds	r3, #24
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff f8a8 	bl	800538c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	4826      	ldr	r0, [pc, #152]	@ (80062dc <vTaskSuspend+0xd8>)
 8006244:	f7ff f845 	bl	80052d2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	d103      	bne.n	800625c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800625c:	f001 fac6 	bl	80077ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006260:	4b1f      	ldr	r3, [pc, #124]	@ (80062e0 <vTaskSuspend+0xdc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006268:	f001 fa8e 	bl	8007788 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800626c:	f000 fd00 	bl	8006c70 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006270:	f001 fabc 	bl	80077ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006274:	4b18      	ldr	r3, [pc, #96]	@ (80062d8 <vTaskSuspend+0xd4>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	429a      	cmp	r2, r3
 800627c:	d128      	bne.n	80062d0 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800627e:	4b18      	ldr	r3, [pc, #96]	@ (80062e0 <vTaskSuspend+0xdc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006286:	4b17      	ldr	r3, [pc, #92]	@ (80062e4 <vTaskSuspend+0xe0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <vTaskSuspend+0xa2>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60bb      	str	r3, [r7, #8]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80062a6:	4b10      	ldr	r3, [pc, #64]	@ (80062e8 <vTaskSuspend+0xe4>)
 80062a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062b6:	e00b      	b.n	80062d0 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80062b8:	4b08      	ldr	r3, [pc, #32]	@ (80062dc <vTaskSuspend+0xd8>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <vTaskSuspend+0xe8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d103      	bne.n	80062cc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80062c4:	4b04      	ldr	r3, [pc, #16]	@ (80062d8 <vTaskSuspend+0xd4>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
	}
 80062ca:	e001      	b.n	80062d0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80062cc:	f000 fa80 	bl	80067d0 <vTaskSwitchContext>
	}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000ae8 	.word	0x20000ae8
 80062dc:	20000fa8 	.word	0x20000fa8
 80062e0:	20000fc8 	.word	0x20000fc8
 80062e4:	20000fe4 	.word	0x20000fe4
 80062e8:	e000ed04 	.word	0xe000ed04
 80062ec:	20000fbc 	.word	0x20000fbc

080062f0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10b      	bne.n	800631e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	60fb      	str	r3, [r7, #12]
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	e7fd      	b.n	800631a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	4a0a      	ldr	r2, [pc, #40]	@ (800634c <prvTaskIsTaskSuspended+0x5c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d10a      	bne.n	800633e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	4a08      	ldr	r2, [pc, #32]	@ (8006350 <prvTaskIsTaskSuspended+0x60>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d005      	beq.n	800633e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800633e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20000fa8 	.word	0x20000fa8
 8006350:	20000f7c 	.word	0x20000f7c

08006354 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <vTaskResume+0x2a>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60bb      	str	r3, [r7, #8]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800637e:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <vTaskResume+0xb0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d038      	beq.n	80063fa <vTaskResume+0xa6>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d035      	beq.n	80063fa <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800638e:	f001 f9fb 	bl	8007788 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff ffac 	bl	80062f0 <prvTaskIsTaskSuspended>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d02b      	beq.n	80063f6 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fff2 	bl	800538c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ac:	4b16      	ldr	r3, [pc, #88]	@ (8006408 <vTaskResume+0xb4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d903      	bls.n	80063bc <vTaskResume+0x68>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	4a13      	ldr	r2, [pc, #76]	@ (8006408 <vTaskResume+0xb4>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4a10      	ldr	r2, [pc, #64]	@ (800640c <vTaskResume+0xb8>)
 80063ca:	441a      	add	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe ff7d 	bl	80052d2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063dc:	4b09      	ldr	r3, [pc, #36]	@ (8006404 <vTaskResume+0xb0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d307      	bcc.n	80063f6 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006410 <vTaskResume+0xbc>)
 80063e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80063f6:	f001 f9f9 	bl	80077ec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000ae8 	.word	0x20000ae8
 8006408:	20000fc4 	.word	0x20000fc4
 800640c:	20000aec 	.word	0x20000aec
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08a      	sub	sp, #40	@ 0x28
 8006418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006422:	463a      	mov	r2, r7
 8006424:	1d39      	adds	r1, r7, #4
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fef0 	bl	8005210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	9202      	str	r2, [sp, #8]
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	2300      	movs	r3, #0
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2300      	movs	r3, #0
 8006440:	460a      	mov	r2, r1
 8006442:	4922      	ldr	r1, [pc, #136]	@ (80064cc <vTaskStartScheduler+0xb8>)
 8006444:	4822      	ldr	r0, [pc, #136]	@ (80064d0 <vTaskStartScheduler+0xbc>)
 8006446:	f7ff fd01 	bl	8005e4c <xTaskCreateStatic>
 800644a:	4603      	mov	r3, r0
 800644c:	4a21      	ldr	r2, [pc, #132]	@ (80064d4 <vTaskStartScheduler+0xc0>)
 800644e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006450:	4b20      	ldr	r3, [pc, #128]	@ (80064d4 <vTaskStartScheduler+0xc0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006458:	2301      	movs	r3, #1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e001      	b.n	8006462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d102      	bne.n	800646e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006468:	f000 fd04 	bl	8006e74 <xTimerCreateTimerTask>
 800646c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d116      	bne.n	80064a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	613b      	str	r3, [r7, #16]
}
 8006486:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006488:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <vTaskStartScheduler+0xc4>)
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006490:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <vTaskStartScheduler+0xc8>)
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006496:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <vTaskStartScheduler+0xcc>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800649c:	f001 f8d0 	bl	8007640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064a0:	e00f      	b.n	80064c2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d10b      	bne.n	80064c2 <vTaskStartScheduler+0xae>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60fb      	str	r3, [r7, #12]
}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	e7fd      	b.n	80064be <vTaskStartScheduler+0xaa>
}
 80064c2:	bf00      	nop
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0800c5dc 	.word	0x0800c5dc
 80064d0:	08006b05 	.word	0x08006b05
 80064d4:	20000fe0 	.word	0x20000fe0
 80064d8:	20000fdc 	.word	0x20000fdc
 80064dc:	20000fc8 	.word	0x20000fc8
 80064e0:	20000fc0 	.word	0x20000fc0

080064e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064e8:	4b04      	ldr	r3, [pc, #16]	@ (80064fc <vTaskSuspendAll+0x18>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	4a03      	ldr	r2, [pc, #12]	@ (80064fc <vTaskSuspendAll+0x18>)
 80064f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20000fe4 	.word	0x20000fe4

08006500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800650a:	2300      	movs	r3, #0
 800650c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800650e:	4b42      	ldr	r3, [pc, #264]	@ (8006618 <xTaskResumeAll+0x118>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <xTaskResumeAll+0x2e>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	603b      	str	r3, [r7, #0]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800652e:	f001 f92b 	bl	8007788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006532:	4b39      	ldr	r3, [pc, #228]	@ (8006618 <xTaskResumeAll+0x118>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	4a37      	ldr	r2, [pc, #220]	@ (8006618 <xTaskResumeAll+0x118>)
 800653a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653c:	4b36      	ldr	r3, [pc, #216]	@ (8006618 <xTaskResumeAll+0x118>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d162      	bne.n	800660a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006544:	4b35      	ldr	r3, [pc, #212]	@ (800661c <xTaskResumeAll+0x11c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05e      	beq.n	800660a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800654c:	e02f      	b.n	80065ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <xTaskResumeAll+0x120>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3318      	adds	r3, #24
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe ff16 	bl	800538c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3304      	adds	r3, #4
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe ff11 	bl	800538c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800656e:	4b2d      	ldr	r3, [pc, #180]	@ (8006624 <xTaskResumeAll+0x124>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d903      	bls.n	800657e <xTaskResumeAll+0x7e>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	4a2a      	ldr	r2, [pc, #168]	@ (8006624 <xTaskResumeAll+0x124>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4a27      	ldr	r2, [pc, #156]	@ (8006628 <xTaskResumeAll+0x128>)
 800658c:	441a      	add	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3304      	adds	r3, #4
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f7fe fe9c 	bl	80052d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659e:	4b23      	ldr	r3, [pc, #140]	@ (800662c <xTaskResumeAll+0x12c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d302      	bcc.n	80065ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80065a8:	4b21      	ldr	r3, [pc, #132]	@ (8006630 <xTaskResumeAll+0x130>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <xTaskResumeAll+0x120>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1cb      	bne.n	800654e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065bc:	f000 fb58 	bl	8006c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006634 <xTaskResumeAll+0x134>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d010      	beq.n	80065ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065cc:	f000 f846 	bl	800665c <xTaskIncrementTick>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80065d6:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <xTaskResumeAll+0x130>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3b01      	subs	r3, #1
 80065e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f1      	bne.n	80065cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80065e8:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <xTaskResumeAll+0x134>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065ee:	4b10      	ldr	r3, [pc, #64]	@ (8006630 <xTaskResumeAll+0x130>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006638 <xTaskResumeAll+0x138>)
 80065fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800660a:	f001 f8ef 	bl	80077ec <vPortExitCritical>

	return xAlreadyYielded;
 800660e:	68bb      	ldr	r3, [r7, #8]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000fe4 	.word	0x20000fe4
 800661c:	20000fbc 	.word	0x20000fbc
 8006620:	20000f7c 	.word	0x20000f7c
 8006624:	20000fc4 	.word	0x20000fc4
 8006628:	20000aec 	.word	0x20000aec
 800662c:	20000ae8 	.word	0x20000ae8
 8006630:	20000fd0 	.word	0x20000fd0
 8006634:	20000fcc 	.word	0x20000fcc
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006642:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <xTaskGetTickCount+0x1c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006648:	687b      	ldr	r3, [r7, #4]
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000fc0 	.word	0x20000fc0

0800665c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006666:	4b4f      	ldr	r3, [pc, #316]	@ (80067a4 <xTaskIncrementTick+0x148>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 8090 	bne.w	8006790 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006670:	4b4d      	ldr	r3, [pc, #308]	@ (80067a8 <xTaskIncrementTick+0x14c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006678:	4a4b      	ldr	r2, [pc, #300]	@ (80067a8 <xTaskIncrementTick+0x14c>)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d121      	bne.n	80066c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006684:	4b49      	ldr	r3, [pc, #292]	@ (80067ac <xTaskIncrementTick+0x150>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	603b      	str	r3, [r7, #0]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <xTaskIncrementTick+0x46>
 80066a6:	4b41      	ldr	r3, [pc, #260]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	4b40      	ldr	r3, [pc, #256]	@ (80067b0 <xTaskIncrementTick+0x154>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a3e      	ldr	r2, [pc, #248]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	4a3e      	ldr	r2, [pc, #248]	@ (80067b0 <xTaskIncrementTick+0x154>)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <xTaskIncrementTick+0x158>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a3c      	ldr	r2, [pc, #240]	@ (80067b4 <xTaskIncrementTick+0x158>)
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	f000 fad4 	bl	8006c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066c8:	4b3b      	ldr	r3, [pc, #236]	@ (80067b8 <xTaskIncrementTick+0x15c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d349      	bcc.n	8006766 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d2:	4b36      	ldr	r3, [pc, #216]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066dc:	4b36      	ldr	r3, [pc, #216]	@ (80067b8 <xTaskIncrementTick+0x15c>)
 80066de:	f04f 32ff 	mov.w	r2, #4294967295
 80066e2:	601a      	str	r2, [r3, #0]
					break;
 80066e4:	e03f      	b.n	8006766 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e6:	4b31      	ldr	r3, [pc, #196]	@ (80067ac <xTaskIncrementTick+0x150>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d203      	bcs.n	8006706 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066fe:	4a2e      	ldr	r2, [pc, #184]	@ (80067b8 <xTaskIncrementTick+0x15c>)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006704:	e02f      	b.n	8006766 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	3304      	adds	r3, #4
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fe3e 	bl	800538c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	3318      	adds	r3, #24
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fe35 	bl	800538c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006726:	4b25      	ldr	r3, [pc, #148]	@ (80067bc <xTaskIncrementTick+0x160>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d903      	bls.n	8006736 <xTaskIncrementTick+0xda>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	4a22      	ldr	r2, [pc, #136]	@ (80067bc <xTaskIncrementTick+0x160>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a1f      	ldr	r2, [pc, #124]	@ (80067c0 <xTaskIncrementTick+0x164>)
 8006744:	441a      	add	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7fe fdc0 	bl	80052d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006756:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <xTaskIncrementTick+0x168>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d3b8      	bcc.n	80066d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006764:	e7b5      	b.n	80066d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006766:	4b17      	ldr	r3, [pc, #92]	@ (80067c4 <xTaskIncrementTick+0x168>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676c:	4914      	ldr	r1, [pc, #80]	@ (80067c0 <xTaskIncrementTick+0x164>)
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d901      	bls.n	8006782 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006782:	4b11      	ldr	r3, [pc, #68]	@ (80067c8 <xTaskIncrementTick+0x16c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e004      	b.n	800679a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006790:	4b0e      	ldr	r3, [pc, #56]	@ (80067cc <xTaskIncrementTick+0x170>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a0d      	ldr	r2, [pc, #52]	@ (80067cc <xTaskIncrementTick+0x170>)
 8006798:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800679a:	697b      	ldr	r3, [r7, #20]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000fe4 	.word	0x20000fe4
 80067a8:	20000fc0 	.word	0x20000fc0
 80067ac:	20000f74 	.word	0x20000f74
 80067b0:	20000f78 	.word	0x20000f78
 80067b4:	20000fd4 	.word	0x20000fd4
 80067b8:	20000fdc 	.word	0x20000fdc
 80067bc:	20000fc4 	.word	0x20000fc4
 80067c0:	20000aec 	.word	0x20000aec
 80067c4:	20000ae8 	.word	0x20000ae8
 80067c8:	20000fd0 	.word	0x20000fd0
 80067cc:	20000fcc 	.word	0x20000fcc

080067d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067d6:	4b28      	ldr	r3, [pc, #160]	@ (8006878 <vTaskSwitchContext+0xa8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067de:	4b27      	ldr	r3, [pc, #156]	@ (800687c <vTaskSwitchContext+0xac>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067e4:	e042      	b.n	800686c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80067e6:	4b25      	ldr	r3, [pc, #148]	@ (800687c <vTaskSwitchContext+0xac>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ec:	4b24      	ldr	r3, [pc, #144]	@ (8006880 <vTaskSwitchContext+0xb0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e011      	b.n	8006818 <vTaskSwitchContext+0x48>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10b      	bne.n	8006812 <vTaskSwitchContext+0x42>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	e7fd      	b.n	800680e <vTaskSwitchContext+0x3e>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b01      	subs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	491a      	ldr	r1, [pc, #104]	@ (8006884 <vTaskSwitchContext+0xb4>)
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0e3      	beq.n	80067f4 <vTaskSwitchContext+0x24>
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a13      	ldr	r2, [pc, #76]	@ (8006884 <vTaskSwitchContext+0xb4>)
 8006838:	4413      	add	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	605a      	str	r2, [r3, #4]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	3308      	adds	r3, #8
 800684e:	429a      	cmp	r2, r3
 8006850:	d104      	bne.n	800685c <vTaskSwitchContext+0x8c>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <vTaskSwitchContext+0xb8>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4a06      	ldr	r2, [pc, #24]	@ (8006880 <vTaskSwitchContext+0xb0>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	20000fe4 	.word	0x20000fe4
 800687c:	20000fd0 	.word	0x20000fd0
 8006880:	20000fc4 	.word	0x20000fc4
 8006884:	20000aec 	.word	0x20000aec
 8006888:	20000ae8 	.word	0x20000ae8

0800688c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068b4:	4b07      	ldr	r3, [pc, #28]	@ (80068d4 <vTaskPlaceOnEventList+0x48>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3318      	adds	r3, #24
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fe fd2c 	bl	800531a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068c2:	2101      	movs	r1, #1
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 fa81 	bl	8006dcc <prvAddCurrentTaskToDelayedList>
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000ae8 	.word	0x20000ae8

080068d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
}
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006902:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <vTaskPlaceOnEventListRestricted+0x54>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fe fce1 	bl	80052d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	68b8      	ldr	r0, [r7, #8]
 8006920:	f000 fa54 	bl	8006dcc <prvAddCurrentTaskToDelayedList>
	}
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000ae8 	.word	0x20000ae8

08006930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60fb      	str	r3, [r7, #12]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3318      	adds	r3, #24
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fd12 	bl	800538c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006968:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <xTaskRemoveFromEventList+0xb0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11d      	bne.n	80069ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fd09 	bl	800538c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697e:	4b19      	ldr	r3, [pc, #100]	@ (80069e4 <xTaskRemoveFromEventList+0xb4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d903      	bls.n	800698e <xTaskRemoveFromEventList+0x5e>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698a:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <xTaskRemoveFromEventList+0xb4>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a13      	ldr	r2, [pc, #76]	@ (80069e8 <xTaskRemoveFromEventList+0xb8>)
 800699c:	441a      	add	r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7fe fc94 	bl	80052d2 <vListInsertEnd>
 80069aa:	e005      	b.n	80069b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3318      	adds	r3, #24
 80069b0:	4619      	mov	r1, r3
 80069b2:	480e      	ldr	r0, [pc, #56]	@ (80069ec <xTaskRemoveFromEventList+0xbc>)
 80069b4:	f7fe fc8d 	bl	80052d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	4b0c      	ldr	r3, [pc, #48]	@ (80069f0 <xTaskRemoveFromEventList+0xc0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d905      	bls.n	80069d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069c6:	2301      	movs	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ca:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <xTaskRemoveFromEventList+0xc4>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e001      	b.n	80069d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000fe4 	.word	0x20000fe4
 80069e4:	20000fc4 	.word	0x20000fc4
 80069e8:	20000aec 	.word	0x20000aec
 80069ec:	20000f7c 	.word	0x20000f7c
 80069f0:	20000ae8 	.word	0x20000ae8
 80069f4:	20000fd0 	.word	0x20000fd0

080069f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a00:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <vTaskInternalSetTimeOutState+0x24>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <vTaskInternalSetTimeOutState+0x28>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000fd4 	.word	0x20000fd4
 8006a20:	20000fc0 	.word	0x20000fc0

08006a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60fb      	str	r3, [r7, #12]
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006a6a:	f000 fe8d 	bl	8007788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae4 <xTaskCheckForTimeOut+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d102      	bne.n	8006a8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e023      	b.n	8006ad6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b15      	ldr	r3, [pc, #84]	@ (8006ae8 <xTaskCheckForTimeOut+0xc4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d007      	beq.n	8006aaa <xTaskCheckForTimeOut+0x86>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e015      	b.n	8006ad6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d20b      	bcs.n	8006acc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff99 	bl	80069f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	e004      	b.n	8006ad6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ad6:	f000 fe89 	bl	80077ec <vPortExitCritical>

	return xReturn;
 8006ada:	69fb      	ldr	r3, [r7, #28]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000fc0 	.word	0x20000fc0
 8006ae8:	20000fd4 	.word	0x20000fd4

08006aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006af0:	4b03      	ldr	r3, [pc, #12]	@ (8006b00 <vTaskMissedYield+0x14>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000fd0 	.word	0x20000fd0

08006b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b0c:	f000 f852 	bl	8006bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b10:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <prvIdleTask+0x28>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d9f9      	bls.n	8006b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b18:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <prvIdleTask+0x2c>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b28:	e7f0      	b.n	8006b0c <prvIdleTask+0x8>
 8006b2a:	bf00      	nop
 8006b2c:	20000aec 	.word	0x20000aec
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	607b      	str	r3, [r7, #4]
 8006b3e:	e00c      	b.n	8006b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4a12      	ldr	r2, [pc, #72]	@ (8006b94 <prvInitialiseTaskLists+0x60>)
 8006b4c:	4413      	add	r3, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fb92 	bl	8005278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3301      	adds	r3, #1
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b37      	cmp	r3, #55	@ 0x37
 8006b5e:	d9ef      	bls.n	8006b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b60:	480d      	ldr	r0, [pc, #52]	@ (8006b98 <prvInitialiseTaskLists+0x64>)
 8006b62:	f7fe fb89 	bl	8005278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b66:	480d      	ldr	r0, [pc, #52]	@ (8006b9c <prvInitialiseTaskLists+0x68>)
 8006b68:	f7fe fb86 	bl	8005278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b6c:	480c      	ldr	r0, [pc, #48]	@ (8006ba0 <prvInitialiseTaskLists+0x6c>)
 8006b6e:	f7fe fb83 	bl	8005278 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b72:	480c      	ldr	r0, [pc, #48]	@ (8006ba4 <prvInitialiseTaskLists+0x70>)
 8006b74:	f7fe fb80 	bl	8005278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b78:	480b      	ldr	r0, [pc, #44]	@ (8006ba8 <prvInitialiseTaskLists+0x74>)
 8006b7a:	f7fe fb7d 	bl	8005278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <prvInitialiseTaskLists+0x78>)
 8006b80:	4a05      	ldr	r2, [pc, #20]	@ (8006b98 <prvInitialiseTaskLists+0x64>)
 8006b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb0 <prvInitialiseTaskLists+0x7c>)
 8006b86:	4a05      	ldr	r2, [pc, #20]	@ (8006b9c <prvInitialiseTaskLists+0x68>)
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000aec 	.word	0x20000aec
 8006b98:	20000f4c 	.word	0x20000f4c
 8006b9c:	20000f60 	.word	0x20000f60
 8006ba0:	20000f7c 	.word	0x20000f7c
 8006ba4:	20000f90 	.word	0x20000f90
 8006ba8:	20000fa8 	.word	0x20000fa8
 8006bac:	20000f74 	.word	0x20000f74
 8006bb0:	20000f78 	.word	0x20000f78

08006bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bba:	e019      	b.n	8006bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bbc:	f000 fde4 	bl	8007788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc0:	4b10      	ldr	r3, [pc, #64]	@ (8006c04 <prvCheckTasksWaitingTermination+0x50>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fbdd 	bl	800538c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <prvCheckTasksWaitingTermination+0x54>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8006c08 <prvCheckTasksWaitingTermination+0x54>)
 8006bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	4a0a      	ldr	r2, [pc, #40]	@ (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006be6:	f000 fe01 	bl	80077ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f810 	bl	8006c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf0:	4b06      	ldr	r3, [pc, #24]	@ (8006c0c <prvCheckTasksWaitingTermination+0x58>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e1      	bne.n	8006bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000f90 	.word	0x20000f90
 8006c08:	20000fbc 	.word	0x20000fbc
 8006c0c:	20000fa4 	.word	0x20000fa4

08006c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff9e 	bl	8007b68 <vPortFree>
				vPortFree( pxTCB );
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 ff9b 	bl	8007b68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c32:	e019      	b.n	8006c68 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d103      	bne.n	8006c46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 ff92 	bl	8007b68 <vPortFree>
	}
 8006c44:	e010      	b.n	8006c68 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d00b      	beq.n	8006c68 <prvDeleteTCB+0x58>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <prvDeleteTCB+0x54>
	}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <prvResetNextTaskUnblockTime+0x38>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d104      	bne.n	8006c8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	@ (8006cac <prvResetNextTaskUnblockTime+0x3c>)
 8006c82:	f04f 32ff 	mov.w	r2, #4294967295
 8006c86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c88:	e008      	b.n	8006c9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <prvResetNextTaskUnblockTime+0x38>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <prvResetNextTaskUnblockTime+0x3c>)
 8006c9a:	6013      	str	r3, [r2, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	20000f74 	.word	0x20000f74
 8006cac:	20000fdc 	.word	0x20000fdc

08006cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <xTaskGetSchedulerState+0x34>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	607b      	str	r3, [r7, #4]
 8006cc2:	e008      	b.n	8006cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc4:	4b08      	ldr	r3, [pc, #32]	@ (8006ce8 <xTaskGetSchedulerState+0x38>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	e001      	b.n	8006cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cd6:	687b      	ldr	r3, [r7, #4]
	}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	20000fc8 	.word	0x20000fc8
 8006ce8:	20000fe4 	.word	0x20000fe4

08006cec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d058      	beq.n	8006db4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d02:	4b2f      	ldr	r3, [pc, #188]	@ (8006dc0 <xTaskPriorityDisinherit+0xd4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d00b      	beq.n	8006d24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60fb      	str	r3, [r7, #12]
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60bb      	str	r3, [r7, #8]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d02c      	beq.n	8006db4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d128      	bne.n	8006db4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fb10 	bl	800538c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d84:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc4 <xTaskPriorityDisinherit+0xd8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d903      	bls.n	8006d94 <xTaskPriorityDisinherit+0xa8>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc4 <xTaskPriorityDisinherit+0xd8>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4a09      	ldr	r2, [pc, #36]	@ (8006dc8 <xTaskPriorityDisinherit+0xdc>)
 8006da2:	441a      	add	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7fe fa91 	bl	80052d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006db4:	697b      	ldr	r3, [r7, #20]
	}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000ae8 	.word	0x20000ae8
 8006dc4:	20000fc4 	.word	0x20000fc4
 8006dc8:	20000aec 	.word	0x20000aec

08006dcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dd6:	4b21      	ldr	r3, [pc, #132]	@ (8006e5c <prvAddCurrentTaskToDelayedList+0x90>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ddc:	4b20      	ldr	r3, [pc, #128]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fad2 	bl	800538c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d10a      	bne.n	8006e06 <prvAddCurrentTaskToDelayedList+0x3a>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006df6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4819      	ldr	r0, [pc, #100]	@ (8006e64 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e00:	f7fe fa67 	bl	80052d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e04:	e026      	b.n	8006e54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e0e:	4b14      	ldr	r3, [pc, #80]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d209      	bcs.n	8006e32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e1e:	4b12      	ldr	r3, [pc, #72]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b0f      	ldr	r3, [pc, #60]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fe fa75 	bl	800531a <vListInsert>
}
 8006e30:	e010      	b.n	8006e54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e32:	4b0e      	ldr	r3, [pc, #56]	@ (8006e6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b0a      	ldr	r3, [pc, #40]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7fe fa6b 	bl	800531a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e44:	4b0a      	ldr	r3, [pc, #40]	@ (8006e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d202      	bcs.n	8006e54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e4e:	4a08      	ldr	r2, [pc, #32]	@ (8006e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6013      	str	r3, [r2, #0]
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000fc0 	.word	0x20000fc0
 8006e60:	20000ae8 	.word	0x20000ae8
 8006e64:	20000fa8 	.word	0x20000fa8
 8006e68:	20000f78 	.word	0x20000f78
 8006e6c:	20000f74 	.word	0x20000f74
 8006e70:	20000fdc 	.word	0x20000fdc

08006e74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	@ 0x28
 8006e78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e7e:	f000 fb13 	bl	80074a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef8 <xTimerCreateTimerTask+0x84>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d021      	beq.n	8006ece <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e92:	1d3a      	adds	r2, r7, #4
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe f9d1 	bl	8005244 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	9202      	str	r2, [sp, #8]
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	2302      	movs	r3, #2
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	4911      	ldr	r1, [pc, #68]	@ (8006efc <xTimerCreateTimerTask+0x88>)
 8006eb6:	4812      	ldr	r0, [pc, #72]	@ (8006f00 <xTimerCreateTimerTask+0x8c>)
 8006eb8:	f7fe ffc8 	bl	8005e4c <xTaskCreateStatic>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	4a11      	ldr	r2, [pc, #68]	@ (8006f04 <xTimerCreateTimerTask+0x90>)
 8006ec0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ec2:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <xTimerCreateTimerTask+0x90>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	613b      	str	r3, [r7, #16]
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	e7fd      	b.n	8006ee8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006eec:	697b      	ldr	r3, [r7, #20]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20001018 	.word	0x20001018
 8006efc:	0800c5e4 	.word	0x0800c5e4
 8006f00:	08007041 	.word	0x08007041
 8006f04:	2000101c 	.word	0x2000101c

08006f08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	@ 0x28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <xTimerGenericCommand+0x30>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	623b      	str	r3, [r7, #32]
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f38:	4b19      	ldr	r3, [pc, #100]	@ (8006fa0 <xTimerGenericCommand+0x98>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d02a      	beq.n	8006f96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	dc18      	bgt.n	8006f84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f52:	f7ff fead 	bl	8006cb0 <xTaskGetSchedulerState>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d109      	bne.n	8006f70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f5c:	4b10      	ldr	r3, [pc, #64]	@ (8006fa0 <xTimerGenericCommand+0x98>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	f107 0110 	add.w	r1, r7, #16
 8006f64:	2300      	movs	r3, #0
 8006f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f68:	f7fe fb80 	bl	800566c <xQueueGenericSend>
 8006f6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f6e:	e012      	b.n	8006f96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <xTimerGenericCommand+0x98>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	f107 0110 	add.w	r1, r7, #16
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7fe fb76 	bl	800566c <xQueueGenericSend>
 8006f80:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f82:	e008      	b.n	8006f96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f84:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <xTimerGenericCommand+0x98>)
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	f107 0110 	add.w	r1, r7, #16
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	f7fe fc6e 	bl	8005870 <xQueueGenericSendFromISR>
 8006f94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3728      	adds	r7, #40	@ 0x28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20001018 	.word	0x20001018

08006fa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fae:	4b23      	ldr	r3, [pc, #140]	@ (800703c <prvProcessExpiredTimer+0x98>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe f9e5 	bl	800538c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d023      	beq.n	8007018 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	18d1      	adds	r1, r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	6978      	ldr	r0, [r7, #20]
 8006fde:	f000 f8d5 	bl	800718c <prvInsertTimerInActiveList>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d020      	beq.n	800702a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2300      	movs	r3, #0
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	6978      	ldr	r0, [r7, #20]
 8006ff4:	f7ff ff88 	bl	8006f08 <xTimerGenericCommand>
 8006ff8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d114      	bne.n	800702a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800701e:	f023 0301 	bic.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	6978      	ldr	r0, [r7, #20]
 8007030:	4798      	blx	r3
}
 8007032:	bf00      	nop
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20001010 	.word	0x20001010

08007040 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f859 	bl	8007104 <prvGetNextExpireTime>
 8007052:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4619      	mov	r1, r3
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f805 	bl	8007068 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800705e:	f000 f8d7 	bl	8007210 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007062:	bf00      	nop
 8007064:	e7f0      	b.n	8007048 <prvTimerTask+0x8>
	...

08007068 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007072:	f7ff fa37 	bl	80064e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007076:	f107 0308 	add.w	r3, r7, #8
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f866 	bl	800714c <prvSampleTimeNow>
 8007080:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d130      	bne.n	80070ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <prvProcessTimerOrBlockTask+0x3c>
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	429a      	cmp	r2, r3
 8007094:	d806      	bhi.n	80070a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007096:	f7ff fa33 	bl	8006500 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff ff81 	bl	8006fa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070a2:	e024      	b.n	80070ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070aa:	4b13      	ldr	r3, [pc, #76]	@ (80070f8 <prvProcessTimerOrBlockTask+0x90>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <prvProcessTimerOrBlockTask+0x50>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <prvProcessTimerOrBlockTask+0x52>
 80070b8:	2300      	movs	r3, #0
 80070ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070bc:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <prvProcessTimerOrBlockTask+0x94>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4619      	mov	r1, r3
 80070ca:	f7fe fe8b 	bl	8005de4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070ce:	f7ff fa17 	bl	8006500 <xTaskResumeAll>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070d8:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <prvProcessTimerOrBlockTask+0x98>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
}
 80070e8:	e001      	b.n	80070ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070ea:	f7ff fa09 	bl	8006500 <xTaskResumeAll>
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20001014 	.word	0x20001014
 80070fc:	20001018 	.word	0x20001018
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800710c:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <prvGetNextExpireTime+0x44>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <prvGetNextExpireTime+0x16>
 8007116:	2201      	movs	r2, #1
 8007118:	e000      	b.n	800711c <prvGetNextExpireTime+0x18>
 800711a:	2200      	movs	r2, #0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007128:	4b07      	ldr	r3, [pc, #28]	@ (8007148 <prvGetNextExpireTime+0x44>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	e001      	b.n	8007138 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007138:	68fb      	ldr	r3, [r7, #12]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20001010 	.word	0x20001010

0800714c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007154:	f7ff fa72 	bl	800663c <xTaskGetTickCount>
 8007158:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800715a:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <prvSampleTimeNow+0x3c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d205      	bcs.n	8007170 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007164:	f000 f93a 	bl	80073dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e002      	b.n	8007176 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007176:	4a04      	ldr	r2, [pc, #16]	@ (8007188 <prvSampleTimeNow+0x3c>)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800717c:	68fb      	ldr	r3, [r7, #12]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20001020 	.word	0x20001020

0800718c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d812      	bhi.n	80071d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d302      	bcc.n	80071c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e01b      	b.n	80071fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071c6:	4b10      	ldr	r3, [pc, #64]	@ (8007208 <prvInsertTimerInActiveList+0x7c>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f7fe f8a2 	bl	800531a <vListInsert>
 80071d6:	e012      	b.n	80071fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d206      	bcs.n	80071ee <prvInsertTimerInActiveList+0x62>
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d302      	bcc.n	80071ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	e007      	b.n	80071fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ee:	4b07      	ldr	r3, [pc, #28]	@ (800720c <prvInsertTimerInActiveList+0x80>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe f88e 	bl	800531a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071fe:	697b      	ldr	r3, [r7, #20]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20001014 	.word	0x20001014
 800720c:	20001010 	.word	0x20001010

08007210 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08e      	sub	sp, #56	@ 0x38
 8007214:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007216:	e0ce      	b.n	80073b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	da19      	bge.n	8007252 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800721e:	1d3b      	adds	r3, r7, #4
 8007220:	3304      	adds	r3, #4
 8007222:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10b      	bne.n	8007242 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	61fb      	str	r3, [r7, #28]
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	e7fd      	b.n	800723e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007248:	6850      	ldr	r0, [r2, #4]
 800724a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800724c:	6892      	ldr	r2, [r2, #8]
 800724e:	4611      	mov	r1, r2
 8007250:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f2c0 80ae 	blt.w	80073b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007268:	3304      	adds	r3, #4
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe f88e 	bl	800538c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007270:	463b      	mov	r3, r7
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff6a 	bl	800714c <prvSampleTimeNow>
 8007278:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b09      	cmp	r3, #9
 800727e:	f200 8097 	bhi.w	80073b0 <prvProcessReceivedCommands+0x1a0>
 8007282:	a201      	add	r2, pc, #4	@ (adr r2, 8007288 <prvProcessReceivedCommands+0x78>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072b1 	.word	0x080072b1
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072b1 	.word	0x080072b1
 8007294:	08007327 	.word	0x08007327
 8007298:	0800733b 	.word	0x0800733b
 800729c:	08007387 	.word	0x08007387
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	080072b1 	.word	0x080072b1
 80072a8:	08007327 	.word	0x08007327
 80072ac:	0800733b 	.word	0x0800733b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	18d1      	adds	r1, r2, r3
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072d0:	f7ff ff5c 	bl	800718c <prvInsertTimerInActiveList>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06c      	beq.n	80073b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d061      	beq.n	80073b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	441a      	add	r2, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2300      	movs	r3, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007302:	f7ff fe01 	bl	8006f08 <xTimerGenericCommand>
 8007306:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d152      	bne.n	80073b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	61bb      	str	r3, [r7, #24]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007338:	e03d      	b.n	80073b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007340:	f043 0301 	orr.w	r3, r3, #1
 8007344:	b2da      	uxtb	r2, r3
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	617b      	str	r3, [r7, #20]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	18d1      	adds	r1, r2, r3
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800737e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007380:	f7ff ff04 	bl	800718c <prvInsertTimerInActiveList>
					break;
 8007384:	e017      	b.n	80073b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d103      	bne.n	800739c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007396:	f000 fbe7 	bl	8007b68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800739a:	e00c      	b.n	80073b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80073ae:	e002      	b.n	80073b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80073b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073b6:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <prvProcessReceivedCommands+0x1c8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1d39      	adds	r1, r7, #4
 80073bc:	2200      	movs	r2, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe faf4 	bl	80059ac <xQueueReceive>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f47f af26 	bne.w	8007218 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	3730      	adds	r7, #48	@ 0x30
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20001018 	.word	0x20001018

080073dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073e2:	e049      	b.n	8007478 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073e4:	4b2e      	ldr	r3, [pc, #184]	@ (80074a0 <prvSwitchTimerLists+0xc4>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ee:	4b2c      	ldr	r3, [pc, #176]	@ (80074a0 <prvSwitchTimerLists+0xc4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fd ffc5 	bl	800538c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02f      	beq.n	8007478 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4413      	add	r3, r2
 8007420:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	429a      	cmp	r2, r3
 8007428:	d90e      	bls.n	8007448 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007436:	4b1a      	ldr	r3, [pc, #104]	@ (80074a0 <prvSwitchTimerLists+0xc4>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7fd ff6a 	bl	800531a <vListInsert>
 8007446:	e017      	b.n	8007478 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007448:	2300      	movs	r3, #0
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2300      	movs	r3, #0
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	2100      	movs	r1, #0
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7ff fd58 	bl	8006f08 <xTimerGenericCommand>
 8007458:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	603b      	str	r3, [r7, #0]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007478:	4b09      	ldr	r3, [pc, #36]	@ (80074a0 <prvSwitchTimerLists+0xc4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1b0      	bne.n	80073e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007482:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <prvSwitchTimerLists+0xc4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007488:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <prvSwitchTimerLists+0xc8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a04      	ldr	r2, [pc, #16]	@ (80074a0 <prvSwitchTimerLists+0xc4>)
 800748e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007490:	4a04      	ldr	r2, [pc, #16]	@ (80074a4 <prvSwitchTimerLists+0xc8>)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6013      	str	r3, [r2, #0]
}
 8007496:	bf00      	nop
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20001010 	.word	0x20001010
 80074a4:	20001014 	.word	0x20001014

080074a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074ae:	f000 f96b 	bl	8007788 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074b2:	4b15      	ldr	r3, [pc, #84]	@ (8007508 <prvCheckForValidListAndQueue+0x60>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d120      	bne.n	80074fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074ba:	4814      	ldr	r0, [pc, #80]	@ (800750c <prvCheckForValidListAndQueue+0x64>)
 80074bc:	f7fd fedc 	bl	8005278 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074c0:	4813      	ldr	r0, [pc, #76]	@ (8007510 <prvCheckForValidListAndQueue+0x68>)
 80074c2:	f7fd fed9 	bl	8005278 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074c6:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <prvCheckForValidListAndQueue+0x6c>)
 80074c8:	4a10      	ldr	r2, [pc, #64]	@ (800750c <prvCheckForValidListAndQueue+0x64>)
 80074ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074cc:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <prvCheckForValidListAndQueue+0x70>)
 80074ce:	4a10      	ldr	r2, [pc, #64]	@ (8007510 <prvCheckForValidListAndQueue+0x68>)
 80074d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074d2:	2300      	movs	r3, #0
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4b11      	ldr	r3, [pc, #68]	@ (800751c <prvCheckForValidListAndQueue+0x74>)
 80074d8:	4a11      	ldr	r2, [pc, #68]	@ (8007520 <prvCheckForValidListAndQueue+0x78>)
 80074da:	2110      	movs	r1, #16
 80074dc:	200a      	movs	r0, #10
 80074de:	f7fd ffe9 	bl	80054b4 <xQueueGenericCreateStatic>
 80074e2:	4603      	mov	r3, r0
 80074e4:	4a08      	ldr	r2, [pc, #32]	@ (8007508 <prvCheckForValidListAndQueue+0x60>)
 80074e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074e8:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <prvCheckForValidListAndQueue+0x60>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074f0:	4b05      	ldr	r3, [pc, #20]	@ (8007508 <prvCheckForValidListAndQueue+0x60>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	490b      	ldr	r1, [pc, #44]	@ (8007524 <prvCheckForValidListAndQueue+0x7c>)
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fc4a 	bl	8005d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074fc:	f000 f976 	bl	80077ec <vPortExitCritical>
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20001018 	.word	0x20001018
 800750c:	20000fe8 	.word	0x20000fe8
 8007510:	20000ffc 	.word	0x20000ffc
 8007514:	20001010 	.word	0x20001010
 8007518:	20001014 	.word	0x20001014
 800751c:	200010c4 	.word	0x200010c4
 8007520:	20001024 	.word	0x20001024
 8007524:	0800c5ec 	.word	0x0800c5ec

08007528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3b04      	subs	r3, #4
 8007538:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3b04      	subs	r3, #4
 8007546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f023 0201 	bic.w	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3b04      	subs	r3, #4
 8007556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007558:	4a0c      	ldr	r2, [pc, #48]	@ (800758c <pxPortInitialiseStack+0x64>)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3b14      	subs	r3, #20
 8007562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b04      	subs	r3, #4
 800756e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f06f 0202 	mvn.w	r2, #2
 8007576:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3b20      	subs	r3, #32
 800757c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800757e:	68fb      	ldr	r3, [r7, #12]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	08007591 	.word	0x08007591

08007590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800759a:	4b13      	ldr	r3, [pc, #76]	@ (80075e8 <prvTaskExitError+0x58>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d00b      	beq.n	80075bc <prvTaskExitError+0x2c>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	60fb      	str	r3, [r7, #12]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <prvTaskExitError+0x28>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60bb      	str	r3, [r7, #8]
}
 80075ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075d0:	bf00      	nop
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0fc      	beq.n	80075d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	2000001c 	.word	0x2000001c
 80075ec:	00000000 	.word	0x00000000

080075f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	@ (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	4770      	bx	lr
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst2>:
 8007610:	20000ae8 	.word	0x20000ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007618:	4808      	ldr	r0, [pc, #32]	@ (800763c <prvPortStartFirstTask+0x24>)
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f380 8808 	msr	MSP, r0
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8814 	msr	CONTROL, r0
 800762a:	b662      	cpsie	i
 800762c:	b661      	cpsie	f
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	df00      	svc	0
 8007638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800763a:	bf00      	nop
 800763c:	e000ed08 	.word	0xe000ed08

08007640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007646:	4b47      	ldr	r3, [pc, #284]	@ (8007764 <xPortStartScheduler+0x124>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a47      	ldr	r2, [pc, #284]	@ (8007768 <xPortStartScheduler+0x128>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10b      	bne.n	8007668 <xPortStartScheduler+0x28>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	613b      	str	r3, [r7, #16]
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	e7fd      	b.n	8007664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007668:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <xPortStartScheduler+0x124>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a3f      	ldr	r2, [pc, #252]	@ (800776c <xPortStartScheduler+0x12c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d10b      	bne.n	800768a <xPortStartScheduler+0x4a>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60fb      	str	r3, [r7, #12]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800768a:	4b39      	ldr	r3, [pc, #228]	@ (8007770 <xPortStartScheduler+0x130>)
 800768c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	22ff      	movs	r2, #255	@ 0xff
 800769a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	4b31      	ldr	r3, [pc, #196]	@ (8007774 <xPortStartScheduler+0x134>)
 80076b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076b2:	4b31      	ldr	r3, [pc, #196]	@ (8007778 <xPortStartScheduler+0x138>)
 80076b4:	2207      	movs	r2, #7
 80076b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076b8:	e009      	b.n	80076ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80076ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007778 <xPortStartScheduler+0x138>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3b01      	subs	r3, #1
 80076c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007778 <xPortStartScheduler+0x138>)
 80076c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b80      	cmp	r3, #128	@ 0x80
 80076d8:	d0ef      	beq.n	80076ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076da:	4b27      	ldr	r3, [pc, #156]	@ (8007778 <xPortStartScheduler+0x138>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1c3 0307 	rsb	r3, r3, #7
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d00b      	beq.n	80076fe <xPortStartScheduler+0xbe>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60bb      	str	r3, [r7, #8]
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007778 <xPortStartScheduler+0x138>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	4a1c      	ldr	r2, [pc, #112]	@ (8007778 <xPortStartScheduler+0x138>)
 8007706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007708:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <xPortStartScheduler+0x138>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007710:	4a19      	ldr	r2, [pc, #100]	@ (8007778 <xPortStartScheduler+0x138>)
 8007712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800771c:	4b17      	ldr	r3, [pc, #92]	@ (800777c <xPortStartScheduler+0x13c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a16      	ldr	r2, [pc, #88]	@ (800777c <xPortStartScheduler+0x13c>)
 8007722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007728:	4b14      	ldr	r3, [pc, #80]	@ (800777c <xPortStartScheduler+0x13c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a13      	ldr	r2, [pc, #76]	@ (800777c <xPortStartScheduler+0x13c>)
 800772e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007734:	f000 f8da 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007738:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <xPortStartScheduler+0x140>)
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800773e:	f000 f8f9 	bl	8007934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007742:	4b10      	ldr	r3, [pc, #64]	@ (8007784 <xPortStartScheduler+0x144>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a0f      	ldr	r2, [pc, #60]	@ (8007784 <xPortStartScheduler+0x144>)
 8007748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800774c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800774e:	f7ff ff63 	bl	8007618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007752:	f7ff f83d 	bl	80067d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007756:	f7ff ff1b 	bl	8007590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	e000ed00 	.word	0xe000ed00
 8007768:	410fc271 	.word	0x410fc271
 800776c:	410fc270 	.word	0x410fc270
 8007770:	e000e400 	.word	0xe000e400
 8007774:	20001114 	.word	0x20001114
 8007778:	20001118 	.word	0x20001118
 800777c:	e000ed20 	.word	0xe000ed20
 8007780:	2000001c 	.word	0x2000001c
 8007784:	e000ef34 	.word	0xe000ef34

08007788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077a2:	4b10      	ldr	r3, [pc, #64]	@ (80077e4 <vPortEnterCritical+0x5c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3301      	adds	r3, #1
 80077a8:	4a0e      	ldr	r2, [pc, #56]	@ (80077e4 <vPortEnterCritical+0x5c>)
 80077aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077ac:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <vPortEnterCritical+0x5c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d110      	bne.n	80077d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077b4:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <vPortEnterCritical+0x60>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	603b      	str	r3, [r7, #0]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <vPortEnterCritical+0x4a>
	}
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	2000001c 	.word	0x2000001c
 80077e8:	e000ed04 	.word	0xe000ed04

080077ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077f2:	4b12      	ldr	r3, [pc, #72]	@ (800783c <vPortExitCritical+0x50>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <vPortExitCritical+0x26>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	607b      	str	r3, [r7, #4]
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	e7fd      	b.n	800780e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007812:	4b0a      	ldr	r3, [pc, #40]	@ (800783c <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3b01      	subs	r3, #1
 8007818:	4a08      	ldr	r2, [pc, #32]	@ (800783c <vPortExitCritical+0x50>)
 800781a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800781c:	4b07      	ldr	r3, [pc, #28]	@ (800783c <vPortExitCritical+0x50>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <vPortExitCritical+0x44>
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
}
 800782e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	2000001c 	.word	0x2000001c

08007840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007840:	f3ef 8009 	mrs	r0, PSP
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	4b15      	ldr	r3, [pc, #84]	@ (80078a0 <pxCurrentTCBConst>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f01e 0f10 	tst.w	lr, #16
 8007850:	bf08      	it	eq
 8007852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	6010      	str	r0, [r2, #0]
 800785c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007864:	f380 8811 	msr	BASEPRI, r0
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f7fe ffae 	bl	80067d0 <vTaskSwitchContext>
 8007874:	f04f 0000 	mov.w	r0, #0
 8007878:	f380 8811 	msr	BASEPRI, r0
 800787c:	bc09      	pop	{r0, r3}
 800787e:	6819      	ldr	r1, [r3, #0]
 8007880:	6808      	ldr	r0, [r1, #0]
 8007882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007886:	f01e 0f10 	tst.w	lr, #16
 800788a:	bf08      	it	eq
 800788c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007890:	f380 8809 	msr	PSP, r0
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst>:
 80078a0:	20000ae8 	.word	0x20000ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe fecb 	bl	800665c <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <xPortSysTickHandler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007928 <vPortSetupTimerInterrupt+0x3c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <vPortSetupTimerInterrupt+0x40>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a09      	ldr	r2, [pc, #36]	@ (8007930 <vPortSetupTimerInterrupt+0x44>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <vPortSetupTimerInterrupt+0x34>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	e000e010 	.word	0xe000e010
 8007924:	e000e018 	.word	0xe000e018
 8007928:	20000010 	.word	0x20000010
 800792c:	10624dd3 	.word	0x10624dd3
 8007930:	e000e014 	.word	0xe000e014

08007934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007944 <vPortEnableVFP+0x10>
 8007938:	6801      	ldr	r1, [r0, #0]
 800793a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800793e:	6001      	str	r1, [r0, #0]
 8007940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007942:	bf00      	nop
 8007944:	e000ed88 	.word	0xe000ed88

08007948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800794e:	f3ef 8305 	mrs	r3, IPSR
 8007952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d915      	bls.n	8007986 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800795a:	4a18      	ldr	r2, [pc, #96]	@ (80079bc <vPortValidateInterruptPriority+0x74>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007964:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <vPortValidateInterruptPriority+0x78>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	7afa      	ldrb	r2, [r7, #11]
 800796a:	429a      	cmp	r2, r3
 800796c:	d20b      	bcs.n	8007986 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007986:	4b0f      	ldr	r3, [pc, #60]	@ (80079c4 <vPortValidateInterruptPriority+0x7c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800798e:	4b0e      	ldr	r3, [pc, #56]	@ (80079c8 <vPortValidateInterruptPriority+0x80>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d90b      	bls.n	80079ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	603b      	str	r3, [r7, #0]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <vPortValidateInterruptPriority+0x62>
	}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	e000e3f0 	.word	0xe000e3f0
 80079c0:	20001114 	.word	0x20001114
 80079c4:	e000ed0c 	.word	0xe000ed0c
 80079c8:	20001118 	.word	0x20001118

080079cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	@ 0x28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079d8:	f7fe fd84 	bl	80064e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007b50 <pvPortMalloc+0x184>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079e4:	f000 f924 	bl	8007c30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b54 <pvPortMalloc+0x188>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f040 8095 	bne.w	8007b20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01e      	beq.n	8007a3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80079fc:	2208      	movs	r2, #8
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d015      	beq.n	8007a3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f023 0307 	bic.w	r3, r3, #7
 8007a14:	3308      	adds	r3, #8
 8007a16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <pvPortMalloc+0x6e>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	617b      	str	r3, [r7, #20]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d06f      	beq.n	8007b20 <pvPortMalloc+0x154>
 8007a40:	4b45      	ldr	r3, [pc, #276]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d86a      	bhi.n	8007b20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a4a:	4b44      	ldr	r3, [pc, #272]	@ (8007b5c <pvPortMalloc+0x190>)
 8007a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a4e:	4b43      	ldr	r3, [pc, #268]	@ (8007b5c <pvPortMalloc+0x190>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a54:	e004      	b.n	8007a60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d903      	bls.n	8007a72 <pvPortMalloc+0xa6>
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f1      	bne.n	8007a56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a72:	4b37      	ldr	r3, [pc, #220]	@ (8007b50 <pvPortMalloc+0x184>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d051      	beq.n	8007b20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2208      	movs	r2, #8
 8007a82:	4413      	add	r3, r2
 8007a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	1ad2      	subs	r2, r2, r3
 8007a96:	2308      	movs	r3, #8
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d920      	bls.n	8007ae0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ada:	69b8      	ldr	r0, [r7, #24]
 8007adc:	f000 f90a 	bl	8007cf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	4a1b      	ldr	r2, [pc, #108]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007aec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007aee:	4b1a      	ldr	r3, [pc, #104]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b60 <pvPortMalloc+0x194>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d203      	bcs.n	8007b02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007afa:	4b17      	ldr	r3, [pc, #92]	@ (8007b58 <pvPortMalloc+0x18c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a18      	ldr	r2, [pc, #96]	@ (8007b60 <pvPortMalloc+0x194>)
 8007b00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b13      	ldr	r3, [pc, #76]	@ (8007b54 <pvPortMalloc+0x188>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b16:	4b13      	ldr	r3, [pc, #76]	@ (8007b64 <pvPortMalloc+0x198>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	4a11      	ldr	r2, [pc, #68]	@ (8007b64 <pvPortMalloc+0x198>)
 8007b1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b20:	f7fe fcee 	bl	8006500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00b      	beq.n	8007b46 <pvPortMalloc+0x17a>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	60fb      	str	r3, [r7, #12]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <pvPortMalloc+0x176>
	return pvReturn;
 8007b46:	69fb      	ldr	r3, [r7, #28]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3728      	adds	r7, #40	@ 0x28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20004d24 	.word	0x20004d24
 8007b54:	20004d38 	.word	0x20004d38
 8007b58:	20004d28 	.word	0x20004d28
 8007b5c:	20004d1c 	.word	0x20004d1c
 8007b60:	20004d2c 	.word	0x20004d2c
 8007b64:	20004d30 	.word	0x20004d30

08007b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d04f      	beq.n	8007c1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b7a:	2308      	movs	r3, #8
 8007b7c:	425b      	negs	r3, r3
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4413      	add	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	4b25      	ldr	r3, [pc, #148]	@ (8007c24 <vPortFree+0xbc>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4013      	ands	r3, r2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <vPortFree+0x46>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60fb      	str	r3, [r7, #12]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <vPortFree+0x66>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60bb      	str	r3, [r7, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	e7fd      	b.n	8007bca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	4b14      	ldr	r3, [pc, #80]	@ (8007c24 <vPortFree+0xbc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01e      	beq.n	8007c1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d11a      	bne.n	8007c1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c24 <vPortFree+0xbc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	43db      	mvns	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bf4:	f7fe fc76 	bl	80064e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <vPortFree+0xc0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4413      	add	r3, r2
 8007c02:	4a09      	ldr	r2, [pc, #36]	@ (8007c28 <vPortFree+0xc0>)
 8007c04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f000 f874 	bl	8007cf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c0c:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <vPortFree+0xc4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3301      	adds	r3, #1
 8007c12:	4a06      	ldr	r2, [pc, #24]	@ (8007c2c <vPortFree+0xc4>)
 8007c14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c16:	f7fe fc73 	bl	8006500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c1a:	bf00      	nop
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20004d38 	.word	0x20004d38
 8007c28:	20004d28 	.word	0x20004d28
 8007c2c:	20004d34 	.word	0x20004d34

08007c30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c3c:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <prvHeapInit+0xac>)
 8007c3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00c      	beq.n	8007c64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	3307      	adds	r3, #7
 8007c4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0307 	bic.w	r3, r3, #7
 8007c56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007cdc <prvHeapInit+0xac>)
 8007c60:	4413      	add	r3, r2
 8007c62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce0 <prvHeapInit+0xb0>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce0 <prvHeapInit+0xb0>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c7c:	2208      	movs	r2, #8
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0307 	bic.w	r3, r3, #7
 8007c8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a15      	ldr	r2, [pc, #84]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007c90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c92:	4b14      	ldr	r3, [pc, #80]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2200      	movs	r2, #0
 8007c98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c9a:	4b12      	ldr	r3, [pc, #72]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	1ad2      	subs	r2, r2, r3
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce4 <prvHeapInit+0xb4>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ce8 <prvHeapInit+0xb8>)
 8007cbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4a09      	ldr	r2, [pc, #36]	@ (8007cec <prvHeapInit+0xbc>)
 8007cc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cc8:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <prvHeapInit+0xc0>)
 8007cca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cce:	601a      	str	r2, [r3, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	2000111c 	.word	0x2000111c
 8007ce0:	20004d1c 	.word	0x20004d1c
 8007ce4:	20004d24 	.word	0x20004d24
 8007ce8:	20004d2c 	.word	0x20004d2c
 8007cec:	20004d28 	.word	0x20004d28
 8007cf0:	20004d38 	.word	0x20004d38

08007cf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cfc:	4b28      	ldr	r3, [pc, #160]	@ (8007da0 <prvInsertBlockIntoFreeList+0xac>)
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e002      	b.n	8007d08 <prvInsertBlockIntoFreeList+0x14>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d8f7      	bhi.n	8007d02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d108      	bne.n	8007d36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	441a      	add	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d118      	bne.n	8007d7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	4b15      	ldr	r3, [pc, #84]	@ (8007da4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d00d      	beq.n	8007d72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	e008      	b.n	8007d84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <prvInsertBlockIntoFreeList+0xb0>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	e003      	b.n	8007d84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d002      	beq.n	8007d92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d92:	bf00      	nop
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20004d1c 	.word	0x20004d1c
 8007da4:	20004d24 	.word	0x20004d24

08007da8 <__cvt>:
 8007da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	ec57 6b10 	vmov	r6, r7, d0
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	460c      	mov	r4, r1
 8007db4:	4619      	mov	r1, r3
 8007db6:	463b      	mov	r3, r7
 8007db8:	bfbb      	ittet	lt
 8007dba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dbe:	461f      	movlt	r7, r3
 8007dc0:	2300      	movge	r3, #0
 8007dc2:	232d      	movlt	r3, #45	@ 0x2d
 8007dc4:	700b      	strb	r3, [r1, #0]
 8007dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007dcc:	4691      	mov	r9, r2
 8007dce:	f023 0820 	bic.w	r8, r3, #32
 8007dd2:	bfbc      	itt	lt
 8007dd4:	4632      	movlt	r2, r6
 8007dd6:	4616      	movlt	r6, r2
 8007dd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ddc:	d005      	beq.n	8007dea <__cvt+0x42>
 8007dde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007de2:	d100      	bne.n	8007de6 <__cvt+0x3e>
 8007de4:	3401      	adds	r4, #1
 8007de6:	2102      	movs	r1, #2
 8007de8:	e000      	b.n	8007dec <__cvt+0x44>
 8007dea:	2103      	movs	r1, #3
 8007dec:	ab03      	add	r3, sp, #12
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	ab02      	add	r3, sp, #8
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	ec47 6b10 	vmov	d0, r6, r7
 8007df8:	4653      	mov	r3, sl
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	f001 f8b8 	bl	8008f70 <_dtoa_r>
 8007e00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e04:	4605      	mov	r5, r0
 8007e06:	d119      	bne.n	8007e3c <__cvt+0x94>
 8007e08:	f019 0f01 	tst.w	r9, #1
 8007e0c:	d00e      	beq.n	8007e2c <__cvt+0x84>
 8007e0e:	eb00 0904 	add.w	r9, r0, r4
 8007e12:	2200      	movs	r2, #0
 8007e14:	2300      	movs	r3, #0
 8007e16:	4630      	mov	r0, r6
 8007e18:	4639      	mov	r1, r7
 8007e1a:	f7f8 fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e1e:	b108      	cbz	r0, 8007e24 <__cvt+0x7c>
 8007e20:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e24:	2230      	movs	r2, #48	@ 0x30
 8007e26:	9b03      	ldr	r3, [sp, #12]
 8007e28:	454b      	cmp	r3, r9
 8007e2a:	d31e      	bcc.n	8007e6a <__cvt+0xc2>
 8007e2c:	9b03      	ldr	r3, [sp, #12]
 8007e2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e30:	1b5b      	subs	r3, r3, r5
 8007e32:	4628      	mov	r0, r5
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	b004      	add	sp, #16
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e40:	eb00 0904 	add.w	r9, r0, r4
 8007e44:	d1e5      	bne.n	8007e12 <__cvt+0x6a>
 8007e46:	7803      	ldrb	r3, [r0, #0]
 8007e48:	2b30      	cmp	r3, #48	@ 0x30
 8007e4a:	d10a      	bne.n	8007e62 <__cvt+0xba>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e58:	b918      	cbnz	r0, 8007e62 <__cvt+0xba>
 8007e5a:	f1c4 0401 	rsb	r4, r4, #1
 8007e5e:	f8ca 4000 	str.w	r4, [sl]
 8007e62:	f8da 3000 	ldr.w	r3, [sl]
 8007e66:	4499      	add	r9, r3
 8007e68:	e7d3      	b.n	8007e12 <__cvt+0x6a>
 8007e6a:	1c59      	adds	r1, r3, #1
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e7d9      	b.n	8007e26 <__cvt+0x7e>

08007e72 <__exponent>:
 8007e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e74:	2900      	cmp	r1, #0
 8007e76:	bfba      	itte	lt
 8007e78:	4249      	neglt	r1, r1
 8007e7a:	232d      	movlt	r3, #45	@ 0x2d
 8007e7c:	232b      	movge	r3, #43	@ 0x2b
 8007e7e:	2909      	cmp	r1, #9
 8007e80:	7002      	strb	r2, [r0, #0]
 8007e82:	7043      	strb	r3, [r0, #1]
 8007e84:	dd29      	ble.n	8007eda <__exponent+0x68>
 8007e86:	f10d 0307 	add.w	r3, sp, #7
 8007e8a:	461d      	mov	r5, r3
 8007e8c:	270a      	movs	r7, #10
 8007e8e:	461a      	mov	r2, r3
 8007e90:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e94:	fb07 1416 	mls	r4, r7, r6, r1
 8007e98:	3430      	adds	r4, #48	@ 0x30
 8007e9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	2c63      	cmp	r4, #99	@ 0x63
 8007ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	dcf1      	bgt.n	8007e8e <__exponent+0x1c>
 8007eaa:	3130      	adds	r1, #48	@ 0x30
 8007eac:	1e94      	subs	r4, r2, #2
 8007eae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007eb2:	1c41      	adds	r1, r0, #1
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	42ab      	cmp	r3, r5
 8007eb8:	d30a      	bcc.n	8007ed0 <__exponent+0x5e>
 8007eba:	f10d 0309 	add.w	r3, sp, #9
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	42ac      	cmp	r4, r5
 8007ec2:	bf88      	it	hi
 8007ec4:	2300      	movhi	r3, #0
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	4403      	add	r3, r0
 8007eca:	1a18      	subs	r0, r3, r0
 8007ecc:	b003      	add	sp, #12
 8007ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ed4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ed8:	e7ed      	b.n	8007eb6 <__exponent+0x44>
 8007eda:	2330      	movs	r3, #48	@ 0x30
 8007edc:	3130      	adds	r1, #48	@ 0x30
 8007ede:	7083      	strb	r3, [r0, #2]
 8007ee0:	70c1      	strb	r1, [r0, #3]
 8007ee2:	1d03      	adds	r3, r0, #4
 8007ee4:	e7f1      	b.n	8007eca <__exponent+0x58>
	...

08007ee8 <_printf_float>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	b08d      	sub	sp, #52	@ 0x34
 8007eee:	460c      	mov	r4, r1
 8007ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	461f      	mov	r7, r3
 8007ef8:	4605      	mov	r5, r0
 8007efa:	f000 ff23 	bl	8008d44 <_localeconv_r>
 8007efe:	6803      	ldr	r3, [r0, #0]
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 f9bc 	bl	8000280 <strlen>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f10:	9005      	str	r0, [sp, #20]
 8007f12:	3307      	adds	r3, #7
 8007f14:	f023 0307 	bic.w	r3, r3, #7
 8007f18:	f103 0208 	add.w	r2, r3, #8
 8007f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f20:	f8d4 b000 	ldr.w	fp, [r4]
 8007f24:	f8c8 2000 	str.w	r2, [r8]
 8007f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80081b0 <_printf_float+0x2c8>)
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295
 8007f44:	f7f8 fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8007f48:	bb70      	cbnz	r0, 8007fa8 <_printf_float+0xc0>
 8007f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f4e:	4b98      	ldr	r3, [pc, #608]	@ (80081b0 <_printf_float+0x2c8>)
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	f7f8 fdd4 	bl	8000b00 <__aeabi_dcmple>
 8007f58:	bb30      	cbnz	r0, 8007fa8 <_printf_float+0xc0>
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	f7f8 fdc3 	bl	8000aec <__aeabi_dcmplt>
 8007f66:	b110      	cbz	r0, 8007f6e <_printf_float+0x86>
 8007f68:	232d      	movs	r3, #45	@ 0x2d
 8007f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f6e:	4a91      	ldr	r2, [pc, #580]	@ (80081b4 <_printf_float+0x2cc>)
 8007f70:	4b91      	ldr	r3, [pc, #580]	@ (80081b8 <_printf_float+0x2d0>)
 8007f72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f76:	bf94      	ite	ls
 8007f78:	4690      	movls	r8, r2
 8007f7a:	4698      	movhi	r8, r3
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	f02b 0304 	bic.w	r3, fp, #4
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	f04f 0900 	mov.w	r9, #0
 8007f8a:	9700      	str	r7, [sp, #0]
 8007f8c:	4633      	mov	r3, r6
 8007f8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f9d2 	bl	800833c <_printf_common>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f040 808d 	bne.w	80080b8 <_printf_float+0x1d0>
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	b00d      	add	sp, #52	@ 0x34
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8007fb4:	b140      	cbz	r0, 8007fc8 <_printf_float+0xe0>
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfbc      	itt	lt
 8007fbc:	232d      	movlt	r3, #45	@ 0x2d
 8007fbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80081bc <_printf_float+0x2d4>)
 8007fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80081c0 <_printf_float+0x2d8>)
 8007fc6:	e7d4      	b.n	8007f72 <_printf_float+0x8a>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007fce:	9206      	str	r2, [sp, #24]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	d13b      	bne.n	800804c <_printf_float+0x164>
 8007fd4:	2306      	movs	r3, #6
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007fe4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	6861      	ldr	r1, [r4, #4]
 8007fee:	ec49 8b10 	vmov	d0, r8, r9
 8007ff2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7ff fed6 	bl	8007da8 <__cvt>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008000:	2b47      	cmp	r3, #71	@ 0x47
 8008002:	4680      	mov	r8, r0
 8008004:	d129      	bne.n	800805a <_printf_float+0x172>
 8008006:	1cc8      	adds	r0, r1, #3
 8008008:	db02      	blt.n	8008010 <_printf_float+0x128>
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	4299      	cmp	r1, r3
 800800e:	dd41      	ble.n	8008094 <_printf_float+0x1ac>
 8008010:	f1aa 0a02 	sub.w	sl, sl, #2
 8008014:	fa5f fa8a 	uxtb.w	sl, sl
 8008018:	3901      	subs	r1, #1
 800801a:	4652      	mov	r2, sl
 800801c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008020:	9109      	str	r1, [sp, #36]	@ 0x24
 8008022:	f7ff ff26 	bl	8007e72 <__exponent>
 8008026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008028:	1813      	adds	r3, r2, r0
 800802a:	2a01      	cmp	r2, #1
 800802c:	4681      	mov	r9, r0
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	dc02      	bgt.n	8008038 <_printf_float+0x150>
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	07d2      	lsls	r2, r2, #31
 8008036:	d501      	bpl.n	800803c <_printf_float+0x154>
 8008038:	3301      	adds	r3, #1
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0a2      	beq.n	8007f8a <_printf_float+0xa2>
 8008044:	232d      	movs	r3, #45	@ 0x2d
 8008046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800804a:	e79e      	b.n	8007f8a <_printf_float+0xa2>
 800804c:	9a06      	ldr	r2, [sp, #24]
 800804e:	2a47      	cmp	r2, #71	@ 0x47
 8008050:	d1c2      	bne.n	8007fd8 <_printf_float+0xf0>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1c0      	bne.n	8007fd8 <_printf_float+0xf0>
 8008056:	2301      	movs	r3, #1
 8008058:	e7bd      	b.n	8007fd6 <_printf_float+0xee>
 800805a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800805e:	d9db      	bls.n	8008018 <_printf_float+0x130>
 8008060:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008064:	d118      	bne.n	8008098 <_printf_float+0x1b0>
 8008066:	2900      	cmp	r1, #0
 8008068:	6863      	ldr	r3, [r4, #4]
 800806a:	dd0b      	ble.n	8008084 <_printf_float+0x19c>
 800806c:	6121      	str	r1, [r4, #16]
 800806e:	b913      	cbnz	r3, 8008076 <_printf_float+0x18e>
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	07d0      	lsls	r0, r2, #31
 8008074:	d502      	bpl.n	800807c <_printf_float+0x194>
 8008076:	3301      	adds	r3, #1
 8008078:	440b      	add	r3, r1
 800807a:	6123      	str	r3, [r4, #16]
 800807c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800807e:	f04f 0900 	mov.w	r9, #0
 8008082:	e7db      	b.n	800803c <_printf_float+0x154>
 8008084:	b913      	cbnz	r3, 800808c <_printf_float+0x1a4>
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	07d2      	lsls	r2, r2, #31
 800808a:	d501      	bpl.n	8008090 <_printf_float+0x1a8>
 800808c:	3302      	adds	r3, #2
 800808e:	e7f4      	b.n	800807a <_printf_float+0x192>
 8008090:	2301      	movs	r3, #1
 8008092:	e7f2      	b.n	800807a <_printf_float+0x192>
 8008094:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809a:	4299      	cmp	r1, r3
 800809c:	db05      	blt.n	80080aa <_printf_float+0x1c2>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6121      	str	r1, [r4, #16]
 80080a2:	07d8      	lsls	r0, r3, #31
 80080a4:	d5ea      	bpl.n	800807c <_printf_float+0x194>
 80080a6:	1c4b      	adds	r3, r1, #1
 80080a8:	e7e7      	b.n	800807a <_printf_float+0x192>
 80080aa:	2900      	cmp	r1, #0
 80080ac:	bfd4      	ite	le
 80080ae:	f1c1 0202 	rsble	r2, r1, #2
 80080b2:	2201      	movgt	r2, #1
 80080b4:	4413      	add	r3, r2
 80080b6:	e7e0      	b.n	800807a <_printf_float+0x192>
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	055a      	lsls	r2, r3, #21
 80080bc:	d407      	bmi.n	80080ce <_printf_float+0x1e6>
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	4642      	mov	r2, r8
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	d12b      	bne.n	8008124 <_printf_float+0x23c>
 80080cc:	e767      	b.n	8007f9e <_printf_float+0xb6>
 80080ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080d2:	f240 80dd 	bls.w	8008290 <_printf_float+0x3a8>
 80080d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080da:	2200      	movs	r2, #0
 80080dc:	2300      	movs	r3, #0
 80080de:	f7f8 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d033      	beq.n	800814e <_printf_float+0x266>
 80080e6:	4a37      	ldr	r2, [pc, #220]	@ (80081c4 <_printf_float+0x2dc>)
 80080e8:	2301      	movs	r3, #1
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f af54 	beq.w	8007f9e <_printf_float+0xb6>
 80080f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80080fa:	4543      	cmp	r3, r8
 80080fc:	db02      	blt.n	8008104 <_printf_float+0x21c>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	07d8      	lsls	r0, r3, #31
 8008102:	d50f      	bpl.n	8008124 <_printf_float+0x23c>
 8008104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f af45 	beq.w	8007f9e <_printf_float+0xb6>
 8008114:	f04f 0900 	mov.w	r9, #0
 8008118:	f108 38ff 	add.w	r8, r8, #4294967295
 800811c:	f104 0a1a 	add.w	sl, r4, #26
 8008120:	45c8      	cmp	r8, r9
 8008122:	dc09      	bgt.n	8008138 <_printf_float+0x250>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	079b      	lsls	r3, r3, #30
 8008128:	f100 8103 	bmi.w	8008332 <_printf_float+0x44a>
 800812c:	68e0      	ldr	r0, [r4, #12]
 800812e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008130:	4298      	cmp	r0, r3
 8008132:	bfb8      	it	lt
 8008134:	4618      	movlt	r0, r3
 8008136:	e734      	b.n	8007fa2 <_printf_float+0xba>
 8008138:	2301      	movs	r3, #1
 800813a:	4652      	mov	r2, sl
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	f43f af2b 	beq.w	8007f9e <_printf_float+0xb6>
 8008148:	f109 0901 	add.w	r9, r9, #1
 800814c:	e7e8      	b.n	8008120 <_printf_float+0x238>
 800814e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc39      	bgt.n	80081c8 <_printf_float+0x2e0>
 8008154:	4a1b      	ldr	r2, [pc, #108]	@ (80081c4 <_printf_float+0x2dc>)
 8008156:	2301      	movs	r3, #1
 8008158:	4631      	mov	r1, r6
 800815a:	4628      	mov	r0, r5
 800815c:	47b8      	blx	r7
 800815e:	3001      	adds	r0, #1
 8008160:	f43f af1d 	beq.w	8007f9e <_printf_float+0xb6>
 8008164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008168:	ea59 0303 	orrs.w	r3, r9, r3
 800816c:	d102      	bne.n	8008174 <_printf_float+0x28c>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	07d9      	lsls	r1, r3, #31
 8008172:	d5d7      	bpl.n	8008124 <_printf_float+0x23c>
 8008174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af0d 	beq.w	8007f9e <_printf_float+0xb6>
 8008184:	f04f 0a00 	mov.w	sl, #0
 8008188:	f104 0b1a 	add.w	fp, r4, #26
 800818c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818e:	425b      	negs	r3, r3
 8008190:	4553      	cmp	r3, sl
 8008192:	dc01      	bgt.n	8008198 <_printf_float+0x2b0>
 8008194:	464b      	mov	r3, r9
 8008196:	e793      	b.n	80080c0 <_printf_float+0x1d8>
 8008198:	2301      	movs	r3, #1
 800819a:	465a      	mov	r2, fp
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f aefb 	beq.w	8007f9e <_printf_float+0xb6>
 80081a8:	f10a 0a01 	add.w	sl, sl, #1
 80081ac:	e7ee      	b.n	800818c <_printf_float+0x2a4>
 80081ae:	bf00      	nop
 80081b0:	7fefffff 	.word	0x7fefffff
 80081b4:	0800c708 	.word	0x0800c708
 80081b8:	0800c70c 	.word	0x0800c70c
 80081bc:	0800c710 	.word	0x0800c710
 80081c0:	0800c714 	.word	0x0800c714
 80081c4:	0800c718 	.word	0x0800c718
 80081c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081ce:	4553      	cmp	r3, sl
 80081d0:	bfa8      	it	ge
 80081d2:	4653      	movge	r3, sl
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	4699      	mov	r9, r3
 80081d8:	dc36      	bgt.n	8008248 <_printf_float+0x360>
 80081da:	f04f 0b00 	mov.w	fp, #0
 80081de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081e2:	f104 021a 	add.w	r2, r4, #26
 80081e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081e8:	9306      	str	r3, [sp, #24]
 80081ea:	eba3 0309 	sub.w	r3, r3, r9
 80081ee:	455b      	cmp	r3, fp
 80081f0:	dc31      	bgt.n	8008256 <_printf_float+0x36e>
 80081f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f4:	459a      	cmp	sl, r3
 80081f6:	dc3a      	bgt.n	800826e <_printf_float+0x386>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	07da      	lsls	r2, r3, #31
 80081fc:	d437      	bmi.n	800826e <_printf_float+0x386>
 80081fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008200:	ebaa 0903 	sub.w	r9, sl, r3
 8008204:	9b06      	ldr	r3, [sp, #24]
 8008206:	ebaa 0303 	sub.w	r3, sl, r3
 800820a:	4599      	cmp	r9, r3
 800820c:	bfa8      	it	ge
 800820e:	4699      	movge	r9, r3
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	dc33      	bgt.n	800827e <_printf_float+0x396>
 8008216:	f04f 0800 	mov.w	r8, #0
 800821a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800821e:	f104 0b1a 	add.w	fp, r4, #26
 8008222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008224:	ebaa 0303 	sub.w	r3, sl, r3
 8008228:	eba3 0309 	sub.w	r3, r3, r9
 800822c:	4543      	cmp	r3, r8
 800822e:	f77f af79 	ble.w	8008124 <_printf_float+0x23c>
 8008232:	2301      	movs	r3, #1
 8008234:	465a      	mov	r2, fp
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f aeae 	beq.w	8007f9e <_printf_float+0xb6>
 8008242:	f108 0801 	add.w	r8, r8, #1
 8008246:	e7ec      	b.n	8008222 <_printf_float+0x33a>
 8008248:	4642      	mov	r2, r8
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	d1c2      	bne.n	80081da <_printf_float+0x2f2>
 8008254:	e6a3      	b.n	8007f9e <_printf_float+0xb6>
 8008256:	2301      	movs	r3, #1
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	9206      	str	r2, [sp, #24]
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f ae9c 	beq.w	8007f9e <_printf_float+0xb6>
 8008266:	9a06      	ldr	r2, [sp, #24]
 8008268:	f10b 0b01 	add.w	fp, fp, #1
 800826c:	e7bb      	b.n	80081e6 <_printf_float+0x2fe>
 800826e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	d1c0      	bne.n	80081fe <_printf_float+0x316>
 800827c:	e68f      	b.n	8007f9e <_printf_float+0xb6>
 800827e:	9a06      	ldr	r2, [sp, #24]
 8008280:	464b      	mov	r3, r9
 8008282:	4442      	add	r2, r8
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	d1c3      	bne.n	8008216 <_printf_float+0x32e>
 800828e:	e686      	b.n	8007f9e <_printf_float+0xb6>
 8008290:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008294:	f1ba 0f01 	cmp.w	sl, #1
 8008298:	dc01      	bgt.n	800829e <_printf_float+0x3b6>
 800829a:	07db      	lsls	r3, r3, #31
 800829c:	d536      	bpl.n	800830c <_printf_float+0x424>
 800829e:	2301      	movs	r3, #1
 80082a0:	4642      	mov	r2, r8
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f ae78 	beq.w	8007f9e <_printf_float+0xb6>
 80082ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	f43f ae70 	beq.w	8007f9e <_printf_float+0xb6>
 80082be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082c2:	2200      	movs	r2, #0
 80082c4:	2300      	movs	r3, #0
 80082c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ca:	f7f8 fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ce:	b9c0      	cbnz	r0, 8008302 <_printf_float+0x41a>
 80082d0:	4653      	mov	r3, sl
 80082d2:	f108 0201 	add.w	r2, r8, #1
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	d10c      	bne.n	80082fa <_printf_float+0x412>
 80082e0:	e65d      	b.n	8007f9e <_printf_float+0xb6>
 80082e2:	2301      	movs	r3, #1
 80082e4:	465a      	mov	r2, fp
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f ae56 	beq.w	8007f9e <_printf_float+0xb6>
 80082f2:	f108 0801 	add.w	r8, r8, #1
 80082f6:	45d0      	cmp	r8, sl
 80082f8:	dbf3      	blt.n	80082e2 <_printf_float+0x3fa>
 80082fa:	464b      	mov	r3, r9
 80082fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008300:	e6df      	b.n	80080c2 <_printf_float+0x1da>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	f104 0b1a 	add.w	fp, r4, #26
 800830a:	e7f4      	b.n	80082f6 <_printf_float+0x40e>
 800830c:	2301      	movs	r3, #1
 800830e:	4642      	mov	r2, r8
 8008310:	e7e1      	b.n	80082d6 <_printf_float+0x3ee>
 8008312:	2301      	movs	r3, #1
 8008314:	464a      	mov	r2, r9
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	f43f ae3e 	beq.w	8007f9e <_printf_float+0xb6>
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	4543      	cmp	r3, r8
 800832e:	dcf0      	bgt.n	8008312 <_printf_float+0x42a>
 8008330:	e6fc      	b.n	800812c <_printf_float+0x244>
 8008332:	f04f 0800 	mov.w	r8, #0
 8008336:	f104 0919 	add.w	r9, r4, #25
 800833a:	e7f4      	b.n	8008326 <_printf_float+0x43e>

0800833c <_printf_common>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	4616      	mov	r6, r2
 8008342:	4698      	mov	r8, r3
 8008344:	688a      	ldr	r2, [r1, #8]
 8008346:	690b      	ldr	r3, [r1, #16]
 8008348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800834c:	4293      	cmp	r3, r2
 800834e:	bfb8      	it	lt
 8008350:	4613      	movlt	r3, r2
 8008352:	6033      	str	r3, [r6, #0]
 8008354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008358:	4607      	mov	r7, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b10a      	cbz	r2, 8008362 <_printf_common+0x26>
 800835e:	3301      	adds	r3, #1
 8008360:	6033      	str	r3, [r6, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	0699      	lsls	r1, r3, #26
 8008366:	bf42      	ittt	mi
 8008368:	6833      	ldrmi	r3, [r6, #0]
 800836a:	3302      	addmi	r3, #2
 800836c:	6033      	strmi	r3, [r6, #0]
 800836e:	6825      	ldr	r5, [r4, #0]
 8008370:	f015 0506 	ands.w	r5, r5, #6
 8008374:	d106      	bne.n	8008384 <_printf_common+0x48>
 8008376:	f104 0a19 	add.w	sl, r4, #25
 800837a:	68e3      	ldr	r3, [r4, #12]
 800837c:	6832      	ldr	r2, [r6, #0]
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	42ab      	cmp	r3, r5
 8008382:	dc26      	bgt.n	80083d2 <_printf_common+0x96>
 8008384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	3b00      	subs	r3, #0
 800838c:	bf18      	it	ne
 800838e:	2301      	movne	r3, #1
 8008390:	0692      	lsls	r2, r2, #26
 8008392:	d42b      	bmi.n	80083ec <_printf_common+0xb0>
 8008394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008398:	4641      	mov	r1, r8
 800839a:	4638      	mov	r0, r7
 800839c:	47c8      	blx	r9
 800839e:	3001      	adds	r0, #1
 80083a0:	d01e      	beq.n	80083e0 <_printf_common+0xa4>
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	f003 0306 	and.w	r3, r3, #6
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	bf02      	ittt	eq
 80083ae:	68e5      	ldreq	r5, [r4, #12]
 80083b0:	6833      	ldreq	r3, [r6, #0]
 80083b2:	1aed      	subeq	r5, r5, r3
 80083b4:	68a3      	ldr	r3, [r4, #8]
 80083b6:	bf0c      	ite	eq
 80083b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083bc:	2500      	movne	r5, #0
 80083be:	4293      	cmp	r3, r2
 80083c0:	bfc4      	itt	gt
 80083c2:	1a9b      	subgt	r3, r3, r2
 80083c4:	18ed      	addgt	r5, r5, r3
 80083c6:	2600      	movs	r6, #0
 80083c8:	341a      	adds	r4, #26
 80083ca:	42b5      	cmp	r5, r6
 80083cc:	d11a      	bne.n	8008404 <_printf_common+0xc8>
 80083ce:	2000      	movs	r0, #0
 80083d0:	e008      	b.n	80083e4 <_printf_common+0xa8>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4652      	mov	r2, sl
 80083d6:	4641      	mov	r1, r8
 80083d8:	4638      	mov	r0, r7
 80083da:	47c8      	blx	r9
 80083dc:	3001      	adds	r0, #1
 80083de:	d103      	bne.n	80083e8 <_printf_common+0xac>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e8:	3501      	adds	r5, #1
 80083ea:	e7c6      	b.n	800837a <_printf_common+0x3e>
 80083ec:	18e1      	adds	r1, r4, r3
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	2030      	movs	r0, #48	@ 0x30
 80083f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083f6:	4422      	add	r2, r4
 80083f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008400:	3302      	adds	r3, #2
 8008402:	e7c7      	b.n	8008394 <_printf_common+0x58>
 8008404:	2301      	movs	r3, #1
 8008406:	4622      	mov	r2, r4
 8008408:	4641      	mov	r1, r8
 800840a:	4638      	mov	r0, r7
 800840c:	47c8      	blx	r9
 800840e:	3001      	adds	r0, #1
 8008410:	d0e6      	beq.n	80083e0 <_printf_common+0xa4>
 8008412:	3601      	adds	r6, #1
 8008414:	e7d9      	b.n	80083ca <_printf_common+0x8e>
	...

08008418 <_printf_i>:
 8008418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	7e0f      	ldrb	r7, [r1, #24]
 800841e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008420:	2f78      	cmp	r7, #120	@ 0x78
 8008422:	4691      	mov	r9, r2
 8008424:	4680      	mov	r8, r0
 8008426:	460c      	mov	r4, r1
 8008428:	469a      	mov	sl, r3
 800842a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800842e:	d807      	bhi.n	8008440 <_printf_i+0x28>
 8008430:	2f62      	cmp	r7, #98	@ 0x62
 8008432:	d80a      	bhi.n	800844a <_printf_i+0x32>
 8008434:	2f00      	cmp	r7, #0
 8008436:	f000 80d2 	beq.w	80085de <_printf_i+0x1c6>
 800843a:	2f58      	cmp	r7, #88	@ 0x58
 800843c:	f000 80b9 	beq.w	80085b2 <_printf_i+0x19a>
 8008440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008448:	e03a      	b.n	80084c0 <_printf_i+0xa8>
 800844a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800844e:	2b15      	cmp	r3, #21
 8008450:	d8f6      	bhi.n	8008440 <_printf_i+0x28>
 8008452:	a101      	add	r1, pc, #4	@ (adr r1, 8008458 <_printf_i+0x40>)
 8008454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084c5 	.word	0x080084c5
 8008460:	08008441 	.word	0x08008441
 8008464:	08008441 	.word	0x08008441
 8008468:	08008441 	.word	0x08008441
 800846c:	08008441 	.word	0x08008441
 8008470:	080084c5 	.word	0x080084c5
 8008474:	08008441 	.word	0x08008441
 8008478:	08008441 	.word	0x08008441
 800847c:	08008441 	.word	0x08008441
 8008480:	08008441 	.word	0x08008441
 8008484:	080085c5 	.word	0x080085c5
 8008488:	080084ef 	.word	0x080084ef
 800848c:	0800857f 	.word	0x0800857f
 8008490:	08008441 	.word	0x08008441
 8008494:	08008441 	.word	0x08008441
 8008498:	080085e7 	.word	0x080085e7
 800849c:	08008441 	.word	0x08008441
 80084a0:	080084ef 	.word	0x080084ef
 80084a4:	08008441 	.word	0x08008441
 80084a8:	08008441 	.word	0x08008441
 80084ac:	08008587 	.word	0x08008587
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	1d1a      	adds	r2, r3, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6032      	str	r2, [r6, #0]
 80084b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084c0:	2301      	movs	r3, #1
 80084c2:	e09d      	b.n	8008600 <_printf_i+0x1e8>
 80084c4:	6833      	ldr	r3, [r6, #0]
 80084c6:	6820      	ldr	r0, [r4, #0]
 80084c8:	1d19      	adds	r1, r3, #4
 80084ca:	6031      	str	r1, [r6, #0]
 80084cc:	0606      	lsls	r6, r0, #24
 80084ce:	d501      	bpl.n	80084d4 <_printf_i+0xbc>
 80084d0:	681d      	ldr	r5, [r3, #0]
 80084d2:	e003      	b.n	80084dc <_printf_i+0xc4>
 80084d4:	0645      	lsls	r5, r0, #25
 80084d6:	d5fb      	bpl.n	80084d0 <_printf_i+0xb8>
 80084d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084dc:	2d00      	cmp	r5, #0
 80084de:	da03      	bge.n	80084e8 <_printf_i+0xd0>
 80084e0:	232d      	movs	r3, #45	@ 0x2d
 80084e2:	426d      	negs	r5, r5
 80084e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e8:	4859      	ldr	r0, [pc, #356]	@ (8008650 <_printf_i+0x238>)
 80084ea:	230a      	movs	r3, #10
 80084ec:	e011      	b.n	8008512 <_printf_i+0xfa>
 80084ee:	6821      	ldr	r1, [r4, #0]
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	0608      	lsls	r0, r1, #24
 80084f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084f8:	d402      	bmi.n	8008500 <_printf_i+0xe8>
 80084fa:	0649      	lsls	r1, r1, #25
 80084fc:	bf48      	it	mi
 80084fe:	b2ad      	uxthmi	r5, r5
 8008500:	2f6f      	cmp	r7, #111	@ 0x6f
 8008502:	4853      	ldr	r0, [pc, #332]	@ (8008650 <_printf_i+0x238>)
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	bf14      	ite	ne
 8008508:	230a      	movne	r3, #10
 800850a:	2308      	moveq	r3, #8
 800850c:	2100      	movs	r1, #0
 800850e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008512:	6866      	ldr	r6, [r4, #4]
 8008514:	60a6      	str	r6, [r4, #8]
 8008516:	2e00      	cmp	r6, #0
 8008518:	bfa2      	ittt	ge
 800851a:	6821      	ldrge	r1, [r4, #0]
 800851c:	f021 0104 	bicge.w	r1, r1, #4
 8008520:	6021      	strge	r1, [r4, #0]
 8008522:	b90d      	cbnz	r5, 8008528 <_printf_i+0x110>
 8008524:	2e00      	cmp	r6, #0
 8008526:	d04b      	beq.n	80085c0 <_printf_i+0x1a8>
 8008528:	4616      	mov	r6, r2
 800852a:	fbb5 f1f3 	udiv	r1, r5, r3
 800852e:	fb03 5711 	mls	r7, r3, r1, r5
 8008532:	5dc7      	ldrb	r7, [r0, r7]
 8008534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008538:	462f      	mov	r7, r5
 800853a:	42bb      	cmp	r3, r7
 800853c:	460d      	mov	r5, r1
 800853e:	d9f4      	bls.n	800852a <_printf_i+0x112>
 8008540:	2b08      	cmp	r3, #8
 8008542:	d10b      	bne.n	800855c <_printf_i+0x144>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	07df      	lsls	r7, r3, #31
 8008548:	d508      	bpl.n	800855c <_printf_i+0x144>
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	6861      	ldr	r1, [r4, #4]
 800854e:	4299      	cmp	r1, r3
 8008550:	bfde      	ittt	le
 8008552:	2330      	movle	r3, #48	@ 0x30
 8008554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800855c:	1b92      	subs	r2, r2, r6
 800855e:	6122      	str	r2, [r4, #16]
 8008560:	f8cd a000 	str.w	sl, [sp]
 8008564:	464b      	mov	r3, r9
 8008566:	aa03      	add	r2, sp, #12
 8008568:	4621      	mov	r1, r4
 800856a:	4640      	mov	r0, r8
 800856c:	f7ff fee6 	bl	800833c <_printf_common>
 8008570:	3001      	adds	r0, #1
 8008572:	d14a      	bne.n	800860a <_printf_i+0x1f2>
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	b004      	add	sp, #16
 800857a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	f043 0320 	orr.w	r3, r3, #32
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	4833      	ldr	r0, [pc, #204]	@ (8008654 <_printf_i+0x23c>)
 8008588:	2778      	movs	r7, #120	@ 0x78
 800858a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	6831      	ldr	r1, [r6, #0]
 8008592:	061f      	lsls	r7, r3, #24
 8008594:	f851 5b04 	ldr.w	r5, [r1], #4
 8008598:	d402      	bmi.n	80085a0 <_printf_i+0x188>
 800859a:	065f      	lsls	r7, r3, #25
 800859c:	bf48      	it	mi
 800859e:	b2ad      	uxthmi	r5, r5
 80085a0:	6031      	str	r1, [r6, #0]
 80085a2:	07d9      	lsls	r1, r3, #31
 80085a4:	bf44      	itt	mi
 80085a6:	f043 0320 	orrmi.w	r3, r3, #32
 80085aa:	6023      	strmi	r3, [r4, #0]
 80085ac:	b11d      	cbz	r5, 80085b6 <_printf_i+0x19e>
 80085ae:	2310      	movs	r3, #16
 80085b0:	e7ac      	b.n	800850c <_printf_i+0xf4>
 80085b2:	4827      	ldr	r0, [pc, #156]	@ (8008650 <_printf_i+0x238>)
 80085b4:	e7e9      	b.n	800858a <_printf_i+0x172>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	f023 0320 	bic.w	r3, r3, #32
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	e7f6      	b.n	80085ae <_printf_i+0x196>
 80085c0:	4616      	mov	r6, r2
 80085c2:	e7bd      	b.n	8008540 <_printf_i+0x128>
 80085c4:	6833      	ldr	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	6961      	ldr	r1, [r4, #20]
 80085ca:	1d18      	adds	r0, r3, #4
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	062e      	lsls	r6, r5, #24
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	d501      	bpl.n	80085d8 <_printf_i+0x1c0>
 80085d4:	6019      	str	r1, [r3, #0]
 80085d6:	e002      	b.n	80085de <_printf_i+0x1c6>
 80085d8:	0668      	lsls	r0, r5, #25
 80085da:	d5fb      	bpl.n	80085d4 <_printf_i+0x1bc>
 80085dc:	8019      	strh	r1, [r3, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	6123      	str	r3, [r4, #16]
 80085e2:	4616      	mov	r6, r2
 80085e4:	e7bc      	b.n	8008560 <_printf_i+0x148>
 80085e6:	6833      	ldr	r3, [r6, #0]
 80085e8:	1d1a      	adds	r2, r3, #4
 80085ea:	6032      	str	r2, [r6, #0]
 80085ec:	681e      	ldr	r6, [r3, #0]
 80085ee:	6862      	ldr	r2, [r4, #4]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7f7 fdf4 	bl	80001e0 <memchr>
 80085f8:	b108      	cbz	r0, 80085fe <_printf_i+0x1e6>
 80085fa:	1b80      	subs	r0, r0, r6
 80085fc:	6060      	str	r0, [r4, #4]
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	6123      	str	r3, [r4, #16]
 8008602:	2300      	movs	r3, #0
 8008604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008608:	e7aa      	b.n	8008560 <_printf_i+0x148>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	4632      	mov	r2, r6
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	47d0      	blx	sl
 8008614:	3001      	adds	r0, #1
 8008616:	d0ad      	beq.n	8008574 <_printf_i+0x15c>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	079b      	lsls	r3, r3, #30
 800861c:	d413      	bmi.n	8008646 <_printf_i+0x22e>
 800861e:	68e0      	ldr	r0, [r4, #12]
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	4298      	cmp	r0, r3
 8008624:	bfb8      	it	lt
 8008626:	4618      	movlt	r0, r3
 8008628:	e7a6      	b.n	8008578 <_printf_i+0x160>
 800862a:	2301      	movs	r3, #1
 800862c:	4632      	mov	r2, r6
 800862e:	4649      	mov	r1, r9
 8008630:	4640      	mov	r0, r8
 8008632:	47d0      	blx	sl
 8008634:	3001      	adds	r0, #1
 8008636:	d09d      	beq.n	8008574 <_printf_i+0x15c>
 8008638:	3501      	adds	r5, #1
 800863a:	68e3      	ldr	r3, [r4, #12]
 800863c:	9903      	ldr	r1, [sp, #12]
 800863e:	1a5b      	subs	r3, r3, r1
 8008640:	42ab      	cmp	r3, r5
 8008642:	dcf2      	bgt.n	800862a <_printf_i+0x212>
 8008644:	e7eb      	b.n	800861e <_printf_i+0x206>
 8008646:	2500      	movs	r5, #0
 8008648:	f104 0619 	add.w	r6, r4, #25
 800864c:	e7f5      	b.n	800863a <_printf_i+0x222>
 800864e:	bf00      	nop
 8008650:	0800c71a 	.word	0x0800c71a
 8008654:	0800c72b 	.word	0x0800c72b

08008658 <_scanf_float>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	b087      	sub	sp, #28
 800865e:	4617      	mov	r7, r2
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	688b      	ldr	r3, [r1, #8]
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800866a:	bf81      	itttt	hi
 800866c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008670:	eb03 0b05 	addhi.w	fp, r3, r5
 8008674:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008678:	608b      	strhi	r3, [r1, #8]
 800867a:	680b      	ldr	r3, [r1, #0]
 800867c:	460a      	mov	r2, r1
 800867e:	f04f 0500 	mov.w	r5, #0
 8008682:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008686:	f842 3b1c 	str.w	r3, [r2], #28
 800868a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800868e:	4680      	mov	r8, r0
 8008690:	460c      	mov	r4, r1
 8008692:	bf98      	it	ls
 8008694:	f04f 0b00 	movls.w	fp, #0
 8008698:	9201      	str	r2, [sp, #4]
 800869a:	4616      	mov	r6, r2
 800869c:	46aa      	mov	sl, r5
 800869e:	46a9      	mov	r9, r5
 80086a0:	9502      	str	r5, [sp, #8]
 80086a2:	68a2      	ldr	r2, [r4, #8]
 80086a4:	b152      	cbz	r2, 80086bc <_scanf_float+0x64>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80086ac:	d864      	bhi.n	8008778 <_scanf_float+0x120>
 80086ae:	2b40      	cmp	r3, #64	@ 0x40
 80086b0:	d83c      	bhi.n	800872c <_scanf_float+0xd4>
 80086b2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086b6:	b2c8      	uxtb	r0, r1
 80086b8:	280e      	cmp	r0, #14
 80086ba:	d93a      	bls.n	8008732 <_scanf_float+0xda>
 80086bc:	f1b9 0f00 	cmp.w	r9, #0
 80086c0:	d003      	beq.n	80086ca <_scanf_float+0x72>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ce:	f1ba 0f01 	cmp.w	sl, #1
 80086d2:	f200 8117 	bhi.w	8008904 <_scanf_float+0x2ac>
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	429e      	cmp	r6, r3
 80086da:	f200 8108 	bhi.w	80088ee <_scanf_float+0x296>
 80086de:	2001      	movs	r0, #1
 80086e0:	b007      	add	sp, #28
 80086e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80086ea:	2a0d      	cmp	r2, #13
 80086ec:	d8e6      	bhi.n	80086bc <_scanf_float+0x64>
 80086ee:	a101      	add	r1, pc, #4	@ (adr r1, 80086f4 <_scanf_float+0x9c>)
 80086f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086f4:	0800883b 	.word	0x0800883b
 80086f8:	080086bd 	.word	0x080086bd
 80086fc:	080086bd 	.word	0x080086bd
 8008700:	080086bd 	.word	0x080086bd
 8008704:	0800889b 	.word	0x0800889b
 8008708:	08008873 	.word	0x08008873
 800870c:	080086bd 	.word	0x080086bd
 8008710:	080086bd 	.word	0x080086bd
 8008714:	08008849 	.word	0x08008849
 8008718:	080086bd 	.word	0x080086bd
 800871c:	080086bd 	.word	0x080086bd
 8008720:	080086bd 	.word	0x080086bd
 8008724:	080086bd 	.word	0x080086bd
 8008728:	08008801 	.word	0x08008801
 800872c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008730:	e7db      	b.n	80086ea <_scanf_float+0x92>
 8008732:	290e      	cmp	r1, #14
 8008734:	d8c2      	bhi.n	80086bc <_scanf_float+0x64>
 8008736:	a001      	add	r0, pc, #4	@ (adr r0, 800873c <_scanf_float+0xe4>)
 8008738:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800873c:	080087f1 	.word	0x080087f1
 8008740:	080086bd 	.word	0x080086bd
 8008744:	080087f1 	.word	0x080087f1
 8008748:	08008887 	.word	0x08008887
 800874c:	080086bd 	.word	0x080086bd
 8008750:	08008799 	.word	0x08008799
 8008754:	080087d7 	.word	0x080087d7
 8008758:	080087d7 	.word	0x080087d7
 800875c:	080087d7 	.word	0x080087d7
 8008760:	080087d7 	.word	0x080087d7
 8008764:	080087d7 	.word	0x080087d7
 8008768:	080087d7 	.word	0x080087d7
 800876c:	080087d7 	.word	0x080087d7
 8008770:	080087d7 	.word	0x080087d7
 8008774:	080087d7 	.word	0x080087d7
 8008778:	2b6e      	cmp	r3, #110	@ 0x6e
 800877a:	d809      	bhi.n	8008790 <_scanf_float+0x138>
 800877c:	2b60      	cmp	r3, #96	@ 0x60
 800877e:	d8b2      	bhi.n	80086e6 <_scanf_float+0x8e>
 8008780:	2b54      	cmp	r3, #84	@ 0x54
 8008782:	d07b      	beq.n	800887c <_scanf_float+0x224>
 8008784:	2b59      	cmp	r3, #89	@ 0x59
 8008786:	d199      	bne.n	80086bc <_scanf_float+0x64>
 8008788:	2d07      	cmp	r5, #7
 800878a:	d197      	bne.n	80086bc <_scanf_float+0x64>
 800878c:	2508      	movs	r5, #8
 800878e:	e02c      	b.n	80087ea <_scanf_float+0x192>
 8008790:	2b74      	cmp	r3, #116	@ 0x74
 8008792:	d073      	beq.n	800887c <_scanf_float+0x224>
 8008794:	2b79      	cmp	r3, #121	@ 0x79
 8008796:	e7f6      	b.n	8008786 <_scanf_float+0x12e>
 8008798:	6821      	ldr	r1, [r4, #0]
 800879a:	05c8      	lsls	r0, r1, #23
 800879c:	d51b      	bpl.n	80087d6 <_scanf_float+0x17e>
 800879e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087a2:	6021      	str	r1, [r4, #0]
 80087a4:	f109 0901 	add.w	r9, r9, #1
 80087a8:	f1bb 0f00 	cmp.w	fp, #0
 80087ac:	d003      	beq.n	80087b6 <_scanf_float+0x15e>
 80087ae:	3201      	adds	r2, #1
 80087b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087b4:	60a2      	str	r2, [r4, #8]
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	60a3      	str	r3, [r4, #8]
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	3301      	adds	r3, #1
 80087c0:	6123      	str	r3, [r4, #16]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	607b      	str	r3, [r7, #4]
 80087ca:	f340 8087 	ble.w	80088dc <_scanf_float+0x284>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	e765      	b.n	80086a2 <_scanf_float+0x4a>
 80087d6:	eb1a 0105 	adds.w	r1, sl, r5
 80087da:	f47f af6f 	bne.w	80086bc <_scanf_float+0x64>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80087e4:	6022      	str	r2, [r4, #0]
 80087e6:	460d      	mov	r5, r1
 80087e8:	468a      	mov	sl, r1
 80087ea:	f806 3b01 	strb.w	r3, [r6], #1
 80087ee:	e7e2      	b.n	80087b6 <_scanf_float+0x15e>
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	0610      	lsls	r0, r2, #24
 80087f4:	f57f af62 	bpl.w	80086bc <_scanf_float+0x64>
 80087f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087fc:	6022      	str	r2, [r4, #0]
 80087fe:	e7f4      	b.n	80087ea <_scanf_float+0x192>
 8008800:	f1ba 0f00 	cmp.w	sl, #0
 8008804:	d10e      	bne.n	8008824 <_scanf_float+0x1cc>
 8008806:	f1b9 0f00 	cmp.w	r9, #0
 800880a:	d10e      	bne.n	800882a <_scanf_float+0x1d2>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008812:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008816:	d108      	bne.n	800882a <_scanf_float+0x1d2>
 8008818:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	f04f 0a01 	mov.w	sl, #1
 8008822:	e7e2      	b.n	80087ea <_scanf_float+0x192>
 8008824:	f1ba 0f02 	cmp.w	sl, #2
 8008828:	d055      	beq.n	80088d6 <_scanf_float+0x27e>
 800882a:	2d01      	cmp	r5, #1
 800882c:	d002      	beq.n	8008834 <_scanf_float+0x1dc>
 800882e:	2d04      	cmp	r5, #4
 8008830:	f47f af44 	bne.w	80086bc <_scanf_float+0x64>
 8008834:	3501      	adds	r5, #1
 8008836:	b2ed      	uxtb	r5, r5
 8008838:	e7d7      	b.n	80087ea <_scanf_float+0x192>
 800883a:	f1ba 0f01 	cmp.w	sl, #1
 800883e:	f47f af3d 	bne.w	80086bc <_scanf_float+0x64>
 8008842:	f04f 0a02 	mov.w	sl, #2
 8008846:	e7d0      	b.n	80087ea <_scanf_float+0x192>
 8008848:	b97d      	cbnz	r5, 800886a <_scanf_float+0x212>
 800884a:	f1b9 0f00 	cmp.w	r9, #0
 800884e:	f47f af38 	bne.w	80086c2 <_scanf_float+0x6a>
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008858:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800885c:	f040 8108 	bne.w	8008a70 <_scanf_float+0x418>
 8008860:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008864:	6022      	str	r2, [r4, #0]
 8008866:	2501      	movs	r5, #1
 8008868:	e7bf      	b.n	80087ea <_scanf_float+0x192>
 800886a:	2d03      	cmp	r5, #3
 800886c:	d0e2      	beq.n	8008834 <_scanf_float+0x1dc>
 800886e:	2d05      	cmp	r5, #5
 8008870:	e7de      	b.n	8008830 <_scanf_float+0x1d8>
 8008872:	2d02      	cmp	r5, #2
 8008874:	f47f af22 	bne.w	80086bc <_scanf_float+0x64>
 8008878:	2503      	movs	r5, #3
 800887a:	e7b6      	b.n	80087ea <_scanf_float+0x192>
 800887c:	2d06      	cmp	r5, #6
 800887e:	f47f af1d 	bne.w	80086bc <_scanf_float+0x64>
 8008882:	2507      	movs	r5, #7
 8008884:	e7b1      	b.n	80087ea <_scanf_float+0x192>
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	0591      	lsls	r1, r2, #22
 800888a:	f57f af17 	bpl.w	80086bc <_scanf_float+0x64>
 800888e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008892:	6022      	str	r2, [r4, #0]
 8008894:	f8cd 9008 	str.w	r9, [sp, #8]
 8008898:	e7a7      	b.n	80087ea <_scanf_float+0x192>
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088a0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80088a4:	d006      	beq.n	80088b4 <_scanf_float+0x25c>
 80088a6:	0550      	lsls	r0, r2, #21
 80088a8:	f57f af08 	bpl.w	80086bc <_scanf_float+0x64>
 80088ac:	f1b9 0f00 	cmp.w	r9, #0
 80088b0:	f000 80de 	beq.w	8008a70 <_scanf_float+0x418>
 80088b4:	0591      	lsls	r1, r2, #22
 80088b6:	bf58      	it	pl
 80088b8:	9902      	ldrpl	r1, [sp, #8]
 80088ba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088be:	bf58      	it	pl
 80088c0:	eba9 0101 	subpl.w	r1, r9, r1
 80088c4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088c8:	bf58      	it	pl
 80088ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	f04f 0900 	mov.w	r9, #0
 80088d4:	e789      	b.n	80087ea <_scanf_float+0x192>
 80088d6:	f04f 0a03 	mov.w	sl, #3
 80088da:	e786      	b.n	80087ea <_scanf_float+0x192>
 80088dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088e0:	4639      	mov	r1, r7
 80088e2:	4640      	mov	r0, r8
 80088e4:	4798      	blx	r3
 80088e6:	2800      	cmp	r0, #0
 80088e8:	f43f aedb 	beq.w	80086a2 <_scanf_float+0x4a>
 80088ec:	e6e6      	b.n	80086bc <_scanf_float+0x64>
 80088ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088f6:	463a      	mov	r2, r7
 80088f8:	4640      	mov	r0, r8
 80088fa:	4798      	blx	r3
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	3b01      	subs	r3, #1
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	e6e8      	b.n	80086d6 <_scanf_float+0x7e>
 8008904:	1e6b      	subs	r3, r5, #1
 8008906:	2b06      	cmp	r3, #6
 8008908:	d824      	bhi.n	8008954 <_scanf_float+0x2fc>
 800890a:	2d02      	cmp	r5, #2
 800890c:	d836      	bhi.n	800897c <_scanf_float+0x324>
 800890e:	9b01      	ldr	r3, [sp, #4]
 8008910:	429e      	cmp	r6, r3
 8008912:	f67f aee4 	bls.w	80086de <_scanf_float+0x86>
 8008916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800891e:	463a      	mov	r2, r7
 8008920:	4640      	mov	r0, r8
 8008922:	4798      	blx	r3
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	3b01      	subs	r3, #1
 8008928:	6123      	str	r3, [r4, #16]
 800892a:	e7f0      	b.n	800890e <_scanf_float+0x2b6>
 800892c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008930:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008934:	463a      	mov	r2, r7
 8008936:	4640      	mov	r0, r8
 8008938:	4798      	blx	r3
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	3b01      	subs	r3, #1
 800893e:	6123      	str	r3, [r4, #16]
 8008940:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008944:	fa5f fa8a 	uxtb.w	sl, sl
 8008948:	f1ba 0f02 	cmp.w	sl, #2
 800894c:	d1ee      	bne.n	800892c <_scanf_float+0x2d4>
 800894e:	3d03      	subs	r5, #3
 8008950:	b2ed      	uxtb	r5, r5
 8008952:	1b76      	subs	r6, r6, r5
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	05da      	lsls	r2, r3, #23
 8008958:	d530      	bpl.n	80089bc <_scanf_float+0x364>
 800895a:	055b      	lsls	r3, r3, #21
 800895c:	d511      	bpl.n	8008982 <_scanf_float+0x32a>
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	429e      	cmp	r6, r3
 8008962:	f67f aebc 	bls.w	80086de <_scanf_float+0x86>
 8008966:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800896a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800896e:	463a      	mov	r2, r7
 8008970:	4640      	mov	r0, r8
 8008972:	4798      	blx	r3
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	3b01      	subs	r3, #1
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	e7f0      	b.n	800895e <_scanf_float+0x306>
 800897c:	46aa      	mov	sl, r5
 800897e:	46b3      	mov	fp, r6
 8008980:	e7de      	b.n	8008940 <_scanf_float+0x2e8>
 8008982:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	2965      	cmp	r1, #101	@ 0x65
 800898a:	f103 33ff 	add.w	r3, r3, #4294967295
 800898e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	d00c      	beq.n	80089b0 <_scanf_float+0x358>
 8008996:	2945      	cmp	r1, #69	@ 0x45
 8008998:	d00a      	beq.n	80089b0 <_scanf_float+0x358>
 800899a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800899e:	463a      	mov	r2, r7
 80089a0:	4640      	mov	r0, r8
 80089a2:	4798      	blx	r3
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089aa:	3b01      	subs	r3, #1
 80089ac:	1eb5      	subs	r5, r6, #2
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089b4:	463a      	mov	r2, r7
 80089b6:	4640      	mov	r0, r8
 80089b8:	4798      	blx	r3
 80089ba:	462e      	mov	r6, r5
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	f012 0210 	ands.w	r2, r2, #16
 80089c2:	d001      	beq.n	80089c8 <_scanf_float+0x370>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e68b      	b.n	80086e0 <_scanf_float+0x88>
 80089c8:	7032      	strb	r2, [r6, #0]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d4:	d11c      	bne.n	8008a10 <_scanf_float+0x3b8>
 80089d6:	9b02      	ldr	r3, [sp, #8]
 80089d8:	454b      	cmp	r3, r9
 80089da:	eba3 0209 	sub.w	r2, r3, r9
 80089de:	d123      	bne.n	8008a28 <_scanf_float+0x3d0>
 80089e0:	9901      	ldr	r1, [sp, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	4640      	mov	r0, r8
 80089e6:	f002 fc3b 	bl	800b260 <_strtod_r>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	6821      	ldr	r1, [r4, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f011 0f02 	tst.w	r1, #2
 80089f4:	ec57 6b10 	vmov	r6, r7, d0
 80089f8:	f103 0204 	add.w	r2, r3, #4
 80089fc:	d01f      	beq.n	8008a3e <_scanf_float+0x3e6>
 80089fe:	9903      	ldr	r1, [sp, #12]
 8008a00:	600a      	str	r2, [r1, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	e9c3 6700 	strd	r6, r7, [r3]
 8008a08:	68e3      	ldr	r3, [r4, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60e3      	str	r3, [r4, #12]
 8008a0e:	e7d9      	b.n	80089c4 <_scanf_float+0x36c>
 8008a10:	9b04      	ldr	r3, [sp, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0e4      	beq.n	80089e0 <_scanf_float+0x388>
 8008a16:	9905      	ldr	r1, [sp, #20]
 8008a18:	230a      	movs	r3, #10
 8008a1a:	3101      	adds	r1, #1
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	f002 fc9f 	bl	800b360 <_strtol_r>
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	9e05      	ldr	r6, [sp, #20]
 8008a26:	1ac2      	subs	r2, r0, r3
 8008a28:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008a2c:	429e      	cmp	r6, r3
 8008a2e:	bf28      	it	cs
 8008a30:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008a34:	4910      	ldr	r1, [pc, #64]	@ (8008a78 <_scanf_float+0x420>)
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f918 	bl	8008c6c <siprintf>
 8008a3c:	e7d0      	b.n	80089e0 <_scanf_float+0x388>
 8008a3e:	f011 0f04 	tst.w	r1, #4
 8008a42:	9903      	ldr	r1, [sp, #12]
 8008a44:	600a      	str	r2, [r1, #0]
 8008a46:	d1dc      	bne.n	8008a02 <_scanf_float+0x3aa>
 8008a48:	681d      	ldr	r5, [r3, #0]
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4639      	mov	r1, r7
 8008a52:	f7f8 f873 	bl	8000b3c <__aeabi_dcmpun>
 8008a56:	b128      	cbz	r0, 8008a64 <_scanf_float+0x40c>
 8008a58:	4808      	ldr	r0, [pc, #32]	@ (8008a7c <_scanf_float+0x424>)
 8008a5a:	f000 f9f9 	bl	8008e50 <nanf>
 8008a5e:	ed85 0a00 	vstr	s0, [r5]
 8008a62:	e7d1      	b.n	8008a08 <_scanf_float+0x3b0>
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	f7f8 f8c6 	bl	8000bf8 <__aeabi_d2f>
 8008a6c:	6028      	str	r0, [r5, #0]
 8008a6e:	e7cb      	b.n	8008a08 <_scanf_float+0x3b0>
 8008a70:	f04f 0900 	mov.w	r9, #0
 8008a74:	e629      	b.n	80086ca <_scanf_float+0x72>
 8008a76:	bf00      	nop
 8008a78:	0800c73c 	.word	0x0800c73c
 8008a7c:	0800cad5 	.word	0x0800cad5

08008a80 <std>:
 8008a80:	2300      	movs	r3, #0
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a8e:	6083      	str	r3, [r0, #8]
 8008a90:	8181      	strh	r1, [r0, #12]
 8008a92:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a94:	81c2      	strh	r2, [r0, #14]
 8008a96:	6183      	str	r3, [r0, #24]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	305c      	adds	r0, #92	@ 0x5c
 8008a9e:	f000 f948 	bl	8008d32 <memset>
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad8 <std+0x58>)
 8008aa4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <std+0x5c>)
 8008aa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae0 <std+0x60>)
 8008aac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <std+0x64>)
 8008ab0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae8 <std+0x68>)
 8008ab4:	6224      	str	r4, [r4, #32]
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d006      	beq.n	8008ac8 <std+0x48>
 8008aba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008abe:	4294      	cmp	r4, r2
 8008ac0:	d002      	beq.n	8008ac8 <std+0x48>
 8008ac2:	33d0      	adds	r3, #208	@ 0xd0
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d105      	bne.n	8008ad4 <std+0x54>
 8008ac8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad0:	f000 b9ac 	b.w	8008e2c <__retarget_lock_init_recursive>
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	08008cad 	.word	0x08008cad
 8008adc:	08008ccf 	.word	0x08008ccf
 8008ae0:	08008d07 	.word	0x08008d07
 8008ae4:	08008d2b 	.word	0x08008d2b
 8008ae8:	20004d3c 	.word	0x20004d3c

08008aec <stdio_exit_handler>:
 8008aec:	4a02      	ldr	r2, [pc, #8]	@ (8008af8 <stdio_exit_handler+0xc>)
 8008aee:	4903      	ldr	r1, [pc, #12]	@ (8008afc <stdio_exit_handler+0x10>)
 8008af0:	4803      	ldr	r0, [pc, #12]	@ (8008b00 <stdio_exit_handler+0x14>)
 8008af2:	f000 b869 	b.w	8008bc8 <_fwalk_sglue>
 8008af6:	bf00      	nop
 8008af8:	20000020 	.word	0x20000020
 8008afc:	0800b71d 	.word	0x0800b71d
 8008b00:	20000030 	.word	0x20000030

08008b04 <cleanup_stdio>:
 8008b04:	6841      	ldr	r1, [r0, #4]
 8008b06:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <cleanup_stdio+0x34>)
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	d001      	beq.n	8008b14 <cleanup_stdio+0x10>
 8008b10:	f002 fe04 	bl	800b71c <_fflush_r>
 8008b14:	68a1      	ldr	r1, [r4, #8]
 8008b16:	4b09      	ldr	r3, [pc, #36]	@ (8008b3c <cleanup_stdio+0x38>)
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	d002      	beq.n	8008b22 <cleanup_stdio+0x1e>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f002 fdfd 	bl	800b71c <_fflush_r>
 8008b22:	68e1      	ldr	r1, [r4, #12]
 8008b24:	4b06      	ldr	r3, [pc, #24]	@ (8008b40 <cleanup_stdio+0x3c>)
 8008b26:	4299      	cmp	r1, r3
 8008b28:	d004      	beq.n	8008b34 <cleanup_stdio+0x30>
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b30:	f002 bdf4 	b.w	800b71c <_fflush_r>
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	bf00      	nop
 8008b38:	20004d3c 	.word	0x20004d3c
 8008b3c:	20004da4 	.word	0x20004da4
 8008b40:	20004e0c 	.word	0x20004e0c

08008b44 <global_stdio_init.part.0>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	4b0b      	ldr	r3, [pc, #44]	@ (8008b74 <global_stdio_init.part.0+0x30>)
 8008b48:	4c0b      	ldr	r4, [pc, #44]	@ (8008b78 <global_stdio_init.part.0+0x34>)
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b7c <global_stdio_init.part.0+0x38>)
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	4620      	mov	r0, r4
 8008b50:	2200      	movs	r2, #0
 8008b52:	2104      	movs	r1, #4
 8008b54:	f7ff ff94 	bl	8008a80 <std>
 8008b58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	2109      	movs	r1, #9
 8008b60:	f7ff ff8e 	bl	8008a80 <std>
 8008b64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b68:	2202      	movs	r2, #2
 8008b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6e:	2112      	movs	r1, #18
 8008b70:	f7ff bf86 	b.w	8008a80 <std>
 8008b74:	20004e74 	.word	0x20004e74
 8008b78:	20004d3c 	.word	0x20004d3c
 8008b7c:	08008aed 	.word	0x08008aed

08008b80 <__sfp_lock_acquire>:
 8008b80:	4801      	ldr	r0, [pc, #4]	@ (8008b88 <__sfp_lock_acquire+0x8>)
 8008b82:	f000 b954 	b.w	8008e2e <__retarget_lock_acquire_recursive>
 8008b86:	bf00      	nop
 8008b88:	20004e7d 	.word	0x20004e7d

08008b8c <__sfp_lock_release>:
 8008b8c:	4801      	ldr	r0, [pc, #4]	@ (8008b94 <__sfp_lock_release+0x8>)
 8008b8e:	f000 b94f 	b.w	8008e30 <__retarget_lock_release_recursive>
 8008b92:	bf00      	nop
 8008b94:	20004e7d 	.word	0x20004e7d

08008b98 <__sinit>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	f7ff fff0 	bl	8008b80 <__sfp_lock_acquire>
 8008ba0:	6a23      	ldr	r3, [r4, #32]
 8008ba2:	b11b      	cbz	r3, 8008bac <__sinit+0x14>
 8008ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ba8:	f7ff bff0 	b.w	8008b8c <__sfp_lock_release>
 8008bac:	4b04      	ldr	r3, [pc, #16]	@ (8008bc0 <__sinit+0x28>)
 8008bae:	6223      	str	r3, [r4, #32]
 8008bb0:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <__sinit+0x2c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f5      	bne.n	8008ba4 <__sinit+0xc>
 8008bb8:	f7ff ffc4 	bl	8008b44 <global_stdio_init.part.0>
 8008bbc:	e7f2      	b.n	8008ba4 <__sinit+0xc>
 8008bbe:	bf00      	nop
 8008bc0:	08008b05 	.word	0x08008b05
 8008bc4:	20004e74 	.word	0x20004e74

08008bc8 <_fwalk_sglue>:
 8008bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bcc:	4607      	mov	r7, r0
 8008bce:	4688      	mov	r8, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bd8:	f1b9 0901 	subs.w	r9, r9, #1
 8008bdc:	d505      	bpl.n	8008bea <_fwalk_sglue+0x22>
 8008bde:	6824      	ldr	r4, [r4, #0]
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	d1f7      	bne.n	8008bd4 <_fwalk_sglue+0xc>
 8008be4:	4630      	mov	r0, r6
 8008be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d907      	bls.n	8008c00 <_fwalk_sglue+0x38>
 8008bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	d003      	beq.n	8008c00 <_fwalk_sglue+0x38>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	47c0      	blx	r8
 8008bfe:	4306      	orrs	r6, r0
 8008c00:	3568      	adds	r5, #104	@ 0x68
 8008c02:	e7e9      	b.n	8008bd8 <_fwalk_sglue+0x10>

08008c04 <sniprintf>:
 8008c04:	b40c      	push	{r2, r3}
 8008c06:	b530      	push	{r4, r5, lr}
 8008c08:	4b17      	ldr	r3, [pc, #92]	@ (8008c68 <sniprintf+0x64>)
 8008c0a:	1e0c      	subs	r4, r1, #0
 8008c0c:	681d      	ldr	r5, [r3, #0]
 8008c0e:	b09d      	sub	sp, #116	@ 0x74
 8008c10:	da08      	bge.n	8008c24 <sniprintf+0x20>
 8008c12:	238b      	movs	r3, #139	@ 0x8b
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	b01d      	add	sp, #116	@ 0x74
 8008c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c20:	b002      	add	sp, #8
 8008c22:	4770      	bx	lr
 8008c24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c2c:	bf14      	ite	ne
 8008c2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c32:	4623      	moveq	r3, r4
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	9307      	str	r3, [sp, #28]
 8008c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c3c:	9002      	str	r0, [sp, #8]
 8008c3e:	9006      	str	r0, [sp, #24]
 8008c40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c46:	ab21      	add	r3, sp, #132	@ 0x84
 8008c48:	a902      	add	r1, sp, #8
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	f002 fbe5 	bl	800b41c <_svfiprintf_r>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	bfbc      	itt	lt
 8008c56:	238b      	movlt	r3, #139	@ 0x8b
 8008c58:	602b      	strlt	r3, [r5, #0]
 8008c5a:	2c00      	cmp	r4, #0
 8008c5c:	d0dd      	beq.n	8008c1a <sniprintf+0x16>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	2200      	movs	r2, #0
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e7d9      	b.n	8008c1a <sniprintf+0x16>
 8008c66:	bf00      	nop
 8008c68:	2000002c 	.word	0x2000002c

08008c6c <siprintf>:
 8008c6c:	b40e      	push	{r1, r2, r3}
 8008c6e:	b500      	push	{lr}
 8008c70:	b09c      	sub	sp, #112	@ 0x70
 8008c72:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c74:	9002      	str	r0, [sp, #8]
 8008c76:	9006      	str	r0, [sp, #24]
 8008c78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c7c:	4809      	ldr	r0, [pc, #36]	@ (8008ca4 <siprintf+0x38>)
 8008c7e:	9107      	str	r1, [sp, #28]
 8008c80:	9104      	str	r1, [sp, #16]
 8008c82:	4909      	ldr	r1, [pc, #36]	@ (8008ca8 <siprintf+0x3c>)
 8008c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c88:	9105      	str	r1, [sp, #20]
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	a902      	add	r1, sp, #8
 8008c90:	f002 fbc4 	bl	800b41c <_svfiprintf_r>
 8008c94:	9b02      	ldr	r3, [sp, #8]
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	b01c      	add	sp, #112	@ 0x70
 8008c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca0:	b003      	add	sp, #12
 8008ca2:	4770      	bx	lr
 8008ca4:	2000002c 	.word	0x2000002c
 8008ca8:	ffff0208 	.word	0xffff0208

08008cac <__sread>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	460c      	mov	r4, r1
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	f000 f86c 	bl	8008d90 <_read_r>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	bfab      	itete	ge
 8008cbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8008cc0:	181b      	addge	r3, r3, r0
 8008cc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cc6:	bfac      	ite	ge
 8008cc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cca:	81a3      	strhlt	r3, [r4, #12]
 8008ccc:	bd10      	pop	{r4, pc}

08008cce <__swrite>:
 8008cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	461f      	mov	r7, r3
 8008cd4:	898b      	ldrh	r3, [r1, #12]
 8008cd6:	05db      	lsls	r3, r3, #23
 8008cd8:	4605      	mov	r5, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	4616      	mov	r6, r2
 8008cde:	d505      	bpl.n	8008cec <__swrite+0x1e>
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f000 f840 	bl	8008d6c <_lseek_r>
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cf6:	81a3      	strh	r3, [r4, #12]
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	f000 b857 	b.w	8008db4 <_write_r>

08008d06 <__sseek>:
 8008d06:	b510      	push	{r4, lr}
 8008d08:	460c      	mov	r4, r1
 8008d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0e:	f000 f82d 	bl	8008d6c <_lseek_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	bf15      	itete	ne
 8008d18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d22:	81a3      	strheq	r3, [r4, #12]
 8008d24:	bf18      	it	ne
 8008d26:	81a3      	strhne	r3, [r4, #12]
 8008d28:	bd10      	pop	{r4, pc}

08008d2a <__sclose>:
 8008d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d2e:	f000 b80d 	b.w	8008d4c <_close_r>

08008d32 <memset>:
 8008d32:	4402      	add	r2, r0
 8008d34:	4603      	mov	r3, r0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d100      	bne.n	8008d3c <memset+0xa>
 8008d3a:	4770      	bx	lr
 8008d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8008d40:	e7f9      	b.n	8008d36 <memset+0x4>
	...

08008d44 <_localeconv_r>:
 8008d44:	4800      	ldr	r0, [pc, #0]	@ (8008d48 <_localeconv_r+0x4>)
 8008d46:	4770      	bx	lr
 8008d48:	2000016c 	.word	0x2000016c

08008d4c <_close_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	@ (8008d68 <_close_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7f9 fa18 	bl	800218c <_close>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_close_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_close_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20004e78 	.word	0x20004e78

08008d6c <_lseek_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	@ (8008d8c <_lseek_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f9 fa2d 	bl	80021da <_lseek>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_lseek_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_lseek_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20004e78 	.word	0x20004e78

08008d90 <_read_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	@ (8008db0 <_read_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f9 f9bb 	bl	800211a <_read>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_read_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_read_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20004e78 	.word	0x20004e78

08008db4 <_write_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	@ (8008dd4 <_write_r+0x20>)
 8008db8:	4604      	mov	r4, r0
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f7f9 f9c6 	bl	8002154 <_write>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_write_r+0x1e>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_write_r+0x1e>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20004e78 	.word	0x20004e78

08008dd8 <__errno>:
 8008dd8:	4b01      	ldr	r3, [pc, #4]	@ (8008de0 <__errno+0x8>)
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	2000002c 	.word	0x2000002c

08008de4 <__libc_init_array>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	4d0d      	ldr	r5, [pc, #52]	@ (8008e1c <__libc_init_array+0x38>)
 8008de8:	4c0d      	ldr	r4, [pc, #52]	@ (8008e20 <__libc_init_array+0x3c>)
 8008dea:	1b64      	subs	r4, r4, r5
 8008dec:	10a4      	asrs	r4, r4, #2
 8008dee:	2600      	movs	r6, #0
 8008df0:	42a6      	cmp	r6, r4
 8008df2:	d109      	bne.n	8008e08 <__libc_init_array+0x24>
 8008df4:	4d0b      	ldr	r5, [pc, #44]	@ (8008e24 <__libc_init_array+0x40>)
 8008df6:	4c0c      	ldr	r4, [pc, #48]	@ (8008e28 <__libc_init_array+0x44>)
 8008df8:	f003 fb74 	bl	800c4e4 <_init>
 8008dfc:	1b64      	subs	r4, r4, r5
 8008dfe:	10a4      	asrs	r4, r4, #2
 8008e00:	2600      	movs	r6, #0
 8008e02:	42a6      	cmp	r6, r4
 8008e04:	d105      	bne.n	8008e12 <__libc_init_array+0x2e>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0c:	4798      	blx	r3
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7ee      	b.n	8008df0 <__libc_init_array+0xc>
 8008e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e16:	4798      	blx	r3
 8008e18:	3601      	adds	r6, #1
 8008e1a:	e7f2      	b.n	8008e02 <__libc_init_array+0x1e>
 8008e1c:	0800cb40 	.word	0x0800cb40
 8008e20:	0800cb40 	.word	0x0800cb40
 8008e24:	0800cb40 	.word	0x0800cb40
 8008e28:	0800cb44 	.word	0x0800cb44

08008e2c <__retarget_lock_init_recursive>:
 8008e2c:	4770      	bx	lr

08008e2e <__retarget_lock_acquire_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <__retarget_lock_release_recursive>:
 8008e30:	4770      	bx	lr

08008e32 <memcpy>:
 8008e32:	440a      	add	r2, r1
 8008e34:	4291      	cmp	r1, r2
 8008e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e3a:	d100      	bne.n	8008e3e <memcpy+0xc>
 8008e3c:	4770      	bx	lr
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e48:	4291      	cmp	r1, r2
 8008e4a:	d1f9      	bne.n	8008e40 <memcpy+0xe>
 8008e4c:	bd10      	pop	{r4, pc}
	...

08008e50 <nanf>:
 8008e50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e58 <nanf+0x8>
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	7fc00000 	.word	0x7fc00000

08008e5c <quorem>:
 8008e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	6903      	ldr	r3, [r0, #16]
 8008e62:	690c      	ldr	r4, [r1, #16]
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	4607      	mov	r7, r0
 8008e68:	db7e      	blt.n	8008f68 <quorem+0x10c>
 8008e6a:	3c01      	subs	r4, #1
 8008e6c:	f101 0814 	add.w	r8, r1, #20
 8008e70:	00a3      	lsls	r3, r4, #2
 8008e72:	f100 0514 	add.w	r5, r0, #20
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e86:	3301      	adds	r3, #1
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e92:	d32e      	bcc.n	8008ef2 <quorem+0x96>
 8008e94:	f04f 0a00 	mov.w	sl, #0
 8008e98:	46c4      	mov	ip, r8
 8008e9a:	46ae      	mov	lr, r5
 8008e9c:	46d3      	mov	fp, sl
 8008e9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ea2:	b298      	uxth	r0, r3
 8008ea4:	fb06 a000 	mla	r0, r6, r0, sl
 8008ea8:	0c02      	lsrs	r2, r0, #16
 8008eaa:	0c1b      	lsrs	r3, r3, #16
 8008eac:	fb06 2303 	mla	r3, r6, r3, r2
 8008eb0:	f8de 2000 	ldr.w	r2, [lr]
 8008eb4:	b280      	uxth	r0, r0
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	1a12      	subs	r2, r2, r0
 8008eba:	445a      	add	r2, fp
 8008ebc:	f8de 0000 	ldr.w	r0, [lr]
 8008ec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008eca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ed4:	45e1      	cmp	r9, ip
 8008ed6:	f84e 2b04 	str.w	r2, [lr], #4
 8008eda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ede:	d2de      	bcs.n	8008e9e <quorem+0x42>
 8008ee0:	9b00      	ldr	r3, [sp, #0]
 8008ee2:	58eb      	ldr	r3, [r5, r3]
 8008ee4:	b92b      	cbnz	r3, 8008ef2 <quorem+0x96>
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	3b04      	subs	r3, #4
 8008eea:	429d      	cmp	r5, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	d32f      	bcc.n	8008f50 <quorem+0xf4>
 8008ef0:	613c      	str	r4, [r7, #16]
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f001 f9c4 	bl	800a280 <__mcmp>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	db25      	blt.n	8008f48 <quorem+0xec>
 8008efc:	4629      	mov	r1, r5
 8008efe:	2000      	movs	r0, #0
 8008f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f04:	f8d1 c000 	ldr.w	ip, [r1]
 8008f08:	fa1f fe82 	uxth.w	lr, r2
 8008f0c:	fa1f f38c 	uxth.w	r3, ip
 8008f10:	eba3 030e 	sub.w	r3, r3, lr
 8008f14:	4403      	add	r3, r0
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f26:	45c1      	cmp	r9, r8
 8008f28:	f841 3b04 	str.w	r3, [r1], #4
 8008f2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f30:	d2e6      	bcs.n	8008f00 <quorem+0xa4>
 8008f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f3a:	b922      	cbnz	r2, 8008f46 <quorem+0xea>
 8008f3c:	3b04      	subs	r3, #4
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	d30b      	bcc.n	8008f5c <quorem+0x100>
 8008f44:	613c      	str	r4, [r7, #16]
 8008f46:	3601      	adds	r6, #1
 8008f48:	4630      	mov	r0, r6
 8008f4a:	b003      	add	sp, #12
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	6812      	ldr	r2, [r2, #0]
 8008f52:	3b04      	subs	r3, #4
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d1cb      	bne.n	8008ef0 <quorem+0x94>
 8008f58:	3c01      	subs	r4, #1
 8008f5a:	e7c6      	b.n	8008eea <quorem+0x8e>
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	3b04      	subs	r3, #4
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d1ef      	bne.n	8008f44 <quorem+0xe8>
 8008f64:	3c01      	subs	r4, #1
 8008f66:	e7ea      	b.n	8008f3e <quorem+0xe2>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e7ee      	b.n	8008f4a <quorem+0xee>
 8008f6c:	0000      	movs	r0, r0
	...

08008f70 <_dtoa_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	69c7      	ldr	r7, [r0, #28]
 8008f76:	b099      	sub	sp, #100	@ 0x64
 8008f78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f7c:	ec55 4b10 	vmov	r4, r5, d0
 8008f80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008f82:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f84:	4683      	mov	fp, r0
 8008f86:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f8a:	b97f      	cbnz	r7, 8008fac <_dtoa_r+0x3c>
 8008f8c:	2010      	movs	r0, #16
 8008f8e:	f000 fdfd 	bl	8009b8c <malloc>
 8008f92:	4602      	mov	r2, r0
 8008f94:	f8cb 001c 	str.w	r0, [fp, #28]
 8008f98:	b920      	cbnz	r0, 8008fa4 <_dtoa_r+0x34>
 8008f9a:	4ba7      	ldr	r3, [pc, #668]	@ (8009238 <_dtoa_r+0x2c8>)
 8008f9c:	21ef      	movs	r1, #239	@ 0xef
 8008f9e:	48a7      	ldr	r0, [pc, #668]	@ (800923c <_dtoa_r+0x2cc>)
 8008fa0:	f002 fc2a 	bl	800b7f8 <__assert_func>
 8008fa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fa8:	6007      	str	r7, [r0, #0]
 8008faa:	60c7      	str	r7, [r0, #12]
 8008fac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fb0:	6819      	ldr	r1, [r3, #0]
 8008fb2:	b159      	cbz	r1, 8008fcc <_dtoa_r+0x5c>
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	604a      	str	r2, [r1, #4]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4093      	lsls	r3, r2
 8008fbc:	608b      	str	r3, [r1, #8]
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 feda 	bl	8009d78 <_Bfree>
 8008fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	1e2b      	subs	r3, r5, #0
 8008fce:	bfb9      	ittee	lt
 8008fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fd4:	9303      	strlt	r3, [sp, #12]
 8008fd6:	2300      	movge	r3, #0
 8008fd8:	6033      	strge	r3, [r6, #0]
 8008fda:	9f03      	ldr	r7, [sp, #12]
 8008fdc:	4b98      	ldr	r3, [pc, #608]	@ (8009240 <_dtoa_r+0x2d0>)
 8008fde:	bfbc      	itt	lt
 8008fe0:	2201      	movlt	r2, #1
 8008fe2:	6032      	strlt	r2, [r6, #0]
 8008fe4:	43bb      	bics	r3, r7
 8008fe6:	d112      	bne.n	800900e <_dtoa_r+0x9e>
 8008fe8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008fea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ff4:	4323      	orrs	r3, r4
 8008ff6:	f000 854d 	beq.w	8009a94 <_dtoa_r+0xb24>
 8008ffa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ffc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009254 <_dtoa_r+0x2e4>
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 854f 	beq.w	8009aa4 <_dtoa_r+0xb34>
 8009006:	f10a 0303 	add.w	r3, sl, #3
 800900a:	f000 bd49 	b.w	8009aa0 <_dtoa_r+0xb30>
 800900e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	ec51 0b17 	vmov	r0, r1, d7
 8009018:	2300      	movs	r3, #0
 800901a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800901e:	f7f7 fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009022:	4680      	mov	r8, r0
 8009024:	b158      	cbz	r0, 800903e <_dtoa_r+0xce>
 8009026:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009028:	2301      	movs	r3, #1
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800902e:	b113      	cbz	r3, 8009036 <_dtoa_r+0xc6>
 8009030:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009032:	4b84      	ldr	r3, [pc, #528]	@ (8009244 <_dtoa_r+0x2d4>)
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009258 <_dtoa_r+0x2e8>
 800903a:	f000 bd33 	b.w	8009aa4 <_dtoa_r+0xb34>
 800903e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009042:	aa16      	add	r2, sp, #88	@ 0x58
 8009044:	a917      	add	r1, sp, #92	@ 0x5c
 8009046:	4658      	mov	r0, fp
 8009048:	f001 fa3a 	bl	800a4c0 <__d2b>
 800904c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009050:	4681      	mov	r9, r0
 8009052:	2e00      	cmp	r6, #0
 8009054:	d077      	beq.n	8009146 <_dtoa_r+0x1d6>
 8009056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009058:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800905c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009064:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009068:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800906c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009070:	4619      	mov	r1, r3
 8009072:	2200      	movs	r2, #0
 8009074:	4b74      	ldr	r3, [pc, #464]	@ (8009248 <_dtoa_r+0x2d8>)
 8009076:	f7f7 f90f 	bl	8000298 <__aeabi_dsub>
 800907a:	a369      	add	r3, pc, #420	@ (adr r3, 8009220 <_dtoa_r+0x2b0>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 fac2 	bl	8000608 <__aeabi_dmul>
 8009084:	a368      	add	r3, pc, #416	@ (adr r3, 8009228 <_dtoa_r+0x2b8>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 f907 	bl	800029c <__adddf3>
 800908e:	4604      	mov	r4, r0
 8009090:	4630      	mov	r0, r6
 8009092:	460d      	mov	r5, r1
 8009094:	f7f7 fa4e 	bl	8000534 <__aeabi_i2d>
 8009098:	a365      	add	r3, pc, #404	@ (adr r3, 8009230 <_dtoa_r+0x2c0>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 fab3 	bl	8000608 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 f8f7 	bl	800029c <__adddf3>
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	f7f7 fd59 	bl	8000b68 <__aeabi_d2iz>
 80090b6:	2200      	movs	r2, #0
 80090b8:	4607      	mov	r7, r0
 80090ba:	2300      	movs	r3, #0
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 fd14 	bl	8000aec <__aeabi_dcmplt>
 80090c4:	b140      	cbz	r0, 80090d8 <_dtoa_r+0x168>
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7f7 fa34 	bl	8000534 <__aeabi_i2d>
 80090cc:	4622      	mov	r2, r4
 80090ce:	462b      	mov	r3, r5
 80090d0:	f7f7 fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d4:	b900      	cbnz	r0, 80090d8 <_dtoa_r+0x168>
 80090d6:	3f01      	subs	r7, #1
 80090d8:	2f16      	cmp	r7, #22
 80090da:	d851      	bhi.n	8009180 <_dtoa_r+0x210>
 80090dc:	4b5b      	ldr	r3, [pc, #364]	@ (800924c <_dtoa_r+0x2dc>)
 80090de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ea:	f7f7 fcff 	bl	8000aec <__aeabi_dcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d048      	beq.n	8009184 <_dtoa_r+0x214>
 80090f2:	3f01      	subs	r7, #1
 80090f4:	2300      	movs	r3, #0
 80090f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80090f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090fa:	1b9b      	subs	r3, r3, r6
 80090fc:	1e5a      	subs	r2, r3, #1
 80090fe:	bf44      	itt	mi
 8009100:	f1c3 0801 	rsbmi	r8, r3, #1
 8009104:	2300      	movmi	r3, #0
 8009106:	9208      	str	r2, [sp, #32]
 8009108:	bf54      	ite	pl
 800910a:	f04f 0800 	movpl.w	r8, #0
 800910e:	9308      	strmi	r3, [sp, #32]
 8009110:	2f00      	cmp	r7, #0
 8009112:	db39      	blt.n	8009188 <_dtoa_r+0x218>
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009118:	443b      	add	r3, r7
 800911a:	9308      	str	r3, [sp, #32]
 800911c:	2300      	movs	r3, #0
 800911e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	2b09      	cmp	r3, #9
 8009124:	d864      	bhi.n	80091f0 <_dtoa_r+0x280>
 8009126:	2b05      	cmp	r3, #5
 8009128:	bfc4      	itt	gt
 800912a:	3b04      	subgt	r3, #4
 800912c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800912e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009130:	f1a3 0302 	sub.w	r3, r3, #2
 8009134:	bfcc      	ite	gt
 8009136:	2400      	movgt	r4, #0
 8009138:	2401      	movle	r4, #1
 800913a:	2b03      	cmp	r3, #3
 800913c:	d863      	bhi.n	8009206 <_dtoa_r+0x296>
 800913e:	e8df f003 	tbb	[pc, r3]
 8009142:	372a      	.short	0x372a
 8009144:	5535      	.short	0x5535
 8009146:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800914a:	441e      	add	r6, r3
 800914c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009150:	2b20      	cmp	r3, #32
 8009152:	bfc1      	itttt	gt
 8009154:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009158:	409f      	lslgt	r7, r3
 800915a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800915e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009162:	bfd6      	itet	le
 8009164:	f1c3 0320 	rsble	r3, r3, #32
 8009168:	ea47 0003 	orrgt.w	r0, r7, r3
 800916c:	fa04 f003 	lslle.w	r0, r4, r3
 8009170:	f7f7 f9d0 	bl	8000514 <__aeabi_ui2d>
 8009174:	2201      	movs	r2, #1
 8009176:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800917a:	3e01      	subs	r6, #1
 800917c:	9214      	str	r2, [sp, #80]	@ 0x50
 800917e:	e777      	b.n	8009070 <_dtoa_r+0x100>
 8009180:	2301      	movs	r3, #1
 8009182:	e7b8      	b.n	80090f6 <_dtoa_r+0x186>
 8009184:	9012      	str	r0, [sp, #72]	@ 0x48
 8009186:	e7b7      	b.n	80090f8 <_dtoa_r+0x188>
 8009188:	427b      	negs	r3, r7
 800918a:	930a      	str	r3, [sp, #40]	@ 0x28
 800918c:	2300      	movs	r3, #0
 800918e:	eba8 0807 	sub.w	r8, r8, r7
 8009192:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009194:	e7c4      	b.n	8009120 <_dtoa_r+0x1b0>
 8009196:	2300      	movs	r3, #0
 8009198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800919a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800919c:	2b00      	cmp	r3, #0
 800919e:	dc35      	bgt.n	800920c <_dtoa_r+0x29c>
 80091a0:	2301      	movs	r3, #1
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	9307      	str	r3, [sp, #28]
 80091a6:	461a      	mov	r2, r3
 80091a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80091aa:	e00b      	b.n	80091c4 <_dtoa_r+0x254>
 80091ac:	2301      	movs	r3, #1
 80091ae:	e7f3      	b.n	8009198 <_dtoa_r+0x228>
 80091b0:	2300      	movs	r3, #0
 80091b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	3301      	adds	r3, #1
 80091bc:	2b01      	cmp	r3, #1
 80091be:	9307      	str	r3, [sp, #28]
 80091c0:	bfb8      	it	lt
 80091c2:	2301      	movlt	r3, #1
 80091c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80091c8:	2100      	movs	r1, #0
 80091ca:	2204      	movs	r2, #4
 80091cc:	f102 0514 	add.w	r5, r2, #20
 80091d0:	429d      	cmp	r5, r3
 80091d2:	d91f      	bls.n	8009214 <_dtoa_r+0x2a4>
 80091d4:	6041      	str	r1, [r0, #4]
 80091d6:	4658      	mov	r0, fp
 80091d8:	f000 fd8e 	bl	8009cf8 <_Balloc>
 80091dc:	4682      	mov	sl, r0
 80091de:	2800      	cmp	r0, #0
 80091e0:	d13c      	bne.n	800925c <_dtoa_r+0x2ec>
 80091e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009250 <_dtoa_r+0x2e0>)
 80091e4:	4602      	mov	r2, r0
 80091e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80091ea:	e6d8      	b.n	8008f9e <_dtoa_r+0x2e>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7e0      	b.n	80091b2 <_dtoa_r+0x242>
 80091f0:	2401      	movs	r4, #1
 80091f2:	2300      	movs	r3, #0
 80091f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80091f8:	f04f 33ff 	mov.w	r3, #4294967295
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	2200      	movs	r2, #0
 8009202:	2312      	movs	r3, #18
 8009204:	e7d0      	b.n	80091a8 <_dtoa_r+0x238>
 8009206:	2301      	movs	r3, #1
 8009208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800920a:	e7f5      	b.n	80091f8 <_dtoa_r+0x288>
 800920c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	9307      	str	r3, [sp, #28]
 8009212:	e7d7      	b.n	80091c4 <_dtoa_r+0x254>
 8009214:	3101      	adds	r1, #1
 8009216:	0052      	lsls	r2, r2, #1
 8009218:	e7d8      	b.n	80091cc <_dtoa_r+0x25c>
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w
 8009220:	636f4361 	.word	0x636f4361
 8009224:	3fd287a7 	.word	0x3fd287a7
 8009228:	8b60c8b3 	.word	0x8b60c8b3
 800922c:	3fc68a28 	.word	0x3fc68a28
 8009230:	509f79fb 	.word	0x509f79fb
 8009234:	3fd34413 	.word	0x3fd34413
 8009238:	0800c74e 	.word	0x0800c74e
 800923c:	0800c765 	.word	0x0800c765
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	0800c719 	.word	0x0800c719
 8009248:	3ff80000 	.word	0x3ff80000
 800924c:	0800c860 	.word	0x0800c860
 8009250:	0800c7bd 	.word	0x0800c7bd
 8009254:	0800c74a 	.word	0x0800c74a
 8009258:	0800c718 	.word	0x0800c718
 800925c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	9b07      	ldr	r3, [sp, #28]
 8009264:	2b0e      	cmp	r3, #14
 8009266:	f200 80a4 	bhi.w	80093b2 <_dtoa_r+0x442>
 800926a:	2c00      	cmp	r4, #0
 800926c:	f000 80a1 	beq.w	80093b2 <_dtoa_r+0x442>
 8009270:	2f00      	cmp	r7, #0
 8009272:	dd33      	ble.n	80092dc <_dtoa_r+0x36c>
 8009274:	4bad      	ldr	r3, [pc, #692]	@ (800952c <_dtoa_r+0x5bc>)
 8009276:	f007 020f 	and.w	r2, r7, #15
 800927a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800927e:	ed93 7b00 	vldr	d7, [r3]
 8009282:	05f8      	lsls	r0, r7, #23
 8009284:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009288:	ea4f 1427 	mov.w	r4, r7, asr #4
 800928c:	d516      	bpl.n	80092bc <_dtoa_r+0x34c>
 800928e:	4ba8      	ldr	r3, [pc, #672]	@ (8009530 <_dtoa_r+0x5c0>)
 8009290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009298:	f7f7 fae0 	bl	800085c <__aeabi_ddiv>
 800929c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092a0:	f004 040f 	and.w	r4, r4, #15
 80092a4:	2603      	movs	r6, #3
 80092a6:	4da2      	ldr	r5, [pc, #648]	@ (8009530 <_dtoa_r+0x5c0>)
 80092a8:	b954      	cbnz	r4, 80092c0 <_dtoa_r+0x350>
 80092aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b2:	f7f7 fad3 	bl	800085c <__aeabi_ddiv>
 80092b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ba:	e028      	b.n	800930e <_dtoa_r+0x39e>
 80092bc:	2602      	movs	r6, #2
 80092be:	e7f2      	b.n	80092a6 <_dtoa_r+0x336>
 80092c0:	07e1      	lsls	r1, r4, #31
 80092c2:	d508      	bpl.n	80092d6 <_dtoa_r+0x366>
 80092c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092cc:	f7f7 f99c 	bl	8000608 <__aeabi_dmul>
 80092d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092d4:	3601      	adds	r6, #1
 80092d6:	1064      	asrs	r4, r4, #1
 80092d8:	3508      	adds	r5, #8
 80092da:	e7e5      	b.n	80092a8 <_dtoa_r+0x338>
 80092dc:	f000 80d2 	beq.w	8009484 <_dtoa_r+0x514>
 80092e0:	427c      	negs	r4, r7
 80092e2:	4b92      	ldr	r3, [pc, #584]	@ (800952c <_dtoa_r+0x5bc>)
 80092e4:	4d92      	ldr	r5, [pc, #584]	@ (8009530 <_dtoa_r+0x5c0>)
 80092e6:	f004 020f 	and.w	r2, r4, #15
 80092ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092f6:	f7f7 f987 	bl	8000608 <__aeabi_dmul>
 80092fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fe:	1124      	asrs	r4, r4, #4
 8009300:	2300      	movs	r3, #0
 8009302:	2602      	movs	r6, #2
 8009304:	2c00      	cmp	r4, #0
 8009306:	f040 80b2 	bne.w	800946e <_dtoa_r+0x4fe>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1d3      	bne.n	80092b6 <_dtoa_r+0x346>
 800930e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009310:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80b7 	beq.w	8009488 <_dtoa_r+0x518>
 800931a:	4b86      	ldr	r3, [pc, #536]	@ (8009534 <_dtoa_r+0x5c4>)
 800931c:	2200      	movs	r2, #0
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f7 fbe3 	bl	8000aec <__aeabi_dcmplt>
 8009326:	2800      	cmp	r0, #0
 8009328:	f000 80ae 	beq.w	8009488 <_dtoa_r+0x518>
 800932c:	9b07      	ldr	r3, [sp, #28]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 80aa 	beq.w	8009488 <_dtoa_r+0x518>
 8009334:	9b00      	ldr	r3, [sp, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	dd37      	ble.n	80093aa <_dtoa_r+0x43a>
 800933a:	1e7b      	subs	r3, r7, #1
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	4620      	mov	r0, r4
 8009340:	4b7d      	ldr	r3, [pc, #500]	@ (8009538 <_dtoa_r+0x5c8>)
 8009342:	2200      	movs	r2, #0
 8009344:	4629      	mov	r1, r5
 8009346:	f7f7 f95f 	bl	8000608 <__aeabi_dmul>
 800934a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800934e:	9c00      	ldr	r4, [sp, #0]
 8009350:	3601      	adds	r6, #1
 8009352:	4630      	mov	r0, r6
 8009354:	f7f7 f8ee 	bl	8000534 <__aeabi_i2d>
 8009358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935c:	f7f7 f954 	bl	8000608 <__aeabi_dmul>
 8009360:	4b76      	ldr	r3, [pc, #472]	@ (800953c <_dtoa_r+0x5cc>)
 8009362:	2200      	movs	r2, #0
 8009364:	f7f6 ff9a 	bl	800029c <__adddf3>
 8009368:	4605      	mov	r5, r0
 800936a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800936e:	2c00      	cmp	r4, #0
 8009370:	f040 808d 	bne.w	800948e <_dtoa_r+0x51e>
 8009374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009378:	4b71      	ldr	r3, [pc, #452]	@ (8009540 <_dtoa_r+0x5d0>)
 800937a:	2200      	movs	r2, #0
 800937c:	f7f6 ff8c 	bl	8000298 <__aeabi_dsub>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009388:	462a      	mov	r2, r5
 800938a:	4633      	mov	r3, r6
 800938c:	f7f7 fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 8009390:	2800      	cmp	r0, #0
 8009392:	f040 828b 	bne.w	80098ac <_dtoa_r+0x93c>
 8009396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800939a:	462a      	mov	r2, r5
 800939c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093a0:	f7f7 fba4 	bl	8000aec <__aeabi_dcmplt>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f040 8128 	bne.w	80095fa <_dtoa_r+0x68a>
 80093aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80093ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80093b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f2c0 815a 	blt.w	800966e <_dtoa_r+0x6fe>
 80093ba:	2f0e      	cmp	r7, #14
 80093bc:	f300 8157 	bgt.w	800966e <_dtoa_r+0x6fe>
 80093c0:	4b5a      	ldr	r3, [pc, #360]	@ (800952c <_dtoa_r+0x5bc>)
 80093c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093c6:	ed93 7b00 	vldr	d7, [r3]
 80093ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	ed8d 7b00 	vstr	d7, [sp]
 80093d2:	da03      	bge.n	80093dc <_dtoa_r+0x46c>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f340 8101 	ble.w	80095de <_dtoa_r+0x66e>
 80093dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093e0:	4656      	mov	r6, sl
 80093e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f7 fa37 	bl	800085c <__aeabi_ddiv>
 80093ee:	f7f7 fbbb 	bl	8000b68 <__aeabi_d2iz>
 80093f2:	4680      	mov	r8, r0
 80093f4:	f7f7 f89e 	bl	8000534 <__aeabi_i2d>
 80093f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093fc:	f7f7 f904 	bl	8000608 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4620      	mov	r0, r4
 8009406:	4629      	mov	r1, r5
 8009408:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800940c:	f7f6 ff44 	bl	8000298 <__aeabi_dsub>
 8009410:	f806 4b01 	strb.w	r4, [r6], #1
 8009414:	9d07      	ldr	r5, [sp, #28]
 8009416:	eba6 040a 	sub.w	r4, r6, sl
 800941a:	42a5      	cmp	r5, r4
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	f040 8117 	bne.w	8009652 <_dtoa_r+0x6e2>
 8009424:	f7f6 ff3a 	bl	800029c <__adddf3>
 8009428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800942c:	4604      	mov	r4, r0
 800942e:	460d      	mov	r5, r1
 8009430:	f7f7 fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 8009434:	2800      	cmp	r0, #0
 8009436:	f040 80f9 	bne.w	800962c <_dtoa_r+0x6bc>
 800943a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f7 fb49 	bl	8000ad8 <__aeabi_dcmpeq>
 8009446:	b118      	cbz	r0, 8009450 <_dtoa_r+0x4e0>
 8009448:	f018 0f01 	tst.w	r8, #1
 800944c:	f040 80ee 	bne.w	800962c <_dtoa_r+0x6bc>
 8009450:	4649      	mov	r1, r9
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fc90 	bl	8009d78 <_Bfree>
 8009458:	2300      	movs	r3, #0
 800945a:	7033      	strb	r3, [r6, #0]
 800945c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800945e:	3701      	adds	r7, #1
 8009460:	601f      	str	r7, [r3, #0]
 8009462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 831d 	beq.w	8009aa4 <_dtoa_r+0xb34>
 800946a:	601e      	str	r6, [r3, #0]
 800946c:	e31a      	b.n	8009aa4 <_dtoa_r+0xb34>
 800946e:	07e2      	lsls	r2, r4, #31
 8009470:	d505      	bpl.n	800947e <_dtoa_r+0x50e>
 8009472:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009476:	f7f7 f8c7 	bl	8000608 <__aeabi_dmul>
 800947a:	3601      	adds	r6, #1
 800947c:	2301      	movs	r3, #1
 800947e:	1064      	asrs	r4, r4, #1
 8009480:	3508      	adds	r5, #8
 8009482:	e73f      	b.n	8009304 <_dtoa_r+0x394>
 8009484:	2602      	movs	r6, #2
 8009486:	e742      	b.n	800930e <_dtoa_r+0x39e>
 8009488:	9c07      	ldr	r4, [sp, #28]
 800948a:	9704      	str	r7, [sp, #16]
 800948c:	e761      	b.n	8009352 <_dtoa_r+0x3e2>
 800948e:	4b27      	ldr	r3, [pc, #156]	@ (800952c <_dtoa_r+0x5bc>)
 8009490:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009496:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800949a:	4454      	add	r4, sl
 800949c:	2900      	cmp	r1, #0
 800949e:	d053      	beq.n	8009548 <_dtoa_r+0x5d8>
 80094a0:	4928      	ldr	r1, [pc, #160]	@ (8009544 <_dtoa_r+0x5d4>)
 80094a2:	2000      	movs	r0, #0
 80094a4:	f7f7 f9da 	bl	800085c <__aeabi_ddiv>
 80094a8:	4633      	mov	r3, r6
 80094aa:	462a      	mov	r2, r5
 80094ac:	f7f6 fef4 	bl	8000298 <__aeabi_dsub>
 80094b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094b4:	4656      	mov	r6, sl
 80094b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ba:	f7f7 fb55 	bl	8000b68 <__aeabi_d2iz>
 80094be:	4605      	mov	r5, r0
 80094c0:	f7f7 f838 	bl	8000534 <__aeabi_i2d>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094cc:	f7f6 fee4 	bl	8000298 <__aeabi_dsub>
 80094d0:	3530      	adds	r5, #48	@ 0x30
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094da:	f806 5b01 	strb.w	r5, [r6], #1
 80094de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094e2:	f7f7 fb03 	bl	8000aec <__aeabi_dcmplt>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d171      	bne.n	80095ce <_dtoa_r+0x65e>
 80094ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ee:	4911      	ldr	r1, [pc, #68]	@ (8009534 <_dtoa_r+0x5c4>)
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7f6 fed1 	bl	8000298 <__aeabi_dsub>
 80094f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094fa:	f7f7 faf7 	bl	8000aec <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f040 8095 	bne.w	800962e <_dtoa_r+0x6be>
 8009504:	42a6      	cmp	r6, r4
 8009506:	f43f af50 	beq.w	80093aa <_dtoa_r+0x43a>
 800950a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800950e:	4b0a      	ldr	r3, [pc, #40]	@ (8009538 <_dtoa_r+0x5c8>)
 8009510:	2200      	movs	r2, #0
 8009512:	f7f7 f879 	bl	8000608 <__aeabi_dmul>
 8009516:	4b08      	ldr	r3, [pc, #32]	@ (8009538 <_dtoa_r+0x5c8>)
 8009518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800951c:	2200      	movs	r2, #0
 800951e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009522:	f7f7 f871 	bl	8000608 <__aeabi_dmul>
 8009526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800952a:	e7c4      	b.n	80094b6 <_dtoa_r+0x546>
 800952c:	0800c860 	.word	0x0800c860
 8009530:	0800c838 	.word	0x0800c838
 8009534:	3ff00000 	.word	0x3ff00000
 8009538:	40240000 	.word	0x40240000
 800953c:	401c0000 	.word	0x401c0000
 8009540:	40140000 	.word	0x40140000
 8009544:	3fe00000 	.word	0x3fe00000
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	f7f7 f85c 	bl	8000608 <__aeabi_dmul>
 8009550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009554:	9415      	str	r4, [sp, #84]	@ 0x54
 8009556:	4656      	mov	r6, sl
 8009558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800955c:	f7f7 fb04 	bl	8000b68 <__aeabi_d2iz>
 8009560:	4605      	mov	r5, r0
 8009562:	f7f6 ffe7 	bl	8000534 <__aeabi_i2d>
 8009566:	4602      	mov	r2, r0
 8009568:	460b      	mov	r3, r1
 800956a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800956e:	f7f6 fe93 	bl	8000298 <__aeabi_dsub>
 8009572:	3530      	adds	r5, #48	@ 0x30
 8009574:	f806 5b01 	strb.w	r5, [r6], #1
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	42a6      	cmp	r6, r4
 800957e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009582:	f04f 0200 	mov.w	r2, #0
 8009586:	d124      	bne.n	80095d2 <_dtoa_r+0x662>
 8009588:	4bac      	ldr	r3, [pc, #688]	@ (800983c <_dtoa_r+0x8cc>)
 800958a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800958e:	f7f6 fe85 	bl	800029c <__adddf3>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959a:	f7f7 fac5 	bl	8000b28 <__aeabi_dcmpgt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d145      	bne.n	800962e <_dtoa_r+0x6be>
 80095a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095a6:	49a5      	ldr	r1, [pc, #660]	@ (800983c <_dtoa_r+0x8cc>)
 80095a8:	2000      	movs	r0, #0
 80095aa:	f7f6 fe75 	bl	8000298 <__aeabi_dsub>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b6:	f7f7 fa99 	bl	8000aec <__aeabi_dcmplt>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f43f aef5 	beq.w	80093aa <_dtoa_r+0x43a>
 80095c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80095c2:	1e73      	subs	r3, r6, #1
 80095c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80095c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095ca:	2b30      	cmp	r3, #48	@ 0x30
 80095cc:	d0f8      	beq.n	80095c0 <_dtoa_r+0x650>
 80095ce:	9f04      	ldr	r7, [sp, #16]
 80095d0:	e73e      	b.n	8009450 <_dtoa_r+0x4e0>
 80095d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009840 <_dtoa_r+0x8d0>)
 80095d4:	f7f7 f818 	bl	8000608 <__aeabi_dmul>
 80095d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095dc:	e7bc      	b.n	8009558 <_dtoa_r+0x5e8>
 80095de:	d10c      	bne.n	80095fa <_dtoa_r+0x68a>
 80095e0:	4b98      	ldr	r3, [pc, #608]	@ (8009844 <_dtoa_r+0x8d4>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095e8:	f7f7 f80e 	bl	8000608 <__aeabi_dmul>
 80095ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095f0:	f7f7 fa90 	bl	8000b14 <__aeabi_dcmpge>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f000 8157 	beq.w	80098a8 <_dtoa_r+0x938>
 80095fa:	2400      	movs	r4, #0
 80095fc:	4625      	mov	r5, r4
 80095fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009600:	43db      	mvns	r3, r3
 8009602:	9304      	str	r3, [sp, #16]
 8009604:	4656      	mov	r6, sl
 8009606:	2700      	movs	r7, #0
 8009608:	4621      	mov	r1, r4
 800960a:	4658      	mov	r0, fp
 800960c:	f000 fbb4 	bl	8009d78 <_Bfree>
 8009610:	2d00      	cmp	r5, #0
 8009612:	d0dc      	beq.n	80095ce <_dtoa_r+0x65e>
 8009614:	b12f      	cbz	r7, 8009622 <_dtoa_r+0x6b2>
 8009616:	42af      	cmp	r7, r5
 8009618:	d003      	beq.n	8009622 <_dtoa_r+0x6b2>
 800961a:	4639      	mov	r1, r7
 800961c:	4658      	mov	r0, fp
 800961e:	f000 fbab 	bl	8009d78 <_Bfree>
 8009622:	4629      	mov	r1, r5
 8009624:	4658      	mov	r0, fp
 8009626:	f000 fba7 	bl	8009d78 <_Bfree>
 800962a:	e7d0      	b.n	80095ce <_dtoa_r+0x65e>
 800962c:	9704      	str	r7, [sp, #16]
 800962e:	4633      	mov	r3, r6
 8009630:	461e      	mov	r6, r3
 8009632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009636:	2a39      	cmp	r2, #57	@ 0x39
 8009638:	d107      	bne.n	800964a <_dtoa_r+0x6da>
 800963a:	459a      	cmp	sl, r3
 800963c:	d1f8      	bne.n	8009630 <_dtoa_r+0x6c0>
 800963e:	9a04      	ldr	r2, [sp, #16]
 8009640:	3201      	adds	r2, #1
 8009642:	9204      	str	r2, [sp, #16]
 8009644:	2230      	movs	r2, #48	@ 0x30
 8009646:	f88a 2000 	strb.w	r2, [sl]
 800964a:	781a      	ldrb	r2, [r3, #0]
 800964c:	3201      	adds	r2, #1
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	e7bd      	b.n	80095ce <_dtoa_r+0x65e>
 8009652:	4b7b      	ldr	r3, [pc, #492]	@ (8009840 <_dtoa_r+0x8d0>)
 8009654:	2200      	movs	r2, #0
 8009656:	f7f6 ffd7 	bl	8000608 <__aeabi_dmul>
 800965a:	2200      	movs	r2, #0
 800965c:	2300      	movs	r3, #0
 800965e:	4604      	mov	r4, r0
 8009660:	460d      	mov	r5, r1
 8009662:	f7f7 fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f aebb 	beq.w	80093e2 <_dtoa_r+0x472>
 800966c:	e6f0      	b.n	8009450 <_dtoa_r+0x4e0>
 800966e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009670:	2a00      	cmp	r2, #0
 8009672:	f000 80db 	beq.w	800982c <_dtoa_r+0x8bc>
 8009676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009678:	2a01      	cmp	r2, #1
 800967a:	f300 80bf 	bgt.w	80097fc <_dtoa_r+0x88c>
 800967e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009680:	2a00      	cmp	r2, #0
 8009682:	f000 80b7 	beq.w	80097f4 <_dtoa_r+0x884>
 8009686:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800968a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800968c:	4646      	mov	r6, r8
 800968e:	9a08      	ldr	r2, [sp, #32]
 8009690:	2101      	movs	r1, #1
 8009692:	441a      	add	r2, r3
 8009694:	4658      	mov	r0, fp
 8009696:	4498      	add	r8, r3
 8009698:	9208      	str	r2, [sp, #32]
 800969a:	f000 fc6b 	bl	8009f74 <__i2b>
 800969e:	4605      	mov	r5, r0
 80096a0:	b15e      	cbz	r6, 80096ba <_dtoa_r+0x74a>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd08      	ble.n	80096ba <_dtoa_r+0x74a>
 80096a8:	42b3      	cmp	r3, r6
 80096aa:	9a08      	ldr	r2, [sp, #32]
 80096ac:	bfa8      	it	ge
 80096ae:	4633      	movge	r3, r6
 80096b0:	eba8 0803 	sub.w	r8, r8, r3
 80096b4:	1af6      	subs	r6, r6, r3
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	9308      	str	r3, [sp, #32]
 80096ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096bc:	b1f3      	cbz	r3, 80096fc <_dtoa_r+0x78c>
 80096be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 80b7 	beq.w	8009834 <_dtoa_r+0x8c4>
 80096c6:	b18c      	cbz	r4, 80096ec <_dtoa_r+0x77c>
 80096c8:	4629      	mov	r1, r5
 80096ca:	4622      	mov	r2, r4
 80096cc:	4658      	mov	r0, fp
 80096ce:	f000 fd11 	bl	800a0f4 <__pow5mult>
 80096d2:	464a      	mov	r2, r9
 80096d4:	4601      	mov	r1, r0
 80096d6:	4605      	mov	r5, r0
 80096d8:	4658      	mov	r0, fp
 80096da:	f000 fc61 	bl	8009fa0 <__multiply>
 80096de:	4649      	mov	r1, r9
 80096e0:	9004      	str	r0, [sp, #16]
 80096e2:	4658      	mov	r0, fp
 80096e4:	f000 fb48 	bl	8009d78 <_Bfree>
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	4699      	mov	r9, r3
 80096ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ee:	1b1a      	subs	r2, r3, r4
 80096f0:	d004      	beq.n	80096fc <_dtoa_r+0x78c>
 80096f2:	4649      	mov	r1, r9
 80096f4:	4658      	mov	r0, fp
 80096f6:	f000 fcfd 	bl	800a0f4 <__pow5mult>
 80096fa:	4681      	mov	r9, r0
 80096fc:	2101      	movs	r1, #1
 80096fe:	4658      	mov	r0, fp
 8009700:	f000 fc38 	bl	8009f74 <__i2b>
 8009704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009706:	4604      	mov	r4, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 81cf 	beq.w	8009aac <_dtoa_r+0xb3c>
 800970e:	461a      	mov	r2, r3
 8009710:	4601      	mov	r1, r0
 8009712:	4658      	mov	r0, fp
 8009714:	f000 fcee 	bl	800a0f4 <__pow5mult>
 8009718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800971a:	2b01      	cmp	r3, #1
 800971c:	4604      	mov	r4, r0
 800971e:	f300 8095 	bgt.w	800984c <_dtoa_r+0x8dc>
 8009722:	9b02      	ldr	r3, [sp, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	f040 8087 	bne.w	8009838 <_dtoa_r+0x8c8>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009730:	2b00      	cmp	r3, #0
 8009732:	f040 8089 	bne.w	8009848 <_dtoa_r+0x8d8>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800973c:	0d1b      	lsrs	r3, r3, #20
 800973e:	051b      	lsls	r3, r3, #20
 8009740:	b12b      	cbz	r3, 800974e <_dtoa_r+0x7de>
 8009742:	9b08      	ldr	r3, [sp, #32]
 8009744:	3301      	adds	r3, #1
 8009746:	9308      	str	r3, [sp, #32]
 8009748:	f108 0801 	add.w	r8, r8, #1
 800974c:	2301      	movs	r3, #1
 800974e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 81b0 	beq.w	8009ab8 <_dtoa_r+0xb48>
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800975e:	6918      	ldr	r0, [r3, #16]
 8009760:	f000 fbbc 	bl	8009edc <__hi0bits>
 8009764:	f1c0 0020 	rsb	r0, r0, #32
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	4418      	add	r0, r3
 800976c:	f010 001f 	ands.w	r0, r0, #31
 8009770:	d077      	beq.n	8009862 <_dtoa_r+0x8f2>
 8009772:	f1c0 0320 	rsb	r3, r0, #32
 8009776:	2b04      	cmp	r3, #4
 8009778:	dd6b      	ble.n	8009852 <_dtoa_r+0x8e2>
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	f1c0 001c 	rsb	r0, r0, #28
 8009780:	4403      	add	r3, r0
 8009782:	4480      	add	r8, r0
 8009784:	4406      	add	r6, r0
 8009786:	9308      	str	r3, [sp, #32]
 8009788:	f1b8 0f00 	cmp.w	r8, #0
 800978c:	dd05      	ble.n	800979a <_dtoa_r+0x82a>
 800978e:	4649      	mov	r1, r9
 8009790:	4642      	mov	r2, r8
 8009792:	4658      	mov	r0, fp
 8009794:	f000 fd08 	bl	800a1a8 <__lshift>
 8009798:	4681      	mov	r9, r0
 800979a:	9b08      	ldr	r3, [sp, #32]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd05      	ble.n	80097ac <_dtoa_r+0x83c>
 80097a0:	4621      	mov	r1, r4
 80097a2:	461a      	mov	r2, r3
 80097a4:	4658      	mov	r0, fp
 80097a6:	f000 fcff 	bl	800a1a8 <__lshift>
 80097aa:	4604      	mov	r4, r0
 80097ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d059      	beq.n	8009866 <_dtoa_r+0x8f6>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4648      	mov	r0, r9
 80097b6:	f000 fd63 	bl	800a280 <__mcmp>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	da53      	bge.n	8009866 <_dtoa_r+0x8f6>
 80097be:	1e7b      	subs	r3, r7, #1
 80097c0:	9304      	str	r3, [sp, #16]
 80097c2:	4649      	mov	r1, r9
 80097c4:	2300      	movs	r3, #0
 80097c6:	220a      	movs	r2, #10
 80097c8:	4658      	mov	r0, fp
 80097ca:	f000 faf7 	bl	8009dbc <__multadd>
 80097ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097d0:	4681      	mov	r9, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8172 	beq.w	8009abc <_dtoa_r+0xb4c>
 80097d8:	2300      	movs	r3, #0
 80097da:	4629      	mov	r1, r5
 80097dc:	220a      	movs	r2, #10
 80097de:	4658      	mov	r0, fp
 80097e0:	f000 faec 	bl	8009dbc <__multadd>
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	4605      	mov	r5, r0
 80097ea:	dc67      	bgt.n	80098bc <_dtoa_r+0x94c>
 80097ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	dc41      	bgt.n	8009876 <_dtoa_r+0x906>
 80097f2:	e063      	b.n	80098bc <_dtoa_r+0x94c>
 80097f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097fa:	e746      	b.n	800968a <_dtoa_r+0x71a>
 80097fc:	9b07      	ldr	r3, [sp, #28]
 80097fe:	1e5c      	subs	r4, r3, #1
 8009800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009802:	42a3      	cmp	r3, r4
 8009804:	bfbf      	itttt	lt
 8009806:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009808:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800980a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800980c:	1ae3      	sublt	r3, r4, r3
 800980e:	bfb4      	ite	lt
 8009810:	18d2      	addlt	r2, r2, r3
 8009812:	1b1c      	subge	r4, r3, r4
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	bfbc      	itt	lt
 8009818:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800981a:	2400      	movlt	r4, #0
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfb5      	itete	lt
 8009820:	eba8 0603 	sublt.w	r6, r8, r3
 8009824:	9b07      	ldrge	r3, [sp, #28]
 8009826:	2300      	movlt	r3, #0
 8009828:	4646      	movge	r6, r8
 800982a:	e730      	b.n	800968e <_dtoa_r+0x71e>
 800982c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800982e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009830:	4646      	mov	r6, r8
 8009832:	e735      	b.n	80096a0 <_dtoa_r+0x730>
 8009834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009836:	e75c      	b.n	80096f2 <_dtoa_r+0x782>
 8009838:	2300      	movs	r3, #0
 800983a:	e788      	b.n	800974e <_dtoa_r+0x7de>
 800983c:	3fe00000 	.word	0x3fe00000
 8009840:	40240000 	.word	0x40240000
 8009844:	40140000 	.word	0x40140000
 8009848:	9b02      	ldr	r3, [sp, #8]
 800984a:	e780      	b.n	800974e <_dtoa_r+0x7de>
 800984c:	2300      	movs	r3, #0
 800984e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009850:	e782      	b.n	8009758 <_dtoa_r+0x7e8>
 8009852:	d099      	beq.n	8009788 <_dtoa_r+0x818>
 8009854:	9a08      	ldr	r2, [sp, #32]
 8009856:	331c      	adds	r3, #28
 8009858:	441a      	add	r2, r3
 800985a:	4498      	add	r8, r3
 800985c:	441e      	add	r6, r3
 800985e:	9208      	str	r2, [sp, #32]
 8009860:	e792      	b.n	8009788 <_dtoa_r+0x818>
 8009862:	4603      	mov	r3, r0
 8009864:	e7f6      	b.n	8009854 <_dtoa_r+0x8e4>
 8009866:	9b07      	ldr	r3, [sp, #28]
 8009868:	9704      	str	r7, [sp, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	dc20      	bgt.n	80098b0 <_dtoa_r+0x940>
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009872:	2b02      	cmp	r3, #2
 8009874:	dd1e      	ble.n	80098b4 <_dtoa_r+0x944>
 8009876:	9b00      	ldr	r3, [sp, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f47f aec0 	bne.w	80095fe <_dtoa_r+0x68e>
 800987e:	4621      	mov	r1, r4
 8009880:	2205      	movs	r2, #5
 8009882:	4658      	mov	r0, fp
 8009884:	f000 fa9a 	bl	8009dbc <__multadd>
 8009888:	4601      	mov	r1, r0
 800988a:	4604      	mov	r4, r0
 800988c:	4648      	mov	r0, r9
 800988e:	f000 fcf7 	bl	800a280 <__mcmp>
 8009892:	2800      	cmp	r0, #0
 8009894:	f77f aeb3 	ble.w	80095fe <_dtoa_r+0x68e>
 8009898:	4656      	mov	r6, sl
 800989a:	2331      	movs	r3, #49	@ 0x31
 800989c:	f806 3b01 	strb.w	r3, [r6], #1
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	3301      	adds	r3, #1
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	e6ae      	b.n	8009606 <_dtoa_r+0x696>
 80098a8:	9c07      	ldr	r4, [sp, #28]
 80098aa:	9704      	str	r7, [sp, #16]
 80098ac:	4625      	mov	r5, r4
 80098ae:	e7f3      	b.n	8009898 <_dtoa_r+0x928>
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8104 	beq.w	8009ac4 <_dtoa_r+0xb54>
 80098bc:	2e00      	cmp	r6, #0
 80098be:	dd05      	ble.n	80098cc <_dtoa_r+0x95c>
 80098c0:	4629      	mov	r1, r5
 80098c2:	4632      	mov	r2, r6
 80098c4:	4658      	mov	r0, fp
 80098c6:	f000 fc6f 	bl	800a1a8 <__lshift>
 80098ca:	4605      	mov	r5, r0
 80098cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d05a      	beq.n	8009988 <_dtoa_r+0xa18>
 80098d2:	6869      	ldr	r1, [r5, #4]
 80098d4:	4658      	mov	r0, fp
 80098d6:	f000 fa0f 	bl	8009cf8 <_Balloc>
 80098da:	4606      	mov	r6, r0
 80098dc:	b928      	cbnz	r0, 80098ea <_dtoa_r+0x97a>
 80098de:	4b84      	ldr	r3, [pc, #528]	@ (8009af0 <_dtoa_r+0xb80>)
 80098e0:	4602      	mov	r2, r0
 80098e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098e6:	f7ff bb5a 	b.w	8008f9e <_dtoa_r+0x2e>
 80098ea:	692a      	ldr	r2, [r5, #16]
 80098ec:	3202      	adds	r2, #2
 80098ee:	0092      	lsls	r2, r2, #2
 80098f0:	f105 010c 	add.w	r1, r5, #12
 80098f4:	300c      	adds	r0, #12
 80098f6:	f7ff fa9c 	bl	8008e32 <memcpy>
 80098fa:	2201      	movs	r2, #1
 80098fc:	4631      	mov	r1, r6
 80098fe:	4658      	mov	r0, fp
 8009900:	f000 fc52 	bl	800a1a8 <__lshift>
 8009904:	f10a 0301 	add.w	r3, sl, #1
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	9b00      	ldr	r3, [sp, #0]
 800990c:	4453      	add	r3, sl
 800990e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009910:	9b02      	ldr	r3, [sp, #8]
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	462f      	mov	r7, r5
 8009918:	930a      	str	r3, [sp, #40]	@ 0x28
 800991a:	4605      	mov	r5, r0
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	4621      	mov	r1, r4
 8009920:	3b01      	subs	r3, #1
 8009922:	4648      	mov	r0, r9
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	f7ff fa99 	bl	8008e5c <quorem>
 800992a:	4639      	mov	r1, r7
 800992c:	9002      	str	r0, [sp, #8]
 800992e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009932:	4648      	mov	r0, r9
 8009934:	f000 fca4 	bl	800a280 <__mcmp>
 8009938:	462a      	mov	r2, r5
 800993a:	9008      	str	r0, [sp, #32]
 800993c:	4621      	mov	r1, r4
 800993e:	4658      	mov	r0, fp
 8009940:	f000 fcba 	bl	800a2b8 <__mdiff>
 8009944:	68c2      	ldr	r2, [r0, #12]
 8009946:	4606      	mov	r6, r0
 8009948:	bb02      	cbnz	r2, 800998c <_dtoa_r+0xa1c>
 800994a:	4601      	mov	r1, r0
 800994c:	4648      	mov	r0, r9
 800994e:	f000 fc97 	bl	800a280 <__mcmp>
 8009952:	4602      	mov	r2, r0
 8009954:	4631      	mov	r1, r6
 8009956:	4658      	mov	r0, fp
 8009958:	920e      	str	r2, [sp, #56]	@ 0x38
 800995a:	f000 fa0d 	bl	8009d78 <_Bfree>
 800995e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009960:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009962:	9e07      	ldr	r6, [sp, #28]
 8009964:	ea43 0102 	orr.w	r1, r3, r2
 8009968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996a:	4319      	orrs	r1, r3
 800996c:	d110      	bne.n	8009990 <_dtoa_r+0xa20>
 800996e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009972:	d029      	beq.n	80099c8 <_dtoa_r+0xa58>
 8009974:	9b08      	ldr	r3, [sp, #32]
 8009976:	2b00      	cmp	r3, #0
 8009978:	dd02      	ble.n	8009980 <_dtoa_r+0xa10>
 800997a:	9b02      	ldr	r3, [sp, #8]
 800997c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	f883 8000 	strb.w	r8, [r3]
 8009986:	e63f      	b.n	8009608 <_dtoa_r+0x698>
 8009988:	4628      	mov	r0, r5
 800998a:	e7bb      	b.n	8009904 <_dtoa_r+0x994>
 800998c:	2201      	movs	r2, #1
 800998e:	e7e1      	b.n	8009954 <_dtoa_r+0x9e4>
 8009990:	9b08      	ldr	r3, [sp, #32]
 8009992:	2b00      	cmp	r3, #0
 8009994:	db04      	blt.n	80099a0 <_dtoa_r+0xa30>
 8009996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009998:	430b      	orrs	r3, r1
 800999a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800999c:	430b      	orrs	r3, r1
 800999e:	d120      	bne.n	80099e2 <_dtoa_r+0xa72>
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	dded      	ble.n	8009980 <_dtoa_r+0xa10>
 80099a4:	4649      	mov	r1, r9
 80099a6:	2201      	movs	r2, #1
 80099a8:	4658      	mov	r0, fp
 80099aa:	f000 fbfd 	bl	800a1a8 <__lshift>
 80099ae:	4621      	mov	r1, r4
 80099b0:	4681      	mov	r9, r0
 80099b2:	f000 fc65 	bl	800a280 <__mcmp>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	dc03      	bgt.n	80099c2 <_dtoa_r+0xa52>
 80099ba:	d1e1      	bne.n	8009980 <_dtoa_r+0xa10>
 80099bc:	f018 0f01 	tst.w	r8, #1
 80099c0:	d0de      	beq.n	8009980 <_dtoa_r+0xa10>
 80099c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099c6:	d1d8      	bne.n	800997a <_dtoa_r+0xa0a>
 80099c8:	9a00      	ldr	r2, [sp, #0]
 80099ca:	2339      	movs	r3, #57	@ 0x39
 80099cc:	7013      	strb	r3, [r2, #0]
 80099ce:	4633      	mov	r3, r6
 80099d0:	461e      	mov	r6, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099d8:	2a39      	cmp	r2, #57	@ 0x39
 80099da:	d052      	beq.n	8009a82 <_dtoa_r+0xb12>
 80099dc:	3201      	adds	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e612      	b.n	8009608 <_dtoa_r+0x698>
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	dd07      	ble.n	80099f6 <_dtoa_r+0xa86>
 80099e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099ea:	d0ed      	beq.n	80099c8 <_dtoa_r+0xa58>
 80099ec:	9a00      	ldr	r2, [sp, #0]
 80099ee:	f108 0301 	add.w	r3, r8, #1
 80099f2:	7013      	strb	r3, [r2, #0]
 80099f4:	e608      	b.n	8009608 <_dtoa_r+0x698>
 80099f6:	9b07      	ldr	r3, [sp, #28]
 80099f8:	9a07      	ldr	r2, [sp, #28]
 80099fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80099fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d028      	beq.n	8009a56 <_dtoa_r+0xae6>
 8009a04:	4649      	mov	r1, r9
 8009a06:	2300      	movs	r3, #0
 8009a08:	220a      	movs	r2, #10
 8009a0a:	4658      	mov	r0, fp
 8009a0c:	f000 f9d6 	bl	8009dbc <__multadd>
 8009a10:	42af      	cmp	r7, r5
 8009a12:	4681      	mov	r9, r0
 8009a14:	f04f 0300 	mov.w	r3, #0
 8009a18:	f04f 020a 	mov.w	r2, #10
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	4658      	mov	r0, fp
 8009a20:	d107      	bne.n	8009a32 <_dtoa_r+0xac2>
 8009a22:	f000 f9cb 	bl	8009dbc <__multadd>
 8009a26:	4607      	mov	r7, r0
 8009a28:	4605      	mov	r5, r0
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	9307      	str	r3, [sp, #28]
 8009a30:	e774      	b.n	800991c <_dtoa_r+0x9ac>
 8009a32:	f000 f9c3 	bl	8009dbc <__multadd>
 8009a36:	4629      	mov	r1, r5
 8009a38:	4607      	mov	r7, r0
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	220a      	movs	r2, #10
 8009a3e:	4658      	mov	r0, fp
 8009a40:	f000 f9bc 	bl	8009dbc <__multadd>
 8009a44:	4605      	mov	r5, r0
 8009a46:	e7f0      	b.n	8009a2a <_dtoa_r+0xaba>
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfcc      	ite	gt
 8009a4e:	461e      	movgt	r6, r3
 8009a50:	2601      	movle	r6, #1
 8009a52:	4456      	add	r6, sl
 8009a54:	2700      	movs	r7, #0
 8009a56:	4649      	mov	r1, r9
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4658      	mov	r0, fp
 8009a5c:	f000 fba4 	bl	800a1a8 <__lshift>
 8009a60:	4621      	mov	r1, r4
 8009a62:	4681      	mov	r9, r0
 8009a64:	f000 fc0c 	bl	800a280 <__mcmp>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	dcb0      	bgt.n	80099ce <_dtoa_r+0xa5e>
 8009a6c:	d102      	bne.n	8009a74 <_dtoa_r+0xb04>
 8009a6e:	f018 0f01 	tst.w	r8, #1
 8009a72:	d1ac      	bne.n	80099ce <_dtoa_r+0xa5e>
 8009a74:	4633      	mov	r3, r6
 8009a76:	461e      	mov	r6, r3
 8009a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a7c:	2a30      	cmp	r2, #48	@ 0x30
 8009a7e:	d0fa      	beq.n	8009a76 <_dtoa_r+0xb06>
 8009a80:	e5c2      	b.n	8009608 <_dtoa_r+0x698>
 8009a82:	459a      	cmp	sl, r3
 8009a84:	d1a4      	bne.n	80099d0 <_dtoa_r+0xa60>
 8009a86:	9b04      	ldr	r3, [sp, #16]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	2331      	movs	r3, #49	@ 0x31
 8009a8e:	f88a 3000 	strb.w	r3, [sl]
 8009a92:	e5b9      	b.n	8009608 <_dtoa_r+0x698>
 8009a94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009af4 <_dtoa_r+0xb84>
 8009a9a:	b11b      	cbz	r3, 8009aa4 <_dtoa_r+0xb34>
 8009a9c:	f10a 0308 	add.w	r3, sl, #8
 8009aa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	b019      	add	sp, #100	@ 0x64
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	f77f ae37 	ble.w	8009722 <_dtoa_r+0x7b2>
 8009ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab8:	2001      	movs	r0, #1
 8009aba:	e655      	b.n	8009768 <_dtoa_r+0x7f8>
 8009abc:	9b00      	ldr	r3, [sp, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f77f aed6 	ble.w	8009870 <_dtoa_r+0x900>
 8009ac4:	4656      	mov	r6, sl
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4648      	mov	r0, r9
 8009aca:	f7ff f9c7 	bl	8008e5c <quorem>
 8009ace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ad2:	f806 8b01 	strb.w	r8, [r6], #1
 8009ad6:	9b00      	ldr	r3, [sp, #0]
 8009ad8:	eba6 020a 	sub.w	r2, r6, sl
 8009adc:	4293      	cmp	r3, r2
 8009ade:	ddb3      	ble.n	8009a48 <_dtoa_r+0xad8>
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	220a      	movs	r2, #10
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f000 f968 	bl	8009dbc <__multadd>
 8009aec:	4681      	mov	r9, r0
 8009aee:	e7ea      	b.n	8009ac6 <_dtoa_r+0xb56>
 8009af0:	0800c7bd 	.word	0x0800c7bd
 8009af4:	0800c741 	.word	0x0800c741

08009af8 <_free_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4605      	mov	r5, r0
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d041      	beq.n	8009b84 <_free_r+0x8c>
 8009b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b04:	1f0c      	subs	r4, r1, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bfb8      	it	lt
 8009b0a:	18e4      	addlt	r4, r4, r3
 8009b0c:	f000 f8e8 	bl	8009ce0 <__malloc_lock>
 8009b10:	4a1d      	ldr	r2, [pc, #116]	@ (8009b88 <_free_r+0x90>)
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	b933      	cbnz	r3, 8009b24 <_free_r+0x2c>
 8009b16:	6063      	str	r3, [r4, #4]
 8009b18:	6014      	str	r4, [r2, #0]
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b20:	f000 b8e4 	b.w	8009cec <__malloc_unlock>
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	d908      	bls.n	8009b3a <_free_r+0x42>
 8009b28:	6820      	ldr	r0, [r4, #0]
 8009b2a:	1821      	adds	r1, r4, r0
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	bf01      	itttt	eq
 8009b30:	6819      	ldreq	r1, [r3, #0]
 8009b32:	685b      	ldreq	r3, [r3, #4]
 8009b34:	1809      	addeq	r1, r1, r0
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	e7ed      	b.n	8009b16 <_free_r+0x1e>
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	b10b      	cbz	r3, 8009b44 <_free_r+0x4c>
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	d9fa      	bls.n	8009b3a <_free_r+0x42>
 8009b44:	6811      	ldr	r1, [r2, #0]
 8009b46:	1850      	adds	r0, r2, r1
 8009b48:	42a0      	cmp	r0, r4
 8009b4a:	d10b      	bne.n	8009b64 <_free_r+0x6c>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	4401      	add	r1, r0
 8009b50:	1850      	adds	r0, r2, r1
 8009b52:	4283      	cmp	r3, r0
 8009b54:	6011      	str	r1, [r2, #0]
 8009b56:	d1e0      	bne.n	8009b1a <_free_r+0x22>
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	6053      	str	r3, [r2, #4]
 8009b5e:	4408      	add	r0, r1
 8009b60:	6010      	str	r0, [r2, #0]
 8009b62:	e7da      	b.n	8009b1a <_free_r+0x22>
 8009b64:	d902      	bls.n	8009b6c <_free_r+0x74>
 8009b66:	230c      	movs	r3, #12
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	e7d6      	b.n	8009b1a <_free_r+0x22>
 8009b6c:	6820      	ldr	r0, [r4, #0]
 8009b6e:	1821      	adds	r1, r4, r0
 8009b70:	428b      	cmp	r3, r1
 8009b72:	bf04      	itt	eq
 8009b74:	6819      	ldreq	r1, [r3, #0]
 8009b76:	685b      	ldreq	r3, [r3, #4]
 8009b78:	6063      	str	r3, [r4, #4]
 8009b7a:	bf04      	itt	eq
 8009b7c:	1809      	addeq	r1, r1, r0
 8009b7e:	6021      	streq	r1, [r4, #0]
 8009b80:	6054      	str	r4, [r2, #4]
 8009b82:	e7ca      	b.n	8009b1a <_free_r+0x22>
 8009b84:	bd38      	pop	{r3, r4, r5, pc}
 8009b86:	bf00      	nop
 8009b88:	20004e84 	.word	0x20004e84

08009b8c <malloc>:
 8009b8c:	4b02      	ldr	r3, [pc, #8]	@ (8009b98 <malloc+0xc>)
 8009b8e:	4601      	mov	r1, r0
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	f000 b825 	b.w	8009be0 <_malloc_r>
 8009b96:	bf00      	nop
 8009b98:	2000002c 	.word	0x2000002c

08009b9c <sbrk_aligned>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009bdc <sbrk_aligned+0x40>)
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	6831      	ldr	r1, [r6, #0]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	b911      	cbnz	r1, 8009bae <sbrk_aligned+0x12>
 8009ba8:	f001 fe0c 	bl	800b7c4 <_sbrk_r>
 8009bac:	6030      	str	r0, [r6, #0]
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	f001 fe07 	bl	800b7c4 <_sbrk_r>
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	d103      	bne.n	8009bc2 <sbrk_aligned+0x26>
 8009bba:	f04f 34ff 	mov.w	r4, #4294967295
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	bd70      	pop	{r4, r5, r6, pc}
 8009bc2:	1cc4      	adds	r4, r0, #3
 8009bc4:	f024 0403 	bic.w	r4, r4, #3
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d0f8      	beq.n	8009bbe <sbrk_aligned+0x22>
 8009bcc:	1a21      	subs	r1, r4, r0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f001 fdf8 	bl	800b7c4 <_sbrk_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d1f2      	bne.n	8009bbe <sbrk_aligned+0x22>
 8009bd8:	e7ef      	b.n	8009bba <sbrk_aligned+0x1e>
 8009bda:	bf00      	nop
 8009bdc:	20004e80 	.word	0x20004e80

08009be0 <_malloc_r>:
 8009be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be4:	1ccd      	adds	r5, r1, #3
 8009be6:	f025 0503 	bic.w	r5, r5, #3
 8009bea:	3508      	adds	r5, #8
 8009bec:	2d0c      	cmp	r5, #12
 8009bee:	bf38      	it	cc
 8009bf0:	250c      	movcc	r5, #12
 8009bf2:	2d00      	cmp	r5, #0
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	db01      	blt.n	8009bfc <_malloc_r+0x1c>
 8009bf8:	42a9      	cmp	r1, r5
 8009bfa:	d904      	bls.n	8009c06 <_malloc_r+0x26>
 8009bfc:	230c      	movs	r3, #12
 8009bfe:	6033      	str	r3, [r6, #0]
 8009c00:	2000      	movs	r0, #0
 8009c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cdc <_malloc_r+0xfc>
 8009c0a:	f000 f869 	bl	8009ce0 <__malloc_lock>
 8009c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c12:	461c      	mov	r4, r3
 8009c14:	bb44      	cbnz	r4, 8009c68 <_malloc_r+0x88>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff ffbf 	bl	8009b9c <sbrk_aligned>
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	4604      	mov	r4, r0
 8009c22:	d158      	bne.n	8009cd6 <_malloc_r+0xf6>
 8009c24:	f8d8 4000 	ldr.w	r4, [r8]
 8009c28:	4627      	mov	r7, r4
 8009c2a:	2f00      	cmp	r7, #0
 8009c2c:	d143      	bne.n	8009cb6 <_malloc_r+0xd6>
 8009c2e:	2c00      	cmp	r4, #0
 8009c30:	d04b      	beq.n	8009cca <_malloc_r+0xea>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	4639      	mov	r1, r7
 8009c36:	4630      	mov	r0, r6
 8009c38:	eb04 0903 	add.w	r9, r4, r3
 8009c3c:	f001 fdc2 	bl	800b7c4 <_sbrk_r>
 8009c40:	4581      	cmp	r9, r0
 8009c42:	d142      	bne.n	8009cca <_malloc_r+0xea>
 8009c44:	6821      	ldr	r1, [r4, #0]
 8009c46:	1a6d      	subs	r5, r5, r1
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ffa6 	bl	8009b9c <sbrk_aligned>
 8009c50:	3001      	adds	r0, #1
 8009c52:	d03a      	beq.n	8009cca <_malloc_r+0xea>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	442b      	add	r3, r5
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	bb62      	cbnz	r2, 8009cbc <_malloc_r+0xdc>
 8009c62:	f8c8 7000 	str.w	r7, [r8]
 8009c66:	e00f      	b.n	8009c88 <_malloc_r+0xa8>
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	1b52      	subs	r2, r2, r5
 8009c6c:	d420      	bmi.n	8009cb0 <_malloc_r+0xd0>
 8009c6e:	2a0b      	cmp	r2, #11
 8009c70:	d917      	bls.n	8009ca2 <_malloc_r+0xc2>
 8009c72:	1961      	adds	r1, r4, r5
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	6025      	str	r5, [r4, #0]
 8009c78:	bf18      	it	ne
 8009c7a:	6059      	strne	r1, [r3, #4]
 8009c7c:	6863      	ldr	r3, [r4, #4]
 8009c7e:	bf08      	it	eq
 8009c80:	f8c8 1000 	streq.w	r1, [r8]
 8009c84:	5162      	str	r2, [r4, r5]
 8009c86:	604b      	str	r3, [r1, #4]
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f000 f82f 	bl	8009cec <__malloc_unlock>
 8009c8e:	f104 000b 	add.w	r0, r4, #11
 8009c92:	1d23      	adds	r3, r4, #4
 8009c94:	f020 0007 	bic.w	r0, r0, #7
 8009c98:	1ac2      	subs	r2, r0, r3
 8009c9a:	bf1c      	itt	ne
 8009c9c:	1a1b      	subne	r3, r3, r0
 8009c9e:	50a3      	strne	r3, [r4, r2]
 8009ca0:	e7af      	b.n	8009c02 <_malloc_r+0x22>
 8009ca2:	6862      	ldr	r2, [r4, #4]
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	bf0c      	ite	eq
 8009ca8:	f8c8 2000 	streq.w	r2, [r8]
 8009cac:	605a      	strne	r2, [r3, #4]
 8009cae:	e7eb      	b.n	8009c88 <_malloc_r+0xa8>
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	6864      	ldr	r4, [r4, #4]
 8009cb4:	e7ae      	b.n	8009c14 <_malloc_r+0x34>
 8009cb6:	463c      	mov	r4, r7
 8009cb8:	687f      	ldr	r7, [r7, #4]
 8009cba:	e7b6      	b.n	8009c2a <_malloc_r+0x4a>
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	d1fb      	bne.n	8009cbc <_malloc_r+0xdc>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	6053      	str	r3, [r2, #4]
 8009cc8:	e7de      	b.n	8009c88 <_malloc_r+0xa8>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	6033      	str	r3, [r6, #0]
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f000 f80c 	bl	8009cec <__malloc_unlock>
 8009cd4:	e794      	b.n	8009c00 <_malloc_r+0x20>
 8009cd6:	6005      	str	r5, [r0, #0]
 8009cd8:	e7d6      	b.n	8009c88 <_malloc_r+0xa8>
 8009cda:	bf00      	nop
 8009cdc:	20004e84 	.word	0x20004e84

08009ce0 <__malloc_lock>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	@ (8009ce8 <__malloc_lock+0x8>)
 8009ce2:	f7ff b8a4 	b.w	8008e2e <__retarget_lock_acquire_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	20004e7c 	.word	0x20004e7c

08009cec <__malloc_unlock>:
 8009cec:	4801      	ldr	r0, [pc, #4]	@ (8009cf4 <__malloc_unlock+0x8>)
 8009cee:	f7ff b89f 	b.w	8008e30 <__retarget_lock_release_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	20004e7c 	.word	0x20004e7c

08009cf8 <_Balloc>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	69c6      	ldr	r6, [r0, #28]
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	460d      	mov	r5, r1
 8009d00:	b976      	cbnz	r6, 8009d20 <_Balloc+0x28>
 8009d02:	2010      	movs	r0, #16
 8009d04:	f7ff ff42 	bl	8009b8c <malloc>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	61e0      	str	r0, [r4, #28]
 8009d0c:	b920      	cbnz	r0, 8009d18 <_Balloc+0x20>
 8009d0e:	4b18      	ldr	r3, [pc, #96]	@ (8009d70 <_Balloc+0x78>)
 8009d10:	4818      	ldr	r0, [pc, #96]	@ (8009d74 <_Balloc+0x7c>)
 8009d12:	216b      	movs	r1, #107	@ 0x6b
 8009d14:	f001 fd70 	bl	800b7f8 <__assert_func>
 8009d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d1c:	6006      	str	r6, [r0, #0]
 8009d1e:	60c6      	str	r6, [r0, #12]
 8009d20:	69e6      	ldr	r6, [r4, #28]
 8009d22:	68f3      	ldr	r3, [r6, #12]
 8009d24:	b183      	cbz	r3, 8009d48 <_Balloc+0x50>
 8009d26:	69e3      	ldr	r3, [r4, #28]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d2e:	b9b8      	cbnz	r0, 8009d60 <_Balloc+0x68>
 8009d30:	2101      	movs	r1, #1
 8009d32:	fa01 f605 	lsl.w	r6, r1, r5
 8009d36:	1d72      	adds	r2, r6, #5
 8009d38:	0092      	lsls	r2, r2, #2
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f001 fd7a 	bl	800b834 <_calloc_r>
 8009d40:	b160      	cbz	r0, 8009d5c <_Balloc+0x64>
 8009d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d46:	e00e      	b.n	8009d66 <_Balloc+0x6e>
 8009d48:	2221      	movs	r2, #33	@ 0x21
 8009d4a:	2104      	movs	r1, #4
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f001 fd71 	bl	800b834 <_calloc_r>
 8009d52:	69e3      	ldr	r3, [r4, #28]
 8009d54:	60f0      	str	r0, [r6, #12]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e4      	bne.n	8009d26 <_Balloc+0x2e>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	6802      	ldr	r2, [r0, #0]
 8009d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d66:	2300      	movs	r3, #0
 8009d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d6c:	e7f7      	b.n	8009d5e <_Balloc+0x66>
 8009d6e:	bf00      	nop
 8009d70:	0800c74e 	.word	0x0800c74e
 8009d74:	0800c7ce 	.word	0x0800c7ce

08009d78 <_Bfree>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	69c6      	ldr	r6, [r0, #28]
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	b976      	cbnz	r6, 8009da0 <_Bfree+0x28>
 8009d82:	2010      	movs	r0, #16
 8009d84:	f7ff ff02 	bl	8009b8c <malloc>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	61e8      	str	r0, [r5, #28]
 8009d8c:	b920      	cbnz	r0, 8009d98 <_Bfree+0x20>
 8009d8e:	4b09      	ldr	r3, [pc, #36]	@ (8009db4 <_Bfree+0x3c>)
 8009d90:	4809      	ldr	r0, [pc, #36]	@ (8009db8 <_Bfree+0x40>)
 8009d92:	218f      	movs	r1, #143	@ 0x8f
 8009d94:	f001 fd30 	bl	800b7f8 <__assert_func>
 8009d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d9c:	6006      	str	r6, [r0, #0]
 8009d9e:	60c6      	str	r6, [r0, #12]
 8009da0:	b13c      	cbz	r4, 8009db2 <_Bfree+0x3a>
 8009da2:	69eb      	ldr	r3, [r5, #28]
 8009da4:	6862      	ldr	r2, [r4, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dac:	6021      	str	r1, [r4, #0]
 8009dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	0800c74e 	.word	0x0800c74e
 8009db8:	0800c7ce 	.word	0x0800c7ce

08009dbc <__multadd>:
 8009dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc0:	690d      	ldr	r5, [r1, #16]
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	461e      	mov	r6, r3
 8009dc8:	f101 0c14 	add.w	ip, r1, #20
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f8dc 3000 	ldr.w	r3, [ip]
 8009dd2:	b299      	uxth	r1, r3
 8009dd4:	fb02 6101 	mla	r1, r2, r1, r6
 8009dd8:	0c1e      	lsrs	r6, r3, #16
 8009dda:	0c0b      	lsrs	r3, r1, #16
 8009ddc:	fb02 3306 	mla	r3, r2, r6, r3
 8009de0:	b289      	uxth	r1, r1
 8009de2:	3001      	adds	r0, #1
 8009de4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009de8:	4285      	cmp	r5, r0
 8009dea:	f84c 1b04 	str.w	r1, [ip], #4
 8009dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009df2:	dcec      	bgt.n	8009dce <__multadd+0x12>
 8009df4:	b30e      	cbz	r6, 8009e3a <__multadd+0x7e>
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	42ab      	cmp	r3, r5
 8009dfa:	dc19      	bgt.n	8009e30 <__multadd+0x74>
 8009dfc:	6861      	ldr	r1, [r4, #4]
 8009dfe:	4638      	mov	r0, r7
 8009e00:	3101      	adds	r1, #1
 8009e02:	f7ff ff79 	bl	8009cf8 <_Balloc>
 8009e06:	4680      	mov	r8, r0
 8009e08:	b928      	cbnz	r0, 8009e16 <__multadd+0x5a>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e40 <__multadd+0x84>)
 8009e0e:	480d      	ldr	r0, [pc, #52]	@ (8009e44 <__multadd+0x88>)
 8009e10:	21ba      	movs	r1, #186	@ 0xba
 8009e12:	f001 fcf1 	bl	800b7f8 <__assert_func>
 8009e16:	6922      	ldr	r2, [r4, #16]
 8009e18:	3202      	adds	r2, #2
 8009e1a:	f104 010c 	add.w	r1, r4, #12
 8009e1e:	0092      	lsls	r2, r2, #2
 8009e20:	300c      	adds	r0, #12
 8009e22:	f7ff f806 	bl	8008e32 <memcpy>
 8009e26:	4621      	mov	r1, r4
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7ff ffa5 	bl	8009d78 <_Bfree>
 8009e2e:	4644      	mov	r4, r8
 8009e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e34:	3501      	adds	r5, #1
 8009e36:	615e      	str	r6, [r3, #20]
 8009e38:	6125      	str	r5, [r4, #16]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e40:	0800c7bd 	.word	0x0800c7bd
 8009e44:	0800c7ce 	.word	0x0800c7ce

08009e48 <__s2b>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	4615      	mov	r5, r2
 8009e50:	461f      	mov	r7, r3
 8009e52:	2209      	movs	r2, #9
 8009e54:	3308      	adds	r3, #8
 8009e56:	4606      	mov	r6, r0
 8009e58:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	2201      	movs	r2, #1
 8009e60:	429a      	cmp	r2, r3
 8009e62:	db09      	blt.n	8009e78 <__s2b+0x30>
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7ff ff47 	bl	8009cf8 <_Balloc>
 8009e6a:	b940      	cbnz	r0, 8009e7e <__s2b+0x36>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	4b19      	ldr	r3, [pc, #100]	@ (8009ed4 <__s2b+0x8c>)
 8009e70:	4819      	ldr	r0, [pc, #100]	@ (8009ed8 <__s2b+0x90>)
 8009e72:	21d3      	movs	r1, #211	@ 0xd3
 8009e74:	f001 fcc0 	bl	800b7f8 <__assert_func>
 8009e78:	0052      	lsls	r2, r2, #1
 8009e7a:	3101      	adds	r1, #1
 8009e7c:	e7f0      	b.n	8009e60 <__s2b+0x18>
 8009e7e:	9b08      	ldr	r3, [sp, #32]
 8009e80:	6143      	str	r3, [r0, #20]
 8009e82:	2d09      	cmp	r5, #9
 8009e84:	f04f 0301 	mov.w	r3, #1
 8009e88:	6103      	str	r3, [r0, #16]
 8009e8a:	dd16      	ble.n	8009eba <__s2b+0x72>
 8009e8c:	f104 0909 	add.w	r9, r4, #9
 8009e90:	46c8      	mov	r8, r9
 8009e92:	442c      	add	r4, r5
 8009e94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e98:	4601      	mov	r1, r0
 8009e9a:	3b30      	subs	r3, #48	@ 0x30
 8009e9c:	220a      	movs	r2, #10
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff ff8c 	bl	8009dbc <__multadd>
 8009ea4:	45a0      	cmp	r8, r4
 8009ea6:	d1f5      	bne.n	8009e94 <__s2b+0x4c>
 8009ea8:	f1a5 0408 	sub.w	r4, r5, #8
 8009eac:	444c      	add	r4, r9
 8009eae:	1b2d      	subs	r5, r5, r4
 8009eb0:	1963      	adds	r3, r4, r5
 8009eb2:	42bb      	cmp	r3, r7
 8009eb4:	db04      	blt.n	8009ec0 <__s2b+0x78>
 8009eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eba:	340a      	adds	r4, #10
 8009ebc:	2509      	movs	r5, #9
 8009ebe:	e7f6      	b.n	8009eae <__s2b+0x66>
 8009ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	3b30      	subs	r3, #48	@ 0x30
 8009ec8:	220a      	movs	r2, #10
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff76 	bl	8009dbc <__multadd>
 8009ed0:	e7ee      	b.n	8009eb0 <__s2b+0x68>
 8009ed2:	bf00      	nop
 8009ed4:	0800c7bd 	.word	0x0800c7bd
 8009ed8:	0800c7ce 	.word	0x0800c7ce

08009edc <__hi0bits>:
 8009edc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	bf36      	itet	cc
 8009ee4:	0403      	lslcc	r3, r0, #16
 8009ee6:	2000      	movcs	r0, #0
 8009ee8:	2010      	movcc	r0, #16
 8009eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eee:	bf3c      	itt	cc
 8009ef0:	021b      	lslcc	r3, r3, #8
 8009ef2:	3008      	addcc	r0, #8
 8009ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ef8:	bf3c      	itt	cc
 8009efa:	011b      	lslcc	r3, r3, #4
 8009efc:	3004      	addcc	r0, #4
 8009efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f02:	bf3c      	itt	cc
 8009f04:	009b      	lslcc	r3, r3, #2
 8009f06:	3002      	addcc	r0, #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	db05      	blt.n	8009f18 <__hi0bits+0x3c>
 8009f0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f10:	f100 0001 	add.w	r0, r0, #1
 8009f14:	bf08      	it	eq
 8009f16:	2020      	moveq	r0, #32
 8009f18:	4770      	bx	lr

08009f1a <__lo0bits>:
 8009f1a:	6803      	ldr	r3, [r0, #0]
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	f013 0007 	ands.w	r0, r3, #7
 8009f22:	d00b      	beq.n	8009f3c <__lo0bits+0x22>
 8009f24:	07d9      	lsls	r1, r3, #31
 8009f26:	d421      	bmi.n	8009f6c <__lo0bits+0x52>
 8009f28:	0798      	lsls	r0, r3, #30
 8009f2a:	bf49      	itett	mi
 8009f2c:	085b      	lsrmi	r3, r3, #1
 8009f2e:	089b      	lsrpl	r3, r3, #2
 8009f30:	2001      	movmi	r0, #1
 8009f32:	6013      	strmi	r3, [r2, #0]
 8009f34:	bf5c      	itt	pl
 8009f36:	6013      	strpl	r3, [r2, #0]
 8009f38:	2002      	movpl	r0, #2
 8009f3a:	4770      	bx	lr
 8009f3c:	b299      	uxth	r1, r3
 8009f3e:	b909      	cbnz	r1, 8009f44 <__lo0bits+0x2a>
 8009f40:	0c1b      	lsrs	r3, r3, #16
 8009f42:	2010      	movs	r0, #16
 8009f44:	b2d9      	uxtb	r1, r3
 8009f46:	b909      	cbnz	r1, 8009f4c <__lo0bits+0x32>
 8009f48:	3008      	adds	r0, #8
 8009f4a:	0a1b      	lsrs	r3, r3, #8
 8009f4c:	0719      	lsls	r1, r3, #28
 8009f4e:	bf04      	itt	eq
 8009f50:	091b      	lsreq	r3, r3, #4
 8009f52:	3004      	addeq	r0, #4
 8009f54:	0799      	lsls	r1, r3, #30
 8009f56:	bf04      	itt	eq
 8009f58:	089b      	lsreq	r3, r3, #2
 8009f5a:	3002      	addeq	r0, #2
 8009f5c:	07d9      	lsls	r1, r3, #31
 8009f5e:	d403      	bmi.n	8009f68 <__lo0bits+0x4e>
 8009f60:	085b      	lsrs	r3, r3, #1
 8009f62:	f100 0001 	add.w	r0, r0, #1
 8009f66:	d003      	beq.n	8009f70 <__lo0bits+0x56>
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	4770      	bx	lr
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	4770      	bx	lr
 8009f70:	2020      	movs	r0, #32
 8009f72:	4770      	bx	lr

08009f74 <__i2b>:
 8009f74:	b510      	push	{r4, lr}
 8009f76:	460c      	mov	r4, r1
 8009f78:	2101      	movs	r1, #1
 8009f7a:	f7ff febd 	bl	8009cf8 <_Balloc>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__i2b+0x1a>
 8009f82:	4b05      	ldr	r3, [pc, #20]	@ (8009f98 <__i2b+0x24>)
 8009f84:	4805      	ldr	r0, [pc, #20]	@ (8009f9c <__i2b+0x28>)
 8009f86:	f240 1145 	movw	r1, #325	@ 0x145
 8009f8a:	f001 fc35 	bl	800b7f8 <__assert_func>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	6144      	str	r4, [r0, #20]
 8009f92:	6103      	str	r3, [r0, #16]
 8009f94:	bd10      	pop	{r4, pc}
 8009f96:	bf00      	nop
 8009f98:	0800c7bd 	.word	0x0800c7bd
 8009f9c:	0800c7ce 	.word	0x0800c7ce

08009fa0 <__multiply>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	4614      	mov	r4, r2
 8009fa6:	690a      	ldr	r2, [r1, #16]
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	bfa8      	it	ge
 8009fae:	4623      	movge	r3, r4
 8009fb0:	460f      	mov	r7, r1
 8009fb2:	bfa4      	itt	ge
 8009fb4:	460c      	movge	r4, r1
 8009fb6:	461f      	movge	r7, r3
 8009fb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009fbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	6861      	ldr	r1, [r4, #4]
 8009fc4:	eb0a 0609 	add.w	r6, sl, r9
 8009fc8:	42b3      	cmp	r3, r6
 8009fca:	b085      	sub	sp, #20
 8009fcc:	bfb8      	it	lt
 8009fce:	3101      	addlt	r1, #1
 8009fd0:	f7ff fe92 	bl	8009cf8 <_Balloc>
 8009fd4:	b930      	cbnz	r0, 8009fe4 <__multiply+0x44>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	4b44      	ldr	r3, [pc, #272]	@ (800a0ec <__multiply+0x14c>)
 8009fda:	4845      	ldr	r0, [pc, #276]	@ (800a0f0 <__multiply+0x150>)
 8009fdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009fe0:	f001 fc0a 	bl	800b7f8 <__assert_func>
 8009fe4:	f100 0514 	add.w	r5, r0, #20
 8009fe8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fec:	462b      	mov	r3, r5
 8009fee:	2200      	movs	r2, #0
 8009ff0:	4543      	cmp	r3, r8
 8009ff2:	d321      	bcc.n	800a038 <__multiply+0x98>
 8009ff4:	f107 0114 	add.w	r1, r7, #20
 8009ff8:	f104 0214 	add.w	r2, r4, #20
 8009ffc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a000:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a004:	9302      	str	r3, [sp, #8]
 800a006:	1b13      	subs	r3, r2, r4
 800a008:	3b15      	subs	r3, #21
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	3304      	adds	r3, #4
 800a010:	f104 0715 	add.w	r7, r4, #21
 800a014:	42ba      	cmp	r2, r7
 800a016:	bf38      	it	cc
 800a018:	2304      	movcc	r3, #4
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	9b02      	ldr	r3, [sp, #8]
 800a01e:	9103      	str	r1, [sp, #12]
 800a020:	428b      	cmp	r3, r1
 800a022:	d80c      	bhi.n	800a03e <__multiply+0x9e>
 800a024:	2e00      	cmp	r6, #0
 800a026:	dd03      	ble.n	800a030 <__multiply+0x90>
 800a028:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d05b      	beq.n	800a0e8 <__multiply+0x148>
 800a030:	6106      	str	r6, [r0, #16]
 800a032:	b005      	add	sp, #20
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	f843 2b04 	str.w	r2, [r3], #4
 800a03c:	e7d8      	b.n	8009ff0 <__multiply+0x50>
 800a03e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a042:	f1ba 0f00 	cmp.w	sl, #0
 800a046:	d024      	beq.n	800a092 <__multiply+0xf2>
 800a048:	f104 0e14 	add.w	lr, r4, #20
 800a04c:	46a9      	mov	r9, r5
 800a04e:	f04f 0c00 	mov.w	ip, #0
 800a052:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a056:	f8d9 3000 	ldr.w	r3, [r9]
 800a05a:	fa1f fb87 	uxth.w	fp, r7
 800a05e:	b29b      	uxth	r3, r3
 800a060:	fb0a 330b 	mla	r3, sl, fp, r3
 800a064:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a068:	f8d9 7000 	ldr.w	r7, [r9]
 800a06c:	4463      	add	r3, ip
 800a06e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a072:	fb0a c70b 	mla	r7, sl, fp, ip
 800a076:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a080:	4572      	cmp	r2, lr
 800a082:	f849 3b04 	str.w	r3, [r9], #4
 800a086:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a08a:	d8e2      	bhi.n	800a052 <__multiply+0xb2>
 800a08c:	9b01      	ldr	r3, [sp, #4]
 800a08e:	f845 c003 	str.w	ip, [r5, r3]
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a098:	3104      	adds	r1, #4
 800a09a:	f1b9 0f00 	cmp.w	r9, #0
 800a09e:	d021      	beq.n	800a0e4 <__multiply+0x144>
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	f104 0c14 	add.w	ip, r4, #20
 800a0a6:	46ae      	mov	lr, r5
 800a0a8:	f04f 0a00 	mov.w	sl, #0
 800a0ac:	f8bc b000 	ldrh.w	fp, [ip]
 800a0b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0b4:	fb09 770b 	mla	r7, r9, fp, r7
 800a0b8:	4457      	add	r7, sl
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0c0:	f84e 3b04 	str.w	r3, [lr], #4
 800a0c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0cc:	f8be 3000 	ldrh.w	r3, [lr]
 800a0d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a0d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a0d8:	4562      	cmp	r2, ip
 800a0da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0de:	d8e5      	bhi.n	800a0ac <__multiply+0x10c>
 800a0e0:	9f01      	ldr	r7, [sp, #4]
 800a0e2:	51eb      	str	r3, [r5, r7]
 800a0e4:	3504      	adds	r5, #4
 800a0e6:	e799      	b.n	800a01c <__multiply+0x7c>
 800a0e8:	3e01      	subs	r6, #1
 800a0ea:	e79b      	b.n	800a024 <__multiply+0x84>
 800a0ec:	0800c7bd 	.word	0x0800c7bd
 800a0f0:	0800c7ce 	.word	0x0800c7ce

0800a0f4 <__pow5mult>:
 800a0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	4615      	mov	r5, r2
 800a0fa:	f012 0203 	ands.w	r2, r2, #3
 800a0fe:	4607      	mov	r7, r0
 800a100:	460e      	mov	r6, r1
 800a102:	d007      	beq.n	800a114 <__pow5mult+0x20>
 800a104:	4c25      	ldr	r4, [pc, #148]	@ (800a19c <__pow5mult+0xa8>)
 800a106:	3a01      	subs	r2, #1
 800a108:	2300      	movs	r3, #0
 800a10a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a10e:	f7ff fe55 	bl	8009dbc <__multadd>
 800a112:	4606      	mov	r6, r0
 800a114:	10ad      	asrs	r5, r5, #2
 800a116:	d03d      	beq.n	800a194 <__pow5mult+0xa0>
 800a118:	69fc      	ldr	r4, [r7, #28]
 800a11a:	b97c      	cbnz	r4, 800a13c <__pow5mult+0x48>
 800a11c:	2010      	movs	r0, #16
 800a11e:	f7ff fd35 	bl	8009b8c <malloc>
 800a122:	4602      	mov	r2, r0
 800a124:	61f8      	str	r0, [r7, #28]
 800a126:	b928      	cbnz	r0, 800a134 <__pow5mult+0x40>
 800a128:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a0 <__pow5mult+0xac>)
 800a12a:	481e      	ldr	r0, [pc, #120]	@ (800a1a4 <__pow5mult+0xb0>)
 800a12c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a130:	f001 fb62 	bl	800b7f8 <__assert_func>
 800a134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a138:	6004      	str	r4, [r0, #0]
 800a13a:	60c4      	str	r4, [r0, #12]
 800a13c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a144:	b94c      	cbnz	r4, 800a15a <__pow5mult+0x66>
 800a146:	f240 2171 	movw	r1, #625	@ 0x271
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7ff ff12 	bl	8009f74 <__i2b>
 800a150:	2300      	movs	r3, #0
 800a152:	f8c8 0008 	str.w	r0, [r8, #8]
 800a156:	4604      	mov	r4, r0
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	f04f 0900 	mov.w	r9, #0
 800a15e:	07eb      	lsls	r3, r5, #31
 800a160:	d50a      	bpl.n	800a178 <__pow5mult+0x84>
 800a162:	4631      	mov	r1, r6
 800a164:	4622      	mov	r2, r4
 800a166:	4638      	mov	r0, r7
 800a168:	f7ff ff1a 	bl	8009fa0 <__multiply>
 800a16c:	4631      	mov	r1, r6
 800a16e:	4680      	mov	r8, r0
 800a170:	4638      	mov	r0, r7
 800a172:	f7ff fe01 	bl	8009d78 <_Bfree>
 800a176:	4646      	mov	r6, r8
 800a178:	106d      	asrs	r5, r5, #1
 800a17a:	d00b      	beq.n	800a194 <__pow5mult+0xa0>
 800a17c:	6820      	ldr	r0, [r4, #0]
 800a17e:	b938      	cbnz	r0, 800a190 <__pow5mult+0x9c>
 800a180:	4622      	mov	r2, r4
 800a182:	4621      	mov	r1, r4
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ff0b 	bl	8009fa0 <__multiply>
 800a18a:	6020      	str	r0, [r4, #0]
 800a18c:	f8c0 9000 	str.w	r9, [r0]
 800a190:	4604      	mov	r4, r0
 800a192:	e7e4      	b.n	800a15e <__pow5mult+0x6a>
 800a194:	4630      	mov	r0, r6
 800a196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19a:	bf00      	nop
 800a19c:	0800c828 	.word	0x0800c828
 800a1a0:	0800c74e 	.word	0x0800c74e
 800a1a4:	0800c7ce 	.word	0x0800c7ce

0800a1a8 <__lshift>:
 800a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	6849      	ldr	r1, [r1, #4]
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1b6:	68a3      	ldr	r3, [r4, #8]
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	4691      	mov	r9, r2
 800a1bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1c0:	f108 0601 	add.w	r6, r8, #1
 800a1c4:	42b3      	cmp	r3, r6
 800a1c6:	db0b      	blt.n	800a1e0 <__lshift+0x38>
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff fd95 	bl	8009cf8 <_Balloc>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b948      	cbnz	r0, 800a1e6 <__lshift+0x3e>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	4b28      	ldr	r3, [pc, #160]	@ (800a278 <__lshift+0xd0>)
 800a1d6:	4829      	ldr	r0, [pc, #164]	@ (800a27c <__lshift+0xd4>)
 800a1d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a1dc:	f001 fb0c 	bl	800b7f8 <__assert_func>
 800a1e0:	3101      	adds	r1, #1
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	e7ee      	b.n	800a1c4 <__lshift+0x1c>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f100 0114 	add.w	r1, r0, #20
 800a1ec:	f100 0210 	add.w	r2, r0, #16
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	4553      	cmp	r3, sl
 800a1f4:	db33      	blt.n	800a25e <__lshift+0xb6>
 800a1f6:	6920      	ldr	r0, [r4, #16]
 800a1f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1fc:	f104 0314 	add.w	r3, r4, #20
 800a200:	f019 091f 	ands.w	r9, r9, #31
 800a204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a20c:	d02b      	beq.n	800a266 <__lshift+0xbe>
 800a20e:	f1c9 0e20 	rsb	lr, r9, #32
 800a212:	468a      	mov	sl, r1
 800a214:	2200      	movs	r2, #0
 800a216:	6818      	ldr	r0, [r3, #0]
 800a218:	fa00 f009 	lsl.w	r0, r0, r9
 800a21c:	4310      	orrs	r0, r2
 800a21e:	f84a 0b04 	str.w	r0, [sl], #4
 800a222:	f853 2b04 	ldr.w	r2, [r3], #4
 800a226:	459c      	cmp	ip, r3
 800a228:	fa22 f20e 	lsr.w	r2, r2, lr
 800a22c:	d8f3      	bhi.n	800a216 <__lshift+0x6e>
 800a22e:	ebac 0304 	sub.w	r3, ip, r4
 800a232:	3b15      	subs	r3, #21
 800a234:	f023 0303 	bic.w	r3, r3, #3
 800a238:	3304      	adds	r3, #4
 800a23a:	f104 0015 	add.w	r0, r4, #21
 800a23e:	4584      	cmp	ip, r0
 800a240:	bf38      	it	cc
 800a242:	2304      	movcc	r3, #4
 800a244:	50ca      	str	r2, [r1, r3]
 800a246:	b10a      	cbz	r2, 800a24c <__lshift+0xa4>
 800a248:	f108 0602 	add.w	r6, r8, #2
 800a24c:	3e01      	subs	r6, #1
 800a24e:	4638      	mov	r0, r7
 800a250:	612e      	str	r6, [r5, #16]
 800a252:	4621      	mov	r1, r4
 800a254:	f7ff fd90 	bl	8009d78 <_Bfree>
 800a258:	4628      	mov	r0, r5
 800a25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a262:	3301      	adds	r3, #1
 800a264:	e7c5      	b.n	800a1f2 <__lshift+0x4a>
 800a266:	3904      	subs	r1, #4
 800a268:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a270:	459c      	cmp	ip, r3
 800a272:	d8f9      	bhi.n	800a268 <__lshift+0xc0>
 800a274:	e7ea      	b.n	800a24c <__lshift+0xa4>
 800a276:	bf00      	nop
 800a278:	0800c7bd 	.word	0x0800c7bd
 800a27c:	0800c7ce 	.word	0x0800c7ce

0800a280 <__mcmp>:
 800a280:	690a      	ldr	r2, [r1, #16]
 800a282:	4603      	mov	r3, r0
 800a284:	6900      	ldr	r0, [r0, #16]
 800a286:	1a80      	subs	r0, r0, r2
 800a288:	b530      	push	{r4, r5, lr}
 800a28a:	d10e      	bne.n	800a2aa <__mcmp+0x2a>
 800a28c:	3314      	adds	r3, #20
 800a28e:	3114      	adds	r1, #20
 800a290:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a294:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a298:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a29c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2a0:	4295      	cmp	r5, r2
 800a2a2:	d003      	beq.n	800a2ac <__mcmp+0x2c>
 800a2a4:	d205      	bcs.n	800a2b2 <__mcmp+0x32>
 800a2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2aa:	bd30      	pop	{r4, r5, pc}
 800a2ac:	42a3      	cmp	r3, r4
 800a2ae:	d3f3      	bcc.n	800a298 <__mcmp+0x18>
 800a2b0:	e7fb      	b.n	800a2aa <__mcmp+0x2a>
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	e7f9      	b.n	800a2aa <__mcmp+0x2a>
	...

0800a2b8 <__mdiff>:
 800a2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	4689      	mov	r9, r1
 800a2be:	4606      	mov	r6, r0
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4648      	mov	r0, r9
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	f7ff ffdb 	bl	800a280 <__mcmp>
 800a2ca:	1e05      	subs	r5, r0, #0
 800a2cc:	d112      	bne.n	800a2f4 <__mdiff+0x3c>
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff fd11 	bl	8009cf8 <_Balloc>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	b928      	cbnz	r0, 800a2e6 <__mdiff+0x2e>
 800a2da:	4b3f      	ldr	r3, [pc, #252]	@ (800a3d8 <__mdiff+0x120>)
 800a2dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a2e0:	483e      	ldr	r0, [pc, #248]	@ (800a3dc <__mdiff+0x124>)
 800a2e2:	f001 fa89 	bl	800b7f8 <__assert_func>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	b003      	add	sp, #12
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f4:	bfbc      	itt	lt
 800a2f6:	464b      	movlt	r3, r9
 800a2f8:	46a1      	movlt	r9, r4
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a300:	bfba      	itte	lt
 800a302:	461c      	movlt	r4, r3
 800a304:	2501      	movlt	r5, #1
 800a306:	2500      	movge	r5, #0
 800a308:	f7ff fcf6 	bl	8009cf8 <_Balloc>
 800a30c:	4602      	mov	r2, r0
 800a30e:	b918      	cbnz	r0, 800a318 <__mdiff+0x60>
 800a310:	4b31      	ldr	r3, [pc, #196]	@ (800a3d8 <__mdiff+0x120>)
 800a312:	f240 2145 	movw	r1, #581	@ 0x245
 800a316:	e7e3      	b.n	800a2e0 <__mdiff+0x28>
 800a318:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a31c:	6926      	ldr	r6, [r4, #16]
 800a31e:	60c5      	str	r5, [r0, #12]
 800a320:	f109 0310 	add.w	r3, r9, #16
 800a324:	f109 0514 	add.w	r5, r9, #20
 800a328:	f104 0e14 	add.w	lr, r4, #20
 800a32c:	f100 0b14 	add.w	fp, r0, #20
 800a330:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a334:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	46d9      	mov	r9, fp
 800a33c:	f04f 0c00 	mov.w	ip, #0
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a346:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	fa1f f38a 	uxth.w	r3, sl
 800a350:	4619      	mov	r1, r3
 800a352:	b283      	uxth	r3, r0
 800a354:	1acb      	subs	r3, r1, r3
 800a356:	0c00      	lsrs	r0, r0, #16
 800a358:	4463      	add	r3, ip
 800a35a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a35e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a362:	b29b      	uxth	r3, r3
 800a364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a368:	4576      	cmp	r6, lr
 800a36a:	f849 3b04 	str.w	r3, [r9], #4
 800a36e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a372:	d8e5      	bhi.n	800a340 <__mdiff+0x88>
 800a374:	1b33      	subs	r3, r6, r4
 800a376:	3b15      	subs	r3, #21
 800a378:	f023 0303 	bic.w	r3, r3, #3
 800a37c:	3415      	adds	r4, #21
 800a37e:	3304      	adds	r3, #4
 800a380:	42a6      	cmp	r6, r4
 800a382:	bf38      	it	cc
 800a384:	2304      	movcc	r3, #4
 800a386:	441d      	add	r5, r3
 800a388:	445b      	add	r3, fp
 800a38a:	461e      	mov	r6, r3
 800a38c:	462c      	mov	r4, r5
 800a38e:	4544      	cmp	r4, r8
 800a390:	d30e      	bcc.n	800a3b0 <__mdiff+0xf8>
 800a392:	f108 0103 	add.w	r1, r8, #3
 800a396:	1b49      	subs	r1, r1, r5
 800a398:	f021 0103 	bic.w	r1, r1, #3
 800a39c:	3d03      	subs	r5, #3
 800a39e:	45a8      	cmp	r8, r5
 800a3a0:	bf38      	it	cc
 800a3a2:	2100      	movcc	r1, #0
 800a3a4:	440b      	add	r3, r1
 800a3a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3aa:	b191      	cbz	r1, 800a3d2 <__mdiff+0x11a>
 800a3ac:	6117      	str	r7, [r2, #16]
 800a3ae:	e79d      	b.n	800a2ec <__mdiff+0x34>
 800a3b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3b4:	46e6      	mov	lr, ip
 800a3b6:	0c08      	lsrs	r0, r1, #16
 800a3b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a3bc:	4471      	add	r1, lr
 800a3be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3c2:	b289      	uxth	r1, r1
 800a3c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3c8:	f846 1b04 	str.w	r1, [r6], #4
 800a3cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3d0:	e7dd      	b.n	800a38e <__mdiff+0xd6>
 800a3d2:	3f01      	subs	r7, #1
 800a3d4:	e7e7      	b.n	800a3a6 <__mdiff+0xee>
 800a3d6:	bf00      	nop
 800a3d8:	0800c7bd 	.word	0x0800c7bd
 800a3dc:	0800c7ce 	.word	0x0800c7ce

0800a3e0 <__ulp>:
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	ed8d 0b00 	vstr	d0, [sp]
 800a3e6:	9a01      	ldr	r2, [sp, #4]
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a428 <__ulp+0x48>)
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dc08      	bgt.n	800a406 <__ulp+0x26>
 800a3f4:	425b      	negs	r3, r3
 800a3f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a3fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a3fe:	da04      	bge.n	800a40a <__ulp+0x2a>
 800a400:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a404:	4113      	asrs	r3, r2
 800a406:	2200      	movs	r2, #0
 800a408:	e008      	b.n	800a41c <__ulp+0x3c>
 800a40a:	f1a2 0314 	sub.w	r3, r2, #20
 800a40e:	2b1e      	cmp	r3, #30
 800a410:	bfda      	itte	le
 800a412:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a416:	40da      	lsrle	r2, r3
 800a418:	2201      	movgt	r2, #1
 800a41a:	2300      	movs	r3, #0
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	ec41 0b10 	vmov	d0, r0, r1
 800a424:	b002      	add	sp, #8
 800a426:	4770      	bx	lr
 800a428:	7ff00000 	.word	0x7ff00000

0800a42c <__b2d>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	6906      	ldr	r6, [r0, #16]
 800a432:	f100 0814 	add.w	r8, r0, #20
 800a436:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a43a:	1f37      	subs	r7, r6, #4
 800a43c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a440:	4610      	mov	r0, r2
 800a442:	f7ff fd4b 	bl	8009edc <__hi0bits>
 800a446:	f1c0 0320 	rsb	r3, r0, #32
 800a44a:	280a      	cmp	r0, #10
 800a44c:	600b      	str	r3, [r1, #0]
 800a44e:	491b      	ldr	r1, [pc, #108]	@ (800a4bc <__b2d+0x90>)
 800a450:	dc15      	bgt.n	800a47e <__b2d+0x52>
 800a452:	f1c0 0c0b 	rsb	ip, r0, #11
 800a456:	fa22 f30c 	lsr.w	r3, r2, ip
 800a45a:	45b8      	cmp	r8, r7
 800a45c:	ea43 0501 	orr.w	r5, r3, r1
 800a460:	bf34      	ite	cc
 800a462:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a466:	2300      	movcs	r3, #0
 800a468:	3015      	adds	r0, #21
 800a46a:	fa02 f000 	lsl.w	r0, r2, r0
 800a46e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a472:	4303      	orrs	r3, r0
 800a474:	461c      	mov	r4, r3
 800a476:	ec45 4b10 	vmov	d0, r4, r5
 800a47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47e:	45b8      	cmp	r8, r7
 800a480:	bf3a      	itte	cc
 800a482:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a486:	f1a6 0708 	subcc.w	r7, r6, #8
 800a48a:	2300      	movcs	r3, #0
 800a48c:	380b      	subs	r0, #11
 800a48e:	d012      	beq.n	800a4b6 <__b2d+0x8a>
 800a490:	f1c0 0120 	rsb	r1, r0, #32
 800a494:	fa23 f401 	lsr.w	r4, r3, r1
 800a498:	4082      	lsls	r2, r0
 800a49a:	4322      	orrs	r2, r4
 800a49c:	4547      	cmp	r7, r8
 800a49e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a4a2:	bf8c      	ite	hi
 800a4a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4a8:	2200      	movls	r2, #0
 800a4aa:	4083      	lsls	r3, r0
 800a4ac:	40ca      	lsrs	r2, r1
 800a4ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	e7de      	b.n	800a474 <__b2d+0x48>
 800a4b6:	ea42 0501 	orr.w	r5, r2, r1
 800a4ba:	e7db      	b.n	800a474 <__b2d+0x48>
 800a4bc:	3ff00000 	.word	0x3ff00000

0800a4c0 <__d2b>:
 800a4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	ec59 8b10 	vmov	r8, r9, d0
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	f7ff fc13 	bl	8009cf8 <_Balloc>
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	b930      	cbnz	r0, 800a4e4 <__d2b+0x24>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	4b23      	ldr	r3, [pc, #140]	@ (800a568 <__d2b+0xa8>)
 800a4da:	4824      	ldr	r0, [pc, #144]	@ (800a56c <__d2b+0xac>)
 800a4dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4e0:	f001 f98a 	bl	800b7f8 <__assert_func>
 800a4e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ec:	b10d      	cbz	r5, 800a4f2 <__d2b+0x32>
 800a4ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a4f8:	d023      	beq.n	800a542 <__d2b+0x82>
 800a4fa:	4668      	mov	r0, sp
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	f7ff fd0c 	bl	8009f1a <__lo0bits>
 800a502:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a506:	b1d0      	cbz	r0, 800a53e <__d2b+0x7e>
 800a508:	f1c0 0320 	rsb	r3, r0, #32
 800a50c:	fa02 f303 	lsl.w	r3, r2, r3
 800a510:	430b      	orrs	r3, r1
 800a512:	40c2      	lsrs	r2, r0
 800a514:	6163      	str	r3, [r4, #20]
 800a516:	9201      	str	r2, [sp, #4]
 800a518:	9b01      	ldr	r3, [sp, #4]
 800a51a:	61a3      	str	r3, [r4, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bf0c      	ite	eq
 800a520:	2201      	moveq	r2, #1
 800a522:	2202      	movne	r2, #2
 800a524:	6122      	str	r2, [r4, #16]
 800a526:	b1a5      	cbz	r5, 800a552 <__d2b+0x92>
 800a528:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a52c:	4405      	add	r5, r0
 800a52e:	603d      	str	r5, [r7, #0]
 800a530:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a534:	6030      	str	r0, [r6, #0]
 800a536:	4620      	mov	r0, r4
 800a538:	b003      	add	sp, #12
 800a53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a53e:	6161      	str	r1, [r4, #20]
 800a540:	e7ea      	b.n	800a518 <__d2b+0x58>
 800a542:	a801      	add	r0, sp, #4
 800a544:	f7ff fce9 	bl	8009f1a <__lo0bits>
 800a548:	9b01      	ldr	r3, [sp, #4]
 800a54a:	6163      	str	r3, [r4, #20]
 800a54c:	3020      	adds	r0, #32
 800a54e:	2201      	movs	r2, #1
 800a550:	e7e8      	b.n	800a524 <__d2b+0x64>
 800a552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a556:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a55a:	6038      	str	r0, [r7, #0]
 800a55c:	6918      	ldr	r0, [r3, #16]
 800a55e:	f7ff fcbd 	bl	8009edc <__hi0bits>
 800a562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a566:	e7e5      	b.n	800a534 <__d2b+0x74>
 800a568:	0800c7bd 	.word	0x0800c7bd
 800a56c:	0800c7ce 	.word	0x0800c7ce

0800a570 <__ratio>:
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	b085      	sub	sp, #20
 800a576:	e9cd 1000 	strd	r1, r0, [sp]
 800a57a:	a902      	add	r1, sp, #8
 800a57c:	f7ff ff56 	bl	800a42c <__b2d>
 800a580:	9800      	ldr	r0, [sp, #0]
 800a582:	a903      	add	r1, sp, #12
 800a584:	ec55 4b10 	vmov	r4, r5, d0
 800a588:	f7ff ff50 	bl	800a42c <__b2d>
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	6919      	ldr	r1, [r3, #16]
 800a590:	9b00      	ldr	r3, [sp, #0]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	1ac9      	subs	r1, r1, r3
 800a596:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	ec5b ab10 	vmov	sl, fp, d0
 800a5a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bfce      	itee	gt
 800a5a8:	462a      	movgt	r2, r5
 800a5aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5ae:	465a      	movle	r2, fp
 800a5b0:	462f      	mov	r7, r5
 800a5b2:	46d9      	mov	r9, fp
 800a5b4:	bfcc      	ite	gt
 800a5b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a5be:	464b      	mov	r3, r9
 800a5c0:	4652      	mov	r2, sl
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	f7f6 f949 	bl	800085c <__aeabi_ddiv>
 800a5ca:	ec41 0b10 	vmov	d0, r0, r1
 800a5ce:	b005      	add	sp, #20
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5d4 <__copybits>:
 800a5d4:	3901      	subs	r1, #1
 800a5d6:	b570      	push	{r4, r5, r6, lr}
 800a5d8:	1149      	asrs	r1, r1, #5
 800a5da:	6914      	ldr	r4, [r2, #16]
 800a5dc:	3101      	adds	r1, #1
 800a5de:	f102 0314 	add.w	r3, r2, #20
 800a5e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5ea:	1f05      	subs	r5, r0, #4
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	d30c      	bcc.n	800a60a <__copybits+0x36>
 800a5f0:	1aa3      	subs	r3, r4, r2
 800a5f2:	3b11      	subs	r3, #17
 800a5f4:	f023 0303 	bic.w	r3, r3, #3
 800a5f8:	3211      	adds	r2, #17
 800a5fa:	42a2      	cmp	r2, r4
 800a5fc:	bf88      	it	hi
 800a5fe:	2300      	movhi	r3, #0
 800a600:	4418      	add	r0, r3
 800a602:	2300      	movs	r3, #0
 800a604:	4288      	cmp	r0, r1
 800a606:	d305      	bcc.n	800a614 <__copybits+0x40>
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a60e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a612:	e7eb      	b.n	800a5ec <__copybits+0x18>
 800a614:	f840 3b04 	str.w	r3, [r0], #4
 800a618:	e7f4      	b.n	800a604 <__copybits+0x30>

0800a61a <__any_on>:
 800a61a:	f100 0214 	add.w	r2, r0, #20
 800a61e:	6900      	ldr	r0, [r0, #16]
 800a620:	114b      	asrs	r3, r1, #5
 800a622:	4298      	cmp	r0, r3
 800a624:	b510      	push	{r4, lr}
 800a626:	db11      	blt.n	800a64c <__any_on+0x32>
 800a628:	dd0a      	ble.n	800a640 <__any_on+0x26>
 800a62a:	f011 011f 	ands.w	r1, r1, #31
 800a62e:	d007      	beq.n	800a640 <__any_on+0x26>
 800a630:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a634:	fa24 f001 	lsr.w	r0, r4, r1
 800a638:	fa00 f101 	lsl.w	r1, r0, r1
 800a63c:	428c      	cmp	r4, r1
 800a63e:	d10b      	bne.n	800a658 <__any_on+0x3e>
 800a640:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a644:	4293      	cmp	r3, r2
 800a646:	d803      	bhi.n	800a650 <__any_on+0x36>
 800a648:	2000      	movs	r0, #0
 800a64a:	bd10      	pop	{r4, pc}
 800a64c:	4603      	mov	r3, r0
 800a64e:	e7f7      	b.n	800a640 <__any_on+0x26>
 800a650:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a654:	2900      	cmp	r1, #0
 800a656:	d0f5      	beq.n	800a644 <__any_on+0x2a>
 800a658:	2001      	movs	r0, #1
 800a65a:	e7f6      	b.n	800a64a <__any_on+0x30>

0800a65c <sulp>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	4604      	mov	r4, r0
 800a660:	460d      	mov	r5, r1
 800a662:	ec45 4b10 	vmov	d0, r4, r5
 800a666:	4616      	mov	r6, r2
 800a668:	f7ff feba 	bl	800a3e0 <__ulp>
 800a66c:	ec51 0b10 	vmov	r0, r1, d0
 800a670:	b17e      	cbz	r6, 800a692 <sulp+0x36>
 800a672:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a676:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dd09      	ble.n	800a692 <sulp+0x36>
 800a67e:	051b      	lsls	r3, r3, #20
 800a680:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a684:	2400      	movs	r4, #0
 800a686:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a68a:	4622      	mov	r2, r4
 800a68c:	462b      	mov	r3, r5
 800a68e:	f7f5 ffbb 	bl	8000608 <__aeabi_dmul>
 800a692:	ec41 0b10 	vmov	d0, r0, r1
 800a696:	bd70      	pop	{r4, r5, r6, pc}

0800a698 <_strtod_l>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	b09f      	sub	sp, #124	@ 0x7c
 800a69e:	460c      	mov	r4, r1
 800a6a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a6a6:	9005      	str	r0, [sp, #20]
 800a6a8:	f04f 0a00 	mov.w	sl, #0
 800a6ac:	f04f 0b00 	mov.w	fp, #0
 800a6b0:	460a      	mov	r2, r1
 800a6b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6b4:	7811      	ldrb	r1, [r2, #0]
 800a6b6:	292b      	cmp	r1, #43	@ 0x2b
 800a6b8:	d04a      	beq.n	800a750 <_strtod_l+0xb8>
 800a6ba:	d838      	bhi.n	800a72e <_strtod_l+0x96>
 800a6bc:	290d      	cmp	r1, #13
 800a6be:	d832      	bhi.n	800a726 <_strtod_l+0x8e>
 800a6c0:	2908      	cmp	r1, #8
 800a6c2:	d832      	bhi.n	800a72a <_strtod_l+0x92>
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	d03b      	beq.n	800a740 <_strtod_l+0xa8>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a6cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a6ce:	782a      	ldrb	r2, [r5, #0]
 800a6d0:	2a30      	cmp	r2, #48	@ 0x30
 800a6d2:	f040 80b3 	bne.w	800a83c <_strtod_l+0x1a4>
 800a6d6:	786a      	ldrb	r2, [r5, #1]
 800a6d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6dc:	2a58      	cmp	r2, #88	@ 0x58
 800a6de:	d16e      	bne.n	800a7be <_strtod_l+0x126>
 800a6e0:	9302      	str	r3, [sp, #8]
 800a6e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	4a8e      	ldr	r2, [pc, #568]	@ (800a924 <_strtod_l+0x28c>)
 800a6ec:	9805      	ldr	r0, [sp, #20]
 800a6ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6f0:	a919      	add	r1, sp, #100	@ 0x64
 800a6f2:	f001 f91b 	bl	800b92c <__gethex>
 800a6f6:	f010 060f 	ands.w	r6, r0, #15
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	d005      	beq.n	800a70a <_strtod_l+0x72>
 800a6fe:	2e06      	cmp	r6, #6
 800a700:	d128      	bne.n	800a754 <_strtod_l+0xbc>
 800a702:	3501      	adds	r5, #1
 800a704:	2300      	movs	r3, #0
 800a706:	9519      	str	r5, [sp, #100]	@ 0x64
 800a708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a70a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f040 858e 	bne.w	800b22e <_strtod_l+0xb96>
 800a712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a714:	b1cb      	cbz	r3, 800a74a <_strtod_l+0xb2>
 800a716:	4652      	mov	r2, sl
 800a718:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a71c:	ec43 2b10 	vmov	d0, r2, r3
 800a720:	b01f      	add	sp, #124	@ 0x7c
 800a722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a726:	2920      	cmp	r1, #32
 800a728:	d1ce      	bne.n	800a6c8 <_strtod_l+0x30>
 800a72a:	3201      	adds	r2, #1
 800a72c:	e7c1      	b.n	800a6b2 <_strtod_l+0x1a>
 800a72e:	292d      	cmp	r1, #45	@ 0x2d
 800a730:	d1ca      	bne.n	800a6c8 <_strtod_l+0x30>
 800a732:	2101      	movs	r1, #1
 800a734:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a736:	1c51      	adds	r1, r2, #1
 800a738:	9119      	str	r1, [sp, #100]	@ 0x64
 800a73a:	7852      	ldrb	r2, [r2, #1]
 800a73c:	2a00      	cmp	r2, #0
 800a73e:	d1c5      	bne.n	800a6cc <_strtod_l+0x34>
 800a740:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a742:	9419      	str	r4, [sp, #100]	@ 0x64
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8570 	bne.w	800b22a <_strtod_l+0xb92>
 800a74a:	4652      	mov	r2, sl
 800a74c:	465b      	mov	r3, fp
 800a74e:	e7e5      	b.n	800a71c <_strtod_l+0x84>
 800a750:	2100      	movs	r1, #0
 800a752:	e7ef      	b.n	800a734 <_strtod_l+0x9c>
 800a754:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a756:	b13a      	cbz	r2, 800a768 <_strtod_l+0xd0>
 800a758:	2135      	movs	r1, #53	@ 0x35
 800a75a:	a81c      	add	r0, sp, #112	@ 0x70
 800a75c:	f7ff ff3a 	bl	800a5d4 <__copybits>
 800a760:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a762:	9805      	ldr	r0, [sp, #20]
 800a764:	f7ff fb08 	bl	8009d78 <_Bfree>
 800a768:	3e01      	subs	r6, #1
 800a76a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a76c:	2e04      	cmp	r6, #4
 800a76e:	d806      	bhi.n	800a77e <_strtod_l+0xe6>
 800a770:	e8df f006 	tbb	[pc, r6]
 800a774:	201d0314 	.word	0x201d0314
 800a778:	14          	.byte	0x14
 800a779:	00          	.byte	0x00
 800a77a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a77e:	05e1      	lsls	r1, r4, #23
 800a780:	bf48      	it	mi
 800a782:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a786:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a78a:	0d1b      	lsrs	r3, r3, #20
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1bb      	bne.n	800a70a <_strtod_l+0x72>
 800a792:	f7fe fb21 	bl	8008dd8 <__errno>
 800a796:	2322      	movs	r3, #34	@ 0x22
 800a798:	6003      	str	r3, [r0, #0]
 800a79a:	e7b6      	b.n	800a70a <_strtod_l+0x72>
 800a79c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a7a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a7a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a7ac:	e7e7      	b.n	800a77e <_strtod_l+0xe6>
 800a7ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a92c <_strtod_l+0x294>
 800a7b2:	e7e4      	b.n	800a77e <_strtod_l+0xe6>
 800a7b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a7b8:	f04f 3aff 	mov.w	sl, #4294967295
 800a7bc:	e7df      	b.n	800a77e <_strtod_l+0xe6>
 800a7be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7c4:	785b      	ldrb	r3, [r3, #1]
 800a7c6:	2b30      	cmp	r3, #48	@ 0x30
 800a7c8:	d0f9      	beq.n	800a7be <_strtod_l+0x126>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d09d      	beq.n	800a70a <_strtod_l+0x72>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9308      	str	r3, [sp, #32]
 800a7da:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7dc:	461f      	mov	r7, r3
 800a7de:	220a      	movs	r2, #10
 800a7e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a7e2:	7805      	ldrb	r5, [r0, #0]
 800a7e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7e8:	b2d9      	uxtb	r1, r3
 800a7ea:	2909      	cmp	r1, #9
 800a7ec:	d928      	bls.n	800a840 <_strtod_l+0x1a8>
 800a7ee:	494e      	ldr	r1, [pc, #312]	@ (800a928 <_strtod_l+0x290>)
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f000 ffd5 	bl	800b7a0 <strncmp>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d032      	beq.n	800a860 <_strtod_l+0x1c8>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	4681      	mov	r9, r0
 800a800:	463d      	mov	r5, r7
 800a802:	4603      	mov	r3, r0
 800a804:	2a65      	cmp	r2, #101	@ 0x65
 800a806:	d001      	beq.n	800a80c <_strtod_l+0x174>
 800a808:	2a45      	cmp	r2, #69	@ 0x45
 800a80a:	d114      	bne.n	800a836 <_strtod_l+0x19e>
 800a80c:	b91d      	cbnz	r5, 800a816 <_strtod_l+0x17e>
 800a80e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a810:	4302      	orrs	r2, r0
 800a812:	d095      	beq.n	800a740 <_strtod_l+0xa8>
 800a814:	2500      	movs	r5, #0
 800a816:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a818:	1c62      	adds	r2, r4, #1
 800a81a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a81c:	7862      	ldrb	r2, [r4, #1]
 800a81e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a820:	d077      	beq.n	800a912 <_strtod_l+0x27a>
 800a822:	2a2d      	cmp	r2, #45	@ 0x2d
 800a824:	d07b      	beq.n	800a91e <_strtod_l+0x286>
 800a826:	f04f 0c00 	mov.w	ip, #0
 800a82a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a82e:	2909      	cmp	r1, #9
 800a830:	f240 8082 	bls.w	800a938 <_strtod_l+0x2a0>
 800a834:	9419      	str	r4, [sp, #100]	@ 0x64
 800a836:	f04f 0800 	mov.w	r8, #0
 800a83a:	e0a2      	b.n	800a982 <_strtod_l+0x2ea>
 800a83c:	2300      	movs	r3, #0
 800a83e:	e7c7      	b.n	800a7d0 <_strtod_l+0x138>
 800a840:	2f08      	cmp	r7, #8
 800a842:	bfd5      	itete	le
 800a844:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a846:	9908      	ldrgt	r1, [sp, #32]
 800a848:	fb02 3301 	mlale	r3, r2, r1, r3
 800a84c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a850:	f100 0001 	add.w	r0, r0, #1
 800a854:	bfd4      	ite	le
 800a856:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a858:	9308      	strgt	r3, [sp, #32]
 800a85a:	3701      	adds	r7, #1
 800a85c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a85e:	e7bf      	b.n	800a7e0 <_strtod_l+0x148>
 800a860:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	9219      	str	r2, [sp, #100]	@ 0x64
 800a866:	785a      	ldrb	r2, [r3, #1]
 800a868:	b37f      	cbz	r7, 800a8ca <_strtod_l+0x232>
 800a86a:	4681      	mov	r9, r0
 800a86c:	463d      	mov	r5, r7
 800a86e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a872:	2b09      	cmp	r3, #9
 800a874:	d912      	bls.n	800a89c <_strtod_l+0x204>
 800a876:	2301      	movs	r3, #1
 800a878:	e7c4      	b.n	800a804 <_strtod_l+0x16c>
 800a87a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a87c:	1c5a      	adds	r2, r3, #1
 800a87e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a880:	785a      	ldrb	r2, [r3, #1]
 800a882:	3001      	adds	r0, #1
 800a884:	2a30      	cmp	r2, #48	@ 0x30
 800a886:	d0f8      	beq.n	800a87a <_strtod_l+0x1e2>
 800a888:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	f200 84d3 	bhi.w	800b238 <_strtod_l+0xba0>
 800a892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a894:	930c      	str	r3, [sp, #48]	@ 0x30
 800a896:	4681      	mov	r9, r0
 800a898:	2000      	movs	r0, #0
 800a89a:	4605      	mov	r5, r0
 800a89c:	3a30      	subs	r2, #48	@ 0x30
 800a89e:	f100 0301 	add.w	r3, r0, #1
 800a8a2:	d02a      	beq.n	800a8fa <_strtod_l+0x262>
 800a8a4:	4499      	add	r9, r3
 800a8a6:	eb00 0c05 	add.w	ip, r0, r5
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	210a      	movs	r1, #10
 800a8ae:	4563      	cmp	r3, ip
 800a8b0:	d10d      	bne.n	800a8ce <_strtod_l+0x236>
 800a8b2:	1c69      	adds	r1, r5, #1
 800a8b4:	4401      	add	r1, r0
 800a8b6:	4428      	add	r0, r5
 800a8b8:	2808      	cmp	r0, #8
 800a8ba:	dc16      	bgt.n	800a8ea <_strtod_l+0x252>
 800a8bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8be:	230a      	movs	r3, #10
 800a8c0:	fb03 2300 	mla	r3, r3, r0, r2
 800a8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e018      	b.n	800a8fc <_strtod_l+0x264>
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	e7da      	b.n	800a884 <_strtod_l+0x1ec>
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	f103 0301 	add.w	r3, r3, #1
 800a8d4:	dc03      	bgt.n	800a8de <_strtod_l+0x246>
 800a8d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a8d8:	434e      	muls	r6, r1
 800a8da:	960a      	str	r6, [sp, #40]	@ 0x28
 800a8dc:	e7e7      	b.n	800a8ae <_strtod_l+0x216>
 800a8de:	2b10      	cmp	r3, #16
 800a8e0:	bfde      	ittt	le
 800a8e2:	9e08      	ldrle	r6, [sp, #32]
 800a8e4:	434e      	mulle	r6, r1
 800a8e6:	9608      	strle	r6, [sp, #32]
 800a8e8:	e7e1      	b.n	800a8ae <_strtod_l+0x216>
 800a8ea:	280f      	cmp	r0, #15
 800a8ec:	dceb      	bgt.n	800a8c6 <_strtod_l+0x22e>
 800a8ee:	9808      	ldr	r0, [sp, #32]
 800a8f0:	230a      	movs	r3, #10
 800a8f2:	fb03 2300 	mla	r3, r3, r0, r2
 800a8f6:	9308      	str	r3, [sp, #32]
 800a8f8:	e7e5      	b.n	800a8c6 <_strtod_l+0x22e>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8fe:	1c50      	adds	r0, r2, #1
 800a900:	9019      	str	r0, [sp, #100]	@ 0x64
 800a902:	7852      	ldrb	r2, [r2, #1]
 800a904:	4618      	mov	r0, r3
 800a906:	460d      	mov	r5, r1
 800a908:	e7b1      	b.n	800a86e <_strtod_l+0x1d6>
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	2301      	movs	r3, #1
 800a910:	e77d      	b.n	800a80e <_strtod_l+0x176>
 800a912:	f04f 0c00 	mov.w	ip, #0
 800a916:	1ca2      	adds	r2, r4, #2
 800a918:	9219      	str	r2, [sp, #100]	@ 0x64
 800a91a:	78a2      	ldrb	r2, [r4, #2]
 800a91c:	e785      	b.n	800a82a <_strtod_l+0x192>
 800a91e:	f04f 0c01 	mov.w	ip, #1
 800a922:	e7f8      	b.n	800a916 <_strtod_l+0x27e>
 800a924:	0800c940 	.word	0x0800c940
 800a928:	0800c928 	.word	0x0800c928
 800a92c:	7ff00000 	.word	0x7ff00000
 800a930:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a932:	1c51      	adds	r1, r2, #1
 800a934:	9119      	str	r1, [sp, #100]	@ 0x64
 800a936:	7852      	ldrb	r2, [r2, #1]
 800a938:	2a30      	cmp	r2, #48	@ 0x30
 800a93a:	d0f9      	beq.n	800a930 <_strtod_l+0x298>
 800a93c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a940:	2908      	cmp	r1, #8
 800a942:	f63f af78 	bhi.w	800a836 <_strtod_l+0x19e>
 800a946:	3a30      	subs	r2, #48	@ 0x30
 800a948:	920e      	str	r2, [sp, #56]	@ 0x38
 800a94a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a94c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a94e:	f04f 080a 	mov.w	r8, #10
 800a952:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a954:	1c56      	adds	r6, r2, #1
 800a956:	9619      	str	r6, [sp, #100]	@ 0x64
 800a958:	7852      	ldrb	r2, [r2, #1]
 800a95a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a95e:	f1be 0f09 	cmp.w	lr, #9
 800a962:	d939      	bls.n	800a9d8 <_strtod_l+0x340>
 800a964:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a966:	1a76      	subs	r6, r6, r1
 800a968:	2e08      	cmp	r6, #8
 800a96a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a96e:	dc03      	bgt.n	800a978 <_strtod_l+0x2e0>
 800a970:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a972:	4588      	cmp	r8, r1
 800a974:	bfa8      	it	ge
 800a976:	4688      	movge	r8, r1
 800a978:	f1bc 0f00 	cmp.w	ip, #0
 800a97c:	d001      	beq.n	800a982 <_strtod_l+0x2ea>
 800a97e:	f1c8 0800 	rsb	r8, r8, #0
 800a982:	2d00      	cmp	r5, #0
 800a984:	d14e      	bne.n	800aa24 <_strtod_l+0x38c>
 800a986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a988:	4308      	orrs	r0, r1
 800a98a:	f47f aebe 	bne.w	800a70a <_strtod_l+0x72>
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f47f aed6 	bne.w	800a740 <_strtod_l+0xa8>
 800a994:	2a69      	cmp	r2, #105	@ 0x69
 800a996:	d028      	beq.n	800a9ea <_strtod_l+0x352>
 800a998:	dc25      	bgt.n	800a9e6 <_strtod_l+0x34e>
 800a99a:	2a49      	cmp	r2, #73	@ 0x49
 800a99c:	d025      	beq.n	800a9ea <_strtod_l+0x352>
 800a99e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a9a0:	f47f aece 	bne.w	800a740 <_strtod_l+0xa8>
 800a9a4:	499b      	ldr	r1, [pc, #620]	@ (800ac14 <_strtod_l+0x57c>)
 800a9a6:	a819      	add	r0, sp, #100	@ 0x64
 800a9a8:	f001 f9e2 	bl	800bd70 <__match>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	f43f aec7 	beq.w	800a740 <_strtod_l+0xa8>
 800a9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b28      	cmp	r3, #40	@ 0x28
 800a9b8:	d12e      	bne.n	800aa18 <_strtod_l+0x380>
 800a9ba:	4997      	ldr	r1, [pc, #604]	@ (800ac18 <_strtod_l+0x580>)
 800a9bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9be:	a819      	add	r0, sp, #100	@ 0x64
 800a9c0:	f001 f9ea 	bl	800bd98 <__hexnan>
 800a9c4:	2805      	cmp	r0, #5
 800a9c6:	d127      	bne.n	800aa18 <_strtod_l+0x380>
 800a9c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a9ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a9d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a9d6:	e698      	b.n	800a70a <_strtod_l+0x72>
 800a9d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9da:	fb08 2101 	mla	r1, r8, r1, r2
 800a9de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a9e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9e4:	e7b5      	b.n	800a952 <_strtod_l+0x2ba>
 800a9e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9e8:	e7da      	b.n	800a9a0 <_strtod_l+0x308>
 800a9ea:	498c      	ldr	r1, [pc, #560]	@ (800ac1c <_strtod_l+0x584>)
 800a9ec:	a819      	add	r0, sp, #100	@ 0x64
 800a9ee:	f001 f9bf 	bl	800bd70 <__match>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f43f aea4 	beq.w	800a740 <_strtod_l+0xa8>
 800a9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9fa:	4989      	ldr	r1, [pc, #548]	@ (800ac20 <_strtod_l+0x588>)
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	a819      	add	r0, sp, #100	@ 0x64
 800aa00:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa02:	f001 f9b5 	bl	800bd70 <__match>
 800aa06:	b910      	cbnz	r0, 800aa0e <_strtod_l+0x376>
 800aa08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ac30 <_strtod_l+0x598>
 800aa12:	f04f 0a00 	mov.w	sl, #0
 800aa16:	e678      	b.n	800a70a <_strtod_l+0x72>
 800aa18:	4882      	ldr	r0, [pc, #520]	@ (800ac24 <_strtod_l+0x58c>)
 800aa1a:	f000 fee5 	bl	800b7e8 <nan>
 800aa1e:	ec5b ab10 	vmov	sl, fp, d0
 800aa22:	e672      	b.n	800a70a <_strtod_l+0x72>
 800aa24:	eba8 0309 	sub.w	r3, r8, r9
 800aa28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa2c:	2f00      	cmp	r7, #0
 800aa2e:	bf08      	it	eq
 800aa30:	462f      	moveq	r7, r5
 800aa32:	2d10      	cmp	r5, #16
 800aa34:	462c      	mov	r4, r5
 800aa36:	bfa8      	it	ge
 800aa38:	2410      	movge	r4, #16
 800aa3a:	f7f5 fd6b 	bl	8000514 <__aeabi_ui2d>
 800aa3e:	2d09      	cmp	r5, #9
 800aa40:	4682      	mov	sl, r0
 800aa42:	468b      	mov	fp, r1
 800aa44:	dc13      	bgt.n	800aa6e <_strtod_l+0x3d6>
 800aa46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f43f ae5e 	beq.w	800a70a <_strtod_l+0x72>
 800aa4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa50:	dd78      	ble.n	800ab44 <_strtod_l+0x4ac>
 800aa52:	2b16      	cmp	r3, #22
 800aa54:	dc5f      	bgt.n	800ab16 <_strtod_l+0x47e>
 800aa56:	4974      	ldr	r1, [pc, #464]	@ (800ac28 <_strtod_l+0x590>)
 800aa58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	f7f5 fdd0 	bl	8000608 <__aeabi_dmul>
 800aa68:	4682      	mov	sl, r0
 800aa6a:	468b      	mov	fp, r1
 800aa6c:	e64d      	b.n	800a70a <_strtod_l+0x72>
 800aa6e:	4b6e      	ldr	r3, [pc, #440]	@ (800ac28 <_strtod_l+0x590>)
 800aa70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa78:	f7f5 fdc6 	bl	8000608 <__aeabi_dmul>
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	9808      	ldr	r0, [sp, #32]
 800aa80:	468b      	mov	fp, r1
 800aa82:	f7f5 fd47 	bl	8000514 <__aeabi_ui2d>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4650      	mov	r0, sl
 800aa8c:	4659      	mov	r1, fp
 800aa8e:	f7f5 fc05 	bl	800029c <__adddf3>
 800aa92:	2d0f      	cmp	r5, #15
 800aa94:	4682      	mov	sl, r0
 800aa96:	468b      	mov	fp, r1
 800aa98:	ddd5      	ble.n	800aa46 <_strtod_l+0x3ae>
 800aa9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa9c:	1b2c      	subs	r4, r5, r4
 800aa9e:	441c      	add	r4, r3
 800aaa0:	2c00      	cmp	r4, #0
 800aaa2:	f340 8096 	ble.w	800abd2 <_strtod_l+0x53a>
 800aaa6:	f014 030f 	ands.w	r3, r4, #15
 800aaaa:	d00a      	beq.n	800aac2 <_strtod_l+0x42a>
 800aaac:	495e      	ldr	r1, [pc, #376]	@ (800ac28 <_strtod_l+0x590>)
 800aaae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aab2:	4652      	mov	r2, sl
 800aab4:	465b      	mov	r3, fp
 800aab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaba:	f7f5 fda5 	bl	8000608 <__aeabi_dmul>
 800aabe:	4682      	mov	sl, r0
 800aac0:	468b      	mov	fp, r1
 800aac2:	f034 040f 	bics.w	r4, r4, #15
 800aac6:	d073      	beq.n	800abb0 <_strtod_l+0x518>
 800aac8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aacc:	dd48      	ble.n	800ab60 <_strtod_l+0x4c8>
 800aace:	2400      	movs	r4, #0
 800aad0:	46a0      	mov	r8, r4
 800aad2:	940a      	str	r4, [sp, #40]	@ 0x28
 800aad4:	46a1      	mov	r9, r4
 800aad6:	9a05      	ldr	r2, [sp, #20]
 800aad8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac30 <_strtod_l+0x598>
 800aadc:	2322      	movs	r3, #34	@ 0x22
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	f04f 0a00 	mov.w	sl, #0
 800aae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f43f ae0f 	beq.w	800a70a <_strtod_l+0x72>
 800aaec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	f7ff f942 	bl	8009d78 <_Bfree>
 800aaf4:	9805      	ldr	r0, [sp, #20]
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7ff f93e 	bl	8009d78 <_Bfree>
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	4641      	mov	r1, r8
 800ab00:	f7ff f93a 	bl	8009d78 <_Bfree>
 800ab04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab06:	9805      	ldr	r0, [sp, #20]
 800ab08:	f7ff f936 	bl	8009d78 <_Bfree>
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	f7ff f932 	bl	8009d78 <_Bfree>
 800ab14:	e5f9      	b.n	800a70a <_strtod_l+0x72>
 800ab16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	dbbc      	blt.n	800aa9a <_strtod_l+0x402>
 800ab20:	4c41      	ldr	r4, [pc, #260]	@ (800ac28 <_strtod_l+0x590>)
 800ab22:	f1c5 050f 	rsb	r5, r5, #15
 800ab26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab32:	f7f5 fd69 	bl	8000608 <__aeabi_dmul>
 800ab36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab38:	1b5d      	subs	r5, r3, r5
 800ab3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab42:	e78f      	b.n	800aa64 <_strtod_l+0x3cc>
 800ab44:	3316      	adds	r3, #22
 800ab46:	dba8      	blt.n	800aa9a <_strtod_l+0x402>
 800ab48:	4b37      	ldr	r3, [pc, #220]	@ (800ac28 <_strtod_l+0x590>)
 800ab4a:	eba9 0808 	sub.w	r8, r9, r8
 800ab4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab56:	4650      	mov	r0, sl
 800ab58:	4659      	mov	r1, fp
 800ab5a:	f7f5 fe7f 	bl	800085c <__aeabi_ddiv>
 800ab5e:	e783      	b.n	800aa68 <_strtod_l+0x3d0>
 800ab60:	4b32      	ldr	r3, [pc, #200]	@ (800ac2c <_strtod_l+0x594>)
 800ab62:	9308      	str	r3, [sp, #32]
 800ab64:	2300      	movs	r3, #0
 800ab66:	1124      	asrs	r4, r4, #4
 800ab68:	4650      	mov	r0, sl
 800ab6a:	4659      	mov	r1, fp
 800ab6c:	461e      	mov	r6, r3
 800ab6e:	2c01      	cmp	r4, #1
 800ab70:	dc21      	bgt.n	800abb6 <_strtod_l+0x51e>
 800ab72:	b10b      	cbz	r3, 800ab78 <_strtod_l+0x4e0>
 800ab74:	4682      	mov	sl, r0
 800ab76:	468b      	mov	fp, r1
 800ab78:	492c      	ldr	r1, [pc, #176]	@ (800ac2c <_strtod_l+0x594>)
 800ab7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab82:	4652      	mov	r2, sl
 800ab84:	465b      	mov	r3, fp
 800ab86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab8a:	f7f5 fd3d 	bl	8000608 <__aeabi_dmul>
 800ab8e:	4b28      	ldr	r3, [pc, #160]	@ (800ac30 <_strtod_l+0x598>)
 800ab90:	460a      	mov	r2, r1
 800ab92:	400b      	ands	r3, r1
 800ab94:	4927      	ldr	r1, [pc, #156]	@ (800ac34 <_strtod_l+0x59c>)
 800ab96:	428b      	cmp	r3, r1
 800ab98:	4682      	mov	sl, r0
 800ab9a:	d898      	bhi.n	800aace <_strtod_l+0x436>
 800ab9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aba0:	428b      	cmp	r3, r1
 800aba2:	bf86      	itte	hi
 800aba4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ac38 <_strtod_l+0x5a0>
 800aba8:	f04f 3aff 	movhi.w	sl, #4294967295
 800abac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800abb0:	2300      	movs	r3, #0
 800abb2:	9308      	str	r3, [sp, #32]
 800abb4:	e07a      	b.n	800acac <_strtod_l+0x614>
 800abb6:	07e2      	lsls	r2, r4, #31
 800abb8:	d505      	bpl.n	800abc6 <_strtod_l+0x52e>
 800abba:	9b08      	ldr	r3, [sp, #32]
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f7f5 fd22 	bl	8000608 <__aeabi_dmul>
 800abc4:	2301      	movs	r3, #1
 800abc6:	9a08      	ldr	r2, [sp, #32]
 800abc8:	3208      	adds	r2, #8
 800abca:	3601      	adds	r6, #1
 800abcc:	1064      	asrs	r4, r4, #1
 800abce:	9208      	str	r2, [sp, #32]
 800abd0:	e7cd      	b.n	800ab6e <_strtod_l+0x4d6>
 800abd2:	d0ed      	beq.n	800abb0 <_strtod_l+0x518>
 800abd4:	4264      	negs	r4, r4
 800abd6:	f014 020f 	ands.w	r2, r4, #15
 800abda:	d00a      	beq.n	800abf2 <_strtod_l+0x55a>
 800abdc:	4b12      	ldr	r3, [pc, #72]	@ (800ac28 <_strtod_l+0x590>)
 800abde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abe2:	4650      	mov	r0, sl
 800abe4:	4659      	mov	r1, fp
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	f7f5 fe37 	bl	800085c <__aeabi_ddiv>
 800abee:	4682      	mov	sl, r0
 800abf0:	468b      	mov	fp, r1
 800abf2:	1124      	asrs	r4, r4, #4
 800abf4:	d0dc      	beq.n	800abb0 <_strtod_l+0x518>
 800abf6:	2c1f      	cmp	r4, #31
 800abf8:	dd20      	ble.n	800ac3c <_strtod_l+0x5a4>
 800abfa:	2400      	movs	r4, #0
 800abfc:	46a0      	mov	r8, r4
 800abfe:	940a      	str	r4, [sp, #40]	@ 0x28
 800ac00:	46a1      	mov	r9, r4
 800ac02:	9a05      	ldr	r2, [sp, #20]
 800ac04:	2322      	movs	r3, #34	@ 0x22
 800ac06:	f04f 0a00 	mov.w	sl, #0
 800ac0a:	f04f 0b00 	mov.w	fp, #0
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	e768      	b.n	800aae4 <_strtod_l+0x44c>
 800ac12:	bf00      	nop
 800ac14:	0800c715 	.word	0x0800c715
 800ac18:	0800c92c 	.word	0x0800c92c
 800ac1c:	0800c70d 	.word	0x0800c70d
 800ac20:	0800c744 	.word	0x0800c744
 800ac24:	0800cad5 	.word	0x0800cad5
 800ac28:	0800c860 	.word	0x0800c860
 800ac2c:	0800c838 	.word	0x0800c838
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	7ca00000 	.word	0x7ca00000
 800ac38:	7fefffff 	.word	0x7fefffff
 800ac3c:	f014 0310 	ands.w	r3, r4, #16
 800ac40:	bf18      	it	ne
 800ac42:	236a      	movne	r3, #106	@ 0x6a
 800ac44:	4ea9      	ldr	r6, [pc, #676]	@ (800aeec <_strtod_l+0x854>)
 800ac46:	9308      	str	r3, [sp, #32]
 800ac48:	4650      	mov	r0, sl
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	07e2      	lsls	r2, r4, #31
 800ac50:	d504      	bpl.n	800ac5c <_strtod_l+0x5c4>
 800ac52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac56:	f7f5 fcd7 	bl	8000608 <__aeabi_dmul>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	1064      	asrs	r4, r4, #1
 800ac5e:	f106 0608 	add.w	r6, r6, #8
 800ac62:	d1f4      	bne.n	800ac4e <_strtod_l+0x5b6>
 800ac64:	b10b      	cbz	r3, 800ac6a <_strtod_l+0x5d2>
 800ac66:	4682      	mov	sl, r0
 800ac68:	468b      	mov	fp, r1
 800ac6a:	9b08      	ldr	r3, [sp, #32]
 800ac6c:	b1b3      	cbz	r3, 800ac9c <_strtod_l+0x604>
 800ac6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	4659      	mov	r1, fp
 800ac7a:	dd0f      	ble.n	800ac9c <_strtod_l+0x604>
 800ac7c:	2b1f      	cmp	r3, #31
 800ac7e:	dd55      	ble.n	800ad2c <_strtod_l+0x694>
 800ac80:	2b34      	cmp	r3, #52	@ 0x34
 800ac82:	bfde      	ittt	le
 800ac84:	f04f 33ff 	movle.w	r3, #4294967295
 800ac88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac8c:	4093      	lslle	r3, r2
 800ac8e:	f04f 0a00 	mov.w	sl, #0
 800ac92:	bfcc      	ite	gt
 800ac94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac98:	ea03 0b01 	andle.w	fp, r3, r1
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	4650      	mov	r0, sl
 800aca2:	4659      	mov	r1, fp
 800aca4:	f7f5 ff18 	bl	8000ad8 <__aeabi_dcmpeq>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1a6      	bne.n	800abfa <_strtod_l+0x562>
 800acac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800acb2:	9805      	ldr	r0, [sp, #20]
 800acb4:	462b      	mov	r3, r5
 800acb6:	463a      	mov	r2, r7
 800acb8:	f7ff f8c6 	bl	8009e48 <__s2b>
 800acbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f43f af05 	beq.w	800aace <_strtod_l+0x436>
 800acc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	eba9 0308 	sub.w	r3, r9, r8
 800accc:	bfa8      	it	ge
 800acce:	2300      	movge	r3, #0
 800acd0:	9312      	str	r3, [sp, #72]	@ 0x48
 800acd2:	2400      	movs	r4, #0
 800acd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800acd8:	9316      	str	r3, [sp, #88]	@ 0x58
 800acda:	46a0      	mov	r8, r4
 800acdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acde:	9805      	ldr	r0, [sp, #20]
 800ace0:	6859      	ldr	r1, [r3, #4]
 800ace2:	f7ff f809 	bl	8009cf8 <_Balloc>
 800ace6:	4681      	mov	r9, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	f43f aef4 	beq.w	800aad6 <_strtod_l+0x43e>
 800acee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acf0:	691a      	ldr	r2, [r3, #16]
 800acf2:	3202      	adds	r2, #2
 800acf4:	f103 010c 	add.w	r1, r3, #12
 800acf8:	0092      	lsls	r2, r2, #2
 800acfa:	300c      	adds	r0, #12
 800acfc:	f7fe f899 	bl	8008e32 <memcpy>
 800ad00:	ec4b ab10 	vmov	d0, sl, fp
 800ad04:	9805      	ldr	r0, [sp, #20]
 800ad06:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad08:	a91b      	add	r1, sp, #108	@ 0x6c
 800ad0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ad0e:	f7ff fbd7 	bl	800a4c0 <__d2b>
 800ad12:	901a      	str	r0, [sp, #104]	@ 0x68
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f43f aede 	beq.w	800aad6 <_strtod_l+0x43e>
 800ad1a:	9805      	ldr	r0, [sp, #20]
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	f7ff f929 	bl	8009f74 <__i2b>
 800ad22:	4680      	mov	r8, r0
 800ad24:	b948      	cbnz	r0, 800ad3a <_strtod_l+0x6a2>
 800ad26:	f04f 0800 	mov.w	r8, #0
 800ad2a:	e6d4      	b.n	800aad6 <_strtod_l+0x43e>
 800ad2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad30:	fa02 f303 	lsl.w	r3, r2, r3
 800ad34:	ea03 0a0a 	and.w	sl, r3, sl
 800ad38:	e7b0      	b.n	800ac9c <_strtod_l+0x604>
 800ad3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	bfab      	itete	ge
 800ad42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad4a:	bfac      	ite	ge
 800ad4c:	18ef      	addge	r7, r5, r3
 800ad4e:	1b5e      	sublt	r6, r3, r5
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	1aed      	subs	r5, r5, r3
 800ad54:	4415      	add	r5, r2
 800ad56:	4b66      	ldr	r3, [pc, #408]	@ (800aef0 <_strtod_l+0x858>)
 800ad58:	3d01      	subs	r5, #1
 800ad5a:	429d      	cmp	r5, r3
 800ad5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad60:	da50      	bge.n	800ae04 <_strtod_l+0x76c>
 800ad62:	1b5b      	subs	r3, r3, r5
 800ad64:	2b1f      	cmp	r3, #31
 800ad66:	eba2 0203 	sub.w	r2, r2, r3
 800ad6a:	f04f 0101 	mov.w	r1, #1
 800ad6e:	dc3d      	bgt.n	800adec <_strtod_l+0x754>
 800ad70:	fa01 f303 	lsl.w	r3, r1, r3
 800ad74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad76:	2300      	movs	r3, #0
 800ad78:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad7a:	18bd      	adds	r5, r7, r2
 800ad7c:	9b08      	ldr	r3, [sp, #32]
 800ad7e:	42af      	cmp	r7, r5
 800ad80:	4416      	add	r6, r2
 800ad82:	441e      	add	r6, r3
 800ad84:	463b      	mov	r3, r7
 800ad86:	bfa8      	it	ge
 800ad88:	462b      	movge	r3, r5
 800ad8a:	42b3      	cmp	r3, r6
 800ad8c:	bfa8      	it	ge
 800ad8e:	4633      	movge	r3, r6
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bfc2      	ittt	gt
 800ad94:	1aed      	subgt	r5, r5, r3
 800ad96:	1af6      	subgt	r6, r6, r3
 800ad98:	1aff      	subgt	r7, r7, r3
 800ad9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dd16      	ble.n	800adce <_strtod_l+0x736>
 800ada0:	4641      	mov	r1, r8
 800ada2:	9805      	ldr	r0, [sp, #20]
 800ada4:	461a      	mov	r2, r3
 800ada6:	f7ff f9a5 	bl	800a0f4 <__pow5mult>
 800adaa:	4680      	mov	r8, r0
 800adac:	2800      	cmp	r0, #0
 800adae:	d0ba      	beq.n	800ad26 <_strtod_l+0x68e>
 800adb0:	4601      	mov	r1, r0
 800adb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adb4:	9805      	ldr	r0, [sp, #20]
 800adb6:	f7ff f8f3 	bl	8009fa0 <__multiply>
 800adba:	900e      	str	r0, [sp, #56]	@ 0x38
 800adbc:	2800      	cmp	r0, #0
 800adbe:	f43f ae8a 	beq.w	800aad6 <_strtod_l+0x43e>
 800adc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adc4:	9805      	ldr	r0, [sp, #20]
 800adc6:	f7fe ffd7 	bl	8009d78 <_Bfree>
 800adca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800adce:	2d00      	cmp	r5, #0
 800add0:	dc1d      	bgt.n	800ae0e <_strtod_l+0x776>
 800add2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	dd23      	ble.n	800ae20 <_strtod_l+0x788>
 800add8:	4649      	mov	r1, r9
 800adda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800addc:	9805      	ldr	r0, [sp, #20]
 800adde:	f7ff f989 	bl	800a0f4 <__pow5mult>
 800ade2:	4681      	mov	r9, r0
 800ade4:	b9e0      	cbnz	r0, 800ae20 <_strtod_l+0x788>
 800ade6:	f04f 0900 	mov.w	r9, #0
 800adea:	e674      	b.n	800aad6 <_strtod_l+0x43e>
 800adec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800adf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800adf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800adf8:	35e2      	adds	r5, #226	@ 0xe2
 800adfa:	fa01 f305 	lsl.w	r3, r1, r5
 800adfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae00:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ae02:	e7ba      	b.n	800ad7a <_strtod_l+0x6e2>
 800ae04:	2300      	movs	r3, #0
 800ae06:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae08:	2301      	movs	r3, #1
 800ae0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae0c:	e7b5      	b.n	800ad7a <_strtod_l+0x6e2>
 800ae0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae10:	9805      	ldr	r0, [sp, #20]
 800ae12:	462a      	mov	r2, r5
 800ae14:	f7ff f9c8 	bl	800a1a8 <__lshift>
 800ae18:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d1d9      	bne.n	800add2 <_strtod_l+0x73a>
 800ae1e:	e65a      	b.n	800aad6 <_strtod_l+0x43e>
 800ae20:	2e00      	cmp	r6, #0
 800ae22:	dd07      	ble.n	800ae34 <_strtod_l+0x79c>
 800ae24:	4649      	mov	r1, r9
 800ae26:	9805      	ldr	r0, [sp, #20]
 800ae28:	4632      	mov	r2, r6
 800ae2a:	f7ff f9bd 	bl	800a1a8 <__lshift>
 800ae2e:	4681      	mov	r9, r0
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d0d8      	beq.n	800ade6 <_strtod_l+0x74e>
 800ae34:	2f00      	cmp	r7, #0
 800ae36:	dd08      	ble.n	800ae4a <_strtod_l+0x7b2>
 800ae38:	4641      	mov	r1, r8
 800ae3a:	9805      	ldr	r0, [sp, #20]
 800ae3c:	463a      	mov	r2, r7
 800ae3e:	f7ff f9b3 	bl	800a1a8 <__lshift>
 800ae42:	4680      	mov	r8, r0
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f43f ae46 	beq.w	800aad6 <_strtod_l+0x43e>
 800ae4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae4c:	9805      	ldr	r0, [sp, #20]
 800ae4e:	464a      	mov	r2, r9
 800ae50:	f7ff fa32 	bl	800a2b8 <__mdiff>
 800ae54:	4604      	mov	r4, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f43f ae3d 	beq.w	800aad6 <_strtod_l+0x43e>
 800ae5c:	68c3      	ldr	r3, [r0, #12]
 800ae5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae60:	2300      	movs	r3, #0
 800ae62:	60c3      	str	r3, [r0, #12]
 800ae64:	4641      	mov	r1, r8
 800ae66:	f7ff fa0b 	bl	800a280 <__mcmp>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	da46      	bge.n	800aefc <_strtod_l+0x864>
 800ae6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae70:	ea53 030a 	orrs.w	r3, r3, sl
 800ae74:	d16c      	bne.n	800af50 <_strtod_l+0x8b8>
 800ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d168      	bne.n	800af50 <_strtod_l+0x8b8>
 800ae7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae82:	0d1b      	lsrs	r3, r3, #20
 800ae84:	051b      	lsls	r3, r3, #20
 800ae86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae8a:	d961      	bls.n	800af50 <_strtod_l+0x8b8>
 800ae8c:	6963      	ldr	r3, [r4, #20]
 800ae8e:	b913      	cbnz	r3, 800ae96 <_strtod_l+0x7fe>
 800ae90:	6923      	ldr	r3, [r4, #16]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	dd5c      	ble.n	800af50 <_strtod_l+0x8b8>
 800ae96:	4621      	mov	r1, r4
 800ae98:	2201      	movs	r2, #1
 800ae9a:	9805      	ldr	r0, [sp, #20]
 800ae9c:	f7ff f984 	bl	800a1a8 <__lshift>
 800aea0:	4641      	mov	r1, r8
 800aea2:	4604      	mov	r4, r0
 800aea4:	f7ff f9ec 	bl	800a280 <__mcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	dd51      	ble.n	800af50 <_strtod_l+0x8b8>
 800aeac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aeb0:	9a08      	ldr	r2, [sp, #32]
 800aeb2:	0d1b      	lsrs	r3, r3, #20
 800aeb4:	051b      	lsls	r3, r3, #20
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	d06b      	beq.n	800af92 <_strtod_l+0x8fa>
 800aeba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aebe:	d868      	bhi.n	800af92 <_strtod_l+0x8fa>
 800aec0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aec4:	f67f ae9d 	bls.w	800ac02 <_strtod_l+0x56a>
 800aec8:	4b0a      	ldr	r3, [pc, #40]	@ (800aef4 <_strtod_l+0x85c>)
 800aeca:	4650      	mov	r0, sl
 800aecc:	4659      	mov	r1, fp
 800aece:	2200      	movs	r2, #0
 800aed0:	f7f5 fb9a 	bl	8000608 <__aeabi_dmul>
 800aed4:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <_strtod_l+0x860>)
 800aed6:	400b      	ands	r3, r1
 800aed8:	4682      	mov	sl, r0
 800aeda:	468b      	mov	fp, r1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f47f ae05 	bne.w	800aaec <_strtod_l+0x454>
 800aee2:	9a05      	ldr	r2, [sp, #20]
 800aee4:	2322      	movs	r3, #34	@ 0x22
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	e600      	b.n	800aaec <_strtod_l+0x454>
 800aeea:	bf00      	nop
 800aeec:	0800c958 	.word	0x0800c958
 800aef0:	fffffc02 	.word	0xfffffc02
 800aef4:	39500000 	.word	0x39500000
 800aef8:	7ff00000 	.word	0x7ff00000
 800aefc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800af00:	d165      	bne.n	800afce <_strtod_l+0x936>
 800af02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af08:	b35a      	cbz	r2, 800af62 <_strtod_l+0x8ca>
 800af0a:	4a9f      	ldr	r2, [pc, #636]	@ (800b188 <_strtod_l+0xaf0>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d12b      	bne.n	800af68 <_strtod_l+0x8d0>
 800af10:	9b08      	ldr	r3, [sp, #32]
 800af12:	4651      	mov	r1, sl
 800af14:	b303      	cbz	r3, 800af58 <_strtod_l+0x8c0>
 800af16:	4b9d      	ldr	r3, [pc, #628]	@ (800b18c <_strtod_l+0xaf4>)
 800af18:	465a      	mov	r2, fp
 800af1a:	4013      	ands	r3, r2
 800af1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	d81b      	bhi.n	800af5e <_strtod_l+0x8c6>
 800af26:	0d1b      	lsrs	r3, r3, #20
 800af28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af2c:	fa02 f303 	lsl.w	r3, r2, r3
 800af30:	4299      	cmp	r1, r3
 800af32:	d119      	bne.n	800af68 <_strtod_l+0x8d0>
 800af34:	4b96      	ldr	r3, [pc, #600]	@ (800b190 <_strtod_l+0xaf8>)
 800af36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af38:	429a      	cmp	r2, r3
 800af3a:	d102      	bne.n	800af42 <_strtod_l+0x8aa>
 800af3c:	3101      	adds	r1, #1
 800af3e:	f43f adca 	beq.w	800aad6 <_strtod_l+0x43e>
 800af42:	4b92      	ldr	r3, [pc, #584]	@ (800b18c <_strtod_l+0xaf4>)
 800af44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af46:	401a      	ands	r2, r3
 800af48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af4c:	f04f 0a00 	mov.w	sl, #0
 800af50:	9b08      	ldr	r3, [sp, #32]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1b8      	bne.n	800aec8 <_strtod_l+0x830>
 800af56:	e5c9      	b.n	800aaec <_strtod_l+0x454>
 800af58:	f04f 33ff 	mov.w	r3, #4294967295
 800af5c:	e7e8      	b.n	800af30 <_strtod_l+0x898>
 800af5e:	4613      	mov	r3, r2
 800af60:	e7e6      	b.n	800af30 <_strtod_l+0x898>
 800af62:	ea53 030a 	orrs.w	r3, r3, sl
 800af66:	d0a1      	beq.n	800aeac <_strtod_l+0x814>
 800af68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af6a:	b1db      	cbz	r3, 800afa4 <_strtod_l+0x90c>
 800af6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af6e:	4213      	tst	r3, r2
 800af70:	d0ee      	beq.n	800af50 <_strtod_l+0x8b8>
 800af72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af74:	9a08      	ldr	r2, [sp, #32]
 800af76:	4650      	mov	r0, sl
 800af78:	4659      	mov	r1, fp
 800af7a:	b1bb      	cbz	r3, 800afac <_strtod_l+0x914>
 800af7c:	f7ff fb6e 	bl	800a65c <sulp>
 800af80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af84:	ec53 2b10 	vmov	r2, r3, d0
 800af88:	f7f5 f988 	bl	800029c <__adddf3>
 800af8c:	4682      	mov	sl, r0
 800af8e:	468b      	mov	fp, r1
 800af90:	e7de      	b.n	800af50 <_strtod_l+0x8b8>
 800af92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af9e:	f04f 3aff 	mov.w	sl, #4294967295
 800afa2:	e7d5      	b.n	800af50 <_strtod_l+0x8b8>
 800afa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afa6:	ea13 0f0a 	tst.w	r3, sl
 800afaa:	e7e1      	b.n	800af70 <_strtod_l+0x8d8>
 800afac:	f7ff fb56 	bl	800a65c <sulp>
 800afb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afb4:	ec53 2b10 	vmov	r2, r3, d0
 800afb8:	f7f5 f96e 	bl	8000298 <__aeabi_dsub>
 800afbc:	2200      	movs	r2, #0
 800afbe:	2300      	movs	r3, #0
 800afc0:	4682      	mov	sl, r0
 800afc2:	468b      	mov	fp, r1
 800afc4:	f7f5 fd88 	bl	8000ad8 <__aeabi_dcmpeq>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d0c1      	beq.n	800af50 <_strtod_l+0x8b8>
 800afcc:	e619      	b.n	800ac02 <_strtod_l+0x56a>
 800afce:	4641      	mov	r1, r8
 800afd0:	4620      	mov	r0, r4
 800afd2:	f7ff facd 	bl	800a570 <__ratio>
 800afd6:	ec57 6b10 	vmov	r6, r7, d0
 800afda:	2200      	movs	r2, #0
 800afdc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afe0:	4630      	mov	r0, r6
 800afe2:	4639      	mov	r1, r7
 800afe4:	f7f5 fd8c 	bl	8000b00 <__aeabi_dcmple>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d06f      	beq.n	800b0cc <_strtod_l+0xa34>
 800afec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d17a      	bne.n	800b0e8 <_strtod_l+0xa50>
 800aff2:	f1ba 0f00 	cmp.w	sl, #0
 800aff6:	d158      	bne.n	800b0aa <_strtod_l+0xa12>
 800aff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800affa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800affe:	2b00      	cmp	r3, #0
 800b000:	d15a      	bne.n	800b0b8 <_strtod_l+0xa20>
 800b002:	4b64      	ldr	r3, [pc, #400]	@ (800b194 <_strtod_l+0xafc>)
 800b004:	2200      	movs	r2, #0
 800b006:	4630      	mov	r0, r6
 800b008:	4639      	mov	r1, r7
 800b00a:	f7f5 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d159      	bne.n	800b0c6 <_strtod_l+0xa2e>
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	4b60      	ldr	r3, [pc, #384]	@ (800b198 <_strtod_l+0xb00>)
 800b018:	2200      	movs	r2, #0
 800b01a:	f7f5 faf5 	bl	8000608 <__aeabi_dmul>
 800b01e:	4606      	mov	r6, r0
 800b020:	460f      	mov	r7, r1
 800b022:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b026:	9606      	str	r6, [sp, #24]
 800b028:	9307      	str	r3, [sp, #28]
 800b02a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b02e:	4d57      	ldr	r5, [pc, #348]	@ (800b18c <_strtod_l+0xaf4>)
 800b030:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b036:	401d      	ands	r5, r3
 800b038:	4b58      	ldr	r3, [pc, #352]	@ (800b19c <_strtod_l+0xb04>)
 800b03a:	429d      	cmp	r5, r3
 800b03c:	f040 80b2 	bne.w	800b1a4 <_strtod_l+0xb0c>
 800b040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b042:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b046:	ec4b ab10 	vmov	d0, sl, fp
 800b04a:	f7ff f9c9 	bl	800a3e0 <__ulp>
 800b04e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b052:	ec51 0b10 	vmov	r0, r1, d0
 800b056:	f7f5 fad7 	bl	8000608 <__aeabi_dmul>
 800b05a:	4652      	mov	r2, sl
 800b05c:	465b      	mov	r3, fp
 800b05e:	f7f5 f91d 	bl	800029c <__adddf3>
 800b062:	460b      	mov	r3, r1
 800b064:	4949      	ldr	r1, [pc, #292]	@ (800b18c <_strtod_l+0xaf4>)
 800b066:	4a4e      	ldr	r2, [pc, #312]	@ (800b1a0 <_strtod_l+0xb08>)
 800b068:	4019      	ands	r1, r3
 800b06a:	4291      	cmp	r1, r2
 800b06c:	4682      	mov	sl, r0
 800b06e:	d942      	bls.n	800b0f6 <_strtod_l+0xa5e>
 800b070:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b072:	4b47      	ldr	r3, [pc, #284]	@ (800b190 <_strtod_l+0xaf8>)
 800b074:	429a      	cmp	r2, r3
 800b076:	d103      	bne.n	800b080 <_strtod_l+0x9e8>
 800b078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b07a:	3301      	adds	r3, #1
 800b07c:	f43f ad2b 	beq.w	800aad6 <_strtod_l+0x43e>
 800b080:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b190 <_strtod_l+0xaf8>
 800b084:	f04f 3aff 	mov.w	sl, #4294967295
 800b088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b08a:	9805      	ldr	r0, [sp, #20]
 800b08c:	f7fe fe74 	bl	8009d78 <_Bfree>
 800b090:	9805      	ldr	r0, [sp, #20]
 800b092:	4649      	mov	r1, r9
 800b094:	f7fe fe70 	bl	8009d78 <_Bfree>
 800b098:	9805      	ldr	r0, [sp, #20]
 800b09a:	4641      	mov	r1, r8
 800b09c:	f7fe fe6c 	bl	8009d78 <_Bfree>
 800b0a0:	9805      	ldr	r0, [sp, #20]
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f7fe fe68 	bl	8009d78 <_Bfree>
 800b0a8:	e618      	b.n	800acdc <_strtod_l+0x644>
 800b0aa:	f1ba 0f01 	cmp.w	sl, #1
 800b0ae:	d103      	bne.n	800b0b8 <_strtod_l+0xa20>
 800b0b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f43f ada5 	beq.w	800ac02 <_strtod_l+0x56a>
 800b0b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b168 <_strtod_l+0xad0>
 800b0bc:	4f35      	ldr	r7, [pc, #212]	@ (800b194 <_strtod_l+0xafc>)
 800b0be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0c2:	2600      	movs	r6, #0
 800b0c4:	e7b1      	b.n	800b02a <_strtod_l+0x992>
 800b0c6:	4f34      	ldr	r7, [pc, #208]	@ (800b198 <_strtod_l+0xb00>)
 800b0c8:	2600      	movs	r6, #0
 800b0ca:	e7aa      	b.n	800b022 <_strtod_l+0x98a>
 800b0cc:	4b32      	ldr	r3, [pc, #200]	@ (800b198 <_strtod_l+0xb00>)
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	4639      	mov	r1, r7
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f7f5 fa98 	bl	8000608 <__aeabi_dmul>
 800b0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0da:	4606      	mov	r6, r0
 800b0dc:	460f      	mov	r7, r1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d09f      	beq.n	800b022 <_strtod_l+0x98a>
 800b0e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b0e6:	e7a0      	b.n	800b02a <_strtod_l+0x992>
 800b0e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b170 <_strtod_l+0xad8>
 800b0ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0f0:	ec57 6b17 	vmov	r6, r7, d7
 800b0f4:	e799      	b.n	800b02a <_strtod_l+0x992>
 800b0f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0fa:	9b08      	ldr	r3, [sp, #32]
 800b0fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1c1      	bne.n	800b088 <_strtod_l+0x9f0>
 800b104:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b108:	0d1b      	lsrs	r3, r3, #20
 800b10a:	051b      	lsls	r3, r3, #20
 800b10c:	429d      	cmp	r5, r3
 800b10e:	d1bb      	bne.n	800b088 <_strtod_l+0x9f0>
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 fdd8 	bl	8000cc8 <__aeabi_d2lz>
 800b118:	f7f5 fa48 	bl	80005ac <__aeabi_l2d>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	4630      	mov	r0, r6
 800b122:	4639      	mov	r1, r7
 800b124:	f7f5 f8b8 	bl	8000298 <__aeabi_dsub>
 800b128:	460b      	mov	r3, r1
 800b12a:	4602      	mov	r2, r0
 800b12c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b130:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b136:	ea46 060a 	orr.w	r6, r6, sl
 800b13a:	431e      	orrs	r6, r3
 800b13c:	d06f      	beq.n	800b21e <_strtod_l+0xb86>
 800b13e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b178 <_strtod_l+0xae0>)
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	f7f5 fcd2 	bl	8000aec <__aeabi_dcmplt>
 800b148:	2800      	cmp	r0, #0
 800b14a:	f47f accf 	bne.w	800aaec <_strtod_l+0x454>
 800b14e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b180 <_strtod_l+0xae8>)
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b158:	f7f5 fce6 	bl	8000b28 <__aeabi_dcmpgt>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d093      	beq.n	800b088 <_strtod_l+0x9f0>
 800b160:	e4c4      	b.n	800aaec <_strtod_l+0x454>
 800b162:	bf00      	nop
 800b164:	f3af 8000 	nop.w
 800b168:	00000000 	.word	0x00000000
 800b16c:	bff00000 	.word	0xbff00000
 800b170:	00000000 	.word	0x00000000
 800b174:	3ff00000 	.word	0x3ff00000
 800b178:	94a03595 	.word	0x94a03595
 800b17c:	3fdfffff 	.word	0x3fdfffff
 800b180:	35afe535 	.word	0x35afe535
 800b184:	3fe00000 	.word	0x3fe00000
 800b188:	000fffff 	.word	0x000fffff
 800b18c:	7ff00000 	.word	0x7ff00000
 800b190:	7fefffff 	.word	0x7fefffff
 800b194:	3ff00000 	.word	0x3ff00000
 800b198:	3fe00000 	.word	0x3fe00000
 800b19c:	7fe00000 	.word	0x7fe00000
 800b1a0:	7c9fffff 	.word	0x7c9fffff
 800b1a4:	9b08      	ldr	r3, [sp, #32]
 800b1a6:	b323      	cbz	r3, 800b1f2 <_strtod_l+0xb5a>
 800b1a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b1ac:	d821      	bhi.n	800b1f2 <_strtod_l+0xb5a>
 800b1ae:	a328      	add	r3, pc, #160	@ (adr r3, 800b250 <_strtod_l+0xbb8>)
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 fca2 	bl	8000b00 <__aeabi_dcmple>
 800b1bc:	b1a0      	cbz	r0, 800b1e8 <_strtod_l+0xb50>
 800b1be:	4639      	mov	r1, r7
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7f5 fcf9 	bl	8000bb8 <__aeabi_d2uiz>
 800b1c6:	2801      	cmp	r0, #1
 800b1c8:	bf38      	it	cc
 800b1ca:	2001      	movcc	r0, #1
 800b1cc:	f7f5 f9a2 	bl	8000514 <__aeabi_ui2d>
 800b1d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	b9fb      	cbnz	r3, 800b218 <_strtod_l+0xb80>
 800b1d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b1de:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b1e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b1ee:	1b5b      	subs	r3, r3, r5
 800b1f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b1fa:	f7ff f8f1 	bl	800a3e0 <__ulp>
 800b1fe:	4650      	mov	r0, sl
 800b200:	ec53 2b10 	vmov	r2, r3, d0
 800b204:	4659      	mov	r1, fp
 800b206:	f7f5 f9ff 	bl	8000608 <__aeabi_dmul>
 800b20a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b20e:	f7f5 f845 	bl	800029c <__adddf3>
 800b212:	4682      	mov	sl, r0
 800b214:	468b      	mov	fp, r1
 800b216:	e770      	b.n	800b0fa <_strtod_l+0xa62>
 800b218:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b21c:	e7e0      	b.n	800b1e0 <_strtod_l+0xb48>
 800b21e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b258 <_strtod_l+0xbc0>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 fc62 	bl	8000aec <__aeabi_dcmplt>
 800b228:	e798      	b.n	800b15c <_strtod_l+0xac4>
 800b22a:	2300      	movs	r3, #0
 800b22c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b22e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	f7ff ba6d 	b.w	800a712 <_strtod_l+0x7a>
 800b238:	2a65      	cmp	r2, #101	@ 0x65
 800b23a:	f43f ab66 	beq.w	800a90a <_strtod_l+0x272>
 800b23e:	2a45      	cmp	r2, #69	@ 0x45
 800b240:	f43f ab63 	beq.w	800a90a <_strtod_l+0x272>
 800b244:	2301      	movs	r3, #1
 800b246:	f7ff bb9e 	b.w	800a986 <_strtod_l+0x2ee>
 800b24a:	bf00      	nop
 800b24c:	f3af 8000 	nop.w
 800b250:	ffc00000 	.word	0xffc00000
 800b254:	41dfffff 	.word	0x41dfffff
 800b258:	94a03595 	.word	0x94a03595
 800b25c:	3fcfffff 	.word	0x3fcfffff

0800b260 <_strtod_r>:
 800b260:	4b01      	ldr	r3, [pc, #4]	@ (800b268 <_strtod_r+0x8>)
 800b262:	f7ff ba19 	b.w	800a698 <_strtod_l>
 800b266:	bf00      	nop
 800b268:	2000007c 	.word	0x2000007c

0800b26c <_strtol_l.constprop.0>:
 800b26c:	2b24      	cmp	r3, #36	@ 0x24
 800b26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b272:	4686      	mov	lr, r0
 800b274:	4690      	mov	r8, r2
 800b276:	d801      	bhi.n	800b27c <_strtol_l.constprop.0+0x10>
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d106      	bne.n	800b28a <_strtol_l.constprop.0+0x1e>
 800b27c:	f7fd fdac 	bl	8008dd8 <__errno>
 800b280:	2316      	movs	r3, #22
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	2000      	movs	r0, #0
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	4834      	ldr	r0, [pc, #208]	@ (800b35c <_strtol_l.constprop.0+0xf0>)
 800b28c:	460d      	mov	r5, r1
 800b28e:	462a      	mov	r2, r5
 800b290:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b294:	5d06      	ldrb	r6, [r0, r4]
 800b296:	f016 0608 	ands.w	r6, r6, #8
 800b29a:	d1f8      	bne.n	800b28e <_strtol_l.constprop.0+0x22>
 800b29c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b29e:	d12d      	bne.n	800b2fc <_strtol_l.constprop.0+0x90>
 800b2a0:	782c      	ldrb	r4, [r5, #0]
 800b2a2:	2601      	movs	r6, #1
 800b2a4:	1c95      	adds	r5, r2, #2
 800b2a6:	f033 0210 	bics.w	r2, r3, #16
 800b2aa:	d109      	bne.n	800b2c0 <_strtol_l.constprop.0+0x54>
 800b2ac:	2c30      	cmp	r4, #48	@ 0x30
 800b2ae:	d12a      	bne.n	800b306 <_strtol_l.constprop.0+0x9a>
 800b2b0:	782a      	ldrb	r2, [r5, #0]
 800b2b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2b6:	2a58      	cmp	r2, #88	@ 0x58
 800b2b8:	d125      	bne.n	800b306 <_strtol_l.constprop.0+0x9a>
 800b2ba:	786c      	ldrb	r4, [r5, #1]
 800b2bc:	2310      	movs	r3, #16
 800b2be:	3502      	adds	r5, #2
 800b2c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	fbbc f9f3 	udiv	r9, ip, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2d8:	2f09      	cmp	r7, #9
 800b2da:	d81b      	bhi.n	800b314 <_strtol_l.constprop.0+0xa8>
 800b2dc:	463c      	mov	r4, r7
 800b2de:	42a3      	cmp	r3, r4
 800b2e0:	dd27      	ble.n	800b332 <_strtol_l.constprop.0+0xc6>
 800b2e2:	1c57      	adds	r7, r2, #1
 800b2e4:	d007      	beq.n	800b2f6 <_strtol_l.constprop.0+0x8a>
 800b2e6:	4581      	cmp	r9, r0
 800b2e8:	d320      	bcc.n	800b32c <_strtol_l.constprop.0+0xc0>
 800b2ea:	d101      	bne.n	800b2f0 <_strtol_l.constprop.0+0x84>
 800b2ec:	45a2      	cmp	sl, r4
 800b2ee:	db1d      	blt.n	800b32c <_strtol_l.constprop.0+0xc0>
 800b2f0:	fb00 4003 	mla	r0, r0, r3, r4
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2fa:	e7eb      	b.n	800b2d4 <_strtol_l.constprop.0+0x68>
 800b2fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2fe:	bf04      	itt	eq
 800b300:	782c      	ldrbeq	r4, [r5, #0]
 800b302:	1c95      	addeq	r5, r2, #2
 800b304:	e7cf      	b.n	800b2a6 <_strtol_l.constprop.0+0x3a>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1da      	bne.n	800b2c0 <_strtol_l.constprop.0+0x54>
 800b30a:	2c30      	cmp	r4, #48	@ 0x30
 800b30c:	bf0c      	ite	eq
 800b30e:	2308      	moveq	r3, #8
 800b310:	230a      	movne	r3, #10
 800b312:	e7d5      	b.n	800b2c0 <_strtol_l.constprop.0+0x54>
 800b314:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b318:	2f19      	cmp	r7, #25
 800b31a:	d801      	bhi.n	800b320 <_strtol_l.constprop.0+0xb4>
 800b31c:	3c37      	subs	r4, #55	@ 0x37
 800b31e:	e7de      	b.n	800b2de <_strtol_l.constprop.0+0x72>
 800b320:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b324:	2f19      	cmp	r7, #25
 800b326:	d804      	bhi.n	800b332 <_strtol_l.constprop.0+0xc6>
 800b328:	3c57      	subs	r4, #87	@ 0x57
 800b32a:	e7d8      	b.n	800b2de <_strtol_l.constprop.0+0x72>
 800b32c:	f04f 32ff 	mov.w	r2, #4294967295
 800b330:	e7e1      	b.n	800b2f6 <_strtol_l.constprop.0+0x8a>
 800b332:	1c53      	adds	r3, r2, #1
 800b334:	d108      	bne.n	800b348 <_strtol_l.constprop.0+0xdc>
 800b336:	2322      	movs	r3, #34	@ 0x22
 800b338:	f8ce 3000 	str.w	r3, [lr]
 800b33c:	4660      	mov	r0, ip
 800b33e:	f1b8 0f00 	cmp.w	r8, #0
 800b342:	d0a0      	beq.n	800b286 <_strtol_l.constprop.0+0x1a>
 800b344:	1e69      	subs	r1, r5, #1
 800b346:	e006      	b.n	800b356 <_strtol_l.constprop.0+0xea>
 800b348:	b106      	cbz	r6, 800b34c <_strtol_l.constprop.0+0xe0>
 800b34a:	4240      	negs	r0, r0
 800b34c:	f1b8 0f00 	cmp.w	r8, #0
 800b350:	d099      	beq.n	800b286 <_strtol_l.constprop.0+0x1a>
 800b352:	2a00      	cmp	r2, #0
 800b354:	d1f6      	bne.n	800b344 <_strtol_l.constprop.0+0xd8>
 800b356:	f8c8 1000 	str.w	r1, [r8]
 800b35a:	e794      	b.n	800b286 <_strtol_l.constprop.0+0x1a>
 800b35c:	0800c981 	.word	0x0800c981

0800b360 <_strtol_r>:
 800b360:	f7ff bf84 	b.w	800b26c <_strtol_l.constprop.0>

0800b364 <__ssputs_r>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	688e      	ldr	r6, [r1, #8]
 800b36a:	461f      	mov	r7, r3
 800b36c:	42be      	cmp	r6, r7
 800b36e:	680b      	ldr	r3, [r1, #0]
 800b370:	4682      	mov	sl, r0
 800b372:	460c      	mov	r4, r1
 800b374:	4690      	mov	r8, r2
 800b376:	d82d      	bhi.n	800b3d4 <__ssputs_r+0x70>
 800b378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b37c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b380:	d026      	beq.n	800b3d0 <__ssputs_r+0x6c>
 800b382:	6965      	ldr	r5, [r4, #20]
 800b384:	6909      	ldr	r1, [r1, #16]
 800b386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b38a:	eba3 0901 	sub.w	r9, r3, r1
 800b38e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b392:	1c7b      	adds	r3, r7, #1
 800b394:	444b      	add	r3, r9
 800b396:	106d      	asrs	r5, r5, #1
 800b398:	429d      	cmp	r5, r3
 800b39a:	bf38      	it	cc
 800b39c:	461d      	movcc	r5, r3
 800b39e:	0553      	lsls	r3, r2, #21
 800b3a0:	d527      	bpl.n	800b3f2 <__ssputs_r+0x8e>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7fe fc1c 	bl	8009be0 <_malloc_r>
 800b3a8:	4606      	mov	r6, r0
 800b3aa:	b360      	cbz	r0, 800b406 <__ssputs_r+0xa2>
 800b3ac:	6921      	ldr	r1, [r4, #16]
 800b3ae:	464a      	mov	r2, r9
 800b3b0:	f7fd fd3f 	bl	8008e32 <memcpy>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	6126      	str	r6, [r4, #16]
 800b3c2:	6165      	str	r5, [r4, #20]
 800b3c4:	444e      	add	r6, r9
 800b3c6:	eba5 0509 	sub.w	r5, r5, r9
 800b3ca:	6026      	str	r6, [r4, #0]
 800b3cc:	60a5      	str	r5, [r4, #8]
 800b3ce:	463e      	mov	r6, r7
 800b3d0:	42be      	cmp	r6, r7
 800b3d2:	d900      	bls.n	800b3d6 <__ssputs_r+0x72>
 800b3d4:	463e      	mov	r6, r7
 800b3d6:	6820      	ldr	r0, [r4, #0]
 800b3d8:	4632      	mov	r2, r6
 800b3da:	4641      	mov	r1, r8
 800b3dc:	f000 f9c6 	bl	800b76c <memmove>
 800b3e0:	68a3      	ldr	r3, [r4, #8]
 800b3e2:	1b9b      	subs	r3, r3, r6
 800b3e4:	60a3      	str	r3, [r4, #8]
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	4433      	add	r3, r6
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f2:	462a      	mov	r2, r5
 800b3f4:	f000 fd7d 	bl	800bef2 <_realloc_r>
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d1e0      	bne.n	800b3c0 <__ssputs_r+0x5c>
 800b3fe:	6921      	ldr	r1, [r4, #16]
 800b400:	4650      	mov	r0, sl
 800b402:	f7fe fb79 	bl	8009af8 <_free_r>
 800b406:	230c      	movs	r3, #12
 800b408:	f8ca 3000 	str.w	r3, [sl]
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	f04f 30ff 	mov.w	r0, #4294967295
 800b418:	e7e9      	b.n	800b3ee <__ssputs_r+0x8a>
	...

0800b41c <_svfiprintf_r>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	4698      	mov	r8, r3
 800b422:	898b      	ldrh	r3, [r1, #12]
 800b424:	061b      	lsls	r3, r3, #24
 800b426:	b09d      	sub	sp, #116	@ 0x74
 800b428:	4607      	mov	r7, r0
 800b42a:	460d      	mov	r5, r1
 800b42c:	4614      	mov	r4, r2
 800b42e:	d510      	bpl.n	800b452 <_svfiprintf_r+0x36>
 800b430:	690b      	ldr	r3, [r1, #16]
 800b432:	b973      	cbnz	r3, 800b452 <_svfiprintf_r+0x36>
 800b434:	2140      	movs	r1, #64	@ 0x40
 800b436:	f7fe fbd3 	bl	8009be0 <_malloc_r>
 800b43a:	6028      	str	r0, [r5, #0]
 800b43c:	6128      	str	r0, [r5, #16]
 800b43e:	b930      	cbnz	r0, 800b44e <_svfiprintf_r+0x32>
 800b440:	230c      	movs	r3, #12
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	f04f 30ff 	mov.w	r0, #4294967295
 800b448:	b01d      	add	sp, #116	@ 0x74
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	2340      	movs	r3, #64	@ 0x40
 800b450:	616b      	str	r3, [r5, #20]
 800b452:	2300      	movs	r3, #0
 800b454:	9309      	str	r3, [sp, #36]	@ 0x24
 800b456:	2320      	movs	r3, #32
 800b458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b460:	2330      	movs	r3, #48	@ 0x30
 800b462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b600 <_svfiprintf_r+0x1e4>
 800b466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b46a:	f04f 0901 	mov.w	r9, #1
 800b46e:	4623      	mov	r3, r4
 800b470:	469a      	mov	sl, r3
 800b472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b476:	b10a      	cbz	r2, 800b47c <_svfiprintf_r+0x60>
 800b478:	2a25      	cmp	r2, #37	@ 0x25
 800b47a:	d1f9      	bne.n	800b470 <_svfiprintf_r+0x54>
 800b47c:	ebba 0b04 	subs.w	fp, sl, r4
 800b480:	d00b      	beq.n	800b49a <_svfiprintf_r+0x7e>
 800b482:	465b      	mov	r3, fp
 800b484:	4622      	mov	r2, r4
 800b486:	4629      	mov	r1, r5
 800b488:	4638      	mov	r0, r7
 800b48a:	f7ff ff6b 	bl	800b364 <__ssputs_r>
 800b48e:	3001      	adds	r0, #1
 800b490:	f000 80a7 	beq.w	800b5e2 <_svfiprintf_r+0x1c6>
 800b494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b496:	445a      	add	r2, fp
 800b498:	9209      	str	r2, [sp, #36]	@ 0x24
 800b49a:	f89a 3000 	ldrb.w	r3, [sl]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 809f 	beq.w	800b5e2 <_svfiprintf_r+0x1c6>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ae:	f10a 0a01 	add.w	sl, sl, #1
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	9307      	str	r3, [sp, #28]
 800b4b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4bc:	4654      	mov	r4, sl
 800b4be:	2205      	movs	r2, #5
 800b4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c4:	484e      	ldr	r0, [pc, #312]	@ (800b600 <_svfiprintf_r+0x1e4>)
 800b4c6:	f7f4 fe8b 	bl	80001e0 <memchr>
 800b4ca:	9a04      	ldr	r2, [sp, #16]
 800b4cc:	b9d8      	cbnz	r0, 800b506 <_svfiprintf_r+0xea>
 800b4ce:	06d0      	lsls	r0, r2, #27
 800b4d0:	bf44      	itt	mi
 800b4d2:	2320      	movmi	r3, #32
 800b4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d8:	0711      	lsls	r1, r2, #28
 800b4da:	bf44      	itt	mi
 800b4dc:	232b      	movmi	r3, #43	@ 0x2b
 800b4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e8:	d015      	beq.n	800b516 <_svfiprintf_r+0xfa>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4654      	mov	r4, sl
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f04f 0c0a 	mov.w	ip, #10
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4fa:	3b30      	subs	r3, #48	@ 0x30
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	d94b      	bls.n	800b598 <_svfiprintf_r+0x17c>
 800b500:	b1b0      	cbz	r0, 800b530 <_svfiprintf_r+0x114>
 800b502:	9207      	str	r2, [sp, #28]
 800b504:	e014      	b.n	800b530 <_svfiprintf_r+0x114>
 800b506:	eba0 0308 	sub.w	r3, r0, r8
 800b50a:	fa09 f303 	lsl.w	r3, r9, r3
 800b50e:	4313      	orrs	r3, r2
 800b510:	9304      	str	r3, [sp, #16]
 800b512:	46a2      	mov	sl, r4
 800b514:	e7d2      	b.n	800b4bc <_svfiprintf_r+0xa0>
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	1d19      	adds	r1, r3, #4
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	9103      	str	r1, [sp, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bfbb      	ittet	lt
 800b522:	425b      	neglt	r3, r3
 800b524:	f042 0202 	orrlt.w	r2, r2, #2
 800b528:	9307      	strge	r3, [sp, #28]
 800b52a:	9307      	strlt	r3, [sp, #28]
 800b52c:	bfb8      	it	lt
 800b52e:	9204      	strlt	r2, [sp, #16]
 800b530:	7823      	ldrb	r3, [r4, #0]
 800b532:	2b2e      	cmp	r3, #46	@ 0x2e
 800b534:	d10a      	bne.n	800b54c <_svfiprintf_r+0x130>
 800b536:	7863      	ldrb	r3, [r4, #1]
 800b538:	2b2a      	cmp	r3, #42	@ 0x2a
 800b53a:	d132      	bne.n	800b5a2 <_svfiprintf_r+0x186>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1d1a      	adds	r2, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9203      	str	r2, [sp, #12]
 800b544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b548:	3402      	adds	r4, #2
 800b54a:	9305      	str	r3, [sp, #20]
 800b54c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b610 <_svfiprintf_r+0x1f4>
 800b550:	7821      	ldrb	r1, [r4, #0]
 800b552:	2203      	movs	r2, #3
 800b554:	4650      	mov	r0, sl
 800b556:	f7f4 fe43 	bl	80001e0 <memchr>
 800b55a:	b138      	cbz	r0, 800b56c <_svfiprintf_r+0x150>
 800b55c:	9b04      	ldr	r3, [sp, #16]
 800b55e:	eba0 000a 	sub.w	r0, r0, sl
 800b562:	2240      	movs	r2, #64	@ 0x40
 800b564:	4082      	lsls	r2, r0
 800b566:	4313      	orrs	r3, r2
 800b568:	3401      	adds	r4, #1
 800b56a:	9304      	str	r3, [sp, #16]
 800b56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b570:	4824      	ldr	r0, [pc, #144]	@ (800b604 <_svfiprintf_r+0x1e8>)
 800b572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b576:	2206      	movs	r2, #6
 800b578:	f7f4 fe32 	bl	80001e0 <memchr>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d036      	beq.n	800b5ee <_svfiprintf_r+0x1d2>
 800b580:	4b21      	ldr	r3, [pc, #132]	@ (800b608 <_svfiprintf_r+0x1ec>)
 800b582:	bb1b      	cbnz	r3, 800b5cc <_svfiprintf_r+0x1b0>
 800b584:	9b03      	ldr	r3, [sp, #12]
 800b586:	3307      	adds	r3, #7
 800b588:	f023 0307 	bic.w	r3, r3, #7
 800b58c:	3308      	adds	r3, #8
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b592:	4433      	add	r3, r6
 800b594:	9309      	str	r3, [sp, #36]	@ 0x24
 800b596:	e76a      	b.n	800b46e <_svfiprintf_r+0x52>
 800b598:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59c:	460c      	mov	r4, r1
 800b59e:	2001      	movs	r0, #1
 800b5a0:	e7a8      	b.n	800b4f4 <_svfiprintf_r+0xd8>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	3401      	adds	r4, #1
 800b5a6:	9305      	str	r3, [sp, #20]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	f04f 0c0a 	mov.w	ip, #10
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b4:	3a30      	subs	r2, #48	@ 0x30
 800b5b6:	2a09      	cmp	r2, #9
 800b5b8:	d903      	bls.n	800b5c2 <_svfiprintf_r+0x1a6>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c6      	beq.n	800b54c <_svfiprintf_r+0x130>
 800b5be:	9105      	str	r1, [sp, #20]
 800b5c0:	e7c4      	b.n	800b54c <_svfiprintf_r+0x130>
 800b5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e7f0      	b.n	800b5ae <_svfiprintf_r+0x192>
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	462a      	mov	r2, r5
 800b5d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b60c <_svfiprintf_r+0x1f0>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f7fc fc86 	bl	8007ee8 <_printf_float>
 800b5dc:	1c42      	adds	r2, r0, #1
 800b5de:	4606      	mov	r6, r0
 800b5e0:	d1d6      	bne.n	800b590 <_svfiprintf_r+0x174>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	065b      	lsls	r3, r3, #25
 800b5e6:	f53f af2d 	bmi.w	800b444 <_svfiprintf_r+0x28>
 800b5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5ec:	e72c      	b.n	800b448 <_svfiprintf_r+0x2c>
 800b5ee:	ab03      	add	r3, sp, #12
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <_svfiprintf_r+0x1f0>)
 800b5f6:	a904      	add	r1, sp, #16
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	f7fc ff0d 	bl	8008418 <_printf_i>
 800b5fe:	e7ed      	b.n	800b5dc <_svfiprintf_r+0x1c0>
 800b600:	0800ca81 	.word	0x0800ca81
 800b604:	0800ca8b 	.word	0x0800ca8b
 800b608:	08007ee9 	.word	0x08007ee9
 800b60c:	0800b365 	.word	0x0800b365
 800b610:	0800ca87 	.word	0x0800ca87

0800b614 <__sflush_r>:
 800b614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61c:	0716      	lsls	r6, r2, #28
 800b61e:	4605      	mov	r5, r0
 800b620:	460c      	mov	r4, r1
 800b622:	d454      	bmi.n	800b6ce <__sflush_r+0xba>
 800b624:	684b      	ldr	r3, [r1, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	dc02      	bgt.n	800b630 <__sflush_r+0x1c>
 800b62a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	dd48      	ble.n	800b6c2 <__sflush_r+0xae>
 800b630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b632:	2e00      	cmp	r6, #0
 800b634:	d045      	beq.n	800b6c2 <__sflush_r+0xae>
 800b636:	2300      	movs	r3, #0
 800b638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b63c:	682f      	ldr	r7, [r5, #0]
 800b63e:	6a21      	ldr	r1, [r4, #32]
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	d030      	beq.n	800b6a6 <__sflush_r+0x92>
 800b644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	0759      	lsls	r1, r3, #29
 800b64a:	d505      	bpl.n	800b658 <__sflush_r+0x44>
 800b64c:	6863      	ldr	r3, [r4, #4]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b652:	b10b      	cbz	r3, 800b658 <__sflush_r+0x44>
 800b654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b656:	1ad2      	subs	r2, r2, r3
 800b658:	2300      	movs	r3, #0
 800b65a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b65c:	6a21      	ldr	r1, [r4, #32]
 800b65e:	4628      	mov	r0, r5
 800b660:	47b0      	blx	r6
 800b662:	1c43      	adds	r3, r0, #1
 800b664:	89a3      	ldrh	r3, [r4, #12]
 800b666:	d106      	bne.n	800b676 <__sflush_r+0x62>
 800b668:	6829      	ldr	r1, [r5, #0]
 800b66a:	291d      	cmp	r1, #29
 800b66c:	d82b      	bhi.n	800b6c6 <__sflush_r+0xb2>
 800b66e:	4a2a      	ldr	r2, [pc, #168]	@ (800b718 <__sflush_r+0x104>)
 800b670:	410a      	asrs	r2, r1
 800b672:	07d6      	lsls	r6, r2, #31
 800b674:	d427      	bmi.n	800b6c6 <__sflush_r+0xb2>
 800b676:	2200      	movs	r2, #0
 800b678:	6062      	str	r2, [r4, #4]
 800b67a:	04d9      	lsls	r1, r3, #19
 800b67c:	6922      	ldr	r2, [r4, #16]
 800b67e:	6022      	str	r2, [r4, #0]
 800b680:	d504      	bpl.n	800b68c <__sflush_r+0x78>
 800b682:	1c42      	adds	r2, r0, #1
 800b684:	d101      	bne.n	800b68a <__sflush_r+0x76>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b903      	cbnz	r3, 800b68c <__sflush_r+0x78>
 800b68a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b68c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b68e:	602f      	str	r7, [r5, #0]
 800b690:	b1b9      	cbz	r1, 800b6c2 <__sflush_r+0xae>
 800b692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b696:	4299      	cmp	r1, r3
 800b698:	d002      	beq.n	800b6a0 <__sflush_r+0x8c>
 800b69a:	4628      	mov	r0, r5
 800b69c:	f7fe fa2c 	bl	8009af8 <_free_r>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6a4:	e00d      	b.n	800b6c2 <__sflush_r+0xae>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	47b0      	blx	r6
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	1c50      	adds	r0, r2, #1
 800b6b0:	d1c9      	bne.n	800b646 <__sflush_r+0x32>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0c6      	beq.n	800b646 <__sflush_r+0x32>
 800b6b8:	2b1d      	cmp	r3, #29
 800b6ba:	d001      	beq.n	800b6c0 <__sflush_r+0xac>
 800b6bc:	2b16      	cmp	r3, #22
 800b6be:	d11e      	bne.n	800b6fe <__sflush_r+0xea>
 800b6c0:	602f      	str	r7, [r5, #0]
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e022      	b.n	800b70c <__sflush_r+0xf8>
 800b6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ca:	b21b      	sxth	r3, r3
 800b6cc:	e01b      	b.n	800b706 <__sflush_r+0xf2>
 800b6ce:	690f      	ldr	r7, [r1, #16]
 800b6d0:	2f00      	cmp	r7, #0
 800b6d2:	d0f6      	beq.n	800b6c2 <__sflush_r+0xae>
 800b6d4:	0793      	lsls	r3, r2, #30
 800b6d6:	680e      	ldr	r6, [r1, #0]
 800b6d8:	bf08      	it	eq
 800b6da:	694b      	ldreq	r3, [r1, #20]
 800b6dc:	600f      	str	r7, [r1, #0]
 800b6de:	bf18      	it	ne
 800b6e0:	2300      	movne	r3, #0
 800b6e2:	eba6 0807 	sub.w	r8, r6, r7
 800b6e6:	608b      	str	r3, [r1, #8]
 800b6e8:	f1b8 0f00 	cmp.w	r8, #0
 800b6ec:	dde9      	ble.n	800b6c2 <__sflush_r+0xae>
 800b6ee:	6a21      	ldr	r1, [r4, #32]
 800b6f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6f2:	4643      	mov	r3, r8
 800b6f4:	463a      	mov	r2, r7
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	47b0      	blx	r6
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	dc08      	bgt.n	800b710 <__sflush_r+0xfc>
 800b6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	f04f 30ff 	mov.w	r0, #4294967295
 800b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b710:	4407      	add	r7, r0
 800b712:	eba8 0800 	sub.w	r8, r8, r0
 800b716:	e7e7      	b.n	800b6e8 <__sflush_r+0xd4>
 800b718:	dfbffffe 	.word	0xdfbffffe

0800b71c <_fflush_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	690b      	ldr	r3, [r1, #16]
 800b720:	4605      	mov	r5, r0
 800b722:	460c      	mov	r4, r1
 800b724:	b913      	cbnz	r3, 800b72c <_fflush_r+0x10>
 800b726:	2500      	movs	r5, #0
 800b728:	4628      	mov	r0, r5
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	b118      	cbz	r0, 800b736 <_fflush_r+0x1a>
 800b72e:	6a03      	ldr	r3, [r0, #32]
 800b730:	b90b      	cbnz	r3, 800b736 <_fflush_r+0x1a>
 800b732:	f7fd fa31 	bl	8008b98 <__sinit>
 800b736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0f3      	beq.n	800b726 <_fflush_r+0xa>
 800b73e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b740:	07d0      	lsls	r0, r2, #31
 800b742:	d404      	bmi.n	800b74e <_fflush_r+0x32>
 800b744:	0599      	lsls	r1, r3, #22
 800b746:	d402      	bmi.n	800b74e <_fflush_r+0x32>
 800b748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b74a:	f7fd fb70 	bl	8008e2e <__retarget_lock_acquire_recursive>
 800b74e:	4628      	mov	r0, r5
 800b750:	4621      	mov	r1, r4
 800b752:	f7ff ff5f 	bl	800b614 <__sflush_r>
 800b756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b758:	07da      	lsls	r2, r3, #31
 800b75a:	4605      	mov	r5, r0
 800b75c:	d4e4      	bmi.n	800b728 <_fflush_r+0xc>
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	059b      	lsls	r3, r3, #22
 800b762:	d4e1      	bmi.n	800b728 <_fflush_r+0xc>
 800b764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b766:	f7fd fb63 	bl	8008e30 <__retarget_lock_release_recursive>
 800b76a:	e7dd      	b.n	800b728 <_fflush_r+0xc>

0800b76c <memmove>:
 800b76c:	4288      	cmp	r0, r1
 800b76e:	b510      	push	{r4, lr}
 800b770:	eb01 0402 	add.w	r4, r1, r2
 800b774:	d902      	bls.n	800b77c <memmove+0x10>
 800b776:	4284      	cmp	r4, r0
 800b778:	4623      	mov	r3, r4
 800b77a:	d807      	bhi.n	800b78c <memmove+0x20>
 800b77c:	1e43      	subs	r3, r0, #1
 800b77e:	42a1      	cmp	r1, r4
 800b780:	d008      	beq.n	800b794 <memmove+0x28>
 800b782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b78a:	e7f8      	b.n	800b77e <memmove+0x12>
 800b78c:	4402      	add	r2, r0
 800b78e:	4601      	mov	r1, r0
 800b790:	428a      	cmp	r2, r1
 800b792:	d100      	bne.n	800b796 <memmove+0x2a>
 800b794:	bd10      	pop	{r4, pc}
 800b796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b79e:	e7f7      	b.n	800b790 <memmove+0x24>

0800b7a0 <strncmp>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	b16a      	cbz	r2, 800b7c0 <strncmp+0x20>
 800b7a4:	3901      	subs	r1, #1
 800b7a6:	1884      	adds	r4, r0, r2
 800b7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d103      	bne.n	800b7bc <strncmp+0x1c>
 800b7b4:	42a0      	cmp	r0, r4
 800b7b6:	d001      	beq.n	800b7bc <strncmp+0x1c>
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	d1f5      	bne.n	800b7a8 <strncmp+0x8>
 800b7bc:	1ad0      	subs	r0, r2, r3
 800b7be:	bd10      	pop	{r4, pc}
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	e7fc      	b.n	800b7be <strncmp+0x1e>

0800b7c4 <_sbrk_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d06      	ldr	r5, [pc, #24]	@ (800b7e0 <_sbrk_r+0x1c>)
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	4608      	mov	r0, r1
 800b7ce:	602b      	str	r3, [r5, #0]
 800b7d0:	f7f6 fd10 	bl	80021f4 <_sbrk>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d102      	bne.n	800b7de <_sbrk_r+0x1a>
 800b7d8:	682b      	ldr	r3, [r5, #0]
 800b7da:	b103      	cbz	r3, 800b7de <_sbrk_r+0x1a>
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	20004e78 	.word	0x20004e78
 800b7e4:	00000000 	.word	0x00000000

0800b7e8 <nan>:
 800b7e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b7f0 <nan+0x8>
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	00000000 	.word	0x00000000
 800b7f4:	7ff80000 	.word	0x7ff80000

0800b7f8 <__assert_func>:
 800b7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7fa:	4614      	mov	r4, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <__assert_func+0x2c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4605      	mov	r5, r0
 800b804:	68d8      	ldr	r0, [r3, #12]
 800b806:	b954      	cbnz	r4, 800b81e <__assert_func+0x26>
 800b808:	4b07      	ldr	r3, [pc, #28]	@ (800b828 <__assert_func+0x30>)
 800b80a:	461c      	mov	r4, r3
 800b80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b810:	9100      	str	r1, [sp, #0]
 800b812:	462b      	mov	r3, r5
 800b814:	4905      	ldr	r1, [pc, #20]	@ (800b82c <__assert_func+0x34>)
 800b816:	f000 fba7 	bl	800bf68 <fiprintf>
 800b81a:	f000 fbb7 	bl	800bf8c <abort>
 800b81e:	4b04      	ldr	r3, [pc, #16]	@ (800b830 <__assert_func+0x38>)
 800b820:	e7f4      	b.n	800b80c <__assert_func+0x14>
 800b822:	bf00      	nop
 800b824:	2000002c 	.word	0x2000002c
 800b828:	0800cad5 	.word	0x0800cad5
 800b82c:	0800caa7 	.word	0x0800caa7
 800b830:	0800ca9a 	.word	0x0800ca9a

0800b834 <_calloc_r>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	fba1 5402 	umull	r5, r4, r1, r2
 800b83a:	b93c      	cbnz	r4, 800b84c <_calloc_r+0x18>
 800b83c:	4629      	mov	r1, r5
 800b83e:	f7fe f9cf 	bl	8009be0 <_malloc_r>
 800b842:	4606      	mov	r6, r0
 800b844:	b928      	cbnz	r0, 800b852 <_calloc_r+0x1e>
 800b846:	2600      	movs	r6, #0
 800b848:	4630      	mov	r0, r6
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	220c      	movs	r2, #12
 800b84e:	6002      	str	r2, [r0, #0]
 800b850:	e7f9      	b.n	800b846 <_calloc_r+0x12>
 800b852:	462a      	mov	r2, r5
 800b854:	4621      	mov	r1, r4
 800b856:	f7fd fa6c 	bl	8008d32 <memset>
 800b85a:	e7f5      	b.n	800b848 <_calloc_r+0x14>

0800b85c <rshift>:
 800b85c:	6903      	ldr	r3, [r0, #16]
 800b85e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b866:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b86a:	f100 0414 	add.w	r4, r0, #20
 800b86e:	dd45      	ble.n	800b8fc <rshift+0xa0>
 800b870:	f011 011f 	ands.w	r1, r1, #31
 800b874:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b878:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b87c:	d10c      	bne.n	800b898 <rshift+0x3c>
 800b87e:	f100 0710 	add.w	r7, r0, #16
 800b882:	4629      	mov	r1, r5
 800b884:	42b1      	cmp	r1, r6
 800b886:	d334      	bcc.n	800b8f2 <rshift+0x96>
 800b888:	1a9b      	subs	r3, r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	1eea      	subs	r2, r5, #3
 800b88e:	4296      	cmp	r6, r2
 800b890:	bf38      	it	cc
 800b892:	2300      	movcc	r3, #0
 800b894:	4423      	add	r3, r4
 800b896:	e015      	b.n	800b8c4 <rshift+0x68>
 800b898:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b89c:	f1c1 0820 	rsb	r8, r1, #32
 800b8a0:	40cf      	lsrs	r7, r1
 800b8a2:	f105 0e04 	add.w	lr, r5, #4
 800b8a6:	46a1      	mov	r9, r4
 800b8a8:	4576      	cmp	r6, lr
 800b8aa:	46f4      	mov	ip, lr
 800b8ac:	d815      	bhi.n	800b8da <rshift+0x7e>
 800b8ae:	1a9a      	subs	r2, r3, r2
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	3a04      	subs	r2, #4
 800b8b4:	3501      	adds	r5, #1
 800b8b6:	42ae      	cmp	r6, r5
 800b8b8:	bf38      	it	cc
 800b8ba:	2200      	movcc	r2, #0
 800b8bc:	18a3      	adds	r3, r4, r2
 800b8be:	50a7      	str	r7, [r4, r2]
 800b8c0:	b107      	cbz	r7, 800b8c4 <rshift+0x68>
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	1b1a      	subs	r2, r3, r4
 800b8c6:	42a3      	cmp	r3, r4
 800b8c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8cc:	bf08      	it	eq
 800b8ce:	2300      	moveq	r3, #0
 800b8d0:	6102      	str	r2, [r0, #16]
 800b8d2:	bf08      	it	eq
 800b8d4:	6143      	streq	r3, [r0, #20]
 800b8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8da:	f8dc c000 	ldr.w	ip, [ip]
 800b8de:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8e2:	ea4c 0707 	orr.w	r7, ip, r7
 800b8e6:	f849 7b04 	str.w	r7, [r9], #4
 800b8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8ee:	40cf      	lsrs	r7, r1
 800b8f0:	e7da      	b.n	800b8a8 <rshift+0x4c>
 800b8f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b8f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b8fa:	e7c3      	b.n	800b884 <rshift+0x28>
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	e7e1      	b.n	800b8c4 <rshift+0x68>

0800b900 <__hexdig_fun>:
 800b900:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b904:	2b09      	cmp	r3, #9
 800b906:	d802      	bhi.n	800b90e <__hexdig_fun+0xe>
 800b908:	3820      	subs	r0, #32
 800b90a:	b2c0      	uxtb	r0, r0
 800b90c:	4770      	bx	lr
 800b90e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b912:	2b05      	cmp	r3, #5
 800b914:	d801      	bhi.n	800b91a <__hexdig_fun+0x1a>
 800b916:	3847      	subs	r0, #71	@ 0x47
 800b918:	e7f7      	b.n	800b90a <__hexdig_fun+0xa>
 800b91a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b91e:	2b05      	cmp	r3, #5
 800b920:	d801      	bhi.n	800b926 <__hexdig_fun+0x26>
 800b922:	3827      	subs	r0, #39	@ 0x27
 800b924:	e7f1      	b.n	800b90a <__hexdig_fun+0xa>
 800b926:	2000      	movs	r0, #0
 800b928:	4770      	bx	lr
	...

0800b92c <__gethex>:
 800b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	b085      	sub	sp, #20
 800b932:	468a      	mov	sl, r1
 800b934:	9302      	str	r3, [sp, #8]
 800b936:	680b      	ldr	r3, [r1, #0]
 800b938:	9001      	str	r0, [sp, #4]
 800b93a:	4690      	mov	r8, r2
 800b93c:	1c9c      	adds	r4, r3, #2
 800b93e:	46a1      	mov	r9, r4
 800b940:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b944:	2830      	cmp	r0, #48	@ 0x30
 800b946:	d0fa      	beq.n	800b93e <__gethex+0x12>
 800b948:	eba9 0303 	sub.w	r3, r9, r3
 800b94c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b950:	f7ff ffd6 	bl	800b900 <__hexdig_fun>
 800b954:	4605      	mov	r5, r0
 800b956:	2800      	cmp	r0, #0
 800b958:	d168      	bne.n	800ba2c <__gethex+0x100>
 800b95a:	49a0      	ldr	r1, [pc, #640]	@ (800bbdc <__gethex+0x2b0>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	4648      	mov	r0, r9
 800b960:	f7ff ff1e 	bl	800b7a0 <strncmp>
 800b964:	4607      	mov	r7, r0
 800b966:	2800      	cmp	r0, #0
 800b968:	d167      	bne.n	800ba3a <__gethex+0x10e>
 800b96a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b96e:	4626      	mov	r6, r4
 800b970:	f7ff ffc6 	bl	800b900 <__hexdig_fun>
 800b974:	2800      	cmp	r0, #0
 800b976:	d062      	beq.n	800ba3e <__gethex+0x112>
 800b978:	4623      	mov	r3, r4
 800b97a:	7818      	ldrb	r0, [r3, #0]
 800b97c:	2830      	cmp	r0, #48	@ 0x30
 800b97e:	4699      	mov	r9, r3
 800b980:	f103 0301 	add.w	r3, r3, #1
 800b984:	d0f9      	beq.n	800b97a <__gethex+0x4e>
 800b986:	f7ff ffbb 	bl	800b900 <__hexdig_fun>
 800b98a:	fab0 f580 	clz	r5, r0
 800b98e:	096d      	lsrs	r5, r5, #5
 800b990:	f04f 0b01 	mov.w	fp, #1
 800b994:	464a      	mov	r2, r9
 800b996:	4616      	mov	r6, r2
 800b998:	3201      	adds	r2, #1
 800b99a:	7830      	ldrb	r0, [r6, #0]
 800b99c:	f7ff ffb0 	bl	800b900 <__hexdig_fun>
 800b9a0:	2800      	cmp	r0, #0
 800b9a2:	d1f8      	bne.n	800b996 <__gethex+0x6a>
 800b9a4:	498d      	ldr	r1, [pc, #564]	@ (800bbdc <__gethex+0x2b0>)
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	f7ff fef9 	bl	800b7a0 <strncmp>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d13f      	bne.n	800ba32 <__gethex+0x106>
 800b9b2:	b944      	cbnz	r4, 800b9c6 <__gethex+0x9a>
 800b9b4:	1c74      	adds	r4, r6, #1
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4616      	mov	r6, r2
 800b9ba:	3201      	adds	r2, #1
 800b9bc:	7830      	ldrb	r0, [r6, #0]
 800b9be:	f7ff ff9f 	bl	800b900 <__hexdig_fun>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d1f8      	bne.n	800b9b8 <__gethex+0x8c>
 800b9c6:	1ba4      	subs	r4, r4, r6
 800b9c8:	00a7      	lsls	r7, r4, #2
 800b9ca:	7833      	ldrb	r3, [r6, #0]
 800b9cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b9d0:	2b50      	cmp	r3, #80	@ 0x50
 800b9d2:	d13e      	bne.n	800ba52 <__gethex+0x126>
 800b9d4:	7873      	ldrb	r3, [r6, #1]
 800b9d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b9d8:	d033      	beq.n	800ba42 <__gethex+0x116>
 800b9da:	2b2d      	cmp	r3, #45	@ 0x2d
 800b9dc:	d034      	beq.n	800ba48 <__gethex+0x11c>
 800b9de:	1c71      	adds	r1, r6, #1
 800b9e0:	2400      	movs	r4, #0
 800b9e2:	7808      	ldrb	r0, [r1, #0]
 800b9e4:	f7ff ff8c 	bl	800b900 <__hexdig_fun>
 800b9e8:	1e43      	subs	r3, r0, #1
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b18      	cmp	r3, #24
 800b9ee:	d830      	bhi.n	800ba52 <__gethex+0x126>
 800b9f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b9f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9f8:	f7ff ff82 	bl	800b900 <__hexdig_fun>
 800b9fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba00:	fa5f fc8c 	uxtb.w	ip, ip
 800ba04:	f1bc 0f18 	cmp.w	ip, #24
 800ba08:	f04f 030a 	mov.w	r3, #10
 800ba0c:	d91e      	bls.n	800ba4c <__gethex+0x120>
 800ba0e:	b104      	cbz	r4, 800ba12 <__gethex+0xe6>
 800ba10:	4252      	negs	r2, r2
 800ba12:	4417      	add	r7, r2
 800ba14:	f8ca 1000 	str.w	r1, [sl]
 800ba18:	b1ed      	cbz	r5, 800ba56 <__gethex+0x12a>
 800ba1a:	f1bb 0f00 	cmp.w	fp, #0
 800ba1e:	bf0c      	ite	eq
 800ba20:	2506      	moveq	r5, #6
 800ba22:	2500      	movne	r5, #0
 800ba24:	4628      	mov	r0, r5
 800ba26:	b005      	add	sp, #20
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2c:	2500      	movs	r5, #0
 800ba2e:	462c      	mov	r4, r5
 800ba30:	e7b0      	b.n	800b994 <__gethex+0x68>
 800ba32:	2c00      	cmp	r4, #0
 800ba34:	d1c7      	bne.n	800b9c6 <__gethex+0x9a>
 800ba36:	4627      	mov	r7, r4
 800ba38:	e7c7      	b.n	800b9ca <__gethex+0x9e>
 800ba3a:	464e      	mov	r6, r9
 800ba3c:	462f      	mov	r7, r5
 800ba3e:	2501      	movs	r5, #1
 800ba40:	e7c3      	b.n	800b9ca <__gethex+0x9e>
 800ba42:	2400      	movs	r4, #0
 800ba44:	1cb1      	adds	r1, r6, #2
 800ba46:	e7cc      	b.n	800b9e2 <__gethex+0xb6>
 800ba48:	2401      	movs	r4, #1
 800ba4a:	e7fb      	b.n	800ba44 <__gethex+0x118>
 800ba4c:	fb03 0002 	mla	r0, r3, r2, r0
 800ba50:	e7ce      	b.n	800b9f0 <__gethex+0xc4>
 800ba52:	4631      	mov	r1, r6
 800ba54:	e7de      	b.n	800ba14 <__gethex+0xe8>
 800ba56:	eba6 0309 	sub.w	r3, r6, r9
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	2b07      	cmp	r3, #7
 800ba60:	dc0a      	bgt.n	800ba78 <__gethex+0x14c>
 800ba62:	9801      	ldr	r0, [sp, #4]
 800ba64:	f7fe f948 	bl	8009cf8 <_Balloc>
 800ba68:	4604      	mov	r4, r0
 800ba6a:	b940      	cbnz	r0, 800ba7e <__gethex+0x152>
 800ba6c:	4b5c      	ldr	r3, [pc, #368]	@ (800bbe0 <__gethex+0x2b4>)
 800ba6e:	4602      	mov	r2, r0
 800ba70:	21e4      	movs	r1, #228	@ 0xe4
 800ba72:	485c      	ldr	r0, [pc, #368]	@ (800bbe4 <__gethex+0x2b8>)
 800ba74:	f7ff fec0 	bl	800b7f8 <__assert_func>
 800ba78:	3101      	adds	r1, #1
 800ba7a:	105b      	asrs	r3, r3, #1
 800ba7c:	e7ef      	b.n	800ba5e <__gethex+0x132>
 800ba7e:	f100 0a14 	add.w	sl, r0, #20
 800ba82:	2300      	movs	r3, #0
 800ba84:	4655      	mov	r5, sl
 800ba86:	469b      	mov	fp, r3
 800ba88:	45b1      	cmp	r9, r6
 800ba8a:	d337      	bcc.n	800bafc <__gethex+0x1d0>
 800ba8c:	f845 bb04 	str.w	fp, [r5], #4
 800ba90:	eba5 050a 	sub.w	r5, r5, sl
 800ba94:	10ad      	asrs	r5, r5, #2
 800ba96:	6125      	str	r5, [r4, #16]
 800ba98:	4658      	mov	r0, fp
 800ba9a:	f7fe fa1f 	bl	8009edc <__hi0bits>
 800ba9e:	016d      	lsls	r5, r5, #5
 800baa0:	f8d8 6000 	ldr.w	r6, [r8]
 800baa4:	1a2d      	subs	r5, r5, r0
 800baa6:	42b5      	cmp	r5, r6
 800baa8:	dd54      	ble.n	800bb54 <__gethex+0x228>
 800baaa:	1bad      	subs	r5, r5, r6
 800baac:	4629      	mov	r1, r5
 800baae:	4620      	mov	r0, r4
 800bab0:	f7fe fdb3 	bl	800a61a <__any_on>
 800bab4:	4681      	mov	r9, r0
 800bab6:	b178      	cbz	r0, 800bad8 <__gethex+0x1ac>
 800bab8:	1e6b      	subs	r3, r5, #1
 800baba:	1159      	asrs	r1, r3, #5
 800babc:	f003 021f 	and.w	r2, r3, #31
 800bac0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bac4:	f04f 0901 	mov.w	r9, #1
 800bac8:	fa09 f202 	lsl.w	r2, r9, r2
 800bacc:	420a      	tst	r2, r1
 800bace:	d003      	beq.n	800bad8 <__gethex+0x1ac>
 800bad0:	454b      	cmp	r3, r9
 800bad2:	dc36      	bgt.n	800bb42 <__gethex+0x216>
 800bad4:	f04f 0902 	mov.w	r9, #2
 800bad8:	4629      	mov	r1, r5
 800bada:	4620      	mov	r0, r4
 800badc:	f7ff febe 	bl	800b85c <rshift>
 800bae0:	442f      	add	r7, r5
 800bae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bae6:	42bb      	cmp	r3, r7
 800bae8:	da42      	bge.n	800bb70 <__gethex+0x244>
 800baea:	9801      	ldr	r0, [sp, #4]
 800baec:	4621      	mov	r1, r4
 800baee:	f7fe f943 	bl	8009d78 <_Bfree>
 800baf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800baf4:	2300      	movs	r3, #0
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	25a3      	movs	r5, #163	@ 0xa3
 800bafa:	e793      	b.n	800ba24 <__gethex+0xf8>
 800bafc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bb00:	2a2e      	cmp	r2, #46	@ 0x2e
 800bb02:	d012      	beq.n	800bb2a <__gethex+0x1fe>
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d104      	bne.n	800bb12 <__gethex+0x1e6>
 800bb08:	f845 bb04 	str.w	fp, [r5], #4
 800bb0c:	f04f 0b00 	mov.w	fp, #0
 800bb10:	465b      	mov	r3, fp
 800bb12:	7830      	ldrb	r0, [r6, #0]
 800bb14:	9303      	str	r3, [sp, #12]
 800bb16:	f7ff fef3 	bl	800b900 <__hexdig_fun>
 800bb1a:	9b03      	ldr	r3, [sp, #12]
 800bb1c:	f000 000f 	and.w	r0, r0, #15
 800bb20:	4098      	lsls	r0, r3
 800bb22:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb26:	3304      	adds	r3, #4
 800bb28:	e7ae      	b.n	800ba88 <__gethex+0x15c>
 800bb2a:	45b1      	cmp	r9, r6
 800bb2c:	d8ea      	bhi.n	800bb04 <__gethex+0x1d8>
 800bb2e:	492b      	ldr	r1, [pc, #172]	@ (800bbdc <__gethex+0x2b0>)
 800bb30:	9303      	str	r3, [sp, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff fe33 	bl	800b7a0 <strncmp>
 800bb3a:	9b03      	ldr	r3, [sp, #12]
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d1e1      	bne.n	800bb04 <__gethex+0x1d8>
 800bb40:	e7a2      	b.n	800ba88 <__gethex+0x15c>
 800bb42:	1ea9      	subs	r1, r5, #2
 800bb44:	4620      	mov	r0, r4
 800bb46:	f7fe fd68 	bl	800a61a <__any_on>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0c2      	beq.n	800bad4 <__gethex+0x1a8>
 800bb4e:	f04f 0903 	mov.w	r9, #3
 800bb52:	e7c1      	b.n	800bad8 <__gethex+0x1ac>
 800bb54:	da09      	bge.n	800bb6a <__gethex+0x23e>
 800bb56:	1b75      	subs	r5, r6, r5
 800bb58:	4621      	mov	r1, r4
 800bb5a:	9801      	ldr	r0, [sp, #4]
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	f7fe fb23 	bl	800a1a8 <__lshift>
 800bb62:	1b7f      	subs	r7, r7, r5
 800bb64:	4604      	mov	r4, r0
 800bb66:	f100 0a14 	add.w	sl, r0, #20
 800bb6a:	f04f 0900 	mov.w	r9, #0
 800bb6e:	e7b8      	b.n	800bae2 <__gethex+0x1b6>
 800bb70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb74:	42bd      	cmp	r5, r7
 800bb76:	dd6f      	ble.n	800bc58 <__gethex+0x32c>
 800bb78:	1bed      	subs	r5, r5, r7
 800bb7a:	42ae      	cmp	r6, r5
 800bb7c:	dc34      	bgt.n	800bbe8 <__gethex+0x2bc>
 800bb7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d022      	beq.n	800bbcc <__gethex+0x2a0>
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d024      	beq.n	800bbd4 <__gethex+0x2a8>
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d115      	bne.n	800bbba <__gethex+0x28e>
 800bb8e:	42ae      	cmp	r6, r5
 800bb90:	d113      	bne.n	800bbba <__gethex+0x28e>
 800bb92:	2e01      	cmp	r6, #1
 800bb94:	d10b      	bne.n	800bbae <__gethex+0x282>
 800bb96:	9a02      	ldr	r2, [sp, #8]
 800bb98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb9c:	6013      	str	r3, [r2, #0]
 800bb9e:	2301      	movs	r3, #1
 800bba0:	6123      	str	r3, [r4, #16]
 800bba2:	f8ca 3000 	str.w	r3, [sl]
 800bba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bba8:	2562      	movs	r5, #98	@ 0x62
 800bbaa:	601c      	str	r4, [r3, #0]
 800bbac:	e73a      	b.n	800ba24 <__gethex+0xf8>
 800bbae:	1e71      	subs	r1, r6, #1
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7fe fd32 	bl	800a61a <__any_on>
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d1ed      	bne.n	800bb96 <__gethex+0x26a>
 800bbba:	9801      	ldr	r0, [sp, #4]
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	f7fe f8db 	bl	8009d78 <_Bfree>
 800bbc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	2550      	movs	r5, #80	@ 0x50
 800bbca:	e72b      	b.n	800ba24 <__gethex+0xf8>
 800bbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f3      	bne.n	800bbba <__gethex+0x28e>
 800bbd2:	e7e0      	b.n	800bb96 <__gethex+0x26a>
 800bbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1dd      	bne.n	800bb96 <__gethex+0x26a>
 800bbda:	e7ee      	b.n	800bbba <__gethex+0x28e>
 800bbdc:	0800c928 	.word	0x0800c928
 800bbe0:	0800c7bd 	.word	0x0800c7bd
 800bbe4:	0800cad6 	.word	0x0800cad6
 800bbe8:	1e6f      	subs	r7, r5, #1
 800bbea:	f1b9 0f00 	cmp.w	r9, #0
 800bbee:	d130      	bne.n	800bc52 <__gethex+0x326>
 800bbf0:	b127      	cbz	r7, 800bbfc <__gethex+0x2d0>
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f7fe fd10 	bl	800a61a <__any_on>
 800bbfa:	4681      	mov	r9, r0
 800bbfc:	117a      	asrs	r2, r7, #5
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc04:	f007 071f 	and.w	r7, r7, #31
 800bc08:	40bb      	lsls	r3, r7
 800bc0a:	4213      	tst	r3, r2
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4620      	mov	r0, r4
 800bc10:	bf18      	it	ne
 800bc12:	f049 0902 	orrne.w	r9, r9, #2
 800bc16:	f7ff fe21 	bl	800b85c <rshift>
 800bc1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bc1e:	1b76      	subs	r6, r6, r5
 800bc20:	2502      	movs	r5, #2
 800bc22:	f1b9 0f00 	cmp.w	r9, #0
 800bc26:	d047      	beq.n	800bcb8 <__gethex+0x38c>
 800bc28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d015      	beq.n	800bc5c <__gethex+0x330>
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d017      	beq.n	800bc64 <__gethex+0x338>
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d109      	bne.n	800bc4c <__gethex+0x320>
 800bc38:	f019 0f02 	tst.w	r9, #2
 800bc3c:	d006      	beq.n	800bc4c <__gethex+0x320>
 800bc3e:	f8da 3000 	ldr.w	r3, [sl]
 800bc42:	ea49 0903 	orr.w	r9, r9, r3
 800bc46:	f019 0f01 	tst.w	r9, #1
 800bc4a:	d10e      	bne.n	800bc6a <__gethex+0x33e>
 800bc4c:	f045 0510 	orr.w	r5, r5, #16
 800bc50:	e032      	b.n	800bcb8 <__gethex+0x38c>
 800bc52:	f04f 0901 	mov.w	r9, #1
 800bc56:	e7d1      	b.n	800bbfc <__gethex+0x2d0>
 800bc58:	2501      	movs	r5, #1
 800bc5a:	e7e2      	b.n	800bc22 <__gethex+0x2f6>
 800bc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc5e:	f1c3 0301 	rsb	r3, r3, #1
 800bc62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0f0      	beq.n	800bc4c <__gethex+0x320>
 800bc6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc6e:	f104 0314 	add.w	r3, r4, #20
 800bc72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc7a:	f04f 0c00 	mov.w	ip, #0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc88:	d01b      	beq.n	800bcc2 <__gethex+0x396>
 800bc8a:	3201      	adds	r2, #1
 800bc8c:	6002      	str	r2, [r0, #0]
 800bc8e:	2d02      	cmp	r5, #2
 800bc90:	f104 0314 	add.w	r3, r4, #20
 800bc94:	d13c      	bne.n	800bd10 <__gethex+0x3e4>
 800bc96:	f8d8 2000 	ldr.w	r2, [r8]
 800bc9a:	3a01      	subs	r2, #1
 800bc9c:	42b2      	cmp	r2, r6
 800bc9e:	d109      	bne.n	800bcb4 <__gethex+0x388>
 800bca0:	1171      	asrs	r1, r6, #5
 800bca2:	2201      	movs	r2, #1
 800bca4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bca8:	f006 061f 	and.w	r6, r6, #31
 800bcac:	fa02 f606 	lsl.w	r6, r2, r6
 800bcb0:	421e      	tst	r6, r3
 800bcb2:	d13a      	bne.n	800bd2a <__gethex+0x3fe>
 800bcb4:	f045 0520 	orr.w	r5, r5, #32
 800bcb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcba:	601c      	str	r4, [r3, #0]
 800bcbc:	9b02      	ldr	r3, [sp, #8]
 800bcbe:	601f      	str	r7, [r3, #0]
 800bcc0:	e6b0      	b.n	800ba24 <__gethex+0xf8>
 800bcc2:	4299      	cmp	r1, r3
 800bcc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcc8:	d8d9      	bhi.n	800bc7e <__gethex+0x352>
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	459b      	cmp	fp, r3
 800bcce:	db17      	blt.n	800bd00 <__gethex+0x3d4>
 800bcd0:	6861      	ldr	r1, [r4, #4]
 800bcd2:	9801      	ldr	r0, [sp, #4]
 800bcd4:	3101      	adds	r1, #1
 800bcd6:	f7fe f80f 	bl	8009cf8 <_Balloc>
 800bcda:	4681      	mov	r9, r0
 800bcdc:	b918      	cbnz	r0, 800bce6 <__gethex+0x3ba>
 800bcde:	4b1a      	ldr	r3, [pc, #104]	@ (800bd48 <__gethex+0x41c>)
 800bce0:	4602      	mov	r2, r0
 800bce2:	2184      	movs	r1, #132	@ 0x84
 800bce4:	e6c5      	b.n	800ba72 <__gethex+0x146>
 800bce6:	6922      	ldr	r2, [r4, #16]
 800bce8:	3202      	adds	r2, #2
 800bcea:	f104 010c 	add.w	r1, r4, #12
 800bcee:	0092      	lsls	r2, r2, #2
 800bcf0:	300c      	adds	r0, #12
 800bcf2:	f7fd f89e 	bl	8008e32 <memcpy>
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	9801      	ldr	r0, [sp, #4]
 800bcfa:	f7fe f83d 	bl	8009d78 <_Bfree>
 800bcfe:	464c      	mov	r4, r9
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd08:	6122      	str	r2, [r4, #16]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	615a      	str	r2, [r3, #20]
 800bd0e:	e7be      	b.n	800bc8e <__gethex+0x362>
 800bd10:	6922      	ldr	r2, [r4, #16]
 800bd12:	455a      	cmp	r2, fp
 800bd14:	dd0b      	ble.n	800bd2e <__gethex+0x402>
 800bd16:	2101      	movs	r1, #1
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f7ff fd9f 	bl	800b85c <rshift>
 800bd1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd22:	3701      	adds	r7, #1
 800bd24:	42bb      	cmp	r3, r7
 800bd26:	f6ff aee0 	blt.w	800baea <__gethex+0x1be>
 800bd2a:	2501      	movs	r5, #1
 800bd2c:	e7c2      	b.n	800bcb4 <__gethex+0x388>
 800bd2e:	f016 061f 	ands.w	r6, r6, #31
 800bd32:	d0fa      	beq.n	800bd2a <__gethex+0x3fe>
 800bd34:	4453      	add	r3, sl
 800bd36:	f1c6 0620 	rsb	r6, r6, #32
 800bd3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd3e:	f7fe f8cd 	bl	8009edc <__hi0bits>
 800bd42:	42b0      	cmp	r0, r6
 800bd44:	dbe7      	blt.n	800bd16 <__gethex+0x3ea>
 800bd46:	e7f0      	b.n	800bd2a <__gethex+0x3fe>
 800bd48:	0800c7bd 	.word	0x0800c7bd

0800bd4c <L_shift>:
 800bd4c:	f1c2 0208 	rsb	r2, r2, #8
 800bd50:	0092      	lsls	r2, r2, #2
 800bd52:	b570      	push	{r4, r5, r6, lr}
 800bd54:	f1c2 0620 	rsb	r6, r2, #32
 800bd58:	6843      	ldr	r3, [r0, #4]
 800bd5a:	6804      	ldr	r4, [r0, #0]
 800bd5c:	fa03 f506 	lsl.w	r5, r3, r6
 800bd60:	432c      	orrs	r4, r5
 800bd62:	40d3      	lsrs	r3, r2
 800bd64:	6004      	str	r4, [r0, #0]
 800bd66:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd6a:	4288      	cmp	r0, r1
 800bd6c:	d3f4      	bcc.n	800bd58 <L_shift+0xc>
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}

0800bd70 <__match>:
 800bd70:	b530      	push	{r4, r5, lr}
 800bd72:	6803      	ldr	r3, [r0, #0]
 800bd74:	3301      	adds	r3, #1
 800bd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd7a:	b914      	cbnz	r4, 800bd82 <__match+0x12>
 800bd7c:	6003      	str	r3, [r0, #0]
 800bd7e:	2001      	movs	r0, #1
 800bd80:	bd30      	pop	{r4, r5, pc}
 800bd82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bd8a:	2d19      	cmp	r5, #25
 800bd8c:	bf98      	it	ls
 800bd8e:	3220      	addls	r2, #32
 800bd90:	42a2      	cmp	r2, r4
 800bd92:	d0f0      	beq.n	800bd76 <__match+0x6>
 800bd94:	2000      	movs	r0, #0
 800bd96:	e7f3      	b.n	800bd80 <__match+0x10>

0800bd98 <__hexnan>:
 800bd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd9c:	680b      	ldr	r3, [r1, #0]
 800bd9e:	6801      	ldr	r1, [r0, #0]
 800bda0:	115e      	asrs	r6, r3, #5
 800bda2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bda6:	f013 031f 	ands.w	r3, r3, #31
 800bdaa:	b087      	sub	sp, #28
 800bdac:	bf18      	it	ne
 800bdae:	3604      	addne	r6, #4
 800bdb0:	2500      	movs	r5, #0
 800bdb2:	1f37      	subs	r7, r6, #4
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	4690      	mov	r8, r2
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdbe:	46b9      	mov	r9, r7
 800bdc0:	463c      	mov	r4, r7
 800bdc2:	9502      	str	r5, [sp, #8]
 800bdc4:	46ab      	mov	fp, r5
 800bdc6:	784a      	ldrb	r2, [r1, #1]
 800bdc8:	1c4b      	adds	r3, r1, #1
 800bdca:	9303      	str	r3, [sp, #12]
 800bdcc:	b342      	cbz	r2, 800be20 <__hexnan+0x88>
 800bdce:	4610      	mov	r0, r2
 800bdd0:	9105      	str	r1, [sp, #20]
 800bdd2:	9204      	str	r2, [sp, #16]
 800bdd4:	f7ff fd94 	bl	800b900 <__hexdig_fun>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d151      	bne.n	800be80 <__hexnan+0xe8>
 800bddc:	9a04      	ldr	r2, [sp, #16]
 800bdde:	9905      	ldr	r1, [sp, #20]
 800bde0:	2a20      	cmp	r2, #32
 800bde2:	d818      	bhi.n	800be16 <__hexnan+0x7e>
 800bde4:	9b02      	ldr	r3, [sp, #8]
 800bde6:	459b      	cmp	fp, r3
 800bde8:	dd13      	ble.n	800be12 <__hexnan+0x7a>
 800bdea:	454c      	cmp	r4, r9
 800bdec:	d206      	bcs.n	800bdfc <__hexnan+0x64>
 800bdee:	2d07      	cmp	r5, #7
 800bdf0:	dc04      	bgt.n	800bdfc <__hexnan+0x64>
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f7ff ffa8 	bl	800bd4c <L_shift>
 800bdfc:	4544      	cmp	r4, r8
 800bdfe:	d952      	bls.n	800bea6 <__hexnan+0x10e>
 800be00:	2300      	movs	r3, #0
 800be02:	f1a4 0904 	sub.w	r9, r4, #4
 800be06:	f844 3c04 	str.w	r3, [r4, #-4]
 800be0a:	f8cd b008 	str.w	fp, [sp, #8]
 800be0e:	464c      	mov	r4, r9
 800be10:	461d      	mov	r5, r3
 800be12:	9903      	ldr	r1, [sp, #12]
 800be14:	e7d7      	b.n	800bdc6 <__hexnan+0x2e>
 800be16:	2a29      	cmp	r2, #41	@ 0x29
 800be18:	d157      	bne.n	800beca <__hexnan+0x132>
 800be1a:	3102      	adds	r1, #2
 800be1c:	f8ca 1000 	str.w	r1, [sl]
 800be20:	f1bb 0f00 	cmp.w	fp, #0
 800be24:	d051      	beq.n	800beca <__hexnan+0x132>
 800be26:	454c      	cmp	r4, r9
 800be28:	d206      	bcs.n	800be38 <__hexnan+0xa0>
 800be2a:	2d07      	cmp	r5, #7
 800be2c:	dc04      	bgt.n	800be38 <__hexnan+0xa0>
 800be2e:	462a      	mov	r2, r5
 800be30:	4649      	mov	r1, r9
 800be32:	4620      	mov	r0, r4
 800be34:	f7ff ff8a 	bl	800bd4c <L_shift>
 800be38:	4544      	cmp	r4, r8
 800be3a:	d936      	bls.n	800beaa <__hexnan+0x112>
 800be3c:	f1a8 0204 	sub.w	r2, r8, #4
 800be40:	4623      	mov	r3, r4
 800be42:	f853 1b04 	ldr.w	r1, [r3], #4
 800be46:	f842 1f04 	str.w	r1, [r2, #4]!
 800be4a:	429f      	cmp	r7, r3
 800be4c:	d2f9      	bcs.n	800be42 <__hexnan+0xaa>
 800be4e:	1b3b      	subs	r3, r7, r4
 800be50:	f023 0303 	bic.w	r3, r3, #3
 800be54:	3304      	adds	r3, #4
 800be56:	3401      	adds	r4, #1
 800be58:	3e03      	subs	r6, #3
 800be5a:	42b4      	cmp	r4, r6
 800be5c:	bf88      	it	hi
 800be5e:	2304      	movhi	r3, #4
 800be60:	4443      	add	r3, r8
 800be62:	2200      	movs	r2, #0
 800be64:	f843 2b04 	str.w	r2, [r3], #4
 800be68:	429f      	cmp	r7, r3
 800be6a:	d2fb      	bcs.n	800be64 <__hexnan+0xcc>
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	b91b      	cbnz	r3, 800be78 <__hexnan+0xe0>
 800be70:	4547      	cmp	r7, r8
 800be72:	d128      	bne.n	800bec6 <__hexnan+0x12e>
 800be74:	2301      	movs	r3, #1
 800be76:	603b      	str	r3, [r7, #0]
 800be78:	2005      	movs	r0, #5
 800be7a:	b007      	add	sp, #28
 800be7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be80:	3501      	adds	r5, #1
 800be82:	2d08      	cmp	r5, #8
 800be84:	f10b 0b01 	add.w	fp, fp, #1
 800be88:	dd06      	ble.n	800be98 <__hexnan+0x100>
 800be8a:	4544      	cmp	r4, r8
 800be8c:	d9c1      	bls.n	800be12 <__hexnan+0x7a>
 800be8e:	2300      	movs	r3, #0
 800be90:	f844 3c04 	str.w	r3, [r4, #-4]
 800be94:	2501      	movs	r5, #1
 800be96:	3c04      	subs	r4, #4
 800be98:	6822      	ldr	r2, [r4, #0]
 800be9a:	f000 000f 	and.w	r0, r0, #15
 800be9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bea2:	6020      	str	r0, [r4, #0]
 800bea4:	e7b5      	b.n	800be12 <__hexnan+0x7a>
 800bea6:	2508      	movs	r5, #8
 800bea8:	e7b3      	b.n	800be12 <__hexnan+0x7a>
 800beaa:	9b01      	ldr	r3, [sp, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0dd      	beq.n	800be6c <__hexnan+0xd4>
 800beb0:	f1c3 0320 	rsb	r3, r3, #32
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	40da      	lsrs	r2, r3
 800beba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bebe:	4013      	ands	r3, r2
 800bec0:	f846 3c04 	str.w	r3, [r6, #-4]
 800bec4:	e7d2      	b.n	800be6c <__hexnan+0xd4>
 800bec6:	3f04      	subs	r7, #4
 800bec8:	e7d0      	b.n	800be6c <__hexnan+0xd4>
 800beca:	2004      	movs	r0, #4
 800becc:	e7d5      	b.n	800be7a <__hexnan+0xe2>

0800bece <__ascii_mbtowc>:
 800bece:	b082      	sub	sp, #8
 800bed0:	b901      	cbnz	r1, 800bed4 <__ascii_mbtowc+0x6>
 800bed2:	a901      	add	r1, sp, #4
 800bed4:	b142      	cbz	r2, 800bee8 <__ascii_mbtowc+0x1a>
 800bed6:	b14b      	cbz	r3, 800beec <__ascii_mbtowc+0x1e>
 800bed8:	7813      	ldrb	r3, [r2, #0]
 800beda:	600b      	str	r3, [r1, #0]
 800bedc:	7812      	ldrb	r2, [r2, #0]
 800bede:	1e10      	subs	r0, r2, #0
 800bee0:	bf18      	it	ne
 800bee2:	2001      	movne	r0, #1
 800bee4:	b002      	add	sp, #8
 800bee6:	4770      	bx	lr
 800bee8:	4610      	mov	r0, r2
 800beea:	e7fb      	b.n	800bee4 <__ascii_mbtowc+0x16>
 800beec:	f06f 0001 	mvn.w	r0, #1
 800bef0:	e7f8      	b.n	800bee4 <__ascii_mbtowc+0x16>

0800bef2 <_realloc_r>:
 800bef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef6:	4680      	mov	r8, r0
 800bef8:	4615      	mov	r5, r2
 800befa:	460c      	mov	r4, r1
 800befc:	b921      	cbnz	r1, 800bf08 <_realloc_r+0x16>
 800befe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	4611      	mov	r1, r2
 800bf04:	f7fd be6c 	b.w	8009be0 <_malloc_r>
 800bf08:	b92a      	cbnz	r2, 800bf16 <_realloc_r+0x24>
 800bf0a:	f7fd fdf5 	bl	8009af8 <_free_r>
 800bf0e:	2400      	movs	r4, #0
 800bf10:	4620      	mov	r0, r4
 800bf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf16:	f000 f840 	bl	800bf9a <_malloc_usable_size_r>
 800bf1a:	4285      	cmp	r5, r0
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	d802      	bhi.n	800bf26 <_realloc_r+0x34>
 800bf20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bf24:	d8f4      	bhi.n	800bf10 <_realloc_r+0x1e>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4640      	mov	r0, r8
 800bf2a:	f7fd fe59 	bl	8009be0 <_malloc_r>
 800bf2e:	4607      	mov	r7, r0
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d0ec      	beq.n	800bf0e <_realloc_r+0x1c>
 800bf34:	42b5      	cmp	r5, r6
 800bf36:	462a      	mov	r2, r5
 800bf38:	4621      	mov	r1, r4
 800bf3a:	bf28      	it	cs
 800bf3c:	4632      	movcs	r2, r6
 800bf3e:	f7fc ff78 	bl	8008e32 <memcpy>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4640      	mov	r0, r8
 800bf46:	f7fd fdd7 	bl	8009af8 <_free_r>
 800bf4a:	463c      	mov	r4, r7
 800bf4c:	e7e0      	b.n	800bf10 <_realloc_r+0x1e>

0800bf4e <__ascii_wctomb>:
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4608      	mov	r0, r1
 800bf52:	b141      	cbz	r1, 800bf66 <__ascii_wctomb+0x18>
 800bf54:	2aff      	cmp	r2, #255	@ 0xff
 800bf56:	d904      	bls.n	800bf62 <__ascii_wctomb+0x14>
 800bf58:	228a      	movs	r2, #138	@ 0x8a
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	4770      	bx	lr
 800bf62:	700a      	strb	r2, [r1, #0]
 800bf64:	2001      	movs	r0, #1
 800bf66:	4770      	bx	lr

0800bf68 <fiprintf>:
 800bf68:	b40e      	push	{r1, r2, r3}
 800bf6a:	b503      	push	{r0, r1, lr}
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	ab03      	add	r3, sp, #12
 800bf70:	4805      	ldr	r0, [pc, #20]	@ (800bf88 <fiprintf+0x20>)
 800bf72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf76:	6800      	ldr	r0, [r0, #0]
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	f000 f83f 	bl	800bffc <_vfiprintf_r>
 800bf7e:	b002      	add	sp, #8
 800bf80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf84:	b003      	add	sp, #12
 800bf86:	4770      	bx	lr
 800bf88:	2000002c 	.word	0x2000002c

0800bf8c <abort>:
 800bf8c:	b508      	push	{r3, lr}
 800bf8e:	2006      	movs	r0, #6
 800bf90:	f000 fa08 	bl	800c3a4 <raise>
 800bf94:	2001      	movs	r0, #1
 800bf96:	f7f6 f8b5 	bl	8002104 <_exit>

0800bf9a <_malloc_usable_size_r>:
 800bf9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf9e:	1f18      	subs	r0, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bfbc      	itt	lt
 800bfa4:	580b      	ldrlt	r3, [r1, r0]
 800bfa6:	18c0      	addlt	r0, r0, r3
 800bfa8:	4770      	bx	lr

0800bfaa <__sfputc_r>:
 800bfaa:	6893      	ldr	r3, [r2, #8]
 800bfac:	3b01      	subs	r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	b410      	push	{r4}
 800bfb2:	6093      	str	r3, [r2, #8]
 800bfb4:	da08      	bge.n	800bfc8 <__sfputc_r+0x1e>
 800bfb6:	6994      	ldr	r4, [r2, #24]
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	db01      	blt.n	800bfc0 <__sfputc_r+0x16>
 800bfbc:	290a      	cmp	r1, #10
 800bfbe:	d103      	bne.n	800bfc8 <__sfputc_r+0x1e>
 800bfc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfc4:	f000 b932 	b.w	800c22c <__swbuf_r>
 800bfc8:	6813      	ldr	r3, [r2, #0]
 800bfca:	1c58      	adds	r0, r3, #1
 800bfcc:	6010      	str	r0, [r2, #0]
 800bfce:	7019      	strb	r1, [r3, #0]
 800bfd0:	4608      	mov	r0, r1
 800bfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <__sfputs_r>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460f      	mov	r7, r1
 800bfde:	4614      	mov	r4, r2
 800bfe0:	18d5      	adds	r5, r2, r3
 800bfe2:	42ac      	cmp	r4, r5
 800bfe4:	d101      	bne.n	800bfea <__sfputs_r+0x12>
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	e007      	b.n	800bffa <__sfputs_r+0x22>
 800bfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfee:	463a      	mov	r2, r7
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff ffda 	bl	800bfaa <__sfputc_r>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d1f3      	bne.n	800bfe2 <__sfputs_r+0xa>
 800bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bffc <_vfiprintf_r>:
 800bffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c000:	460d      	mov	r5, r1
 800c002:	b09d      	sub	sp, #116	@ 0x74
 800c004:	4614      	mov	r4, r2
 800c006:	4698      	mov	r8, r3
 800c008:	4606      	mov	r6, r0
 800c00a:	b118      	cbz	r0, 800c014 <_vfiprintf_r+0x18>
 800c00c:	6a03      	ldr	r3, [r0, #32]
 800c00e:	b90b      	cbnz	r3, 800c014 <_vfiprintf_r+0x18>
 800c010:	f7fc fdc2 	bl	8008b98 <__sinit>
 800c014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c016:	07d9      	lsls	r1, r3, #31
 800c018:	d405      	bmi.n	800c026 <_vfiprintf_r+0x2a>
 800c01a:	89ab      	ldrh	r3, [r5, #12]
 800c01c:	059a      	lsls	r2, r3, #22
 800c01e:	d402      	bmi.n	800c026 <_vfiprintf_r+0x2a>
 800c020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c022:	f7fc ff04 	bl	8008e2e <__retarget_lock_acquire_recursive>
 800c026:	89ab      	ldrh	r3, [r5, #12]
 800c028:	071b      	lsls	r3, r3, #28
 800c02a:	d501      	bpl.n	800c030 <_vfiprintf_r+0x34>
 800c02c:	692b      	ldr	r3, [r5, #16]
 800c02e:	b99b      	cbnz	r3, 800c058 <_vfiprintf_r+0x5c>
 800c030:	4629      	mov	r1, r5
 800c032:	4630      	mov	r0, r6
 800c034:	f000 f938 	bl	800c2a8 <__swsetup_r>
 800c038:	b170      	cbz	r0, 800c058 <_vfiprintf_r+0x5c>
 800c03a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c03c:	07dc      	lsls	r4, r3, #31
 800c03e:	d504      	bpl.n	800c04a <_vfiprintf_r+0x4e>
 800c040:	f04f 30ff 	mov.w	r0, #4294967295
 800c044:	b01d      	add	sp, #116	@ 0x74
 800c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04a:	89ab      	ldrh	r3, [r5, #12]
 800c04c:	0598      	lsls	r0, r3, #22
 800c04e:	d4f7      	bmi.n	800c040 <_vfiprintf_r+0x44>
 800c050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c052:	f7fc feed 	bl	8008e30 <__retarget_lock_release_recursive>
 800c056:	e7f3      	b.n	800c040 <_vfiprintf_r+0x44>
 800c058:	2300      	movs	r3, #0
 800c05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c05c:	2320      	movs	r3, #32
 800c05e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c062:	f8cd 800c 	str.w	r8, [sp, #12]
 800c066:	2330      	movs	r3, #48	@ 0x30
 800c068:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c218 <_vfiprintf_r+0x21c>
 800c06c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c070:	f04f 0901 	mov.w	r9, #1
 800c074:	4623      	mov	r3, r4
 800c076:	469a      	mov	sl, r3
 800c078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c07c:	b10a      	cbz	r2, 800c082 <_vfiprintf_r+0x86>
 800c07e:	2a25      	cmp	r2, #37	@ 0x25
 800c080:	d1f9      	bne.n	800c076 <_vfiprintf_r+0x7a>
 800c082:	ebba 0b04 	subs.w	fp, sl, r4
 800c086:	d00b      	beq.n	800c0a0 <_vfiprintf_r+0xa4>
 800c088:	465b      	mov	r3, fp
 800c08a:	4622      	mov	r2, r4
 800c08c:	4629      	mov	r1, r5
 800c08e:	4630      	mov	r0, r6
 800c090:	f7ff ffa2 	bl	800bfd8 <__sfputs_r>
 800c094:	3001      	adds	r0, #1
 800c096:	f000 80a7 	beq.w	800c1e8 <_vfiprintf_r+0x1ec>
 800c09a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c09c:	445a      	add	r2, fp
 800c09e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 809f 	beq.w	800c1e8 <_vfiprintf_r+0x1ec>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b4:	f10a 0a01 	add.w	sl, sl, #1
 800c0b8:	9304      	str	r3, [sp, #16]
 800c0ba:	9307      	str	r3, [sp, #28]
 800c0bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0c2:	4654      	mov	r4, sl
 800c0c4:	2205      	movs	r2, #5
 800c0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ca:	4853      	ldr	r0, [pc, #332]	@ (800c218 <_vfiprintf_r+0x21c>)
 800c0cc:	f7f4 f888 	bl	80001e0 <memchr>
 800c0d0:	9a04      	ldr	r2, [sp, #16]
 800c0d2:	b9d8      	cbnz	r0, 800c10c <_vfiprintf_r+0x110>
 800c0d4:	06d1      	lsls	r1, r2, #27
 800c0d6:	bf44      	itt	mi
 800c0d8:	2320      	movmi	r3, #32
 800c0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0de:	0713      	lsls	r3, r2, #28
 800c0e0:	bf44      	itt	mi
 800c0e2:	232b      	movmi	r3, #43	@ 0x2b
 800c0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0ee:	d015      	beq.n	800c11c <_vfiprintf_r+0x120>
 800c0f0:	9a07      	ldr	r2, [sp, #28]
 800c0f2:	4654      	mov	r4, sl
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f04f 0c0a 	mov.w	ip, #10
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c100:	3b30      	subs	r3, #48	@ 0x30
 800c102:	2b09      	cmp	r3, #9
 800c104:	d94b      	bls.n	800c19e <_vfiprintf_r+0x1a2>
 800c106:	b1b0      	cbz	r0, 800c136 <_vfiprintf_r+0x13a>
 800c108:	9207      	str	r2, [sp, #28]
 800c10a:	e014      	b.n	800c136 <_vfiprintf_r+0x13a>
 800c10c:	eba0 0308 	sub.w	r3, r0, r8
 800c110:	fa09 f303 	lsl.w	r3, r9, r3
 800c114:	4313      	orrs	r3, r2
 800c116:	9304      	str	r3, [sp, #16]
 800c118:	46a2      	mov	sl, r4
 800c11a:	e7d2      	b.n	800c0c2 <_vfiprintf_r+0xc6>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	1d19      	adds	r1, r3, #4
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	9103      	str	r1, [sp, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	bfbb      	ittet	lt
 800c128:	425b      	neglt	r3, r3
 800c12a:	f042 0202 	orrlt.w	r2, r2, #2
 800c12e:	9307      	strge	r3, [sp, #28]
 800c130:	9307      	strlt	r3, [sp, #28]
 800c132:	bfb8      	it	lt
 800c134:	9204      	strlt	r2, [sp, #16]
 800c136:	7823      	ldrb	r3, [r4, #0]
 800c138:	2b2e      	cmp	r3, #46	@ 0x2e
 800c13a:	d10a      	bne.n	800c152 <_vfiprintf_r+0x156>
 800c13c:	7863      	ldrb	r3, [r4, #1]
 800c13e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c140:	d132      	bne.n	800c1a8 <_vfiprintf_r+0x1ac>
 800c142:	9b03      	ldr	r3, [sp, #12]
 800c144:	1d1a      	adds	r2, r3, #4
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	9203      	str	r2, [sp, #12]
 800c14a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c14e:	3402      	adds	r4, #2
 800c150:	9305      	str	r3, [sp, #20]
 800c152:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c228 <_vfiprintf_r+0x22c>
 800c156:	7821      	ldrb	r1, [r4, #0]
 800c158:	2203      	movs	r2, #3
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7f4 f840 	bl	80001e0 <memchr>
 800c160:	b138      	cbz	r0, 800c172 <_vfiprintf_r+0x176>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	eba0 000a 	sub.w	r0, r0, sl
 800c168:	2240      	movs	r2, #64	@ 0x40
 800c16a:	4082      	lsls	r2, r0
 800c16c:	4313      	orrs	r3, r2
 800c16e:	3401      	adds	r4, #1
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c176:	4829      	ldr	r0, [pc, #164]	@ (800c21c <_vfiprintf_r+0x220>)
 800c178:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c17c:	2206      	movs	r2, #6
 800c17e:	f7f4 f82f 	bl	80001e0 <memchr>
 800c182:	2800      	cmp	r0, #0
 800c184:	d03f      	beq.n	800c206 <_vfiprintf_r+0x20a>
 800c186:	4b26      	ldr	r3, [pc, #152]	@ (800c220 <_vfiprintf_r+0x224>)
 800c188:	bb1b      	cbnz	r3, 800c1d2 <_vfiprintf_r+0x1d6>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	3307      	adds	r3, #7
 800c18e:	f023 0307 	bic.w	r3, r3, #7
 800c192:	3308      	adds	r3, #8
 800c194:	9303      	str	r3, [sp, #12]
 800c196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c198:	443b      	add	r3, r7
 800c19a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c19c:	e76a      	b.n	800c074 <_vfiprintf_r+0x78>
 800c19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	e7a8      	b.n	800c0fa <_vfiprintf_r+0xfe>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	3401      	adds	r4, #1
 800c1ac:	9305      	str	r3, [sp, #20]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f04f 0c0a 	mov.w	ip, #10
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ba:	3a30      	subs	r2, #48	@ 0x30
 800c1bc:	2a09      	cmp	r2, #9
 800c1be:	d903      	bls.n	800c1c8 <_vfiprintf_r+0x1cc>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0c6      	beq.n	800c152 <_vfiprintf_r+0x156>
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	e7c4      	b.n	800c152 <_vfiprintf_r+0x156>
 800c1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e7f0      	b.n	800c1b4 <_vfiprintf_r+0x1b8>
 800c1d2:	ab03      	add	r3, sp, #12
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4b12      	ldr	r3, [pc, #72]	@ (800c224 <_vfiprintf_r+0x228>)
 800c1da:	a904      	add	r1, sp, #16
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7fb fe83 	bl	8007ee8 <_printf_float>
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	1c78      	adds	r0, r7, #1
 800c1e6:	d1d6      	bne.n	800c196 <_vfiprintf_r+0x19a>
 800c1e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ea:	07d9      	lsls	r1, r3, #31
 800c1ec:	d405      	bmi.n	800c1fa <_vfiprintf_r+0x1fe>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_vfiprintf_r+0x1fe>
 800c1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1f6:	f7fc fe1b 	bl	8008e30 <__retarget_lock_release_recursive>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	065b      	lsls	r3, r3, #25
 800c1fe:	f53f af1f 	bmi.w	800c040 <_vfiprintf_r+0x44>
 800c202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c204:	e71e      	b.n	800c044 <_vfiprintf_r+0x48>
 800c206:	ab03      	add	r3, sp, #12
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	462a      	mov	r2, r5
 800c20c:	4b05      	ldr	r3, [pc, #20]	@ (800c224 <_vfiprintf_r+0x228>)
 800c20e:	a904      	add	r1, sp, #16
 800c210:	4630      	mov	r0, r6
 800c212:	f7fc f901 	bl	8008418 <_printf_i>
 800c216:	e7e4      	b.n	800c1e2 <_vfiprintf_r+0x1e6>
 800c218:	0800ca81 	.word	0x0800ca81
 800c21c:	0800ca8b 	.word	0x0800ca8b
 800c220:	08007ee9 	.word	0x08007ee9
 800c224:	0800bfd9 	.word	0x0800bfd9
 800c228:	0800ca87 	.word	0x0800ca87

0800c22c <__swbuf_r>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	460e      	mov	r6, r1
 800c230:	4614      	mov	r4, r2
 800c232:	4605      	mov	r5, r0
 800c234:	b118      	cbz	r0, 800c23e <__swbuf_r+0x12>
 800c236:	6a03      	ldr	r3, [r0, #32]
 800c238:	b90b      	cbnz	r3, 800c23e <__swbuf_r+0x12>
 800c23a:	f7fc fcad 	bl	8008b98 <__sinit>
 800c23e:	69a3      	ldr	r3, [r4, #24]
 800c240:	60a3      	str	r3, [r4, #8]
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	071a      	lsls	r2, r3, #28
 800c246:	d501      	bpl.n	800c24c <__swbuf_r+0x20>
 800c248:	6923      	ldr	r3, [r4, #16]
 800c24a:	b943      	cbnz	r3, 800c25e <__swbuf_r+0x32>
 800c24c:	4621      	mov	r1, r4
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 f82a 	bl	800c2a8 <__swsetup_r>
 800c254:	b118      	cbz	r0, 800c25e <__swbuf_r+0x32>
 800c256:	f04f 37ff 	mov.w	r7, #4294967295
 800c25a:	4638      	mov	r0, r7
 800c25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	6922      	ldr	r2, [r4, #16]
 800c262:	1a98      	subs	r0, r3, r2
 800c264:	6963      	ldr	r3, [r4, #20]
 800c266:	b2f6      	uxtb	r6, r6
 800c268:	4283      	cmp	r3, r0
 800c26a:	4637      	mov	r7, r6
 800c26c:	dc05      	bgt.n	800c27a <__swbuf_r+0x4e>
 800c26e:	4621      	mov	r1, r4
 800c270:	4628      	mov	r0, r5
 800c272:	f7ff fa53 	bl	800b71c <_fflush_r>
 800c276:	2800      	cmp	r0, #0
 800c278:	d1ed      	bne.n	800c256 <__swbuf_r+0x2a>
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	60a3      	str	r3, [r4, #8]
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	6022      	str	r2, [r4, #0]
 800c286:	701e      	strb	r6, [r3, #0]
 800c288:	6962      	ldr	r2, [r4, #20]
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d004      	beq.n	800c29a <__swbuf_r+0x6e>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	07db      	lsls	r3, r3, #31
 800c294:	d5e1      	bpl.n	800c25a <__swbuf_r+0x2e>
 800c296:	2e0a      	cmp	r6, #10
 800c298:	d1df      	bne.n	800c25a <__swbuf_r+0x2e>
 800c29a:	4621      	mov	r1, r4
 800c29c:	4628      	mov	r0, r5
 800c29e:	f7ff fa3d 	bl	800b71c <_fflush_r>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d0d9      	beq.n	800c25a <__swbuf_r+0x2e>
 800c2a6:	e7d6      	b.n	800c256 <__swbuf_r+0x2a>

0800c2a8 <__swsetup_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4b29      	ldr	r3, [pc, #164]	@ (800c350 <__swsetup_r+0xa8>)
 800c2ac:	4605      	mov	r5, r0
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	b118      	cbz	r0, 800c2bc <__swsetup_r+0x14>
 800c2b4:	6a03      	ldr	r3, [r0, #32]
 800c2b6:	b90b      	cbnz	r3, 800c2bc <__swsetup_r+0x14>
 800c2b8:	f7fc fc6e 	bl	8008b98 <__sinit>
 800c2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c0:	0719      	lsls	r1, r3, #28
 800c2c2:	d422      	bmi.n	800c30a <__swsetup_r+0x62>
 800c2c4:	06da      	lsls	r2, r3, #27
 800c2c6:	d407      	bmi.n	800c2d8 <__swsetup_r+0x30>
 800c2c8:	2209      	movs	r2, #9
 800c2ca:	602a      	str	r2, [r5, #0]
 800c2cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2d0:	81a3      	strh	r3, [r4, #12]
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d6:	e033      	b.n	800c340 <__swsetup_r+0x98>
 800c2d8:	0758      	lsls	r0, r3, #29
 800c2da:	d512      	bpl.n	800c302 <__swsetup_r+0x5a>
 800c2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2de:	b141      	cbz	r1, 800c2f2 <__swsetup_r+0x4a>
 800c2e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2e4:	4299      	cmp	r1, r3
 800c2e6:	d002      	beq.n	800c2ee <__swsetup_r+0x46>
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7fd fc05 	bl	8009af8 <_free_r>
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	6063      	str	r3, [r4, #4]
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	f043 0308 	orr.w	r3, r3, #8
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	b94b      	cbnz	r3, 800c322 <__swsetup_r+0x7a>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c318:	d003      	beq.n	800c322 <__swsetup_r+0x7a>
 800c31a:	4621      	mov	r1, r4
 800c31c:	4628      	mov	r0, r5
 800c31e:	f000 f883 	bl	800c428 <__smakebuf_r>
 800c322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c326:	f013 0201 	ands.w	r2, r3, #1
 800c32a:	d00a      	beq.n	800c342 <__swsetup_r+0x9a>
 800c32c:	2200      	movs	r2, #0
 800c32e:	60a2      	str	r2, [r4, #8]
 800c330:	6962      	ldr	r2, [r4, #20]
 800c332:	4252      	negs	r2, r2
 800c334:	61a2      	str	r2, [r4, #24]
 800c336:	6922      	ldr	r2, [r4, #16]
 800c338:	b942      	cbnz	r2, 800c34c <__swsetup_r+0xa4>
 800c33a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c33e:	d1c5      	bne.n	800c2cc <__swsetup_r+0x24>
 800c340:	bd38      	pop	{r3, r4, r5, pc}
 800c342:	0799      	lsls	r1, r3, #30
 800c344:	bf58      	it	pl
 800c346:	6962      	ldrpl	r2, [r4, #20]
 800c348:	60a2      	str	r2, [r4, #8]
 800c34a:	e7f4      	b.n	800c336 <__swsetup_r+0x8e>
 800c34c:	2000      	movs	r0, #0
 800c34e:	e7f7      	b.n	800c340 <__swsetup_r+0x98>
 800c350:	2000002c 	.word	0x2000002c

0800c354 <_raise_r>:
 800c354:	291f      	cmp	r1, #31
 800c356:	b538      	push	{r3, r4, r5, lr}
 800c358:	4605      	mov	r5, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	d904      	bls.n	800c368 <_raise_r+0x14>
 800c35e:	2316      	movs	r3, #22
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	f04f 30ff 	mov.w	r0, #4294967295
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c36a:	b112      	cbz	r2, 800c372 <_raise_r+0x1e>
 800c36c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c370:	b94b      	cbnz	r3, 800c386 <_raise_r+0x32>
 800c372:	4628      	mov	r0, r5
 800c374:	f000 f830 	bl	800c3d8 <_getpid_r>
 800c378:	4622      	mov	r2, r4
 800c37a:	4601      	mov	r1, r0
 800c37c:	4628      	mov	r0, r5
 800c37e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c382:	f000 b817 	b.w	800c3b4 <_kill_r>
 800c386:	2b01      	cmp	r3, #1
 800c388:	d00a      	beq.n	800c3a0 <_raise_r+0x4c>
 800c38a:	1c59      	adds	r1, r3, #1
 800c38c:	d103      	bne.n	800c396 <_raise_r+0x42>
 800c38e:	2316      	movs	r3, #22
 800c390:	6003      	str	r3, [r0, #0]
 800c392:	2001      	movs	r0, #1
 800c394:	e7e7      	b.n	800c366 <_raise_r+0x12>
 800c396:	2100      	movs	r1, #0
 800c398:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c39c:	4620      	mov	r0, r4
 800c39e:	4798      	blx	r3
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e7e0      	b.n	800c366 <_raise_r+0x12>

0800c3a4 <raise>:
 800c3a4:	4b02      	ldr	r3, [pc, #8]	@ (800c3b0 <raise+0xc>)
 800c3a6:	4601      	mov	r1, r0
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	f7ff bfd3 	b.w	800c354 <_raise_r>
 800c3ae:	bf00      	nop
 800c3b0:	2000002c 	.word	0x2000002c

0800c3b4 <_kill_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4d07      	ldr	r5, [pc, #28]	@ (800c3d4 <_kill_r+0x20>)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	4608      	mov	r0, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	602b      	str	r3, [r5, #0]
 800c3c2:	f7f5 fe8f 	bl	80020e4 <_kill>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	d102      	bne.n	800c3d0 <_kill_r+0x1c>
 800c3ca:	682b      	ldr	r3, [r5, #0]
 800c3cc:	b103      	cbz	r3, 800c3d0 <_kill_r+0x1c>
 800c3ce:	6023      	str	r3, [r4, #0]
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20004e78 	.word	0x20004e78

0800c3d8 <_getpid_r>:
 800c3d8:	f7f5 be7c 	b.w	80020d4 <_getpid>

0800c3dc <__swhatbuf_r>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	460c      	mov	r4, r1
 800c3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e4:	2900      	cmp	r1, #0
 800c3e6:	b096      	sub	sp, #88	@ 0x58
 800c3e8:	4615      	mov	r5, r2
 800c3ea:	461e      	mov	r6, r3
 800c3ec:	da0d      	bge.n	800c40a <__swhatbuf_r+0x2e>
 800c3ee:	89a3      	ldrh	r3, [r4, #12]
 800c3f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3f4:	f04f 0100 	mov.w	r1, #0
 800c3f8:	bf14      	ite	ne
 800c3fa:	2340      	movne	r3, #64	@ 0x40
 800c3fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c400:	2000      	movs	r0, #0
 800c402:	6031      	str	r1, [r6, #0]
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	b016      	add	sp, #88	@ 0x58
 800c408:	bd70      	pop	{r4, r5, r6, pc}
 800c40a:	466a      	mov	r2, sp
 800c40c:	f000 f848 	bl	800c4a0 <_fstat_r>
 800c410:	2800      	cmp	r0, #0
 800c412:	dbec      	blt.n	800c3ee <__swhatbuf_r+0x12>
 800c414:	9901      	ldr	r1, [sp, #4]
 800c416:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c41a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c41e:	4259      	negs	r1, r3
 800c420:	4159      	adcs	r1, r3
 800c422:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c426:	e7eb      	b.n	800c400 <__swhatbuf_r+0x24>

0800c428 <__smakebuf_r>:
 800c428:	898b      	ldrh	r3, [r1, #12]
 800c42a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c42c:	079d      	lsls	r5, r3, #30
 800c42e:	4606      	mov	r6, r0
 800c430:	460c      	mov	r4, r1
 800c432:	d507      	bpl.n	800c444 <__smakebuf_r+0x1c>
 800c434:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2301      	movs	r3, #1
 800c43e:	6163      	str	r3, [r4, #20]
 800c440:	b003      	add	sp, #12
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	ab01      	add	r3, sp, #4
 800c446:	466a      	mov	r2, sp
 800c448:	f7ff ffc8 	bl	800c3dc <__swhatbuf_r>
 800c44c:	9f00      	ldr	r7, [sp, #0]
 800c44e:	4605      	mov	r5, r0
 800c450:	4639      	mov	r1, r7
 800c452:	4630      	mov	r0, r6
 800c454:	f7fd fbc4 	bl	8009be0 <_malloc_r>
 800c458:	b948      	cbnz	r0, 800c46e <__smakebuf_r+0x46>
 800c45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45e:	059a      	lsls	r2, r3, #22
 800c460:	d4ee      	bmi.n	800c440 <__smakebuf_r+0x18>
 800c462:	f023 0303 	bic.w	r3, r3, #3
 800c466:	f043 0302 	orr.w	r3, r3, #2
 800c46a:	81a3      	strh	r3, [r4, #12]
 800c46c:	e7e2      	b.n	800c434 <__smakebuf_r+0xc>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	6020      	str	r0, [r4, #0]
 800c472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c47e:	b15b      	cbz	r3, 800c498 <__smakebuf_r+0x70>
 800c480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c484:	4630      	mov	r0, r6
 800c486:	f000 f81d 	bl	800c4c4 <_isatty_r>
 800c48a:	b128      	cbz	r0, 800c498 <__smakebuf_r+0x70>
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	f023 0303 	bic.w	r3, r3, #3
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	81a3      	strh	r3, [r4, #12]
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	431d      	orrs	r5, r3
 800c49c:	81a5      	strh	r5, [r4, #12]
 800c49e:	e7cf      	b.n	800c440 <__smakebuf_r+0x18>

0800c4a0 <_fstat_r>:
 800c4a0:	b538      	push	{r3, r4, r5, lr}
 800c4a2:	4d07      	ldr	r5, [pc, #28]	@ (800c4c0 <_fstat_r+0x20>)
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	4608      	mov	r0, r1
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	f7f5 fe79 	bl	80021a4 <_fstat>
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	d102      	bne.n	800c4bc <_fstat_r+0x1c>
 800c4b6:	682b      	ldr	r3, [r5, #0]
 800c4b8:	b103      	cbz	r3, 800c4bc <_fstat_r+0x1c>
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	bd38      	pop	{r3, r4, r5, pc}
 800c4be:	bf00      	nop
 800c4c0:	20004e78 	.word	0x20004e78

0800c4c4 <_isatty_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d06      	ldr	r5, [pc, #24]	@ (800c4e0 <_isatty_r+0x1c>)
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	602b      	str	r3, [r5, #0]
 800c4d0:	f7f5 fe78 	bl	80021c4 <_isatty>
 800c4d4:	1c43      	adds	r3, r0, #1
 800c4d6:	d102      	bne.n	800c4de <_isatty_r+0x1a>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	b103      	cbz	r3, 800c4de <_isatty_r+0x1a>
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	20004e78 	.word	0x20004e78

0800c4e4 <_init>:
 800c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e6:	bf00      	nop
 800c4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ea:	bc08      	pop	{r3}
 800c4ec:	469e      	mov	lr, r3
 800c4ee:	4770      	bx	lr

0800c4f0 <_fini>:
 800c4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4f2:	bf00      	nop
 800c4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4f6:	bc08      	pop	{r3}
 800c4f8:	469e      	mov	lr, r3
 800c4fa:	4770      	bx	lr
