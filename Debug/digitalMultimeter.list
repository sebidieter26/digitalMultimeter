
digitalMultimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c128  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800c2c8  0800c2c8  0001c2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c868  0800c868  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c868  0800c868  0001c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c870  0800c870  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c870  0800c870  0001c870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c78  200001e8  0800ca60  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e60  0800ca60  00024e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b75b  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b59  00000000  00000000  0003b9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  0003f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013db  00000000  00000000  00040e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005394  00000000  00000000  00042253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c5e7  00000000  00000000  000475e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8414  00000000  00000000  00063bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008188  00000000  00000000  0010bfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c2b0 	.word	0x0800c2b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c2b0 	.word	0x0800c2b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800100a:	4a38      	ldr	r2, [pc, #224]	; (80010ec <HD44780_Init+0xec>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <HD44780_Init+0xf0>)
 8001012:	2208      	movs	r2, #8
 8001014:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <HD44780_Init+0xf4>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800101c:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HD44780_Init+0xec>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d907      	bls.n	8001034 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HD44780_Init+0xf4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <HD44780_Init+0xf4>)
 8001030:	701a      	strb	r2, [r3, #0]
 8001032:	e006      	b.n	8001042 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HD44780_Init+0xf4>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HD44780_Init+0xf4>)
 8001040:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001042:	f000 f985 	bl	8001350 <DelayInit>
  HAL_Delay(50);
 8001046:	2032      	movs	r0, #50	; 0x32
 8001048:	f001 f892 	bl	8002170 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <HD44780_Init+0xf0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f943 	bl	80012dc <ExpanderWrite>
  HAL_Delay(1000);
 8001056:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105a:	f001 f889 	bl	8002170 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800105e:	2030      	movs	r0, #48	; 0x30
 8001060:	f000 f92b 	bl	80012ba <Write4Bits>
  DelayUS(4500);
 8001064:	f241 1094 	movw	r0, #4500	; 0x1194
 8001068:	f000 f99c 	bl	80013a4 <DelayUS>

  Write4Bits(0x03 << 4);
 800106c:	2030      	movs	r0, #48	; 0x30
 800106e:	f000 f924 	bl	80012ba <Write4Bits>
  DelayUS(4500);
 8001072:	f241 1094 	movw	r0, #4500	; 0x1194
 8001076:	f000 f995 	bl	80013a4 <DelayUS>

  Write4Bits(0x03 << 4);
 800107a:	2030      	movs	r0, #48	; 0x30
 800107c:	f000 f91d 	bl	80012ba <Write4Bits>
  DelayUS(4500);
 8001080:	f241 1094 	movw	r0, #4500	; 0x1194
 8001084:	f000 f98e 	bl	80013a4 <DelayUS>

  Write4Bits(0x02 << 4);
 8001088:	2020      	movs	r0, #32
 800108a:	f000 f916 	bl	80012ba <Write4Bits>
  DelayUS(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f000 f988 	bl	80013a4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HD44780_Init+0xf4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8ce 	bl	8001240 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HD44780_Init+0xf8>)
 80010a6:	2204      	movs	r2, #4
 80010a8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010aa:	f000 f875 	bl	8001198 <HD44780_Display>
  HD44780_Clear();
 80010ae:	f000 f82b 	bl	8001108 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HD44780_Init+0xfc>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HD44780_Init+0xfc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f8bc 	bl	8001240 <SendCommand>
  DelayUS(4500);
 80010c8:	f241 1094 	movw	r0, #4500	; 0x1194
 80010cc:	f000 f96a 	bl	80013a4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80010d0:	490b      	ldr	r1, [pc, #44]	; (8001100 <HD44780_Init+0x100>)
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f876 	bl	80011c4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010d8:	490a      	ldr	r1, [pc, #40]	; (8001104 <HD44780_Init+0x104>)
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 f872 	bl	80011c4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80010e0:	f000 f81d 	bl	800111e <HD44780_Home>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000207 	.word	0x20000207
 80010f0:	20000208 	.word	0x20000208
 80010f4:	20000204 	.word	0x20000204
 80010f8:	20000205 	.word	0x20000205
 80010fc:	20000206 	.word	0x20000206
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008

08001108 <HD44780_Clear>:

void HD44780_Clear()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 f897 	bl	8001240 <SendCommand>
  DelayUS(2000);
 8001112:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001116:	f000 f945 	bl	80013a4 <DelayUS>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}

0800111e <HD44780_Home>:

void HD44780_Home()
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001122:	2002      	movs	r0, #2
 8001124:	f000 f88c 	bl	8001240 <SendCommand>
  DelayUS(2000);
 8001128:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800112c:	f000 f93a 	bl	80013a4 <DelayUS>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HD44780_SetCursor+0x5c>)
 8001146:	f107 0408 	add.w	r4, r7, #8
 800114a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HD44780_SetCursor+0x60>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	79ba      	ldrb	r2, [r7, #6]
 8001156:	429a      	cmp	r2, r3
 8001158:	d303      	bcc.n	8001162 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HD44780_SetCursor+0x60>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3318      	adds	r3, #24
 8001168:	443b      	add	r3, r7
 800116a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4413      	add	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117c:	b25b      	sxtb	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f85d 	bl	8001240 <SendCommand>
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	0800c2c8 	.word	0x0800c2c8
 8001194:	20000207 	.word	0x20000207

08001198 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HD44780_Display+0x28>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HD44780_Display+0x28>)
 80011a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HD44780_Display+0x28>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f843 	bl	8001240 <SendCommand>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000205 	.word	0x20000205

080011c4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f82a 	bl	8001240 <SendCommand>
  for (int i=0; i<8; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e009      	b.n	8001206 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f82e 	bl	800125c <SendChar>
  for (int i=0; i<8; i++)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b07      	cmp	r3, #7
 800120a:	ddf2      	ble.n	80011f2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800121e:	e006      	b.n	800122e <HD44780_PrintStr+0x18>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f817 	bl	800125c <SendChar>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f4      	bne.n	8001220 <HD44780_PrintStr+0xa>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f812 	bl	8001278 <Send>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <SendChar>:

static void SendChar(uint8_t ch)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2101      	movs	r1, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f804 	bl	8001278 <Send>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	4313      	orrs	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f80b 	bl	80012ba <Write4Bits>
  Write4Bits((lownib)|mode);
 80012a4:	7bba      	ldrb	r2, [r7, #14]
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f804 	bl	80012ba <Write4Bits>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f808 	bl	80012dc <ExpanderWrite>
  PulseEnable(value);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f820 	bl	8001314 <PulseEnable>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <ExpanderWrite+0x30>)
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80012f2:	f107 020f 	add.w	r2, r7, #15
 80012f6:	230a      	movs	r3, #10
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	214e      	movs	r1, #78	; 0x4e
 80012fe:	4804      	ldr	r0, [pc, #16]	; (8001310 <ExpanderWrite+0x34>)
 8001300:	f001 fee4 	bl	80030cc <HAL_I2C_Master_Transmit>
}
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000208 	.word	0x20000208
 8001310:	2000027c 	.word	0x2000027c

08001314 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffd8 	bl	80012dc <ExpanderWrite>
  DelayUS(20);
 800132c:	2014      	movs	r0, #20
 800132e:	f000 f839 	bl	80013a4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffce 	bl	80012dc <ExpanderWrite>
  DelayUS(20);
 8001340:	2014      	movs	r0, #20
 8001342:	f000 f82f 	bl	80013a4 <DelayUS>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <DelayInit>:

static void DelayInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <DelayInit+0x4c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <DelayInit+0x4c>)
 800135a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800135e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <DelayInit+0x4c>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <DelayInit+0x4c>)
 8001366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <DelayInit+0x50>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <DelayInit+0x50>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <DelayInit+0x50>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <DelayInit+0x50>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <DelayInit+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800138a:	bf00      	nop
  __ASM volatile ("NOP");
 800138c:	bf00      	nop
  __ASM volatile ("NOP");
 800138e:	bf00      	nop
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000edf0 	.word	0xe000edf0
 80013a0:	e0001000 	.word	0xe0001000

080013a4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <DelayUS+0x44>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <DelayUS+0x48>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9a      	lsrs	r2, r3, #18
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <DelayUS+0x4c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <DelayUS+0x4c>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f6      	bhi.n	80013c6 <DelayUS+0x22>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000010 	.word	0x20000010
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	e0001000 	.word	0xe0001000

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f000 fe78 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f854 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 f990 	bl	8001724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001404:	f000 f964 	bl	80016d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001408:	f000 f90a 	bl	8001620 <MX_I2C1_Init>
  MX_ADC1_Init();
 800140c:	f000 f8b6 	bl	800157c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001410:	f000 f934 	bl	800167c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001414:	f003 fbfa 	bl	8004c0c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8001418:	4a15      	ldr	r2, [pc, #84]	; (8001470 <main+0x7c>)
 800141a:	2102      	movs	r1, #2
 800141c:	2010      	movs	r0, #16
 800141e:	f003 fd2e 	bl	8004e7e <osMessageQueueNew>
 8001422:	4603      	mov	r3, r0
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <main+0x80>)
 8001426:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of voltMeter */
  voltMeterHandle = osThreadNew(StartVoltMeter, NULL, &voltMeter_attributes);
 8001428:	4a13      	ldr	r2, [pc, #76]	; (8001478 <main+0x84>)
 800142a:	2100      	movs	r1, #0
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <main+0x88>)
 800142e:	f003 fc37 	bl	8004ca0 <osThreadNew>
 8001432:	4603      	mov	r3, r0
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <main+0x8c>)
 8001436:	6013      	str	r3, [r2, #0]

  /* creation of amperMeter */
  amperMeterHandle = osThreadNew(StartAmperMeter, NULL, &amperMeter_attributes);
 8001438:	4a12      	ldr	r2, [pc, #72]	; (8001484 <main+0x90>)
 800143a:	2100      	movs	r1, #0
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <main+0x94>)
 800143e:	f003 fc2f 	bl	8004ca0 <osThreadNew>
 8001442:	4603      	mov	r3, r0
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <main+0x98>)
 8001446:	6013      	str	r3, [r2, #0]

  /* creation of ohmmeter */
  ohmmeterHandle = osThreadNew(StartOhmMeter, NULL, &ohmmeter_attributes);
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <main+0x9c>)
 800144a:	2100      	movs	r1, #0
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <main+0xa0>)
 800144e:	f003 fc27 	bl	8004ca0 <osThreadNew>
 8001452:	4603      	mov	r3, r0
 8001454:	4a10      	ldr	r2, [pc, #64]	; (8001498 <main+0xa4>)
 8001456:	6013      	str	r3, [r2, #0]

  /* creation of defaultPrint */
  defaultPrintHandle = osThreadNew(StartPrint, NULL, &defaultPrint_attributes);
 8001458:	4a10      	ldr	r2, [pc, #64]	; (800149c <main+0xa8>)
 800145a:	2100      	movs	r1, #0
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <main+0xac>)
 800145e:	f003 fc1f 	bl	8004ca0 <osThreadNew>
 8001462:	4603      	mov	r3, r0
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <main+0xb0>)
 8001466:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001468:	f003 fbf4 	bl	8004c54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800146c:	e7fe      	b.n	800146c <main+0x78>
 800146e:	bf00      	nop
 8001470:	0800c410 	.word	0x0800c410
 8001474:	20000370 	.word	0x20000370
 8001478:	0800c380 	.word	0x0800c380
 800147c:	080018b9 	.word	0x080018b9
 8001480:	20000360 	.word	0x20000360
 8001484:	0800c3a4 	.word	0x0800c3a4
 8001488:	08001991 	.word	0x08001991
 800148c:	20000364 	.word	0x20000364
 8001490:	0800c3c8 	.word	0x0800c3c8
 8001494:	08001a7d 	.word	0x08001a7d
 8001498:	20000368 	.word	0x20000368
 800149c:	0800c3ec 	.word	0x0800c3ec
 80014a0:	08001a8d 	.word	0x08001a8d
 80014a4:	2000036c 	.word	0x2000036c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 fabf 	bl	8008a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <SystemClock_Config+0xcc>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <SystemClock_Config+0xd0>)
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001520:	2348      	movs	r3, #72	; 0x48
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001528:	2307      	movs	r3, #7
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f002 f925 	bl	8003780 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800153c:	f000 fae9 	bl	8001b12 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fb87 	bl	8003c70 <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001568:	f000 fad3 	bl	8001b12 <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	; 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_ADC1_Init+0x98>)
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <MX_ADC1_Init+0x9c>)
 8001592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <MX_ADC1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_ADC1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_ADC1_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_ADC1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_ADC1_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_ADC1_Init+0x98>)
 80015bc:	4a17      	ldr	r2, [pc, #92]	; (800161c <MX_ADC1_Init+0xa0>)
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_ADC1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_ADC1_Init+0x98>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_ADC1_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_ADC1_Init+0x98>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015da:	480e      	ldr	r0, [pc, #56]	; (8001614 <MX_ADC1_Init+0x98>)
 80015dc:	f000 fdec 	bl	80021b8 <HAL_ADC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f000 fa94 	bl	8001b12 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_ADC1_Init+0x98>)
 80015fc:	f000 ff6c 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001606:	f000 fa84 	bl	8001b12 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000234 	.word	0x20000234
 8001618:	40012000 	.word	0x40012000
 800161c:	0f000001 	.word	0x0f000001

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f001 fbf1 	bl	8002e44 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fa53 	bl	8001b12 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000027c 	.word	0x2000027c
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <MX_USART1_UART_Init+0x50>)
 8001684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800168c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f002 ffa2 	bl	80045fc <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016be:	f000 fa28 	bl	8001b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002d0 	.word	0x200002d0
 80016cc:	40011000 	.word	0x40011000

080016d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_USART2_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART2_UART_Init+0x4c>)
 8001708:	f002 ff78 	bl	80045fc <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 f9fe 	bl	8001b12 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000318 	.word	0x20000318
 8001720:	40004400 	.word	0x40004400

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a3b      	ldr	r2, [pc, #236]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <MX_GPIO_Init+0x10c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b35      	ldr	r3, [pc, #212]	; (8001830 <MX_GPIO_Init+0x10c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a34      	ldr	r2, [pc, #208]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b32      	ldr	r3, [pc, #200]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a2d      	ldr	r2, [pc, #180]	; (8001830 <MX_GPIO_Init+0x10c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_GPIO_Init+0x10c>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_GPIO_Init+0x10c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	4821      	ldr	r0, [pc, #132]	; (8001834 <MX_GPIO_Init+0x110>)
 80017b0:	f001 fb16 	bl	8002de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	481b      	ldr	r0, [pc, #108]	; (8001838 <MX_GPIO_Init+0x114>)
 80017cc:	f001 f984 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017d0:	2320      	movs	r3, #32
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_GPIO_Init+0x110>)
 80017e8:	f001 f976 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Amper_Button_Pin Ohm_Button_Pin Volt_Button_Pin */
  GPIO_InitStruct.Pin = Amper_Button_Pin|Ohm_Button_Pin|Volt_Button_Pin;
 80017ec:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_GPIO_Init+0x110>)
 8001804:	f001 f968 	bl	8002ad8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2105      	movs	r1, #5
 800180c:	2017      	movs	r0, #23
 800180e:	f001 f939 	bl	8002a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001812:	2017      	movs	r0, #23
 8001814:	f001 f952 	bl	8002abc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2105      	movs	r1, #5
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f001 f931 	bl	8002a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001822:	2028      	movs	r0, #40	; 0x28
 8001824:	f001 f94a 	bl	8002abc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020800 	.word	0x40020800

0800183c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800184c:	d105      	bne.n	800185a <HAL_GPIO_EXTI_Callback+0x1e>
		osThreadResume(defaultPrintHandle);
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fad7 	bl	8004e06 <osThreadResume>
	}
	else if(GPIO_Pin == Ohm_Button_Pin){
		osThreadResume(ohmmeterHandle);
	}
	else(osThreadResume(defaultPrintHandle));
	}
 8001858:	e020      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == Volt_Button_Pin){
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001860:	d105      	bne.n	800186e <HAL_GPIO_EXTI_Callback+0x32>
		osThreadResume(voltMeterHandle);
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 facd 	bl	8004e06 <osThreadResume>
	}
 800186c:	e016      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == Amper_Button_Pin){
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_EXTI_Callback+0x44>
		osThreadResume(amperMeterHandle);
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_GPIO_EXTI_Callback+0x70>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fac4 	bl	8004e06 <osThreadResume>
	}
 800187e:	e00d      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x60>
	else if(GPIO_Pin == Ohm_Button_Pin){
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	d105      	bne.n	8001892 <HAL_GPIO_EXTI_Callback+0x56>
		osThreadResume(ohmmeterHandle);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fabb 	bl	8004e06 <osThreadResume>
	}
 8001890:	e004      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x60>
	else(osThreadResume(defaultPrintHandle));
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fab5 	bl	8004e06 <osThreadResume>
	}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000036c 	.word	0x2000036c
 80018a8:	20000360 	.word	0x20000360
 80018ac:	20000364 	.word	0x20000364
 80018b0:	20000368 	.word	0x20000368
 80018b4:	00000000 	.word	0x00000000

080018b8 <StartVoltMeter>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartVoltMeter */
void StartVoltMeter(void *argument)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(amperMeterHandle);
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <StartVoltMeter+0xb8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fa7d 	bl	8004dc4 <osThreadSuspend>
	osThreadSuspend(ohmmeterHandle);
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <StartVoltMeter+0xbc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fa78 	bl	8004dc4 <osThreadSuspend>
	osThreadSuspend(defaultPrintHandle);
 80018d4:	4b28      	ldr	r3, [pc, #160]	; (8001978 <StartVoltMeter+0xc0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fa73 	bl	8004dc4 <osThreadSuspend>

	HD44780_Init(2);
 80018de:	2002      	movs	r0, #2
 80018e0:	f7ff fb8e 	bl	8001000 <HD44780_Init>
	HD44780_Clear();
 80018e4:	f7ff fc10 	bl	8001108 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80018e8:	2100      	movs	r1, #0
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fc22 	bl	8001134 <HD44780_SetCursor>
	HD44780_PrintStr("VOLTMETER");
 80018f0:	4822      	ldr	r0, [pc, #136]	; (800197c <StartVoltMeter+0xc4>)
 80018f2:	f7ff fc90 	bl	8001216 <HD44780_PrintStr>

    HAL_ADC_Start(&hadc1);
 80018f6:	4822      	ldr	r0, [pc, #136]	; (8001980 <StartVoltMeter+0xc8>)
 80018f8:	f000 fca2 	bl	8002240 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80018fc:	2164      	movs	r1, #100	; 0x64
 80018fe:	4820      	ldr	r0, [pc, #128]	; (8001980 <StartVoltMeter+0xc8>)
 8001900:	f000 fd52 	bl	80023a8 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8001904:	481e      	ldr	r0, [pc, #120]	; (8001980 <StartVoltMeter+0xc8>)
 8001906:	f000 fdda 	bl	80024be <HAL_ADC_GetValue>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <StartVoltMeter+0xcc>)
 8001910:	801a      	strh	r2, [r3, #0]
    float voltage = raw*(3.3/4096);
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <StartVoltMeter+0xcc>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe0c 	bl	8000534 <__aeabi_i2d>
 800191c:	a312      	add	r3, pc, #72	; (adr r3, 8001968 <StartVoltMeter+0xb0>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe71 	bl	8000608 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f963 	bl	8000bf8 <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	60fb      	str	r3, [r7, #12]
    snprintf(voltageStr, sizeof(voltageStr), "%.2f V", voltage);
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7fe fe0e 	bl	8000558 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	e9cd 2300 	strd	r2, r3, [sp]
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <StartVoltMeter+0xd0>)
 8001946:	2114      	movs	r1, #20
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <StartVoltMeter+0xd4>)
 800194a:	f006 ffdf 	bl	800890c <sniprintf>
    HD44780_SetCursor(0,1);
 800194e:	2101      	movs	r1, #1
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fbef 	bl	8001134 <HD44780_SetCursor>
    HD44780_PrintStr(voltageStr);
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <StartVoltMeter+0xd4>)
 8001958:	f7ff fc5d 	bl	8001216 <HD44780_PrintStr>
    osDelay(100);
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f003 fa73 	bl	8004e48 <osDelay>
  {
 8001962:	e7ad      	b.n	80018c0 <StartVoltMeter+0x8>
 8001964:	f3af 8000 	nop.w
 8001968:	66666666 	.word	0x66666666
 800196c:	3f4a6666 	.word	0x3f4a6666
 8001970:	20000364 	.word	0x20000364
 8001974:	20000368 	.word	0x20000368
 8001978:	2000036c 	.word	0x2000036c
 800197c:	0800c318 	.word	0x0800c318
 8001980:	20000234 	.word	0x20000234
 8001984:	2000020a 	.word	0x2000020a
 8001988:	0800c324 	.word	0x0800c324
 800198c:	2000020c 	.word	0x2000020c

08001990 <StartAmperMeter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAmperMeter */
void StartAmperMeter(void *argument)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af02      	add	r7, sp, #8
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAmperMeter */
  /* Infinite loop */
  for(;;)
  {
	osThreadSuspend(voltMeterHandle);
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <StartAmperMeter+0xc8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fa11 	bl	8004dc4 <osThreadSuspend>
	osThreadSuspend(ohmmeterHandle);
 80019a2:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <StartAmperMeter+0xcc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fa0c 	bl	8004dc4 <osThreadSuspend>
	osThreadSuspend(defaultPrintHandle);
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <StartAmperMeter+0xd0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 fa07 	bl	8004dc4 <osThreadSuspend>

	HD44780_Init(2);
 80019b6:	2002      	movs	r0, #2
 80019b8:	f7ff fb22 	bl	8001000 <HD44780_Init>
	HD44780_Clear();
 80019bc:	f7ff fba4 	bl	8001108 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fbb6 	bl	8001134 <HD44780_SetCursor>
	HD44780_PrintStr("AMPERMETER");
 80019c8:	4826      	ldr	r0, [pc, #152]	; (8001a64 <StartAmperMeter+0xd4>)
 80019ca:	f7ff fc24 	bl	8001216 <HD44780_PrintStr>

	HAL_ADC_Start(&hadc1);
 80019ce:	4826      	ldr	r0, [pc, #152]	; (8001a68 <StartAmperMeter+0xd8>)
 80019d0:	f000 fc36 	bl	8002240 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,100);
 80019d4:	2164      	movs	r1, #100	; 0x64
 80019d6:	4824      	ldr	r0, [pc, #144]	; (8001a68 <StartAmperMeter+0xd8>)
 80019d8:	f000 fce6 	bl	80023a8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80019dc:	4822      	ldr	r0, [pc, #136]	; (8001a68 <StartAmperMeter+0xd8>)
 80019de:	f000 fd6e 	bl	80024be <HAL_ADC_GetValue>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <StartAmperMeter+0xdc>)
 80019e8:	801a      	strh	r2, [r3, #0]
	float voltage = raw*(3.3/4096);
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <StartAmperMeter+0xdc>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fda0 	bl	8000534 <__aeabi_i2d>
 80019f4:	a316      	add	r3, pc, #88	; (adr r3, 8001a50 <StartAmperMeter+0xc0>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fe05 	bl	8000608 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f8f7 	bl	8000bf8 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60fb      	str	r3, [r7, #12]
	float ampers = voltage/220;
 8001a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a12:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001a70 <StartAmperMeter+0xe0>
 8001a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1a:	edc7 7a02 	vstr	s15, [r7, #8]
	snprintf(amperStr, sizeof(amperStr), "%.2f A", ampers);
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f7fe fd9a 	bl	8000558 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9cd 2300 	strd	r2, r3, [sp]
 8001a2c:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <StartAmperMeter+0xe4>)
 8001a2e:	2114      	movs	r1, #20
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <StartAmperMeter+0xe8>)
 8001a32:	f006 ff6b 	bl	800890c <sniprintf>
	HD44780_SetCursor(0,1);
 8001a36:	2101      	movs	r1, #1
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fb7b 	bl	8001134 <HD44780_SetCursor>
	HD44780_PrintStr(amperStr);
 8001a3e:	480e      	ldr	r0, [pc, #56]	; (8001a78 <StartAmperMeter+0xe8>)
 8001a40:	f7ff fbe9 	bl	8001216 <HD44780_PrintStr>
    osDelay(100);
 8001a44:	2064      	movs	r0, #100	; 0x64
 8001a46:	f003 f9ff 	bl	8004e48 <osDelay>
  {
 8001a4a:	e7a5      	b.n	8001998 <StartAmperMeter+0x8>
 8001a4c:	f3af 8000 	nop.w
 8001a50:	66666666 	.word	0x66666666
 8001a54:	3f4a6666 	.word	0x3f4a6666
 8001a58:	20000360 	.word	0x20000360
 8001a5c:	20000368 	.word	0x20000368
 8001a60:	2000036c 	.word	0x2000036c
 8001a64:	0800c32c 	.word	0x0800c32c
 8001a68:	20000234 	.word	0x20000234
 8001a6c:	2000020a 	.word	0x2000020a
 8001a70:	435c0000 	.word	0x435c0000
 8001a74:	0800c338 	.word	0x0800c338
 8001a78:	20000220 	.word	0x20000220

08001a7c <StartOhmMeter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOhmMeter */
void StartOhmMeter(void *argument)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOhmMeter */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f003 f9df 	bl	8004e48 <osDelay>
 8001a8a:	e7fb      	b.n	8001a84 <StartOhmMeter+0x8>

08001a8c <StartPrint>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrint */
void StartPrint(void *argument)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrint */

  /* Infinite loop */
  for(;;)
  {
	  osThreadSuspend(voltMeterHandle);
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <StartPrint+0x54>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 f993 	bl	8004dc4 <osThreadSuspend>
	  osThreadSuspend(amperMeterHandle);
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <StartPrint+0x58>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 f98e 	bl	8004dc4 <osThreadSuspend>
	  osThreadSuspend(ohmmeterHandle);
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <StartPrint+0x5c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 f989 	bl	8004dc4 <osThreadSuspend>

	  HD44780_Init(2);
 8001ab2:	2002      	movs	r0, #2
 8001ab4:	f7ff faa4 	bl	8001000 <HD44780_Init>
	  HD44780_Clear();
 8001ab8:	f7ff fb26 	bl	8001108 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fb38 	bl	8001134 <HD44780_SetCursor>
	  HD44780_PrintStr("/////DIGITAL////");
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <StartPrint+0x60>)
 8001ac6:	f7ff fba6 	bl	8001216 <HD44780_PrintStr>
	  HD44780_SetCursor(0,1);
 8001aca:	2101      	movs	r1, #1
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fb31 	bl	8001134 <HD44780_SetCursor>
	  HD44780_PrintStr("///MULTIMETER///");
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <StartPrint+0x64>)
 8001ad4:	f7ff fb9f 	bl	8001216 <HD44780_PrintStr>
	  osDelay(100);
 8001ad8:	2064      	movs	r0, #100	; 0x64
 8001ada:	f003 f9b5 	bl	8004e48 <osDelay>
	  osThreadSuspend(voltMeterHandle);
 8001ade:	e7d9      	b.n	8001a94 <StartPrint+0x8>
 8001ae0:	20000360 	.word	0x20000360
 8001ae4:	20000364 	.word	0x20000364
 8001ae8:	20000368 	.word	0x20000368
 8001aec:	0800c340 	.word	0x0800c340
 8001af0:	0800c354 	.word	0x0800c354

08001af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b06:	f000 fb13 	bl	8002130 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b16:	b672      	cpsid	i
}
 8001b18:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <Error_Handler+0x8>

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_MspInit+0x54>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_MspInit+0x54>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x54>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_MspInit+0x54>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_MspInit+0x54>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_MspInit+0x54>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	f06f 0001 	mvn.w	r0, #1
 8001b62:	f000 ff8f 	bl	8002a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_ADC_MspInit+0x7c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d127      	bne.n	8001be6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_ADC_MspInit+0x80>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_ADC_MspInit+0x84>)
 8001be2:	f000 ff79 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <HAL_I2C_MspInit+0x84>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d12c      	bne.n	8001c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c40:	2312      	movs	r3, #18
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	480c      	ldr	r0, [pc, #48]	; (8001c88 <HAL_I2C_MspInit+0x8c>)
 8001c58:	f000 ff3e 	bl	8002ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_I2C_MspInit+0x88>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40005400 	.word	0x40005400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <HAL_UART_MspInit+0xe8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12d      	bne.n	8001d0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a30      	ldr	r2, [pc, #192]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	481e      	ldr	r0, [pc, #120]	; (8001d7c <HAL_UART_MspInit+0xf0>)
 8001d04:	f000 fee8 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d08:	e030      	b.n	8001d6c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_UART_MspInit+0xf4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d12b      	bne.n	8001d6c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_UART_MspInit+0xec>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_UART_MspInit+0xf0>)
 8001d68:	f000 feb6 	bl	8002ad8 <HAL_GPIO_Init>
}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000
 8001d80:	40004400 	.word	0x40004400

08001d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_InitTick+0xe8>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <HAL_InitTick+0xe8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_InitTick+0xe8>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db0:	f107 0210 	add.w	r2, r7, #16
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 f978 	bl	80040b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dca:	f002 f949 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8001dce:	6378      	str	r0, [r7, #52]	; 0x34
 8001dd0:	e004      	b.n	8001ddc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dd2:	f002 f945 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_InitTick+0xec>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	0c9b      	lsrs	r3, r3, #18
 8001de6:	3b01      	subs	r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_InitTick+0xf0>)
 8001dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_InitTick+0xf0>)
 8001df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001dfa:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <HAL_InitTick+0xf0>)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_InitTick+0xf0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_InitTick+0xf0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_InitTick+0xf0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001e12:	4818      	ldr	r0, [pc, #96]	; (8001e74 <HAL_InitTick+0xf0>)
 8001e14:	f002 f97e 	bl	8004114 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11b      	bne.n	8001e5e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001e26:	4813      	ldr	r0, [pc, #76]	; (8001e74 <HAL_InitTick+0xf0>)
 8001e28:	f002 f9ce 	bl	80041c8 <HAL_TIM_Base_Start_IT>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d111      	bne.n	8001e5e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e3a:	201c      	movs	r0, #28
 8001e3c:	f000 fe3e 	bl	8002abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	d808      	bhi.n	8001e58 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001e46:	2200      	movs	r2, #0
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f000 fe1a 	bl	8002a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e50:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_InitTick+0xf4>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e002      	b.n	8001e5e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3738      	adds	r7, #56	; 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	20000374 	.word	0x20000374
 8001e78:	20000014 	.word	0x20000014

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Amper_Button_Pin);
 8001eac:	2040      	movs	r0, #64	; 0x40
 8001eae:	f000 ffb1 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ohm_Button_Pin);
 8001eb2:	2080      	movs	r0, #128	; 0x80
 8001eb4:	f000 ffae 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Volt_Button_Pin);
 8001eb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ebc:	f000 ffaa 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM2_IRQHandler+0x10>)
 8001eca:	f002 f9df 	bl	800428c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000374 	.word	0x20000374

08001ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001edc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ee0:	f000 ff98 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_kill>:

int _kill(int pid, int sig)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f02:	f006 fded 	bl	8008ae0 <__errno>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2216      	movs	r2, #22
 8001f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_exit>:

void _exit (int status)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ffe7 	bl	8001ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f2a:	e7fe      	b.n	8001f2a <_exit+0x12>

08001f2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00a      	b.n	8001f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f3e:	f3af 8000 	nop.w
 8001f42:	4601      	mov	r1, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf0      	blt.n	8001f3e <_read+0x12>
  }

  return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e009      	b.n	8001f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	60ba      	str	r2, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf1      	blt.n	8001f78 <_write+0x12>
  }
  return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_close>:

int _close(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_isatty>:

int _isatty(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f006 fd52 	bl	8008ae0 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20018000 	.word	0x20018000
 8002068:	00000400 	.word	0x00000400
 800206c:	200003bc 	.word	0x200003bc
 8002070:	20004e60 	.word	0x20004e60

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800209c:	f7ff ffea 	bl	8002074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a2:	490d      	ldr	r1, [pc, #52]	; (80020d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b8:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020c6:	f006 fd11 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ca:	f7ff f993 	bl	80013f4 <main>
  bx  lr    
 80020ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80020dc:	0800c878 	.word	0x0800c878
  ldr r2, =_sbss
 80020e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80020e4:	20004e60 	.word	0x20004e60

080020e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_Init+0x40>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_Init+0x40>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x40>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 fcaa 	bl	8002a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f7ff fe32 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fcfc 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000018 	.word	0x20000018
 8002154:	200003c0 	.word	0x200003c0

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200003c0 	.word	0x200003c0

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000018 	.word	0x20000018

080021b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e033      	b.n	8002236 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fccc 	bl	8001b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021fe:	f023 0302 	bic.w	r3, r3, #2
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa86 	bl	800271c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	f043 0201 	orr.w	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
 8002226:	e001      	b.n	800222c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_Start+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e097      	b.n	800238a <HAL_ADC_Start+0x14a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d018      	beq.n	80022a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002280:	4b45      	ldr	r3, [pc, #276]	; (8002398 <HAL_ADC_Start+0x158>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a45      	ldr	r2, [pc, #276]	; (800239c <HAL_ADC_Start+0x15c>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0c9a      	lsrs	r2, r3, #18
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002294:	e002      	b.n	800229c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f9      	bne.n	8002296 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d15f      	bne.n	8002370 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	f023 0206 	bic.w	r2, r3, #6
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	645a      	str	r2, [r3, #68]	; 0x44
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800230c:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_ADC_Start+0x160>)
 800230e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002318:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d129      	bne.n	8002388 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e020      	b.n	8002388 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_ADC_Start+0x164>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11b      	bne.n	8002388 <HAL_ADC_Start+0x148>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d114      	bne.n	8002388 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	e00b      	b.n	8002388 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f043 0210 	orr.w	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000010 	.word	0x20000010
 800239c:	431bde83 	.word	0x431bde83
 80023a0:	40012300 	.word	0x40012300
 80023a4:	40012000 	.word	0x40012000

080023a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d113      	bne.n	80023ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d4:	d10b      	bne.n	80023ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e063      	b.n	80024b6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ee:	f7ff feb3 	bl	8002158 <HAL_GetTick>
 80023f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023f4:	e021      	b.n	800243a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d01d      	beq.n	800243a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_ADC_PollForConversion+0x6c>
 8002404:	f7ff fea8 	bl	8002158 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d212      	bcs.n	800243a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b02      	cmp	r3, #2
 8002420:	d00b      	beq.n	800243a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e03d      	b.n	80024b6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	d1d6      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0212 	mvn.w	r2, #18
 8002450:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d123      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11f      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800248c:	2b00      	cmp	r3, #0
 800248e:	d111      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e105      	b.n	8002700 <HAL_ADC_ConfigChannel+0x228>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b09      	cmp	r3, #9
 8002502:	d925      	bls.n	8002550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	3b1e      	subs	r3, #30
 800251a:	2207      	movs	r2, #7
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43da      	mvns	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	400a      	ands	r2, r1
 8002528:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68d9      	ldr	r1, [r3, #12]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	4603      	mov	r3, r0
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4403      	add	r3, r0
 8002542:	3b1e      	subs	r3, #30
 8002544:	409a      	lsls	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	e022      	b.n	8002596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6919      	ldr	r1, [r3, #16]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	2207      	movs	r2, #7
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	4603      	mov	r3, r0
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4403      	add	r3, r0
 800258c:	409a      	lsls	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d824      	bhi.n	80025e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b05      	subs	r3, #5
 80025b0:	221f      	movs	r2, #31
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	400a      	ands	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b05      	subs	r3, #5
 80025da:	fa00 f203 	lsl.w	r2, r0, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
 80025e6:	e04c      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d824      	bhi.n	800263a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b23      	subs	r3, #35	; 0x23
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43da      	mvns	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	400a      	ands	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3b23      	subs	r3, #35	; 0x23
 800262c:	fa00 f203 	lsl.w	r2, r0, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
 8002638:	e023      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b41      	subs	r3, #65	; 0x41
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b41      	subs	r3, #65	; 0x41
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_ADC_ConfigChannel+0x234>)
 8002684:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_ADC_ConfigChannel+0x238>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b12      	cmp	r3, #18
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_ADC_ConfigChannel+0x238>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d123      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x21e>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d003      	beq.n	80026be <HAL_ADC_ConfigChannel+0x1e6>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b11      	cmp	r3, #17
 80026bc:	d11b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d111      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_ADC_ConfigChannel+0x23c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_ADC_ConfigChannel+0x240>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9a      	lsrs	r2, r3, #18
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40012300 	.word	0x40012300
 8002710:	40012000 	.word	0x40012000
 8002714:	20000010 	.word	0x20000010
 8002718:	431bde83 	.word	0x431bde83

0800271c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <ADC_Init+0x1f0>)
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	021a      	lsls	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	4a58      	ldr	r2, [pc, #352]	; (8002910 <ADC_Init+0x1f4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	e00f      	b.n	800281a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002818:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0202 	bic.w	r2, r2, #2
 8002828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7e1b      	ldrb	r3, [r3, #24]
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002856:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002866:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	3b01      	subs	r3, #1
 8002874:	035a      	lsls	r2, r3, #13
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e007      	b.n	8002890 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	051a      	lsls	r2, r3, #20
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028d2:	025a      	lsls	r2, r3, #9
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	029a      	lsls	r2, r3, #10
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40012300 	.word	0x40012300
 8002910:	0f000001 	.word	0x0f000001

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff4c 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a96:	f7ff ff61 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff ffb1 	bl	8002a08 <NVIC_EncodePriority>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff80 	bl	80029b4 <__NVIC_SetPriority>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff54 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e159      	b.n	8002da8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8148 	bne.w	8002da2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80a2 	beq.w	8002da2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a56      	ldr	r2, [pc, #344]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_GPIO_Init+0x2e8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_GPIO_Init+0x2ec>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_GPIO_Init+0x2f0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x202>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x2f4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x1fe>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a47      	ldr	r2, [pc, #284]	; (8002dd0 <HAL_GPIO_Init+0x2f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x1fa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a46      	ldr	r2, [pc, #280]	; (8002dd4 <HAL_GPIO_Init+0x2fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x1f6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <HAL_GPIO_Init+0x300>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x1f2>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e008      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e006      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e004      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x204>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	f002 0203 	and.w	r2, r2, #3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4093      	lsls	r3, r2
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cec:	4935      	ldr	r1, [pc, #212]	; (8002dc4 <HAL_GPIO_Init+0x2ec>)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d72:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	f67f aea2 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40013800 	.word	0x40013800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400
 8002dd0:	40020800 	.word	0x40020800
 8002dd4:	40020c00 	.word	0x40020c00
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
 8002dec:	4613      	mov	r3, r2
 8002dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df0:	787b      	ldrb	r3, [r7, #1]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dfc:	e003      	b.n	8002e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	041a      	lsls	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	619a      	str	r2, [r3, #24]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e2a:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fd02 	bl	800183c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40013c00 	.word	0x40013c00

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12b      	b.n	80030ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe fec6 	bl	8001bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f001 f8da 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d807      	bhi.n	8002ec8 <HAL_I2C_Init+0x84>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_I2C_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_I2C_Init+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e7      	b.n	80030ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a78      	ldr	r2, [pc, #480]	; (80030c4 <HAL_I2C_Init+0x280>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <HAL_I2C_Init+0xd4>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	e009      	b.n	8002f2c <HAL_I2C_Init+0xe8>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_I2C_Init+0x284>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	495c      	ldr	r1, [pc, #368]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d819      	bhi.n	8002f80 <HAL_I2C_Init+0x13c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_I2C_Init+0x138>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e59      	subs	r1, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	e051      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	e04f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_I2C_Init+0x168>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Init+0x18e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x196>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_I2C_Init+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e58      	subs	r0, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6911      	ldr	r1, [r2, #16]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	003d08ff 	.word	0x003d08ff
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff f83a 	bl	8002158 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 80e0 	bne.w	80032b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	4970      	ldr	r1, [pc, #448]	; (80032c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f964 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	e0d3      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_I2C_Master_Transmit+0x50>
 8003118:	2302      	movs	r3, #2
 800311a:	e0cc      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d007      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2221      	movs	r2, #33	; 0x21
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f89c 	bl	80032c8 <I2C_MasterRequestWrite>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e08d      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031b0:	e066      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa22 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d107      	bne.n	80031da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06b      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d11b      	bne.n	8003254 <HAL_I2C_Master_Transmit+0x188>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6a39      	ldr	r1, [r7, #32]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fa19 	bl	8003690 <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01a      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d194      	bne.n	80031b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	00100002 	.word	0x00100002
 80032c4:	ffff0000 	.word	0xffff0000

080032c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d006      	beq.n	80032f2 <I2C_MasterRequestWrite+0x2a>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d003      	beq.n	80032f2 <I2C_MasterRequestWrite+0x2a>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f0:	d108      	bne.n	8003304 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e00b      	b.n	800331c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b12      	cmp	r3, #18
 800330a:	d107      	bne.n	800331c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f84f 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003342:	d103      	bne.n	800334c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e035      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003358:	d108      	bne.n	800336c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003368:	611a      	str	r2, [r3, #16]
 800336a:	e01b      	b.n	80033a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	11db      	asrs	r3, r3, #7
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0306 	and.w	r3, r3, #6
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f063 030f 	orn	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	490e      	ldr	r1, [pc, #56]	; (80033c4 <I2C_MasterRequestWrite+0xfc>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f898 	bl	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e010      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4907      	ldr	r1, [pc, #28]	; (80033c8 <I2C_MasterRequestWrite+0x100>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f888 	bl	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00010008 	.word	0x00010008
 80033c8:	00010002 	.word	0x00010002

080033cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033dc:	e048      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d044      	beq.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe feb7 	bl	8002158 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d139      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10d      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	43da      	mvns	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	e00c      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d116      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e023      	b.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10d      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0xca>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	e00c      	b.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d093      	beq.n	80033de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ce:	e071      	b.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d123      	bne.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e067      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d041      	beq.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe fe12 	bl	8002158 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d136      	bne.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10c      	bne.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e00b      	b.n	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e021      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10c      	bne.n	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e00b      	b.n	80035f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f af6d 	bne.w	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360c:	e034      	b.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f886 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e034      	b.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d028      	beq.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fd97 	bl	8002158 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11d      	bne.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e007      	b.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d1c3      	bne.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369c:	e034      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f83e 	bl	8003720 <I2C_IsAcknowledgeFailed>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d028      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fd4f 	bl	8002158 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d1c3      	bne.n	800369e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d11b      	bne.n	8003770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e267      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037aa:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d112      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d10b      	bne.n	80037dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	4b7e      	ldr	r3, [pc, #504]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05b      	beq.n	8003888 <HAL_RCC_OscConfig+0x108>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d157      	bne.n	8003888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e242      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d106      	bne.n	80037f4 <HAL_RCC_OscConfig+0x74>
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a75      	ldr	r2, [pc, #468]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e01d      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x98>
 80037fe:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6f      	ldr	r2, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	4b6d      	ldr	r3, [pc, #436]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6c      	ldr	r2, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0xb0>
 8003818:	4b69      	ldr	r3, [pc, #420]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a68      	ldr	r2, [pc, #416]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4b66      	ldr	r3, [pc, #408]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fe fc8e 	bl	8002158 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7fe fc8a 	bl	8002158 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e207      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0xc0>
 800385e:	e014      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fc7a 	bl	8002158 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fc76 	bl	8002158 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1f3      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	4b51      	ldr	r3, [pc, #324]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0xe8>
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d063      	beq.n	800395e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1c7      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4937      	ldr	r1, [pc, #220]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b34      	ldr	r3, [pc, #208]	; (80039c4 <HAL_RCC_OscConfig+0x244>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fc2f 	bl	8002158 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe fc2b 	bl	8002158 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e1a8      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4925      	ldr	r1, [pc, #148]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_OscConfig+0x244>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fc0e 	bl	8002158 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003940:	f7fe fc0a 	bl	8002158 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e187      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d036      	beq.n	80039d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_RCC_OscConfig+0x248>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe fbee 	bl	8002158 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003980:	f7fe fbea 	bl	8002158 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e167      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_OscConfig+0x240>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x200>
 800399e:	e01b      	b.n	80039d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_OscConfig+0x248>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fbd7 	bl	8002158 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e00e      	b.n	80039cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe fbd3 	bl	8002158 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d907      	bls.n	80039cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e150      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ea      	bne.n	80039ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8097 	beq.w	8003b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	4b7d      	ldr	r3, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	4a7c      	ldr	r2, [pc, #496]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
 8003a06:	4b7a      	ldr	r3, [pc, #488]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b77      	ldr	r3, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d118      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a22:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a73      	ldr	r2, [pc, #460]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fb93 	bl	8002158 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fe fb8f 	bl	8002158 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e10c      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x474>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2ea>
 8003a5c:	4b64      	ldr	r3, [pc, #400]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a63      	ldr	r2, [pc, #396]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
 8003a68:	e01c      	b.n	8003aa4 <HAL_RCC_OscConfig+0x324>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10c      	bne.n	8003a8c <HAL_RCC_OscConfig+0x30c>
 8003a72:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a5e      	ldr	r2, [pc, #376]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a5b      	ldr	r2, [pc, #364]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	e00b      	b.n	8003aa4 <HAL_RCC_OscConfig+0x324>
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
 8003a98:	4b55      	ldr	r3, [pc, #340]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a54      	ldr	r2, [pc, #336]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0304 	bic.w	r3, r3, #4
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fe fb54 	bl	8002158 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fe fb50 	bl	8002158 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0cb      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x334>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7fe fb3e 	bl	8002158 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae0:	f7fe fb3a 	bl	8002158 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0b5      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af6:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	4a38      	ldr	r2, [pc, #224]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a1 	beq.w	8003c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d05c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d141      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe fb0e 	bl	8002158 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fe fb0a 	bl	8002158 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e087      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	019b      	lsls	r3, r3, #6
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	3b01      	subs	r3, #1
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	491b      	ldr	r1, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fe fae3 	bl	8002158 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fe fadf 	bl	8002158 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e05c      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x416>
 8003bb4:	e054      	b.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_RCC_OscConfig+0x478>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fe facc 	bl	8002158 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe fac8 	bl	8002158 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e045      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x444>
 8003be2:	e03d      	b.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e038      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x4ec>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d028      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d121      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	085b      	lsrs	r3, r3, #1
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0cc      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b68      	ldr	r3, [pc, #416]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90c      	bls.n	8003cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d044      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e06f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e067      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4e:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4934      	ldr	r1, [pc, #208]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fe f9fa 	bl	8002158 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe f9f6 	bl	8002158 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e04f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d20c      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd ffb4 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	0800c428 	.word	0x0800c428
 8003e34:	20000010 	.word	0x20000010
 8003e38:	20000014 	.word	0x20000014

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e40:	b094      	sub	sp, #80	; 0x50
 8003e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	647b      	str	r3, [r7, #68]	; 0x44
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e54:	4b79      	ldr	r3, [pc, #484]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x40>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	f200 80e1 	bhi.w	8004028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x34>
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e6e:	e0db      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b73      	ldr	r3, [pc, #460]	; (8004040 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e74:	e0db      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e76:	4b73      	ldr	r3, [pc, #460]	; (8004044 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e7a:	e0d8      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4b6f      	ldr	r3, [pc, #444]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e86:	4b6d      	ldr	r3, [pc, #436]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e92:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	2200      	movs	r2, #0
 8003e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	6139      	str	r1, [r7, #16]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4651      	mov	r1, sl
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	4651      	mov	r1, sl
 8003ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb18 0303 	adds.w	r3, r8, r3
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	eb49 0303 	adc.w	r3, r9, r3
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	024b      	lsls	r3, r1, #9
 8003f32:	4621      	mov	r1, r4
 8003f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f38:	4621      	mov	r1, r4
 8003f3a:	024a      	lsls	r2, r1, #9
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f42:	2200      	movs	r2, #0
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f4c:	f7fc fea4 	bl	8000c98 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f58:	e058      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b38      	ldr	r3, [pc, #224]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	4611      	mov	r1, r2
 8003f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	f04f 0000 	mov.w	r0, #0
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	0159      	lsls	r1, r3, #5
 8003f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f86:	0150      	lsls	r0, r2, #5
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fac:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	00eb      	lsls	r3, r5, #3
 8003fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc2:	00e2      	lsls	r2, r4, #3
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	4643      	mov	r3, r8
 8003fca:	18e3      	adds	r3, r4, r3
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	464b      	mov	r3, r9
 8003fd0:	eb45 0303 	adc.w	r3, r5, r3
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	028b      	lsls	r3, r1, #10
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fec:	4621      	mov	r1, r4
 8003fee:	028a      	lsls	r2, r1, #10
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	61fa      	str	r2, [r7, #28]
 8003ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004000:	f7fc fe4a 	bl	8000c98 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_GetSysClockFreq+0x200>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	3301      	adds	r3, #1
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800401c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetSysClockFreq+0x204>)
 800402a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004030:	4618      	mov	r0, r3
 8004032:	3750      	adds	r7, #80	; 0x50
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	00f42400 	.word	0x00f42400
 8004044:	007a1200 	.word	0x007a1200

08004048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <HAL_RCC_GetHCLKFreq+0x14>)
 800404e:	681b      	ldr	r3, [r3, #0]
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000010 	.word	0x20000010

08004060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004064:	f7ff fff0 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0a9b      	lsrs	r3, r3, #10
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	0800c438 	.word	0x0800c438

08004088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800408c:	f7ff ffdc 	bl	8004048 <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	0b5b      	lsrs	r3, r3, #13
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4903      	ldr	r1, [pc, #12]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40023800 	.word	0x40023800
 80040ac:	0800c438 	.word	0x0800c438

080040b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	220f      	movs	r2, #15
 80040be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0203 	and.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040e4:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_GetClockConfig+0x5c>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	08db      	lsrs	r3, r3, #3
 80040ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_RCC_GetClockConfig+0x60>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	40023c00 	.word	0x40023c00

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e041      	b.n	80041aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f839 	bl	80041b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 f9b2 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e044      	b.n	800426a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_TIM_Base_Start_IT+0xb0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x6c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d013      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x6c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1a      	ldr	r2, [pc, #104]	; (800427c <HAL_TIM_Base_Start_IT+0xb4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x6c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a19      	ldr	r2, [pc, #100]	; (8004280 <HAL_TIM_Base_Start_IT+0xb8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x6c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_TIM_Base_Start_IT+0xbc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x6c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a16      	ldr	r2, [pc, #88]	; (8004288 <HAL_TIM_Base_Start_IT+0xc0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b06      	cmp	r3, #6
 8004244:	d010      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	e007      	b.n	8004268 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40014000 	.word	0x40014000

0800428c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0202 	mvn.w	r2, #2
 80042c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8d2 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f8c4 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f8d5 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0204 	mvn.w	r2, #4
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f8ac 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f89e 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f8af 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d020      	beq.n	8004388 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0208 	mvn.w	r2, #8
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f886 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f878 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f889 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d020      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f860 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f852 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f863 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0201 	mvn.w	r2, #1
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fb7e 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f8e6 	bl	80045e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f834 	bl	80044a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0220 	mvn.w	r2, #32
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8b8 	bl	80045d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <TIM_Base_SetConfig+0xfc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00f      	beq.n	80044f4 <TIM_Base_SetConfig+0x38>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d00b      	beq.n	80044f4 <TIM_Base_SetConfig+0x38>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a37      	ldr	r2, [pc, #220]	; (80045bc <TIM_Base_SetConfig+0x100>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_Base_SetConfig+0x38>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a36      	ldr	r2, [pc, #216]	; (80045c0 <TIM_Base_SetConfig+0x104>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_Base_SetConfig+0x38>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a35      	ldr	r2, [pc, #212]	; (80045c4 <TIM_Base_SetConfig+0x108>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d108      	bne.n	8004506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <TIM_Base_SetConfig+0xfc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01b      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d017      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a28      	ldr	r2, [pc, #160]	; (80045bc <TIM_Base_SetConfig+0x100>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a27      	ldr	r2, [pc, #156]	; (80045c0 <TIM_Base_SetConfig+0x104>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00f      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <TIM_Base_SetConfig+0x108>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00b      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <TIM_Base_SetConfig+0x10c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a24      	ldr	r2, [pc, #144]	; (80045cc <TIM_Base_SetConfig+0x110>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <TIM_Base_SetConfig+0xfc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d103      	bne.n	800458c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]
  }
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e042      	b.n	8004694 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd fb32 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f82b 	bl	800469c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a0:	b0c0      	sub	sp, #256	; 0x100
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	ea40 0301 	orr.w	r3, r0, r1
 80046c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	431a      	orrs	r2, r3
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046f4:	f021 010c 	bic.w	r1, r1, #12
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004702:	430b      	orrs	r3, r1
 8004704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004716:	6999      	ldr	r1, [r3, #24]
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	ea40 0301 	orr.w	r3, r0, r1
 8004722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <UART_SetConfig+0x2cc>)
 800472c:	429a      	cmp	r2, r3
 800472e:	d005      	beq.n	800473c <UART_SetConfig+0xa0>
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b8d      	ldr	r3, [pc, #564]	; (800496c <UART_SetConfig+0x2d0>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d104      	bne.n	8004746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800473c:	f7ff fca4 	bl	8004088 <HAL_RCC_GetPCLK2Freq>
 8004740:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004744:	e003      	b.n	800474e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004746:	f7ff fc8b 	bl	8004060 <HAL_RCC_GetPCLK1Freq>
 800474a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004758:	f040 810c 	bne.w	8004974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800475c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004760:	2200      	movs	r2, #0
 8004762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004766:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800476a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800476e:	4622      	mov	r2, r4
 8004770:	462b      	mov	r3, r5
 8004772:	1891      	adds	r1, r2, r2
 8004774:	65b9      	str	r1, [r7, #88]	; 0x58
 8004776:	415b      	adcs	r3, r3
 8004778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800477a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800477e:	4621      	mov	r1, r4
 8004780:	eb12 0801 	adds.w	r8, r2, r1
 8004784:	4629      	mov	r1, r5
 8004786:	eb43 0901 	adc.w	r9, r3, r1
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479e:	4690      	mov	r8, r2
 80047a0:	4699      	mov	r9, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	eb18 0303 	adds.w	r3, r8, r3
 80047a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ac:	462b      	mov	r3, r5
 80047ae:	eb49 0303 	adc.w	r3, r9, r3
 80047b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ca:	460b      	mov	r3, r1
 80047cc:	18db      	adds	r3, r3, r3
 80047ce:	653b      	str	r3, [r7, #80]	; 0x50
 80047d0:	4613      	mov	r3, r2
 80047d2:	eb42 0303 	adc.w	r3, r2, r3
 80047d6:	657b      	str	r3, [r7, #84]	; 0x54
 80047d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047e0:	f7fc fa5a 	bl	8000c98 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4b61      	ldr	r3, [pc, #388]	; (8004970 <UART_SetConfig+0x2d4>)
 80047ea:	fba3 2302 	umull	r2, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	011c      	lsls	r4, r3, #4
 80047f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	64b9      	str	r1, [r7, #72]	; 0x48
 800480c:	415b      	adcs	r3, r3
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004814:	4641      	mov	r1, r8
 8004816:	eb12 0a01 	adds.w	sl, r2, r1
 800481a:	4649      	mov	r1, r9
 800481c:	eb43 0b01 	adc.w	fp, r3, r1
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800482c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004834:	4692      	mov	sl, r2
 8004836:	469b      	mov	fp, r3
 8004838:	4643      	mov	r3, r8
 800483a:	eb1a 0303 	adds.w	r3, sl, r3
 800483e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004842:	464b      	mov	r3, r9
 8004844:	eb4b 0303 	adc.w	r3, fp, r3
 8004848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800485c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004860:	460b      	mov	r3, r1
 8004862:	18db      	adds	r3, r3, r3
 8004864:	643b      	str	r3, [r7, #64]	; 0x40
 8004866:	4613      	mov	r3, r2
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
 800486e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004876:	f7fc fa0f 	bl	8000c98 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4611      	mov	r1, r2
 8004880:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <UART_SetConfig+0x2d4>)
 8004882:	fba3 2301 	umull	r2, r3, r3, r1
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2264      	movs	r2, #100	; 0x64
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	1acb      	subs	r3, r1, r3
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004896:	4b36      	ldr	r3, [pc, #216]	; (8004970 <UART_SetConfig+0x2d4>)
 8004898:	fba3 2302 	umull	r2, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048a4:	441c      	add	r4, r3
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	63b9      	str	r1, [r7, #56]	; 0x38
 80048c0:	415b      	adcs	r3, r3
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c8:	4641      	mov	r1, r8
 80048ca:	1851      	adds	r1, r2, r1
 80048cc:	6339      	str	r1, [r7, #48]	; 0x30
 80048ce:	4649      	mov	r1, r9
 80048d0:	414b      	adcs	r3, r1
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048e0:	4659      	mov	r1, fp
 80048e2:	00cb      	lsls	r3, r1, #3
 80048e4:	4651      	mov	r1, sl
 80048e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ea:	4651      	mov	r1, sl
 80048ec:	00ca      	lsls	r2, r1, #3
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	4603      	mov	r3, r0
 80048f4:	4642      	mov	r2, r8
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004914:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800491c:	460b      	mov	r3, r1
 800491e:	18db      	adds	r3, r3, r3
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	4613      	mov	r3, r2
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800492e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004932:	f7fc f9b1 	bl	8000c98 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <UART_SetConfig+0x2d4>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a08      	ldr	r2, [pc, #32]	; (8004970 <UART_SetConfig+0x2d4>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f003 0207 	and.w	r2, r3, #7
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4422      	add	r2, r4
 8004962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004964:	e106      	b.n	8004b74 <UART_SetConfig+0x4d8>
 8004966:	bf00      	nop
 8004968:	40011000 	.word	0x40011000
 800496c:	40011400 	.word	0x40011400
 8004970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800497e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004986:	4642      	mov	r2, r8
 8004988:	464b      	mov	r3, r9
 800498a:	1891      	adds	r1, r2, r2
 800498c:	6239      	str	r1, [r7, #32]
 800498e:	415b      	adcs	r3, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004996:	4641      	mov	r1, r8
 8004998:	1854      	adds	r4, r2, r1
 800499a:	4649      	mov	r1, r9
 800499c:	eb43 0501 	adc.w	r5, r3, r1
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	00eb      	lsls	r3, r5, #3
 80049aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ae:	00e2      	lsls	r2, r4, #3
 80049b0:	4614      	mov	r4, r2
 80049b2:	461d      	mov	r5, r3
 80049b4:	4643      	mov	r3, r8
 80049b6:	18e3      	adds	r3, r4, r3
 80049b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049bc:	464b      	mov	r3, r9
 80049be:	eb45 0303 	adc.w	r3, r5, r3
 80049c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049e2:	4629      	mov	r1, r5
 80049e4:	008b      	lsls	r3, r1, #2
 80049e6:	4621      	mov	r1, r4
 80049e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049ec:	4621      	mov	r1, r4
 80049ee:	008a      	lsls	r2, r1, #2
 80049f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049f4:	f7fc f950 	bl	8000c98 <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4b60      	ldr	r3, [pc, #384]	; (8004b80 <UART_SetConfig+0x4e4>)
 80049fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	011c      	lsls	r4, r3, #4
 8004a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a18:	4642      	mov	r2, r8
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	1891      	adds	r1, r2, r2
 8004a1e:	61b9      	str	r1, [r7, #24]
 8004a20:	415b      	adcs	r3, r3
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a28:	4641      	mov	r1, r8
 8004a2a:	1851      	adds	r1, r2, r1
 8004a2c:	6139      	str	r1, [r7, #16]
 8004a2e:	4649      	mov	r1, r9
 8004a30:	414b      	adcs	r3, r1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a40:	4659      	mov	r1, fp
 8004a42:	00cb      	lsls	r3, r1, #3
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	00ca      	lsls	r2, r1, #3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	4619      	mov	r1, r3
 8004a52:	4603      	mov	r3, r0
 8004a54:	4642      	mov	r2, r8
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a5c:	464b      	mov	r3, r9
 8004a5e:	460a      	mov	r2, r1
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a80:	4649      	mov	r1, r9
 8004a82:	008b      	lsls	r3, r1, #2
 8004a84:	4641      	mov	r1, r8
 8004a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	008a      	lsls	r2, r1, #2
 8004a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a92:	f7fc f901 	bl	8000c98 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <UART_SetConfig+0x4e4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	; 0x32
 8004ab0:	4a33      	ldr	r2, [pc, #204]	; (8004b80 <UART_SetConfig+0x4e4>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004abc:	441c      	add	r4, r3
 8004abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ac6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b0e:	464b      	mov	r3, r9
 8004b10:	460a      	mov	r2, r1
 8004b12:	eb42 0303 	adc.w	r3, r2, r3
 8004b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	663b      	str	r3, [r7, #96]	; 0x60
 8004b22:	667a      	str	r2, [r7, #100]	; 0x64
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b30:	4649      	mov	r1, r9
 8004b32:	008b      	lsls	r3, r1, #2
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	008a      	lsls	r2, r1, #2
 8004b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b42:	f7fc f8a9 	bl	8000c98 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <UART_SetConfig+0x4e4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	; 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	3332      	adds	r3, #50	; 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <UART_SetConfig+0x4e4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 020f 	and.w	r2, r3, #15
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
}
 8004b74:	bf00      	nop
 8004b76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b80:	51eb851f 	.word	0x51eb851f

08004b84 <__NVIC_SetPriority>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db0a      	blt.n	8004bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	490c      	ldr	r1, [pc, #48]	; (8004bd0 <__NVIC_SetPriority+0x4c>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bac:	e00a      	b.n	8004bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <__NVIC_SetPriority+0x50>)
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	761a      	strb	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000e100 	.word	0xe000e100
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <SysTick_Handler+0x1c>)
 8004bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004be0:	f001 fef2 	bl	80069c8 <xTaskGetSchedulerState>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bea:	f002 fcdd 	bl	80075a8 <xPortSysTickHandler>
  }
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000e010 	.word	0xe000e010

08004bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	f06f 0004 	mvn.w	r0, #4
 8004c02:	f7ff ffbf 	bl	8004b84 <__NVIC_SetPriority>
#endif
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c12:	f3ef 8305 	mrs	r3, IPSR
 8004c16:	603b      	str	r3, [r7, #0]
  return(result);
 8004c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c1e:	f06f 0305 	mvn.w	r3, #5
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	e00c      	b.n	8004c40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <osKernelInitialize+0x44>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d105      	bne.n	8004c3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c2e:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <osKernelInitialize+0x44>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	607b      	str	r3, [r7, #4]
 8004c38:	e002      	b.n	8004c40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c40:	687b      	ldr	r3, [r7, #4]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	200003c4 	.word	0x200003c4

08004c54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c66:	f06f 0305 	mvn.w	r3, #5
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e010      	b.n	8004c90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <osKernelStart+0x48>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d109      	bne.n	8004c8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c76:	f7ff ffbf 	bl	8004bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c7a:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <osKernelStart+0x48>)
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c80:	f001 fa5a 	bl	8006138 <vTaskStartScheduler>
      stat = osOK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	e002      	b.n	8004c90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200003c4 	.word	0x200003c4

08004ca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	; 0x38
 8004ca4:	af04      	add	r7, sp, #16
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb0:	f3ef 8305 	mrs	r3, IPSR
 8004cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d17e      	bne.n	8004dba <osThreadNew+0x11a>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d07b      	beq.n	8004dba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cc6:	2318      	movs	r3, #24
 8004cc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cce:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d045      	beq.n	8004d66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <osThreadNew+0x48>
        name = attr->name;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <osThreadNew+0x6e>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b38      	cmp	r3, #56	; 0x38
 8004d00:	d805      	bhi.n	8004d0e <osThreadNew+0x6e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <osThreadNew+0x72>
        return (NULL);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e054      	b.n	8004dbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <osThreadNew+0xa8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b5b      	cmp	r3, #91	; 0x5b
 8004d30:	d90a      	bls.n	8004d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <osThreadNew+0xa8>
        mem = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e010      	b.n	8004d6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <osThreadNew+0xca>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <osThreadNew+0xca>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <osThreadNew+0xca>
          mem = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e001      	b.n	8004d6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d110      	bne.n	8004d92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d78:	9202      	str	r2, [sp, #8]
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a3a      	ldr	r2, [r7, #32]
 8004d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fefa 	bl	8005b80 <xTaskCreateStatic>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	e013      	b.n	8004dba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d110      	bne.n	8004dba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 ff45 	bl	8005c3a <xTaskCreate>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <osThreadNew+0x11a>
            hTask = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dba:	693b      	ldr	r3, [r7, #16]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd0:	f3ef 8305 	mrs	r3, IPSR
 8004dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004ddc:	f06f 0305 	mvn.w	r3, #5
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e00b      	b.n	8004dfc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8004dea:	f06f 0303 	mvn.w	r3, #3
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e004      	b.n	8004dfc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004df6:	6938      	ldr	r0, [r7, #16]
 8004df8:	f001 f898 	bl	8005f2c <vTaskSuspend>
  }

  return (stat);
 8004dfc:	697b      	ldr	r3, [r7, #20]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e12:	f3ef 8305 	mrs	r3, IPSR
 8004e16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e18:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <osThreadResume+0x20>
    stat = osErrorISR;
 8004e1e:	f06f 0305 	mvn.w	r3, #5
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e00b      	b.n	8004e3e <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d103      	bne.n	8004e34 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8004e2c:	f06f 0303 	mvn.w	r3, #3
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e004      	b.n	8004e3e <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8004e38:	6938      	ldr	r0, [r7, #16]
 8004e3a:	f001 f91f 	bl	800607c <vTaskResume>
  }

  return (stat);
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e50:	f3ef 8305 	mrs	r3, IPSR
 8004e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <osDelay+0x1c>
    stat = osErrorISR;
 8004e5c:	f06f 0305 	mvn.w	r3, #5
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e007      	b.n	8004e74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 f828 	bl	8005ec4 <vTaskDelay>
    }
  }

  return (stat);
 8004e74:	68fb      	ldr	r3, [r7, #12]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08a      	sub	sp, #40	; 0x28
 8004e82:	af02      	add	r7, sp, #8
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8e:	f3ef 8305 	mrs	r3, IPSR
 8004e92:	613b      	str	r3, [r7, #16]
  return(result);
 8004e94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d15f      	bne.n	8004f5a <osMessageQueueNew+0xdc>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05c      	beq.n	8004f5a <osMessageQueueNew+0xdc>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d059      	beq.n	8004f5a <osMessageQueueNew+0xdc>
    mem = -1;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d029      	beq.n	8004f06 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d012      	beq.n	8004ee0 <osMessageQueueNew+0x62>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b4f      	cmp	r3, #79	; 0x4f
 8004ec0:	d90e      	bls.n	8004ee0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <osMessageQueueNew+0x62>
        mem = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e014      	b.n	8004f0a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d110      	bne.n	8004f0a <osMessageQueueNew+0x8c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10c      	bne.n	8004f0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d108      	bne.n	8004f0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <osMessageQueueNew+0x8c>
          mem = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e001      	b.n	8004f0a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10b      	bne.n	8004f28 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	9100      	str	r1, [sp, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f970 	bl	8005204 <xQueueGenericCreateStatic>
 8004f24:	61f8      	str	r0, [r7, #28]
 8004f26:	e008      	b.n	8004f3a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004f2e:	2200      	movs	r2, #0
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f9de 	bl	80052f4 <xQueueGenericCreate>
 8004f38:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e001      	b.n	8004f52 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	69f8      	ldr	r0, [r7, #28]
 8004f56:	f000 fdb5 	bl	8005ac4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a07      	ldr	r2, [pc, #28]	; (8004f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a06      	ldr	r2, [pc, #24]	; (8004f94 <vApplicationGetIdleTaskMemory+0x30>)
 8004f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	601a      	str	r2, [r3, #0]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	200003c8 	.word	0x200003c8
 8004f94:	20000424 	.word	0x20000424

08004f98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <vApplicationGetTimerTaskMemory+0x30>)
 8004fae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	20000624 	.word	0x20000624
 8004fc8:	20000680 	.word	0x20000680

08004fcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f103 0208 	add.w	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f103 0208 	add.w	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f103 0208 	add.w	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005026:	b480      	push	{r7}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d103      	bne.n	800508e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e00c      	b.n	80050a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3308      	adds	r3, #8
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e002      	b.n	800509c <vListInsert+0x2e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d2f6      	bcs.n	8005096 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6892      	ldr	r2, [r2, #8]
 80050f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6852      	ldr	r2, [r2, #4]
 8005100:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	d103      	bne.n	8005114 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800515e:	f002 f991 	bl	8007484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	441a      	add	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	3b01      	subs	r3, #1
 8005190:	68f9      	ldr	r1, [r7, #12]
 8005192:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22ff      	movs	r2, #255	; 0xff
 80051a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	; 0xff
 80051aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d114      	bne.n	80051de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3310      	adds	r3, #16
 80051c0:	4618      	mov	r0, r3
 80051c2:	f001 fa43 	bl	800664c <xTaskRemoveFromEventList>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d012      	beq.n	80051f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <xQueueGenericReset+0xcc>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	e009      	b.n	80051f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3310      	adds	r3, #16
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fef2 	bl	8004fcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3324      	adds	r3, #36	; 0x24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff feed 	bl	8004fcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051f2:	f002 f977 	bl	80074e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051f6:	2301      	movs	r3, #1
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	; 0x38
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <xQueueGenericCreateStatic+0x52>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <xQueueGenericCreateStatic+0x56>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <xQueueGenericCreateStatic+0x58>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	623b      	str	r3, [r7, #32]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <xQueueGenericCreateStatic+0x7e>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <xQueueGenericCreateStatic+0x82>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <xQueueGenericCreateStatic+0x84>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61fb      	str	r3, [r7, #28]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052a2:	2350      	movs	r3, #80	; 0x50
 80052a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d00a      	beq.n	80052c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	61bb      	str	r3, [r7, #24]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	4613      	mov	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f83f 	bl	8005368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3730      	adds	r7, #48	; 0x30
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	613b      	str	r3, [r7, #16]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3350      	adds	r3, #80	; 0x50
 800532c:	4618      	mov	r0, r3
 800532e:	f002 f9cb 	bl	80076c8 <pvPortMalloc>
 8005332:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d011      	beq.n	800535e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3350      	adds	r3, #80	; 0x50
 8005342:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f805 	bl	8005368 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800535e:	69bb      	ldr	r3, [r7, #24]
	}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e002      	b.n	800538a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005396:	2101      	movs	r1, #1
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f7ff fecb 	bl	8005134 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08e      	sub	sp, #56	; 0x38
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053be:	2300      	movs	r3, #0
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xQueueGenericSend+0x32>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <xQueueGenericSend+0x40>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <xQueueGenericSend+0x44>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <xQueueGenericSend+0x46>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <xQueueGenericSend+0x60>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d103      	bne.n	800541e <xQueueGenericSend+0x6e>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <xQueueGenericSend+0x72>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericSend+0x74>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGenericSend+0x8e>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800543e:	f001 fac3 	bl	80069c8 <xTaskGetSchedulerState>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <xQueueGenericSend+0x9e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <xQueueGenericSend+0xa2>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <xQueueGenericSend+0xa4>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueGenericSend+0xbe>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	61fb      	str	r3, [r7, #28]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800546e:	f002 f809 	bl	8007484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <xQueueGenericSend+0xd4>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d129      	bne.n	80054d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800548a:	f000 fa0b 	bl	80058a4 <prvCopyDataToQueue>
 800548e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	3324      	adds	r3, #36	; 0x24
 800549c:	4618      	mov	r0, r3
 800549e:	f001 f8d5 	bl	800664c <xTaskRemoveFromEventList>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054a8:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <xQueueGenericSend+0x1f8>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	e00a      	b.n	80054d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <xQueueGenericSend+0x1f8>)
 80054c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054d0:	f002 f808 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e063      	b.n	80055a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054de:	f002 f801 	bl	80074e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e05c      	b.n	80055a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ec:	f107 0314 	add.w	r3, r7, #20
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 f90f 	bl	8006714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054f6:	2301      	movs	r3, #1
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054fa:	f001 fff3 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054fe:	f000 fe81 	bl	8006204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005502:	f001 ffbf 	bl	8007484 <vPortEnterCritical>
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800550c:	b25b      	sxtb	r3, r3
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d103      	bne.n	800551c <xQueueGenericSend+0x16c>
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005522:	b25b      	sxtb	r3, r3
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d103      	bne.n	8005532 <xQueueGenericSend+0x182>
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005532:	f001 ffd7 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005536:	1d3a      	adds	r2, r7, #4
 8005538:	f107 0314 	add.w	r3, r7, #20
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f001 f8fe 	bl	8006740 <xTaskCheckForTimeOut>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d124      	bne.n	8005594 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800554a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554c:	f000 faa2 	bl	8005a94 <prvIsQueueFull>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d018      	beq.n	8005588 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	3310      	adds	r3, #16
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f824 	bl	80065ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005566:	f000 fa2d 	bl	80059c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800556a:	f000 fe59 	bl	8006220 <xTaskResumeAll>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	f47f af7c 	bne.w	800546e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <xQueueGenericSend+0x1f8>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	e772      	b.n	800546e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800558a:	f000 fa1b 	bl	80059c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800558e:	f000 fe47 	bl	8006220 <xTaskResumeAll>
 8005592:	e76c      	b.n	800546e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005596:	f000 fa15 	bl	80059c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800559a:	f000 fe41 	bl	8006220 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800559e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3738      	adds	r7, #56	; 0x38
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b090      	sub	sp, #64	; 0x40
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055d6:	bf00      	nop
 80055d8:	e7fe      	b.n	80055d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <xQueueGenericSendFromISR+0x3c>
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <xQueueGenericSendFromISR+0x40>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <xQueueGenericSendFromISR+0x42>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d103      	bne.n	8005616 <xQueueGenericSendFromISR+0x6a>
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <xQueueGenericSendFromISR+0x6e>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericSendFromISR+0x70>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	623b      	str	r3, [r7, #32]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005636:	f002 f807 	bl	8007648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800563a:	f3ef 8211 	mrs	r2, BASEPRI
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61fa      	str	r2, [r7, #28]
 8005650:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005652:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	429a      	cmp	r2, r3
 8005660:	d302      	bcc.n	8005668 <xQueueGenericSendFromISR+0xbc>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d12f      	bne.n	80056c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800567e:	f000 f911 	bl	80058a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005682:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d112      	bne.n	80056b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d016      	beq.n	80056c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	4618      	mov	r0, r3
 800569a:	f000 ffd7 	bl	800664c <xTaskRemoveFromEventList>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e007      	b.n	80056c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056b6:	3301      	adds	r3, #1
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	b25a      	sxtb	r2, r3
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056c2:	2301      	movs	r3, #1
 80056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056c6:	e001      	b.n	80056cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3740      	adds	r7, #64	; 0x40
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08c      	sub	sp, #48	; 0x30
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <xQueueReceive+0x30>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	623b      	str	r3, [r7, #32]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <xQueueReceive+0x3e>
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <xQueueReceive+0x42>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <xQueueReceive+0x44>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xQueueReceive+0x5e>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	61fb      	str	r3, [r7, #28]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005742:	f001 f941 	bl	80069c8 <xTaskGetSchedulerState>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <xQueueReceive+0x6e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <xQueueReceive+0x72>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <xQueueReceive+0x74>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueReceive+0x8e>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	61bb      	str	r3, [r7, #24]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005772:	f001 fe87 	bl	8007484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01f      	beq.n	80057c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005786:	f000 f8f7 	bl	8005978 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00f      	beq.n	80057ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	3310      	adds	r3, #16
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 ff54 	bl	800664c <xTaskRemoveFromEventList>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d007      	beq.n	80057ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057aa:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <xQueueReceive+0x1bc>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057ba:	f001 fe93 	bl	80074e4 <vPortExitCritical>
				return pdPASS;
 80057be:	2301      	movs	r3, #1
 80057c0:	e069      	b.n	8005896 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c8:	f001 fe8c 	bl	80074e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e062      	b.n	8005896 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d6:	f107 0310 	add.w	r3, r7, #16
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 ff9a 	bl	8006714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e4:	f001 fe7e 	bl	80074e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e8:	f000 fd0c 	bl	8006204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ec:	f001 fe4a 	bl	8007484 <vPortEnterCritical>
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f6:	b25b      	sxtb	r3, r3
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d103      	bne.n	8005806 <xQueueReceive+0x122>
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580c:	b25b      	sxtb	r3, r3
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d103      	bne.n	800581c <xQueueReceive+0x138>
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800581c:	f001 fe62 	bl	80074e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005820:	1d3a      	adds	r2, r7, #4
 8005822:	f107 0310 	add.w	r3, r7, #16
 8005826:	4611      	mov	r1, r2
 8005828:	4618      	mov	r0, r3
 800582a:	f000 ff89 	bl	8006740 <xTaskCheckForTimeOut>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d123      	bne.n	800587c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005836:	f000 f917 	bl	8005a68 <prvIsQueueEmpty>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	3324      	adds	r3, #36	; 0x24
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4611      	mov	r1, r2
 8005848:	4618      	mov	r0, r3
 800584a:	f000 feaf 	bl	80065ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800584e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005850:	f000 f8b8 	bl	80059c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005854:	f000 fce4 	bl	8006220 <xTaskResumeAll>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d189      	bne.n	8005772 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <xQueueReceive+0x1bc>)
 8005860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	e780      	b.n	8005772 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005872:	f000 f8a7 	bl	80059c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005876:	f000 fcd3 	bl	8006220 <xTaskResumeAll>
 800587a:	e77a      	b.n	8005772 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800587c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587e:	f000 f8a1 	bl	80059c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005882:	f000 fccd 	bl	8006220 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005888:	f000 f8ee 	bl	8005a68 <prvIsQueueEmpty>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	f43f af6f 	beq.w	8005772 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005894:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005896:	4618      	mov	r0, r3
 8005898:	3730      	adds	r7, #48	; 0x30
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10d      	bne.n	80058de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d14d      	bne.n	8005966 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 f898 	bl	8006a04 <xTaskPriorityDisinherit>
 80058d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	e043      	b.n	8005966 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d119      	bne.n	8005918 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6858      	ldr	r0, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	461a      	mov	r2, r3
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	f003 f923 	bl	8008b3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	d32b      	bcc.n	8005966 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	e026      	b.n	8005966 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68d8      	ldr	r0, [r3, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	461a      	mov	r2, r3
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	f003 f909 	bl	8008b3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	425b      	negs	r3, r3
 8005932:	441a      	add	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d207      	bcs.n	8005954 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	425b      	negs	r3, r3
 800594e:	441a      	add	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d105      	bne.n	8005966 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3b01      	subs	r3, #1
 8005964:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800596e:	697b      	ldr	r3, [r7, #20]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	441a      	add	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d303      	bcc.n	80059ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68d9      	ldr	r1, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	461a      	mov	r2, r3
 80059b6:	6838      	ldr	r0, [r7, #0]
 80059b8:	f003 f8bf 	bl	8008b3a <memcpy>
	}
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059cc:	f001 fd5a 	bl	8007484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059d8:	e011      	b.n	80059fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3324      	adds	r3, #36	; 0x24
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fe30 	bl	800664c <xTaskRemoveFromEventList>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059f2:	f000 ff07 	bl	8006804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	dce9      	bgt.n	80059da <prvUnlockQueue+0x16>
 8005a06:	e000      	b.n	8005a0a <prvUnlockQueue+0x46>
					break;
 8005a08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	22ff      	movs	r2, #255	; 0xff
 8005a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a12:	f001 fd67 	bl	80074e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a16:	f001 fd35 	bl	8007484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a22:	e011      	b.n	8005a48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3310      	adds	r3, #16
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fe0b 	bl	800664c <xTaskRemoveFromEventList>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a3c:	f000 fee2 	bl	8006804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dce9      	bgt.n	8005a24 <prvUnlockQueue+0x60>
 8005a50:	e000      	b.n	8005a54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	22ff      	movs	r2, #255	; 0xff
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a5c:	f001 fd42 	bl	80074e4 <vPortExitCritical>
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a70:	f001 fd08 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e001      	b.n	8005a86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a86:	f001 fd2d 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a9c:	f001 fcf2 	bl	8007484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d102      	bne.n	8005ab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e001      	b.n	8005ab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ab6:	f001 fd15 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 8005aba:	68fb      	ldr	r3, [r7, #12]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e014      	b.n	8005afe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ad4:	4a0f      	ldr	r2, [pc, #60]	; (8005b14 <vQueueAddToRegistry+0x50>)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ae0:	490c      	ldr	r1, [pc, #48]	; (8005b14 <vQueueAddToRegistry+0x50>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005aea:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <vQueueAddToRegistry+0x50>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005af6:	e006      	b.n	8005b06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b07      	cmp	r3, #7
 8005b02:	d9e7      	bls.n	8005ad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000a80 	.word	0x20000a80

08005b18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b28:	f001 fcac 	bl	8007484 <vPortEnterCritical>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d103      	bne.n	8005b42 <vQueueWaitForMessageRestricted+0x2a>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d103      	bne.n	8005b58 <vQueueWaitForMessageRestricted+0x40>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b58:	f001 fcc4 	bl	80074e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	3324      	adds	r3, #36	; 0x24
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fd41 	bl	80065f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b72:	6978      	ldr	r0, [r7, #20]
 8005b74:	f7ff ff26 	bl	80059c4 <prvUnlockQueue>
	}
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af04      	add	r7, sp, #16
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	61fb      	str	r3, [r7, #28]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bc6:	235c      	movs	r3, #92	; 0x5c
 8005bc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b5c      	cmp	r3, #92	; 0x5c
 8005bce:	d00a      	beq.n	8005be6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	61bb      	str	r3, [r7, #24]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005be6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01e      	beq.n	8005c2c <xTaskCreateStatic+0xac>
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c06:	2300      	movs	r3, #0
 8005c08:	9303      	str	r3, [sp, #12]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	9302      	str	r3, [sp, #8]
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f850 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c26:	f000 f8dd 	bl	8005de4 <prvAddNewTaskToReadyList>
 8005c2a:	e001      	b.n	8005c30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c30:	697b      	ldr	r3, [r7, #20]
	}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3728      	adds	r7, #40	; 0x28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b08c      	sub	sp, #48	; 0x30
 8005c3e:	af04      	add	r7, sp, #16
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fd3a 	bl	80076c8 <pvPortMalloc>
 8005c54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00e      	beq.n	8005c7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c5c:	205c      	movs	r0, #92	; 0x5c
 8005c5e:	f001 fd33 	bl	80076c8 <pvPortMalloc>
 8005c62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c70:	e005      	b.n	8005c7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f001 fdf4 	bl	8007860 <vPortFree>
 8005c78:	e001      	b.n	8005c7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f80e 	bl	8005cc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca8:	69f8      	ldr	r0, [r7, #28]
 8005caa:	f000 f89b 	bl	8005de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e002      	b.n	8005cba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cba:	69bb      	ldr	r3, [r7, #24]
	}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	461a      	mov	r2, r3
 8005cdc:	21a5      	movs	r1, #165	; 0xa5
 8005cde:	f002 feac 	bl	8008a3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cec:	3b01      	subs	r3, #1
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	617b      	str	r3, [r7, #20]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01f      	beq.n	8005d62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e012      	b.n	8005d4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	7819      	ldrb	r1, [r3, #0]
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	3334      	adds	r3, #52	; 0x34
 8005d38:	460a      	mov	r2, r1
 8005d3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b0f      	cmp	r3, #15
 8005d52:	d9e9      	bls.n	8005d28 <prvInitialiseNewTask+0x64>
 8005d54:	e000      	b.n	8005d58 <prvInitialiseNewTask+0x94>
			{
				break;
 8005d56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d60:	e003      	b.n	8005d6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	2b37      	cmp	r3, #55	; 0x37
 8005d6e:	d901      	bls.n	8005d74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d70:	2337      	movs	r3, #55	; 0x37
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	2200      	movs	r2, #0
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff f93e 	bl	800500c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	3318      	adds	r3, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff f939 	bl	800500c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	2200      	movs	r2, #0
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	69b8      	ldr	r0, [r7, #24]
 8005dc4:	f001 fa2e 	bl	8007224 <pxPortInitialiseStack>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005dec:	f001 fb4a 	bl	8007484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e02:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <prvAddNewTaskToReadyList+0xc4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d110      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e10:	f000 fd1c 	bl	800684c <prvInitialiseTaskLists>
 8005e14:	e00d      	b.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e16:	4b26      	ldr	r3, [pc, #152]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e1e:	4b23      	ldr	r3, [pc, #140]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d802      	bhi.n	8005e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e32:	4b20      	ldr	r3, [pc, #128]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	; (8005eb4 <prvAddNewTaskToReadyList+0xd0>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <prvAddNewTaskToReadyList+0xd4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d903      	bls.n	8005e58 <prvAddNewTaskToReadyList+0x74>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <prvAddNewTaskToReadyList+0xd4>)
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <prvAddNewTaskToReadyList+0xd8>)
 8005e66:	441a      	add	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7ff f8d9 	bl	8005026 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e74:	f001 fb36 	bl	80074e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <prvAddNewTaskToReadyList+0xcc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <prvAddNewTaskToReadyList+0xc8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d207      	bcs.n	8005e9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <prvAddNewTaskToReadyList+0xdc>)
 8005e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000f94 	.word	0x20000f94
 8005eac:	20000ac0 	.word	0x20000ac0
 8005eb0:	20000fa0 	.word	0x20000fa0
 8005eb4:	20000fb0 	.word	0x20000fb0
 8005eb8:	20000f9c 	.word	0x20000f9c
 8005ebc:	20000ac4 	.word	0x20000ac4
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d017      	beq.n	8005f06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <vTaskDelay+0x60>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <vTaskDelay+0x30>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60bb      	str	r3, [r7, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ef4:	f000 f986 	bl	8006204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef8:	2100      	movs	r1, #0
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fdf0 	bl	8006ae0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f00:	f000 f98e 	bl	8006220 <xTaskResumeAll>
 8005f04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d107      	bne.n	8005f1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <vTaskDelay+0x64>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f1c:	bf00      	nop
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000fbc 	.word	0x20000fbc
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f34:	f001 faa6 	bl	8007484 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <vTaskSuspend+0x18>
 8005f3e:	4b30      	ldr	r3, [pc, #192]	; (8006000 <vTaskSuspend+0xd4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	e000      	b.n	8005f46 <vTaskSuspend+0x1a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff f8c7 	bl	80050e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3318      	adds	r3, #24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff f8be 	bl	80050e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4826      	ldr	r0, [pc, #152]	; (8006004 <vTaskSuspend+0xd8>)
 8005f6c:	f7ff f85b 	bl	8005026 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d103      	bne.n	8005f84 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005f84:	f001 faae 	bl	80074e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005f88:	4b1f      	ldr	r3, [pc, #124]	; (8006008 <vTaskSuspend+0xdc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005f90:	f001 fa78 	bl	8007484 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005f94:	f000 fcf8 	bl	8006988 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005f98:	f001 faa4 	bl	80074e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005f9c:	4b18      	ldr	r3, [pc, #96]	; (8006000 <vTaskSuspend+0xd4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d127      	bne.n	8005ff6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <vTaskSuspend+0xdc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d017      	beq.n	8005fde <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005fae:	4b17      	ldr	r3, [pc, #92]	; (800600c <vTaskSuspend+0xe0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <vTaskSuspend+0xa0>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60bb      	str	r3, [r7, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <vTaskSuspend+0xe4>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fdc:	e00b      	b.n	8005ff6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005fde:	4b09      	ldr	r3, [pc, #36]	; (8006004 <vTaskSuspend+0xd8>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <vTaskSuspend+0xe8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d103      	bne.n	8005ff2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <vTaskSuspend+0xd4>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
	}
 8005ff0:	e001      	b.n	8005ff6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8005ff2:	f000 fa7d 	bl	80064f0 <vTaskSwitchContext>
	}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000ac0 	.word	0x20000ac0
 8006004:	20000f80 	.word	0x20000f80
 8006008:	20000fa0 	.word	0x20000fa0
 800600c:	20000fbc 	.word	0x20000fbc
 8006010:	e000ed04 	.word	0xe000ed04
 8006014:	20000f94 	.word	0x20000f94

08006018 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <prvTaskIsTaskSuspended+0x5c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10a      	bne.n	8006064 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	4a09      	ldr	r2, [pc, #36]	; (8006078 <prvTaskIsTaskSuspended+0x60>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d005      	beq.n	8006064 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006064:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006066:	4618      	mov	r0, r3
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000f80 	.word	0x20000f80
 8006078:	20000f54 	.word	0x20000f54

0800607c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vTaskResume+0x28>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80060a4:	4b20      	ldr	r3, [pc, #128]	; (8006128 <vTaskResume+0xac>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d038      	beq.n	8006120 <vTaskResume+0xa4>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d035      	beq.n	8006120 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80060b4:	f001 f9e6 	bl	8007484 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ffad 	bl	8006018 <prvTaskIsTaskSuspended>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02b      	beq.n	800611c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff f809 	bl	80050e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	4b16      	ldr	r3, [pc, #88]	; (800612c <vTaskResume+0xb0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <vTaskResume+0x66>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <vTaskResume+0xb0>)
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <vTaskResume+0xb4>)
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7fe ff94 	bl	8005026 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <vTaskResume+0xac>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	429a      	cmp	r2, r3
 800610a:	d307      	bcc.n	800611c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <vTaskResume+0xb8>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800611c:	f001 f9e2 	bl	80074e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000ac0 	.word	0x20000ac0
 800612c:	20000f9c 	.word	0x20000f9c
 8006130:	20000ac4 	.word	0x20000ac4
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006146:	463a      	mov	r2, r7
 8006148:	1d39      	adds	r1, r7, #4
 800614a:	f107 0308 	add.w	r3, r7, #8
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe ff08 	bl	8004f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	9202      	str	r2, [sp, #8]
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	2300      	movs	r3, #0
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2300      	movs	r3, #0
 8006164:	460a      	mov	r2, r1
 8006166:	4921      	ldr	r1, [pc, #132]	; (80061ec <vTaskStartScheduler+0xb4>)
 8006168:	4821      	ldr	r0, [pc, #132]	; (80061f0 <vTaskStartScheduler+0xb8>)
 800616a:	f7ff fd09 	bl	8005b80 <xTaskCreateStatic>
 800616e:	4603      	mov	r3, r0
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <vTaskStartScheduler+0xbc>)
 8006172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006174:	4b1f      	ldr	r3, [pc, #124]	; (80061f4 <vTaskStartScheduler+0xbc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e001      	b.n	8006186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d102      	bne.n	8006192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800618c:	f000 fcfc 	bl	8006b88 <xTimerCreateTimerTask>
 8006190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d116      	bne.n	80061c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	613b      	str	r3, [r7, #16]
}
 80061aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <vTaskStartScheduler+0xc0>)
 80061ae:	f04f 32ff 	mov.w	r2, #4294967295
 80061b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061b4:	4b11      	ldr	r3, [pc, #68]	; (80061fc <vTaskStartScheduler+0xc4>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <vTaskStartScheduler+0xc8>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061c0:	f001 f8be 	bl	8007340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061c4:	e00e      	b.n	80061e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061cc:	d10a      	bne.n	80061e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60fb      	str	r3, [r7, #12]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <vTaskStartScheduler+0xaa>
}
 80061e4:	bf00      	nop
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	0800c368 	.word	0x0800c368
 80061f0:	0800681d 	.word	0x0800681d
 80061f4:	20000fb8 	.word	0x20000fb8
 80061f8:	20000fb4 	.word	0x20000fb4
 80061fc:	20000fa0 	.word	0x20000fa0
 8006200:	20000f98 	.word	0x20000f98

08006204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <vTaskSuspendAll+0x18>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a03      	ldr	r2, [pc, #12]	; (800621c <vTaskSuspendAll+0x18>)
 8006210:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006212:	bf00      	nop
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20000fbc 	.word	0x20000fbc

08006220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800622e:	4b42      	ldr	r3, [pc, #264]	; (8006338 <xTaskResumeAll+0x118>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <xTaskResumeAll+0x2c>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	603b      	str	r3, [r7, #0]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800624c:	f001 f91a 	bl	8007484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006250:	4b39      	ldr	r3, [pc, #228]	; (8006338 <xTaskResumeAll+0x118>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3b01      	subs	r3, #1
 8006256:	4a38      	ldr	r2, [pc, #224]	; (8006338 <xTaskResumeAll+0x118>)
 8006258:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625a:	4b37      	ldr	r3, [pc, #220]	; (8006338 <xTaskResumeAll+0x118>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d162      	bne.n	8006328 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006262:	4b36      	ldr	r3, [pc, #216]	; (800633c <xTaskResumeAll+0x11c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d05e      	beq.n	8006328 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800626a:	e02f      	b.n	80062cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800626c:	4b34      	ldr	r3, [pc, #208]	; (8006340 <xTaskResumeAll+0x120>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3318      	adds	r3, #24
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe ff31 	bl	80050e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3304      	adds	r3, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe ff2c 	bl	80050e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	4b2d      	ldr	r3, [pc, #180]	; (8006344 <xTaskResumeAll+0x124>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d903      	bls.n	800629c <xTaskResumeAll+0x7c>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <xTaskResumeAll+0x124>)
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <xTaskResumeAll+0x128>)
 80062aa:	441a      	add	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f7fe feb7 	bl	8005026 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062bc:	4b23      	ldr	r3, [pc, #140]	; (800634c <xTaskResumeAll+0x12c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d302      	bcc.n	80062cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <xTaskResumeAll+0x130>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062cc:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <xTaskResumeAll+0x120>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1cb      	bne.n	800626c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062da:	f000 fb55 	bl	8006988 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062de:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <xTaskResumeAll+0x134>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d010      	beq.n	800630c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062ea:	f000 f847 	bl	800637c <xTaskIncrementTick>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <xTaskResumeAll+0x130>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f1      	bne.n	80062ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <xTaskResumeAll+0x134>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xTaskResumeAll+0x130>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006314:	2301      	movs	r3, #1
 8006316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <xTaskResumeAll+0x138>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006328:	f001 f8dc 	bl	80074e4 <vPortExitCritical>

	return xAlreadyYielded;
 800632c:	68bb      	ldr	r3, [r7, #8]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000fbc 	.word	0x20000fbc
 800633c:	20000f94 	.word	0x20000f94
 8006340:	20000f54 	.word	0x20000f54
 8006344:	20000f9c 	.word	0x20000f9c
 8006348:	20000ac4 	.word	0x20000ac4
 800634c:	20000ac0 	.word	0x20000ac0
 8006350:	20000fa8 	.word	0x20000fa8
 8006354:	20000fa4 	.word	0x20000fa4
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <xTaskGetTickCount+0x1c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006368:	687b      	ldr	r3, [r7, #4]
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000f98 	.word	0x20000f98

0800637c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006386:	4b4f      	ldr	r3, [pc, #316]	; (80064c4 <xTaskIncrementTick+0x148>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 808f 	bne.w	80064ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006390:	4b4d      	ldr	r3, [pc, #308]	; (80064c8 <xTaskIncrementTick+0x14c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3301      	adds	r3, #1
 8006396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006398:	4a4b      	ldr	r2, [pc, #300]	; (80064c8 <xTaskIncrementTick+0x14c>)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d120      	bne.n	80063e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063a4:	4b49      	ldr	r3, [pc, #292]	; (80064cc <xTaskIncrementTick+0x150>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	603b      	str	r3, [r7, #0]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <xTaskIncrementTick+0x46>
 80063c4:	4b41      	ldr	r3, [pc, #260]	; (80064cc <xTaskIncrementTick+0x150>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	4b41      	ldr	r3, [pc, #260]	; (80064d0 <xTaskIncrementTick+0x154>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a3f      	ldr	r2, [pc, #252]	; (80064cc <xTaskIncrementTick+0x150>)
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4a3f      	ldr	r2, [pc, #252]	; (80064d0 <xTaskIncrementTick+0x154>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	4b3e      	ldr	r3, [pc, #248]	; (80064d4 <xTaskIncrementTick+0x158>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a3d      	ldr	r2, [pc, #244]	; (80064d4 <xTaskIncrementTick+0x158>)
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	f000 fad1 	bl	8006988 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063e6:	4b3c      	ldr	r3, [pc, #240]	; (80064d8 <xTaskIncrementTick+0x15c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d349      	bcc.n	8006484 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f0:	4b36      	ldr	r3, [pc, #216]	; (80064cc <xTaskIncrementTick+0x150>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063fa:	4b37      	ldr	r3, [pc, #220]	; (80064d8 <xTaskIncrementTick+0x15c>)
 80063fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006400:	601a      	str	r2, [r3, #0]
					break;
 8006402:	e03f      	b.n	8006484 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006404:	4b31      	ldr	r3, [pc, #196]	; (80064cc <xTaskIncrementTick+0x150>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d203      	bcs.n	8006424 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800641c:	4a2e      	ldr	r2, [pc, #184]	; (80064d8 <xTaskIncrementTick+0x15c>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006422:	e02f      	b.n	8006484 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	3304      	adds	r3, #4
 8006428:	4618      	mov	r0, r3
 800642a:	f7fe fe59 	bl	80050e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d004      	beq.n	8006440 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3318      	adds	r3, #24
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fe50 	bl	80050e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <xTaskIncrementTick+0x160>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d903      	bls.n	8006454 <xTaskIncrementTick+0xd8>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	4a22      	ldr	r2, [pc, #136]	; (80064dc <xTaskIncrementTick+0x160>)
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	4613      	mov	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <xTaskIncrementTick+0x164>)
 8006462:	441a      	add	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7fe fddb 	bl	8005026 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <xTaskIncrementTick+0x168>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	429a      	cmp	r2, r3
 800647c:	d3b8      	bcc.n	80063f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800647e:	2301      	movs	r3, #1
 8006480:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006482:	e7b5      	b.n	80063f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006484:	4b17      	ldr	r3, [pc, #92]	; (80064e4 <xTaskIncrementTick+0x168>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648a:	4915      	ldr	r1, [pc, #84]	; (80064e0 <xTaskIncrementTick+0x164>)
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d901      	bls.n	80064a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <xTaskIncrementTick+0x16c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	e004      	b.n	80064b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <xTaskIncrementTick+0x170>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <xTaskIncrementTick+0x170>)
 80064b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064b8:	697b      	ldr	r3, [r7, #20]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000fbc 	.word	0x20000fbc
 80064c8:	20000f98 	.word	0x20000f98
 80064cc:	20000f4c 	.word	0x20000f4c
 80064d0:	20000f50 	.word	0x20000f50
 80064d4:	20000fac 	.word	0x20000fac
 80064d8:	20000fb4 	.word	0x20000fb4
 80064dc:	20000f9c 	.word	0x20000f9c
 80064e0:	20000ac4 	.word	0x20000ac4
 80064e4:	20000ac0 	.word	0x20000ac0
 80064e8:	20000fa8 	.word	0x20000fa8
 80064ec:	20000fa4 	.word	0x20000fa4

080064f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064f6:	4b28      	ldr	r3, [pc, #160]	; (8006598 <vTaskSwitchContext+0xa8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064fe:	4b27      	ldr	r3, [pc, #156]	; (800659c <vTaskSwitchContext+0xac>)
 8006500:	2201      	movs	r2, #1
 8006502:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006504:	e041      	b.n	800658a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006506:	4b25      	ldr	r3, [pc, #148]	; (800659c <vTaskSwitchContext+0xac>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650c:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <vTaskSwitchContext+0xb0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e010      	b.n	8006536 <vTaskSwitchContext+0x46>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <vTaskSwitchContext+0x40>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	607b      	str	r3, [r7, #4]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vTaskSwitchContext+0x3e>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3b01      	subs	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	491b      	ldr	r1, [pc, #108]	; (80065a4 <vTaskSwitchContext+0xb4>)
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0e4      	beq.n	8006514 <vTaskSwitchContext+0x24>
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <vTaskSwitchContext+0xb4>)
 8006556:	4413      	add	r3, r2
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	605a      	str	r2, [r3, #4]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	3308      	adds	r3, #8
 800656c:	429a      	cmp	r2, r3
 800656e:	d104      	bne.n	800657a <vTaskSwitchContext+0x8a>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <vTaskSwitchContext+0xb8>)
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	4a06      	ldr	r2, [pc, #24]	; (80065a0 <vTaskSwitchContext+0xb0>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6013      	str	r3, [r2, #0]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000fbc 	.word	0x20000fbc
 800659c:	20000fa8 	.word	0x20000fa8
 80065a0:	20000f9c 	.word	0x20000f9c
 80065a4:	20000ac4 	.word	0x20000ac4
 80065a8:	20000ac0 	.word	0x20000ac0

080065ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60fb      	str	r3, [r7, #12]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <vTaskPlaceOnEventList+0x44>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3318      	adds	r3, #24
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fe fd47 	bl	800506e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065e0:	2101      	movs	r1, #1
 80065e2:	6838      	ldr	r0, [r7, #0]
 80065e4:	f000 fa7c 	bl	8006ae0 <prvAddCurrentTaskToDelayedList>
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000ac0 	.word	0x20000ac0

080065f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10a      	bne.n	800661c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	617b      	str	r3, [r7, #20]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <vTaskPlaceOnEventListRestricted+0x54>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3318      	adds	r3, #24
 8006622:	4619      	mov	r1, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7fe fcfe 	bl	8005026 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	68b8      	ldr	r0, [r7, #8]
 800663a:	f000 fa51 	bl	8006ae0 <prvAddCurrentTaskToDelayedList>
	}
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000ac0 	.word	0x20000ac0

0800664c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60fb      	str	r3, [r7, #12]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	3318      	adds	r3, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fd2f 	bl	80050e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006682:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <xTaskRemoveFromEventList+0xb0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11d      	bne.n	80066c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3304      	adds	r3, #4
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fd26 	bl	80050e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <xTaskRemoveFromEventList+0xb4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d903      	bls.n	80066a8 <xTaskRemoveFromEventList+0x5c>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4a16      	ldr	r2, [pc, #88]	; (8006700 <xTaskRemoveFromEventList+0xb4>)
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4a13      	ldr	r2, [pc, #76]	; (8006704 <xTaskRemoveFromEventList+0xb8>)
 80066b6:	441a      	add	r2, r3
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f7fe fcb1 	bl	8005026 <vListInsertEnd>
 80066c4:	e005      	b.n	80066d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3318      	adds	r3, #24
 80066ca:	4619      	mov	r1, r3
 80066cc:	480e      	ldr	r0, [pc, #56]	; (8006708 <xTaskRemoveFromEventList+0xbc>)
 80066ce:	f7fe fcaa 	bl	8005026 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <xTaskRemoveFromEventList+0xc0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d905      	bls.n	80066ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066e4:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <xTaskRemoveFromEventList+0xc4>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e001      	b.n	80066f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066f0:	697b      	ldr	r3, [r7, #20]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000fbc 	.word	0x20000fbc
 8006700:	20000f9c 	.word	0x20000f9c
 8006704:	20000ac4 	.word	0x20000ac4
 8006708:	20000f54 	.word	0x20000f54
 800670c:	20000ac0 	.word	0x20000ac0
 8006710:	20000fa8 	.word	0x20000fa8

08006714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800671c:	4b06      	ldr	r3, [pc, #24]	; (8006738 <vTaskInternalSetTimeOutState+0x24>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <vTaskInternalSetTimeOutState+0x28>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	605a      	str	r2, [r3, #4]
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000fac 	.word	0x20000fac
 800673c:	20000f98 	.word	0x20000f98

08006740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	60fb      	str	r3, [r7, #12]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006782:	f000 fe7f 	bl	8007484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006786:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <xTaskCheckForTimeOut+0xbc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d102      	bne.n	80067a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	e023      	b.n	80067ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b15      	ldr	r3, [pc, #84]	; (8006800 <xTaskCheckForTimeOut+0xc0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d007      	beq.n	80067c2 <xTaskCheckForTimeOut+0x82>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067bc:	2301      	movs	r3, #1
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e015      	b.n	80067ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d20b      	bcs.n	80067e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	1ad2      	subs	r2, r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff9b 	bl	8006714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067de:	2300      	movs	r3, #0
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	e004      	b.n	80067ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067ea:	2301      	movs	r3, #1
 80067ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067ee:	f000 fe79 	bl	80074e4 <vPortExitCritical>

	return xReturn;
 80067f2:	69fb      	ldr	r3, [r7, #28]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3720      	adds	r7, #32
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000f98 	.word	0x20000f98
 8006800:	20000fac 	.word	0x20000fac

08006804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <vTaskMissedYield+0x14>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
}
 800680e:	bf00      	nop
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	20000fa8 	.word	0x20000fa8

0800681c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006824:	f000 f852 	bl	80068cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <prvIdleTask+0x28>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d9f9      	bls.n	8006824 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <prvIdleTask+0x2c>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006840:	e7f0      	b.n	8006824 <prvIdleTask+0x8>
 8006842:	bf00      	nop
 8006844:	20000ac4 	.word	0x20000ac4
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006852:	2300      	movs	r3, #0
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	e00c      	b.n	8006872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4a12      	ldr	r2, [pc, #72]	; (80068ac <prvInitialiseTaskLists+0x60>)
 8006864:	4413      	add	r3, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fbb0 	bl	8004fcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3301      	adds	r3, #1
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b37      	cmp	r3, #55	; 0x37
 8006876:	d9ef      	bls.n	8006858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006878:	480d      	ldr	r0, [pc, #52]	; (80068b0 <prvInitialiseTaskLists+0x64>)
 800687a:	f7fe fba7 	bl	8004fcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <prvInitialiseTaskLists+0x68>)
 8006880:	f7fe fba4 	bl	8004fcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006884:	480c      	ldr	r0, [pc, #48]	; (80068b8 <prvInitialiseTaskLists+0x6c>)
 8006886:	f7fe fba1 	bl	8004fcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800688a:	480c      	ldr	r0, [pc, #48]	; (80068bc <prvInitialiseTaskLists+0x70>)
 800688c:	f7fe fb9e 	bl	8004fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006890:	480b      	ldr	r0, [pc, #44]	; (80068c0 <prvInitialiseTaskLists+0x74>)
 8006892:	f7fe fb9b 	bl	8004fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <prvInitialiseTaskLists+0x78>)
 8006898:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <prvInitialiseTaskLists+0x64>)
 800689a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <prvInitialiseTaskLists+0x7c>)
 800689e:	4a05      	ldr	r2, [pc, #20]	; (80068b4 <prvInitialiseTaskLists+0x68>)
 80068a0:	601a      	str	r2, [r3, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000ac4 	.word	0x20000ac4
 80068b0:	20000f24 	.word	0x20000f24
 80068b4:	20000f38 	.word	0x20000f38
 80068b8:	20000f54 	.word	0x20000f54
 80068bc:	20000f68 	.word	0x20000f68
 80068c0:	20000f80 	.word	0x20000f80
 80068c4:	20000f4c 	.word	0x20000f4c
 80068c8:	20000f50 	.word	0x20000f50

080068cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d2:	e019      	b.n	8006908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068d4:	f000 fdd6 	bl	8007484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d8:	4b10      	ldr	r3, [pc, #64]	; (800691c <prvCheckTasksWaitingTermination+0x50>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe fbfb 	bl	80050e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <prvCheckTasksWaitingTermination+0x54>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	4a0b      	ldr	r2, [pc, #44]	; (8006920 <prvCheckTasksWaitingTermination+0x54>)
 80068f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <prvCheckTasksWaitingTermination+0x58>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <prvCheckTasksWaitingTermination+0x58>)
 80068fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068fe:	f000 fdf1 	bl	80074e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f810 	bl	8006928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <prvCheckTasksWaitingTermination+0x58>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e1      	bne.n	80068d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000f68 	.word	0x20000f68
 8006920:	20000f94 	.word	0x20000f94
 8006924:	20000f7c 	.word	0x20000f7c

08006928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006936:	2b00      	cmp	r3, #0
 8006938:	d108      	bne.n	800694c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	4618      	mov	r0, r3
 8006940:	f000 ff8e 	bl	8007860 <vPortFree>
				vPortFree( pxTCB );
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 ff8b 	bl	8007860 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800694a:	e018      	b.n	800697e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006952:	2b01      	cmp	r3, #1
 8006954:	d103      	bne.n	800695e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 ff82 	bl	8007860 <vPortFree>
	}
 800695c:	e00f      	b.n	800697e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006964:	2b02      	cmp	r3, #2
 8006966:	d00a      	beq.n	800697e <prvDeleteTCB+0x56>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60fb      	str	r3, [r7, #12]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <prvDeleteTCB+0x54>
	}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <prvResetNextTaskUnblockTime+0x38>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvResetNextTaskUnblockTime+0x3c>)
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069a0:	e008      	b.n	80069b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a2:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <prvResetNextTaskUnblockTime+0x38>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <prvResetNextTaskUnblockTime+0x3c>)
 80069b2:	6013      	str	r3, [r2, #0]
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000f4c 	.word	0x20000f4c
 80069c4:	20000fb4 	.word	0x20000fb4

080069c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <xTaskGetSchedulerState+0x34>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069d6:	2301      	movs	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	e008      	b.n	80069ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069dc:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <xTaskGetSchedulerState+0x38>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069e4:	2302      	movs	r3, #2
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	e001      	b.n	80069ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ea:	2300      	movs	r3, #0
 80069ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069ee:	687b      	ldr	r3, [r7, #4]
	}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20000fa0 	.word	0x20000fa0
 8006a00:	20000fbc 	.word	0x20000fbc

08006a04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d056      	beq.n	8006ac8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ad4 <xTaskPriorityDisinherit+0xd0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d00a      	beq.n	8006a3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	60fb      	str	r3, [r7, #12]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	60bb      	str	r3, [r7, #8]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	1e5a      	subs	r2, r3, #1
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d02c      	beq.n	8006ac8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d128      	bne.n	8006ac8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fe fb30 	bl	80050e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <xTaskPriorityDisinherit+0xd4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d903      	bls.n	8006aa8 <xTaskPriorityDisinherit+0xa4>
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	; (8006ad8 <xTaskPriorityDisinherit+0xd4>)
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <xTaskPriorityDisinherit+0xd8>)
 8006ab6:	441a      	add	r2, r3
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4619      	mov	r1, r3
 8006abe:	4610      	mov	r0, r2
 8006ac0:	f7fe fab1 	bl	8005026 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ac8:	697b      	ldr	r3, [r7, #20]
	}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000ac0 	.word	0x20000ac0
 8006ad8:	20000f9c 	.word	0x20000f9c
 8006adc:	20000ac4 	.word	0x20000ac4

08006ae0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006aea:	4b21      	ldr	r3, [pc, #132]	; (8006b70 <prvAddCurrentTaskToDelayedList+0x90>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006af0:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe faf2 	bl	80050e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d10a      	bne.n	8006b1a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0a:	4b1a      	ldr	r3, [pc, #104]	; (8006b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4819      	ldr	r0, [pc, #100]	; (8006b78 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b14:	f7fe fa87 	bl	8005026 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b18:	e026      	b.n	8006b68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d209      	bcs.n	8006b46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b32:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7fe fa95 	bl	800506e <vListInsert>
}
 8006b44:	e010      	b.n	8006b68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f7fe fa8b 	bl	800506e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d202      	bcs.n	8006b68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b62:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6013      	str	r3, [r2, #0]
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000f98 	.word	0x20000f98
 8006b74:	20000ac0 	.word	0x20000ac0
 8006b78:	20000f80 	.word	0x20000f80
 8006b7c:	20000f50 	.word	0x20000f50
 8006b80:	20000f4c 	.word	0x20000f4c
 8006b84:	20000fb4 	.word	0x20000fb4

08006b88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b92:	f000 fb07 	bl	80071a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b96:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <xTimerCreateTimerTask+0x80>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d021      	beq.n	8006be2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ba6:	1d3a      	adds	r2, r7, #4
 8006ba8:	f107 0108 	add.w	r1, r7, #8
 8006bac:	f107 030c 	add.w	r3, r7, #12
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe f9f1 	bl	8004f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	9202      	str	r2, [sp, #8]
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	4910      	ldr	r1, [pc, #64]	; (8006c0c <xTimerCreateTimerTask+0x84>)
 8006bca:	4811      	ldr	r0, [pc, #68]	; (8006c10 <xTimerCreateTimerTask+0x88>)
 8006bcc:	f7fe ffd8 	bl	8005b80 <xTaskCreateStatic>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4a10      	ldr	r2, [pc, #64]	; (8006c14 <xTimerCreateTimerTask+0x8c>)
 8006bd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <xTimerCreateTimerTask+0x8c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bde:	2301      	movs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	613b      	str	r3, [r7, #16]
}
 8006bfa:	bf00      	nop
 8006bfc:	e7fe      	b.n	8006bfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bfe:	697b      	ldr	r3, [r7, #20]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000ff0 	.word	0x20000ff0
 8006c0c:	0800c370 	.word	0x0800c370
 8006c10:	08006d4d 	.word	0x08006d4d
 8006c14:	20000ff4 	.word	0x20000ff4

08006c18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	623b      	str	r3, [r7, #32]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c46:	4b1a      	ldr	r3, [pc, #104]	; (8006cb0 <xTimerGenericCommand+0x98>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d02a      	beq.n	8006ca4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b05      	cmp	r3, #5
 8006c5e:	dc18      	bgt.n	8006c92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c60:	f7ff feb2 	bl	80069c8 <xTaskGetSchedulerState>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d109      	bne.n	8006c7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <xTimerGenericCommand+0x98>)
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	f107 0110 	add.w	r1, r7, #16
 8006c72:	2300      	movs	r3, #0
 8006c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c76:	f7fe fb9b 	bl	80053b0 <xQueueGenericSend>
 8006c7a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c7c:	e012      	b.n	8006ca4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <xTimerGenericCommand+0x98>)
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	f107 0110 	add.w	r1, r7, #16
 8006c86:	2300      	movs	r3, #0
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f7fe fb91 	bl	80053b0 <xQueueGenericSend>
 8006c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c90:	e008      	b.n	8006ca4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <xTimerGenericCommand+0x98>)
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f107 0110 	add.w	r1, r7, #16
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	f7fe fc85 	bl	80055ac <xQueueGenericSendFromISR>
 8006ca2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	; 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000ff0 	.word	0x20000ff0

08006cb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <prvProcessExpiredTimer+0x94>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe fa07 	bl	80050e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d022      	beq.n	8006d26 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	699a      	ldr	r2, [r3, #24]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	18d1      	adds	r1, r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	6978      	ldr	r0, [r7, #20]
 8006cee:	f000 f8d1 	bl	8006e94 <prvInsertTimerInActiveList>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01f      	beq.n	8006d38 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	2100      	movs	r1, #0
 8006d02:	6978      	ldr	r0, [r7, #20]
 8006d04:	f7ff ff88 	bl	8006c18 <xTimerGenericCommand>
 8006d08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d113      	bne.n	8006d38 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	6978      	ldr	r0, [r7, #20]
 8006d3e:	4798      	blx	r3
}
 8006d40:	bf00      	nop
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000fe8 	.word	0x20000fe8

08006d4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d54:	f107 0308 	add.w	r3, r7, #8
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 f857 	bl	8006e0c <prvGetNextExpireTime>
 8006d5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4619      	mov	r1, r3
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f803 	bl	8006d70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d6a:	f000 f8d5 	bl	8006f18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d6e:	e7f1      	b.n	8006d54 <prvTimerTask+0x8>

08006d70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d7a:	f7ff fa43 	bl	8006204 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f866 	bl	8006e54 <prvSampleTimeNow>
 8006d88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d130      	bne.n	8006df2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <prvProcessTimerOrBlockTask+0x3c>
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d806      	bhi.n	8006dac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d9e:	f7ff fa3f 	bl	8006220 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff85 	bl	8006cb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006daa:	e024      	b.n	8006df6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <prvProcessTimerOrBlockTask+0x90>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <prvProcessTimerOrBlockTask+0x50>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <prvProcessTimerOrBlockTask+0x52>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <prvProcessTimerOrBlockTask+0x94>)
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f7fe fea1 	bl	8005b18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dd6:	f7ff fa23 	bl	8006220 <xTaskResumeAll>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006de0:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <prvProcessTimerOrBlockTask+0x98>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
}
 8006df0:	e001      	b.n	8006df6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006df2:	f7ff fa15 	bl	8006220 <xTaskResumeAll>
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000fec 	.word	0x20000fec
 8006e04:	20000ff0 	.word	0x20000ff0
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <prvGetNextExpireTime+0x44>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <prvGetNextExpireTime+0x16>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	e000      	b.n	8006e24 <prvGetNextExpireTime+0x18>
 8006e22:	2200      	movs	r2, #0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d105      	bne.n	8006e3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <prvGetNextExpireTime+0x44>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e001      	b.n	8006e40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	20000fe8 	.word	0x20000fe8

08006e54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e5c:	f7ff fa7e 	bl	800635c <xTaskGetTickCount>
 8006e60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <prvSampleTimeNow+0x3c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d205      	bcs.n	8006e78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e6c:	f000 f936 	bl	80070dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e002      	b.n	8006e7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e7e:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <prvSampleTimeNow+0x3c>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e84:	68fb      	ldr	r3, [r7, #12]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000ff8 	.word	0x20000ff8

08006e94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d812      	bhi.n	8006ee0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d302      	bcc.n	8006ece <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e01b      	b.n	8006f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ece:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <prvInsertTimerInActiveList+0x7c>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7fe f8c8 	bl	800506e <vListInsert>
 8006ede:	e012      	b.n	8006f06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d206      	bcs.n	8006ef6 <prvInsertTimerInActiveList+0x62>
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d302      	bcc.n	8006ef6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	e007      	b.n	8006f06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <prvInsertTimerInActiveList+0x80>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4619      	mov	r1, r3
 8006f00:	4610      	mov	r0, r2
 8006f02:	f7fe f8b4 	bl	800506e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f06:	697b      	ldr	r3, [r7, #20]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000fec 	.word	0x20000fec
 8006f14:	20000fe8 	.word	0x20000fe8

08006f18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08e      	sub	sp, #56	; 0x38
 8006f1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f1e:	e0ca      	b.n	80070b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da18      	bge.n	8006f58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	3304      	adds	r3, #4
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61fb      	str	r3, [r7, #28]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4e:	6850      	ldr	r0, [r2, #4]
 8006f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f52:	6892      	ldr	r2, [r2, #8]
 8006f54:	4611      	mov	r1, r2
 8006f56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f2c0 80ab 	blt.w	80070b6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe f8b5 	bl	80050e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f76:	463b      	mov	r3, r7
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ff6b 	bl	8006e54 <prvSampleTimeNow>
 8006f7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	f200 8096 	bhi.w	80070b4 <prvProcessReceivedCommands+0x19c>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <prvProcessReceivedCommands+0x78>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fb9 	.word	0x08006fb9
 8006f9c:	0800702d 	.word	0x0800702d
 8006fa0:	08007041 	.word	0x08007041
 8006fa4:	0800708b 	.word	0x0800708b
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fb9 	.word	0x08006fb9
 8006fb0:	0800702d 	.word	0x0800702d
 8006fb4:	08007041 	.word	0x08007041
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	18d1      	adds	r1, r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd8:	f7ff ff5c 	bl	8006e94 <prvInsertTimerInActiveList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d069      	beq.n	80070b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05e      	beq.n	80070b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	441a      	add	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	2100      	movs	r1, #0
 8007008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700a:	f7ff fe05 	bl	8006c18 <xTimerGenericCommand>
 800700e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d14f      	bne.n	80070b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	61bb      	str	r3, [r7, #24]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800703e:	e03a      	b.n	80070b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	617b      	str	r3, [r7, #20]
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	18d1      	adds	r1, r2, r3
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007084:	f7ff ff06 	bl	8006e94 <prvInsertTimerInActiveList>
					break;
 8007088:	e015      	b.n	80070b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709a:	f000 fbe1 	bl	8007860 <vPortFree>
 800709e:	e00a      	b.n	80070b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070b2:	e000      	b.n	80070b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80070b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070b6:	4b08      	ldr	r3, [pc, #32]	; (80070d8 <prvProcessReceivedCommands+0x1c0>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	1d39      	adds	r1, r7, #4
 80070bc:	2200      	movs	r2, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fb10 	bl	80056e4 <xQueueReceive>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f47f af2a 	bne.w	8006f20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	3730      	adds	r7, #48	; 0x30
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000ff0 	.word	0x20000ff0

080070dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070e2:	e048      	b.n	8007176 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070e4:	4b2d      	ldr	r3, [pc, #180]	; (800719c <prvSwitchTimerLists+0xc0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ee:	4b2b      	ldr	r3, [pc, #172]	; (800719c <prvSwitchTimerLists+0xc0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fd ffef 	bl	80050e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02e      	beq.n	8007176 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	429a      	cmp	r2, r3
 8007128:	d90e      	bls.n	8007148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007136:	4b19      	ldr	r3, [pc, #100]	; (800719c <prvSwitchTimerLists+0xc0>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fd ff94 	bl	800506e <vListInsert>
 8007146:	e016      	b.n	8007176 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	2100      	movs	r1, #0
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff fd60 	bl	8006c18 <xTimerGenericCommand>
 8007158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	603b      	str	r3, [r7, #0]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <prvSwitchTimerLists+0xc0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1b1      	bne.n	80070e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007180:	4b06      	ldr	r3, [pc, #24]	; (800719c <prvSwitchTimerLists+0xc0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <prvSwitchTimerLists+0xc4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a04      	ldr	r2, [pc, #16]	; (800719c <prvSwitchTimerLists+0xc0>)
 800718c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800718e:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <prvSwitchTimerLists+0xc4>)
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6013      	str	r3, [r2, #0]
}
 8007194:	bf00      	nop
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000fe8 	.word	0x20000fe8
 80071a0:	20000fec 	.word	0x20000fec

080071a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071aa:	f000 f96b 	bl	8007484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071ae:	4b15      	ldr	r3, [pc, #84]	; (8007204 <prvCheckForValidListAndQueue+0x60>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d120      	bne.n	80071f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071b6:	4814      	ldr	r0, [pc, #80]	; (8007208 <prvCheckForValidListAndQueue+0x64>)
 80071b8:	f7fd ff08 	bl	8004fcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071bc:	4813      	ldr	r0, [pc, #76]	; (800720c <prvCheckForValidListAndQueue+0x68>)
 80071be:	f7fd ff05 	bl	8004fcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071c2:	4b13      	ldr	r3, [pc, #76]	; (8007210 <prvCheckForValidListAndQueue+0x6c>)
 80071c4:	4a10      	ldr	r2, [pc, #64]	; (8007208 <prvCheckForValidListAndQueue+0x64>)
 80071c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071c8:	4b12      	ldr	r3, [pc, #72]	; (8007214 <prvCheckForValidListAndQueue+0x70>)
 80071ca:	4a10      	ldr	r2, [pc, #64]	; (800720c <prvCheckForValidListAndQueue+0x68>)
 80071cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071ce:	2300      	movs	r3, #0
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4b11      	ldr	r3, [pc, #68]	; (8007218 <prvCheckForValidListAndQueue+0x74>)
 80071d4:	4a11      	ldr	r2, [pc, #68]	; (800721c <prvCheckForValidListAndQueue+0x78>)
 80071d6:	2110      	movs	r1, #16
 80071d8:	200a      	movs	r0, #10
 80071da:	f7fe f813 	bl	8005204 <xQueueGenericCreateStatic>
 80071de:	4603      	mov	r3, r0
 80071e0:	4a08      	ldr	r2, [pc, #32]	; (8007204 <prvCheckForValidListAndQueue+0x60>)
 80071e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <prvCheckForValidListAndQueue+0x60>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <prvCheckForValidListAndQueue+0x60>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	490b      	ldr	r1, [pc, #44]	; (8007220 <prvCheckForValidListAndQueue+0x7c>)
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fc66 	bl	8005ac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071f8:	f000 f974 	bl	80074e4 <vPortExitCritical>
}
 80071fc:	bf00      	nop
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20000ff0 	.word	0x20000ff0
 8007208:	20000fc0 	.word	0x20000fc0
 800720c:	20000fd4 	.word	0x20000fd4
 8007210:	20000fe8 	.word	0x20000fe8
 8007214:	20000fec 	.word	0x20000fec
 8007218:	2000109c 	.word	0x2000109c
 800721c:	20000ffc 	.word	0x20000ffc
 8007220:	0800c378 	.word	0x0800c378

08007224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3b04      	subs	r3, #4
 8007234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800723c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3b04      	subs	r3, #4
 8007242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f023 0201 	bic.w	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3b04      	subs	r3, #4
 8007252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007254:	4a0c      	ldr	r2, [pc, #48]	; (8007288 <pxPortInitialiseStack+0x64>)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3b14      	subs	r3, #20
 800725e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3b04      	subs	r3, #4
 800726a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f06f 0202 	mvn.w	r2, #2
 8007272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3b20      	subs	r3, #32
 8007278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	0800728d 	.word	0x0800728d

0800728c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <prvTaskExitError+0x54>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729e:	d00a      	beq.n	80072b6 <prvTaskExitError+0x2a>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	60fb      	str	r3, [r7, #12]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <prvTaskExitError+0x28>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60bb      	str	r3, [r7, #8]
}
 80072c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072ca:	bf00      	nop
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0fc      	beq.n	80072cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	2000001c 	.word	0x2000001c
	...

080072f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <pxCurrentTCBConst2>)
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	6808      	ldr	r0, [r1, #0]
 80072f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	f380 8809 	msr	PSP, r0
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	4770      	bx	lr
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst2>:
 8007310:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007318:	4808      	ldr	r0, [pc, #32]	; (800733c <prvPortStartFirstTask+0x24>)
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	6800      	ldr	r0, [r0, #0]
 800731e:	f380 8808 	msr	MSP, r0
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8814 	msr	CONTROL, r0
 800732a:	b662      	cpsie	i
 800732c:	b661      	cpsie	f
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	df00      	svc	0
 8007338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800733a:	bf00      	nop
 800733c:	e000ed08 	.word	0xe000ed08

08007340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007346:	4b46      	ldr	r3, [pc, #280]	; (8007460 <xPortStartScheduler+0x120>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a46      	ldr	r2, [pc, #280]	; (8007464 <xPortStartScheduler+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10a      	bne.n	8007366 <xPortStartScheduler+0x26>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007366:	4b3e      	ldr	r3, [pc, #248]	; (8007460 <xPortStartScheduler+0x120>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3f      	ldr	r2, [pc, #252]	; (8007468 <xPortStartScheduler+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d10a      	bne.n	8007386 <xPortStartScheduler+0x46>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007386:	4b39      	ldr	r3, [pc, #228]	; (800746c <xPortStartScheduler+0x12c>)
 8007388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	4b31      	ldr	r3, [pc, #196]	; (8007470 <xPortStartScheduler+0x130>)
 80073ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073ae:	4b31      	ldr	r3, [pc, #196]	; (8007474 <xPortStartScheduler+0x134>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073b4:	e009      	b.n	80073ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80073b6:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <xPortStartScheduler+0x134>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <xPortStartScheduler+0x134>)
 80073be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d0ef      	beq.n	80073b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <xPortStartScheduler+0x134>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1c3 0307 	rsb	r3, r3, #7
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d00a      	beq.n	80073f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073f8:	4b1e      	ldr	r3, [pc, #120]	; (8007474 <xPortStartScheduler+0x134>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <xPortStartScheduler+0x134>)
 8007400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007402:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <xPortStartScheduler+0x134>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800740a:	4a1a      	ldr	r2, [pc, #104]	; (8007474 <xPortStartScheduler+0x134>)
 800740c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	b2da      	uxtb	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <xPortStartScheduler+0x138>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <xPortStartScheduler+0x138>)
 800741c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <xPortStartScheduler+0x138>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a14      	ldr	r2, [pc, #80]	; (8007478 <xPortStartScheduler+0x138>)
 8007428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800742c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800742e:	f000 f8dd 	bl	80075ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <xPortStartScheduler+0x13c>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007438:	f000 f8fc 	bl	8007634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800743c:	4b10      	ldr	r3, [pc, #64]	; (8007480 <xPortStartScheduler+0x140>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0f      	ldr	r2, [pc, #60]	; (8007480 <xPortStartScheduler+0x140>)
 8007442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007448:	f7ff ff66 	bl	8007318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800744c:	f7ff f850 	bl	80064f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007450:	f7ff ff1c 	bl	800728c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3718      	adds	r7, #24
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	e000ed00 	.word	0xe000ed00
 8007464:	410fc271 	.word	0x410fc271
 8007468:	410fc270 	.word	0x410fc270
 800746c:	e000e400 	.word	0xe000e400
 8007470:	200010ec 	.word	0x200010ec
 8007474:	200010f0 	.word	0x200010f0
 8007478:	e000ed20 	.word	0xe000ed20
 800747c:	2000001c 	.word	0x2000001c
 8007480:	e000ef34 	.word	0xe000ef34

08007484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	607b      	str	r3, [r7, #4]
}
 800749c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <vPortEnterCritical+0x58>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a0d      	ldr	r2, [pc, #52]	; (80074dc <vPortEnterCritical+0x58>)
 80074a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <vPortEnterCritical+0x58>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10f      	bne.n	80074d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <vPortEnterCritical+0x5c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	603b      	str	r3, [r7, #0]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <vPortEnterCritical+0x4a>
	}
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	2000001c 	.word	0x2000001c
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <vPortExitCritical+0x50>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <vPortExitCritical+0x24>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	607b      	str	r3, [r7, #4]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007508:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <vPortExitCritical+0x50>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3b01      	subs	r3, #1
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <vPortExitCritical+0x50>)
 8007510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <vPortExitCritical+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <vPortExitCritical+0x42>
 800751a:	2300      	movs	r3, #0
 800751c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	f383 8811 	msr	BASEPRI, r3
}
 8007524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	2000001c 	.word	0x2000001c
	...

08007540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007540:	f3ef 8009 	mrs	r0, PSP
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <pxCurrentTCBConst>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f01e 0f10 	tst.w	lr, #16
 8007550:	bf08      	it	eq
 8007552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755a:	6010      	str	r0, [r2, #0]
 800755c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007564:	f380 8811 	msr	BASEPRI, r0
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f7fe ffbe 	bl	80064f0 <vTaskSwitchContext>
 8007574:	f04f 0000 	mov.w	r0, #0
 8007578:	f380 8811 	msr	BASEPRI, r0
 800757c:	bc09      	pop	{r0, r3}
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	6808      	ldr	r0, [r1, #0]
 8007582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007586:	f01e 0f10 	tst.w	lr, #16
 800758a:	bf08      	it	eq
 800758c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007590:	f380 8809 	msr	PSP, r0
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst>:
 80075a0:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	607b      	str	r3, [r7, #4]
}
 80075c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075c2:	f7fe fedb 	bl	800637c <xTaskIncrementTick>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <xPortSysTickHandler+0x40>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <vPortSetupTimerInterrupt+0x38>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <vPortSetupTimerInterrupt+0x3c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <vPortSetupTimerInterrupt+0x40>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	099b      	lsrs	r3, r3, #6
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <vPortSetupTimerInterrupt+0x44>)
 800760a:	3b01      	subs	r3, #1
 800760c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <vPortSetupTimerInterrupt+0x34>)
 8007610:	2207      	movs	r2, #7
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000e010 	.word	0xe000e010
 8007624:	e000e018 	.word	0xe000e018
 8007628:	20000010 	.word	0x20000010
 800762c:	10624dd3 	.word	0x10624dd3
 8007630:	e000e014 	.word	0xe000e014

08007634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007644 <vPortEnableVFP+0x10>
 8007638:	6801      	ldr	r1, [r0, #0]
 800763a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800763e:	6001      	str	r1, [r0, #0]
 8007640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007642:	bf00      	nop
 8007644:	e000ed88 	.word	0xe000ed88

08007648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800764e:	f3ef 8305 	mrs	r3, IPSR
 8007652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b0f      	cmp	r3, #15
 8007658:	d914      	bls.n	8007684 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <vPortValidateInterruptPriority+0x70>)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007664:	4b15      	ldr	r3, [pc, #84]	; (80076bc <vPortValidateInterruptPriority+0x74>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	7afa      	ldrb	r2, [r7, #11]
 800766a:	429a      	cmp	r2, r3
 800766c:	d20a      	bcs.n	8007684 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	607b      	str	r3, [r7, #4]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <vPortValidateInterruptPriority+0x78>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <vPortValidateInterruptPriority+0x7c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d90a      	bls.n	80076aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	603b      	str	r3, [r7, #0]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <vPortValidateInterruptPriority+0x60>
	}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	e000e3f0 	.word	0xe000e3f0
 80076bc:	200010ec 	.word	0x200010ec
 80076c0:	e000ed0c 	.word	0xe000ed0c
 80076c4:	200010f0 	.word	0x200010f0

080076c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076d4:	f7fe fd96 	bl	8006204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076d8:	4b5b      	ldr	r3, [pc, #364]	; (8007848 <pvPortMalloc+0x180>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076e0:	f000 f920 	bl	8007924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076e4:	4b59      	ldr	r3, [pc, #356]	; (800784c <pvPortMalloc+0x184>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 8093 	bne.w	8007818 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01d      	beq.n	8007734 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076f8:	2208      	movs	r2, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	2b00      	cmp	r3, #0
 8007708:	d014      	beq.n	8007734 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f023 0307 	bic.w	r3, r3, #7
 8007710:	3308      	adds	r3, #8
 8007712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <pvPortMalloc+0x6c>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	617b      	str	r3, [r7, #20]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d06e      	beq.n	8007818 <pvPortMalloc+0x150>
 800773a:	4b45      	ldr	r3, [pc, #276]	; (8007850 <pvPortMalloc+0x188>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d869      	bhi.n	8007818 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007744:	4b43      	ldr	r3, [pc, #268]	; (8007854 <pvPortMalloc+0x18c>)
 8007746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007748:	4b42      	ldr	r3, [pc, #264]	; (8007854 <pvPortMalloc+0x18c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800774e:	e004      	b.n	800775a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <pvPortMalloc+0xa4>
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f1      	bne.n	8007750 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800776c:	4b36      	ldr	r3, [pc, #216]	; (8007848 <pvPortMalloc+0x180>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	429a      	cmp	r2, r3
 8007774:	d050      	beq.n	8007818 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2208      	movs	r2, #8
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	2308      	movs	r3, #8
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	429a      	cmp	r2, r3
 8007796:	d91f      	bls.n	80077d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <pvPortMalloc+0xf8>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	613b      	str	r3, [r7, #16]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077d2:	69b8      	ldr	r0, [r7, #24]
 80077d4:	f000 f908 	bl	80079e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077d8:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <pvPortMalloc+0x188>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <pvPortMalloc+0x188>)
 80077e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <pvPortMalloc+0x188>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <pvPortMalloc+0x190>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d203      	bcs.n	80077fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077f2:	4b17      	ldr	r3, [pc, #92]	; (8007850 <pvPortMalloc+0x188>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <pvPortMalloc+0x190>)
 80077f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	4b13      	ldr	r3, [pc, #76]	; (800784c <pvPortMalloc+0x184>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	431a      	orrs	r2, r3
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <pvPortMalloc+0x194>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3301      	adds	r3, #1
 8007814:	4a11      	ldr	r2, [pc, #68]	; (800785c <pvPortMalloc+0x194>)
 8007816:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007818:	f7fe fd02 	bl	8006220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f003 0307 	and.w	r3, r3, #7
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <pvPortMalloc+0x174>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60fb      	str	r3, [r7, #12]
}
 8007838:	bf00      	nop
 800783a:	e7fe      	b.n	800783a <pvPortMalloc+0x172>
	return pvReturn;
 800783c:	69fb      	ldr	r3, [r7, #28]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20004cfc 	.word	0x20004cfc
 800784c:	20004d10 	.word	0x20004d10
 8007850:	20004d00 	.word	0x20004d00
 8007854:	20004cf4 	.word	0x20004cf4
 8007858:	20004d04 	.word	0x20004d04
 800785c:	20004d08 	.word	0x20004d08

08007860 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d04d      	beq.n	800790e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007872:	2308      	movs	r3, #8
 8007874:	425b      	negs	r3, r3
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4413      	add	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	4b24      	ldr	r3, [pc, #144]	; (8007918 <vPortFree+0xb8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <vPortFree+0x44>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <vPortFree+0x62>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60bb      	str	r3, [r7, #8]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <vPortFree+0xb8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11a      	bne.n	800790e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <vPortFree+0xb8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078e8:	f7fe fc8c 	bl	8006204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	4b0a      	ldr	r3, [pc, #40]	; (800791c <vPortFree+0xbc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	4a09      	ldr	r2, [pc, #36]	; (800791c <vPortFree+0xbc>)
 80078f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078fa:	6938      	ldr	r0, [r7, #16]
 80078fc:	f000 f874 	bl	80079e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007900:	4b07      	ldr	r3, [pc, #28]	; (8007920 <vPortFree+0xc0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	4a06      	ldr	r2, [pc, #24]	; (8007920 <vPortFree+0xc0>)
 8007908:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800790a:	f7fe fc89 	bl	8006220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800790e:	bf00      	nop
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20004d10 	.word	0x20004d10
 800791c:	20004d00 	.word	0x20004d00
 8007920:	20004d0c 	.word	0x20004d0c

08007924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800792a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800792e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007930:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <prvHeapInit+0xac>)
 8007932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3307      	adds	r3, #7
 8007942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0307 	bic.w	r3, r3, #7
 800794a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <prvHeapInit+0xac>)
 8007954:	4413      	add	r3, r2
 8007956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800795c:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <prvHeapInit+0xb0>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <prvHeapInit+0xb0>)
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007970:	2208      	movs	r2, #8
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a15      	ldr	r2, [pc, #84]	; (80079d8 <prvHeapInit+0xb4>)
 8007984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <prvHeapInit+0xb4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <prvHeapInit+0xb4>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079a4:	4b0c      	ldr	r3, [pc, #48]	; (80079d8 <prvHeapInit+0xb4>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <prvHeapInit+0xb8>)
 80079b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <prvHeapInit+0xbc>)
 80079ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvHeapInit+0xc0>)
 80079be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	200010f4 	.word	0x200010f4
 80079d4:	20004cf4 	.word	0x20004cf4
 80079d8:	20004cfc 	.word	0x20004cfc
 80079dc:	20004d04 	.word	0x20004d04
 80079e0:	20004d00 	.word	0x20004d00
 80079e4:	20004d10 	.word	0x20004d10

080079e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079f0:	4b28      	ldr	r3, [pc, #160]	; (8007a94 <prvInsertBlockIntoFreeList+0xac>)
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e002      	b.n	80079fc <prvInsertBlockIntoFreeList+0x14>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d8f7      	bhi.n	80079f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d108      	bne.n	8007a2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	441a      	add	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d118      	bne.n	8007a70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <prvInsertBlockIntoFreeList+0xb0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d00d      	beq.n	8007a66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	441a      	add	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e008      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <prvInsertBlockIntoFreeList+0xb0>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	e003      	b.n	8007a78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d002      	beq.n	8007a86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20004cf4 	.word	0x20004cf4
 8007a98:	20004cfc 	.word	0x20004cfc

08007a9c <__cvt>:
 8007a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	ec55 4b10 	vmov	r4, r5, d0
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	460e      	mov	r6, r1
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	462b      	mov	r3, r5
 8007aac:	bfbb      	ittet	lt
 8007aae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ab2:	461d      	movlt	r5, r3
 8007ab4:	2300      	movge	r3, #0
 8007ab6:	232d      	movlt	r3, #45	; 0x2d
 8007ab8:	700b      	strb	r3, [r1, #0]
 8007aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007abc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	f023 0820 	bic.w	r8, r3, #32
 8007ac6:	bfbc      	itt	lt
 8007ac8:	4622      	movlt	r2, r4
 8007aca:	4614      	movlt	r4, r2
 8007acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ad0:	d005      	beq.n	8007ade <__cvt+0x42>
 8007ad2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ad6:	d100      	bne.n	8007ada <__cvt+0x3e>
 8007ad8:	3601      	adds	r6, #1
 8007ada:	2102      	movs	r1, #2
 8007adc:	e000      	b.n	8007ae0 <__cvt+0x44>
 8007ade:	2103      	movs	r1, #3
 8007ae0:	ab03      	add	r3, sp, #12
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	ab02      	add	r3, sp, #8
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	ec45 4b10 	vmov	d0, r4, r5
 8007aec:	4653      	mov	r3, sl
 8007aee:	4632      	mov	r2, r6
 8007af0:	f001 f8c2 	bl	8008c78 <_dtoa_r>
 8007af4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007af8:	4607      	mov	r7, r0
 8007afa:	d102      	bne.n	8007b02 <__cvt+0x66>
 8007afc:	f019 0f01 	tst.w	r9, #1
 8007b00:	d022      	beq.n	8007b48 <__cvt+0xac>
 8007b02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b06:	eb07 0906 	add.w	r9, r7, r6
 8007b0a:	d110      	bne.n	8007b2e <__cvt+0x92>
 8007b0c:	783b      	ldrb	r3, [r7, #0]
 8007b0e:	2b30      	cmp	r3, #48	; 0x30
 8007b10:	d10a      	bne.n	8007b28 <__cvt+0x8c>
 8007b12:	2200      	movs	r2, #0
 8007b14:	2300      	movs	r3, #0
 8007b16:	4620      	mov	r0, r4
 8007b18:	4629      	mov	r1, r5
 8007b1a:	f7f8 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b1e:	b918      	cbnz	r0, 8007b28 <__cvt+0x8c>
 8007b20:	f1c6 0601 	rsb	r6, r6, #1
 8007b24:	f8ca 6000 	str.w	r6, [sl]
 8007b28:	f8da 3000 	ldr.w	r3, [sl]
 8007b2c:	4499      	add	r9, r3
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2300      	movs	r3, #0
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f8 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b3a:	b108      	cbz	r0, 8007b40 <__cvt+0xa4>
 8007b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b40:	2230      	movs	r2, #48	; 0x30
 8007b42:	9b03      	ldr	r3, [sp, #12]
 8007b44:	454b      	cmp	r3, r9
 8007b46:	d307      	bcc.n	8007b58 <__cvt+0xbc>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b4c:	1bdb      	subs	r3, r3, r7
 8007b4e:	4638      	mov	r0, r7
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	b004      	add	sp, #16
 8007b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b58:	1c59      	adds	r1, r3, #1
 8007b5a:	9103      	str	r1, [sp, #12]
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e7f0      	b.n	8007b42 <__cvt+0xa6>

08007b60 <__exponent>:
 8007b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b62:	4603      	mov	r3, r0
 8007b64:	2900      	cmp	r1, #0
 8007b66:	bfb8      	it	lt
 8007b68:	4249      	neglt	r1, r1
 8007b6a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b6e:	bfb4      	ite	lt
 8007b70:	222d      	movlt	r2, #45	; 0x2d
 8007b72:	222b      	movge	r2, #43	; 0x2b
 8007b74:	2909      	cmp	r1, #9
 8007b76:	7042      	strb	r2, [r0, #1]
 8007b78:	dd2a      	ble.n	8007bd0 <__exponent+0x70>
 8007b7a:	f10d 0207 	add.w	r2, sp, #7
 8007b7e:	4617      	mov	r7, r2
 8007b80:	260a      	movs	r6, #10
 8007b82:	4694      	mov	ip, r2
 8007b84:	fb91 f5f6 	sdiv	r5, r1, r6
 8007b88:	fb06 1415 	mls	r4, r6, r5, r1
 8007b8c:	3430      	adds	r4, #48	; 0x30
 8007b8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007b92:	460c      	mov	r4, r1
 8007b94:	2c63      	cmp	r4, #99	; 0x63
 8007b96:	f102 32ff 	add.w	r2, r2, #4294967295
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	dcf1      	bgt.n	8007b82 <__exponent+0x22>
 8007b9e:	3130      	adds	r1, #48	; 0x30
 8007ba0:	f1ac 0402 	sub.w	r4, ip, #2
 8007ba4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ba8:	1c41      	adds	r1, r0, #1
 8007baa:	4622      	mov	r2, r4
 8007bac:	42ba      	cmp	r2, r7
 8007bae:	d30a      	bcc.n	8007bc6 <__exponent+0x66>
 8007bb0:	f10d 0209 	add.w	r2, sp, #9
 8007bb4:	eba2 020c 	sub.w	r2, r2, ip
 8007bb8:	42bc      	cmp	r4, r7
 8007bba:	bf88      	it	hi
 8007bbc:	2200      	movhi	r2, #0
 8007bbe:	4413      	add	r3, r2
 8007bc0:	1a18      	subs	r0, r3, r0
 8007bc2:	b003      	add	sp, #12
 8007bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007bca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007bce:	e7ed      	b.n	8007bac <__exponent+0x4c>
 8007bd0:	2330      	movs	r3, #48	; 0x30
 8007bd2:	3130      	adds	r1, #48	; 0x30
 8007bd4:	7083      	strb	r3, [r0, #2]
 8007bd6:	70c1      	strb	r1, [r0, #3]
 8007bd8:	1d03      	adds	r3, r0, #4
 8007bda:	e7f1      	b.n	8007bc0 <__exponent+0x60>

08007bdc <_printf_float>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	ed2d 8b02 	vpush	{d8}
 8007be4:	b08d      	sub	sp, #52	; 0x34
 8007be6:	460c      	mov	r4, r1
 8007be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bec:	4616      	mov	r6, r2
 8007bee:	461f      	mov	r7, r3
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	f000 ff2b 	bl	8008a4c <_localeconv_r>
 8007bf6:	f8d0 a000 	ldr.w	sl, [r0]
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	f7f8 fb40 	bl	8000280 <strlen>
 8007c00:	2300      	movs	r3, #0
 8007c02:	930a      	str	r3, [sp, #40]	; 0x28
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c10:	3307      	adds	r3, #7
 8007c12:	f023 0307 	bic.w	r3, r3, #7
 8007c16:	f103 0208 	add.w	r2, r3, #8
 8007c1a:	f8c8 2000 	str.w	r2, [r8]
 8007c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c2c:	ee08 0a10 	vmov	s16, r0
 8007c30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c38:	4b9e      	ldr	r3, [pc, #632]	; (8007eb4 <_printf_float+0x2d8>)
 8007c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3e:	f7f8 ff7d 	bl	8000b3c <__aeabi_dcmpun>
 8007c42:	bb88      	cbnz	r0, 8007ca8 <_printf_float+0xcc>
 8007c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c48:	4b9a      	ldr	r3, [pc, #616]	; (8007eb4 <_printf_float+0x2d8>)
 8007c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4e:	f7f8 ff57 	bl	8000b00 <__aeabi_dcmple>
 8007c52:	bb48      	cbnz	r0, 8007ca8 <_printf_float+0xcc>
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	4640      	mov	r0, r8
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	f7f8 ff46 	bl	8000aec <__aeabi_dcmplt>
 8007c60:	b110      	cbz	r0, 8007c68 <_printf_float+0x8c>
 8007c62:	232d      	movs	r3, #45	; 0x2d
 8007c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c68:	4a93      	ldr	r2, [pc, #588]	; (8007eb8 <_printf_float+0x2dc>)
 8007c6a:	4b94      	ldr	r3, [pc, #592]	; (8007ebc <_printf_float+0x2e0>)
 8007c6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c70:	bf94      	ite	ls
 8007c72:	4690      	movls	r8, r2
 8007c74:	4698      	movhi	r8, r3
 8007c76:	2303      	movs	r3, #3
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	f023 0304 	bic.w	r3, r3, #4
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	9700      	str	r7, [sp, #0]
 8007c88:	4633      	mov	r3, r6
 8007c8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f9da 	bl	8008048 <_printf_common>
 8007c94:	3001      	adds	r0, #1
 8007c96:	f040 8090 	bne.w	8007dba <_printf_float+0x1de>
 8007c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9e:	b00d      	add	sp, #52	; 0x34
 8007ca0:	ecbd 8b02 	vpop	{d8}
 8007ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca8:	4642      	mov	r2, r8
 8007caa:	464b      	mov	r3, r9
 8007cac:	4640      	mov	r0, r8
 8007cae:	4649      	mov	r1, r9
 8007cb0:	f7f8 ff44 	bl	8000b3c <__aeabi_dcmpun>
 8007cb4:	b140      	cbz	r0, 8007cc8 <_printf_float+0xec>
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfbc      	itt	lt
 8007cbc:	232d      	movlt	r3, #45	; 0x2d
 8007cbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cc2:	4a7f      	ldr	r2, [pc, #508]	; (8007ec0 <_printf_float+0x2e4>)
 8007cc4:	4b7f      	ldr	r3, [pc, #508]	; (8007ec4 <_printf_float+0x2e8>)
 8007cc6:	e7d1      	b.n	8007c6c <_printf_float+0x90>
 8007cc8:	6863      	ldr	r3, [r4, #4]
 8007cca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007cce:	9206      	str	r2, [sp, #24]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	d13f      	bne.n	8007d54 <_printf_float+0x178>
 8007cd4:	2306      	movs	r3, #6
 8007cd6:	6063      	str	r3, [r4, #4]
 8007cd8:	9b05      	ldr	r3, [sp, #20]
 8007cda:	6861      	ldr	r1, [r4, #4]
 8007cdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9303      	str	r3, [sp, #12]
 8007ce4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ce6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cea:	ab09      	add	r3, sp, #36	; 0x24
 8007cec:	ec49 8b10 	vmov	d0, r8, r9
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	6022      	str	r2, [r4, #0]
 8007cf4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7ff fecf 	bl	8007a9c <__cvt>
 8007cfe:	9b06      	ldr	r3, [sp, #24]
 8007d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d02:	2b47      	cmp	r3, #71	; 0x47
 8007d04:	4680      	mov	r8, r0
 8007d06:	d108      	bne.n	8007d1a <_printf_float+0x13e>
 8007d08:	1cc8      	adds	r0, r1, #3
 8007d0a:	db02      	blt.n	8007d12 <_printf_float+0x136>
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	dd41      	ble.n	8007d96 <_printf_float+0x1ba>
 8007d12:	f1ab 0302 	sub.w	r3, fp, #2
 8007d16:	fa5f fb83 	uxtb.w	fp, r3
 8007d1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d1e:	d820      	bhi.n	8007d62 <_printf_float+0x186>
 8007d20:	3901      	subs	r1, #1
 8007d22:	465a      	mov	r2, fp
 8007d24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d28:	9109      	str	r1, [sp, #36]	; 0x24
 8007d2a:	f7ff ff19 	bl	8007b60 <__exponent>
 8007d2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d30:	1813      	adds	r3, r2, r0
 8007d32:	2a01      	cmp	r2, #1
 8007d34:	4681      	mov	r9, r0
 8007d36:	6123      	str	r3, [r4, #16]
 8007d38:	dc02      	bgt.n	8007d40 <_printf_float+0x164>
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	07d2      	lsls	r2, r2, #31
 8007d3e:	d501      	bpl.n	8007d44 <_printf_float+0x168>
 8007d40:	3301      	adds	r3, #1
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d09c      	beq.n	8007c86 <_printf_float+0xaa>
 8007d4c:	232d      	movs	r3, #45	; 0x2d
 8007d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d52:	e798      	b.n	8007c86 <_printf_float+0xaa>
 8007d54:	9a06      	ldr	r2, [sp, #24]
 8007d56:	2a47      	cmp	r2, #71	; 0x47
 8007d58:	d1be      	bne.n	8007cd8 <_printf_float+0xfc>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1bc      	bne.n	8007cd8 <_printf_float+0xfc>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e7b9      	b.n	8007cd6 <_printf_float+0xfa>
 8007d62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d66:	d118      	bne.n	8007d9a <_printf_float+0x1be>
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	6863      	ldr	r3, [r4, #4]
 8007d6c:	dd0b      	ble.n	8007d86 <_printf_float+0x1aa>
 8007d6e:	6121      	str	r1, [r4, #16]
 8007d70:	b913      	cbnz	r3, 8007d78 <_printf_float+0x19c>
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	07d0      	lsls	r0, r2, #31
 8007d76:	d502      	bpl.n	8007d7e <_printf_float+0x1a2>
 8007d78:	3301      	adds	r3, #1
 8007d7a:	440b      	add	r3, r1
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d80:	f04f 0900 	mov.w	r9, #0
 8007d84:	e7de      	b.n	8007d44 <_printf_float+0x168>
 8007d86:	b913      	cbnz	r3, 8007d8e <_printf_float+0x1b2>
 8007d88:	6822      	ldr	r2, [r4, #0]
 8007d8a:	07d2      	lsls	r2, r2, #31
 8007d8c:	d501      	bpl.n	8007d92 <_printf_float+0x1b6>
 8007d8e:	3302      	adds	r3, #2
 8007d90:	e7f4      	b.n	8007d7c <_printf_float+0x1a0>
 8007d92:	2301      	movs	r3, #1
 8007d94:	e7f2      	b.n	8007d7c <_printf_float+0x1a0>
 8007d96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9c:	4299      	cmp	r1, r3
 8007d9e:	db05      	blt.n	8007dac <_printf_float+0x1d0>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	6121      	str	r1, [r4, #16]
 8007da4:	07d8      	lsls	r0, r3, #31
 8007da6:	d5ea      	bpl.n	8007d7e <_printf_float+0x1a2>
 8007da8:	1c4b      	adds	r3, r1, #1
 8007daa:	e7e7      	b.n	8007d7c <_printf_float+0x1a0>
 8007dac:	2900      	cmp	r1, #0
 8007dae:	bfd4      	ite	le
 8007db0:	f1c1 0202 	rsble	r2, r1, #2
 8007db4:	2201      	movgt	r2, #1
 8007db6:	4413      	add	r3, r2
 8007db8:	e7e0      	b.n	8007d7c <_printf_float+0x1a0>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	055a      	lsls	r2, r3, #21
 8007dbe:	d407      	bmi.n	8007dd0 <_printf_float+0x1f4>
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d12c      	bne.n	8007e28 <_printf_float+0x24c>
 8007dce:	e764      	b.n	8007c9a <_printf_float+0xbe>
 8007dd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dd4:	f240 80e0 	bls.w	8007f98 <_printf_float+0x3bc>
 8007dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2300      	movs	r3, #0
 8007de0:	f7f8 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d034      	beq.n	8007e52 <_printf_float+0x276>
 8007de8:	4a37      	ldr	r2, [pc, #220]	; (8007ec8 <_printf_float+0x2ec>)
 8007dea:	2301      	movs	r3, #1
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f af51 	beq.w	8007c9a <_printf_float+0xbe>
 8007df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	db02      	blt.n	8007e06 <_printf_float+0x22a>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	07d8      	lsls	r0, r3, #31
 8007e04:	d510      	bpl.n	8007e28 <_printf_float+0x24c>
 8007e06:	ee18 3a10 	vmov	r3, s16
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f af41 	beq.w	8007c9a <_printf_float+0xbe>
 8007e18:	f04f 0800 	mov.w	r8, #0
 8007e1c:	f104 091a 	add.w	r9, r4, #26
 8007e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e22:	3b01      	subs	r3, #1
 8007e24:	4543      	cmp	r3, r8
 8007e26:	dc09      	bgt.n	8007e3c <_printf_float+0x260>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	f100 8107 	bmi.w	800803e <_printf_float+0x462>
 8007e30:	68e0      	ldr	r0, [r4, #12]
 8007e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e34:	4298      	cmp	r0, r3
 8007e36:	bfb8      	it	lt
 8007e38:	4618      	movlt	r0, r3
 8007e3a:	e730      	b.n	8007c9e <_printf_float+0xc2>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	464a      	mov	r2, r9
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	f43f af27 	beq.w	8007c9a <_printf_float+0xbe>
 8007e4c:	f108 0801 	add.w	r8, r8, #1
 8007e50:	e7e6      	b.n	8007e20 <_printf_float+0x244>
 8007e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dc39      	bgt.n	8007ecc <_printf_float+0x2f0>
 8007e58:	4a1b      	ldr	r2, [pc, #108]	; (8007ec8 <_printf_float+0x2ec>)
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	4628      	mov	r0, r5
 8007e60:	47b8      	blx	r7
 8007e62:	3001      	adds	r0, #1
 8007e64:	f43f af19 	beq.w	8007c9a <_printf_float+0xbe>
 8007e68:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	d102      	bne.n	8007e76 <_printf_float+0x29a>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	07d9      	lsls	r1, r3, #31
 8007e74:	d5d8      	bpl.n	8007e28 <_printf_float+0x24c>
 8007e76:	ee18 3a10 	vmov	r3, s16
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	f43f af09 	beq.w	8007c9a <_printf_float+0xbe>
 8007e88:	f04f 0900 	mov.w	r9, #0
 8007e8c:	f104 0a1a 	add.w	sl, r4, #26
 8007e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e92:	425b      	negs	r3, r3
 8007e94:	454b      	cmp	r3, r9
 8007e96:	dc01      	bgt.n	8007e9c <_printf_float+0x2c0>
 8007e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9a:	e792      	b.n	8007dc2 <_printf_float+0x1e6>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4652      	mov	r2, sl
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f aef7 	beq.w	8007c9a <_printf_float+0xbe>
 8007eac:	f109 0901 	add.w	r9, r9, #1
 8007eb0:	e7ee      	b.n	8007e90 <_printf_float+0x2b4>
 8007eb2:	bf00      	nop
 8007eb4:	7fefffff 	.word	0x7fefffff
 8007eb8:	0800c440 	.word	0x0800c440
 8007ebc:	0800c444 	.word	0x0800c444
 8007ec0:	0800c448 	.word	0x0800c448
 8007ec4:	0800c44c 	.word	0x0800c44c
 8007ec8:	0800c450 	.word	0x0800c450
 8007ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ece:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	bfa8      	it	ge
 8007ed4:	461a      	movge	r2, r3
 8007ed6:	2a00      	cmp	r2, #0
 8007ed8:	4691      	mov	r9, r2
 8007eda:	dc37      	bgt.n	8007f4c <_printf_float+0x370>
 8007edc:	f04f 0b00 	mov.w	fp, #0
 8007ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ee4:	f104 021a 	add.w	r2, r4, #26
 8007ee8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007eea:	9305      	str	r3, [sp, #20]
 8007eec:	eba3 0309 	sub.w	r3, r3, r9
 8007ef0:	455b      	cmp	r3, fp
 8007ef2:	dc33      	bgt.n	8007f5c <_printf_float+0x380>
 8007ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	db3b      	blt.n	8007f74 <_printf_float+0x398>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	07da      	lsls	r2, r3, #31
 8007f00:	d438      	bmi.n	8007f74 <_printf_float+0x398>
 8007f02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f06:	eba2 0903 	sub.w	r9, r2, r3
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	1ad2      	subs	r2, r2, r3
 8007f0e:	4591      	cmp	r9, r2
 8007f10:	bfa8      	it	ge
 8007f12:	4691      	movge	r9, r2
 8007f14:	f1b9 0f00 	cmp.w	r9, #0
 8007f18:	dc35      	bgt.n	8007f86 <_printf_float+0x3aa>
 8007f1a:	f04f 0800 	mov.w	r8, #0
 8007f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f22:	f104 0a1a 	add.w	sl, r4, #26
 8007f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	eba3 0309 	sub.w	r3, r3, r9
 8007f30:	4543      	cmp	r3, r8
 8007f32:	f77f af79 	ble.w	8007e28 <_printf_float+0x24c>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4652      	mov	r2, sl
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f aeaa 	beq.w	8007c9a <_printf_float+0xbe>
 8007f46:	f108 0801 	add.w	r8, r8, #1
 8007f4a:	e7ec      	b.n	8007f26 <_printf_float+0x34a>
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	4631      	mov	r1, r6
 8007f50:	4642      	mov	r2, r8
 8007f52:	4628      	mov	r0, r5
 8007f54:	47b8      	blx	r7
 8007f56:	3001      	adds	r0, #1
 8007f58:	d1c0      	bne.n	8007edc <_printf_float+0x300>
 8007f5a:	e69e      	b.n	8007c9a <_printf_float+0xbe>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	9205      	str	r2, [sp, #20]
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f43f ae97 	beq.w	8007c9a <_printf_float+0xbe>
 8007f6c:	9a05      	ldr	r2, [sp, #20]
 8007f6e:	f10b 0b01 	add.w	fp, fp, #1
 8007f72:	e7b9      	b.n	8007ee8 <_printf_float+0x30c>
 8007f74:	ee18 3a10 	vmov	r3, s16
 8007f78:	4652      	mov	r2, sl
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	d1be      	bne.n	8007f02 <_printf_float+0x326>
 8007f84:	e689      	b.n	8007c9a <_printf_float+0xbe>
 8007f86:	9a05      	ldr	r2, [sp, #20]
 8007f88:	464b      	mov	r3, r9
 8007f8a:	4442      	add	r2, r8
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4628      	mov	r0, r5
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	d1c1      	bne.n	8007f1a <_printf_float+0x33e>
 8007f96:	e680      	b.n	8007c9a <_printf_float+0xbe>
 8007f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f9a:	2a01      	cmp	r2, #1
 8007f9c:	dc01      	bgt.n	8007fa2 <_printf_float+0x3c6>
 8007f9e:	07db      	lsls	r3, r3, #31
 8007fa0:	d53a      	bpl.n	8008018 <_printf_float+0x43c>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b8      	blx	r7
 8007fac:	3001      	adds	r0, #1
 8007fae:	f43f ae74 	beq.w	8007c9a <_printf_float+0xbe>
 8007fb2:	ee18 3a10 	vmov	r3, s16
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f ae6b 	beq.w	8007c9a <_printf_float+0xbe>
 8007fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007fd0:	f7f8 fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fd4:	b9d8      	cbnz	r0, 800800e <_printf_float+0x432>
 8007fd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007fda:	f108 0201 	add.w	r2, r8, #1
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d10e      	bne.n	8008006 <_printf_float+0x42a>
 8007fe8:	e657      	b.n	8007c9a <_printf_float+0xbe>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4652      	mov	r2, sl
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f43f ae50 	beq.w	8007c9a <_printf_float+0xbe>
 8007ffa:	f108 0801 	add.w	r8, r8, #1
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008000:	3b01      	subs	r3, #1
 8008002:	4543      	cmp	r3, r8
 8008004:	dcf1      	bgt.n	8007fea <_printf_float+0x40e>
 8008006:	464b      	mov	r3, r9
 8008008:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800800c:	e6da      	b.n	8007dc4 <_printf_float+0x1e8>
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	f104 0a1a 	add.w	sl, r4, #26
 8008016:	e7f2      	b.n	8007ffe <_printf_float+0x422>
 8008018:	2301      	movs	r3, #1
 800801a:	4642      	mov	r2, r8
 800801c:	e7df      	b.n	8007fde <_printf_float+0x402>
 800801e:	2301      	movs	r3, #1
 8008020:	464a      	mov	r2, r9
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	f43f ae36 	beq.w	8007c9a <_printf_float+0xbe>
 800802e:	f108 0801 	add.w	r8, r8, #1
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008036:	1a5b      	subs	r3, r3, r1
 8008038:	4543      	cmp	r3, r8
 800803a:	dcf0      	bgt.n	800801e <_printf_float+0x442>
 800803c:	e6f8      	b.n	8007e30 <_printf_float+0x254>
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	f104 0919 	add.w	r9, r4, #25
 8008046:	e7f4      	b.n	8008032 <_printf_float+0x456>

08008048 <_printf_common>:
 8008048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	4616      	mov	r6, r2
 800804e:	4699      	mov	r9, r3
 8008050:	688a      	ldr	r2, [r1, #8]
 8008052:	690b      	ldr	r3, [r1, #16]
 8008054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008058:	4293      	cmp	r3, r2
 800805a:	bfb8      	it	lt
 800805c:	4613      	movlt	r3, r2
 800805e:	6033      	str	r3, [r6, #0]
 8008060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008064:	4607      	mov	r7, r0
 8008066:	460c      	mov	r4, r1
 8008068:	b10a      	cbz	r2, 800806e <_printf_common+0x26>
 800806a:	3301      	adds	r3, #1
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	0699      	lsls	r1, r3, #26
 8008072:	bf42      	ittt	mi
 8008074:	6833      	ldrmi	r3, [r6, #0]
 8008076:	3302      	addmi	r3, #2
 8008078:	6033      	strmi	r3, [r6, #0]
 800807a:	6825      	ldr	r5, [r4, #0]
 800807c:	f015 0506 	ands.w	r5, r5, #6
 8008080:	d106      	bne.n	8008090 <_printf_common+0x48>
 8008082:	f104 0a19 	add.w	sl, r4, #25
 8008086:	68e3      	ldr	r3, [r4, #12]
 8008088:	6832      	ldr	r2, [r6, #0]
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	42ab      	cmp	r3, r5
 800808e:	dc26      	bgt.n	80080de <_printf_common+0x96>
 8008090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008094:	1e13      	subs	r3, r2, #0
 8008096:	6822      	ldr	r2, [r4, #0]
 8008098:	bf18      	it	ne
 800809a:	2301      	movne	r3, #1
 800809c:	0692      	lsls	r2, r2, #26
 800809e:	d42b      	bmi.n	80080f8 <_printf_common+0xb0>
 80080a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080a4:	4649      	mov	r1, r9
 80080a6:	4638      	mov	r0, r7
 80080a8:	47c0      	blx	r8
 80080aa:	3001      	adds	r0, #1
 80080ac:	d01e      	beq.n	80080ec <_printf_common+0xa4>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	6922      	ldr	r2, [r4, #16]
 80080b2:	f003 0306 	and.w	r3, r3, #6
 80080b6:	2b04      	cmp	r3, #4
 80080b8:	bf02      	ittt	eq
 80080ba:	68e5      	ldreq	r5, [r4, #12]
 80080bc:	6833      	ldreq	r3, [r6, #0]
 80080be:	1aed      	subeq	r5, r5, r3
 80080c0:	68a3      	ldr	r3, [r4, #8]
 80080c2:	bf0c      	ite	eq
 80080c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080c8:	2500      	movne	r5, #0
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bfc4      	itt	gt
 80080ce:	1a9b      	subgt	r3, r3, r2
 80080d0:	18ed      	addgt	r5, r5, r3
 80080d2:	2600      	movs	r6, #0
 80080d4:	341a      	adds	r4, #26
 80080d6:	42b5      	cmp	r5, r6
 80080d8:	d11a      	bne.n	8008110 <_printf_common+0xc8>
 80080da:	2000      	movs	r0, #0
 80080dc:	e008      	b.n	80080f0 <_printf_common+0xa8>
 80080de:	2301      	movs	r3, #1
 80080e0:	4652      	mov	r2, sl
 80080e2:	4649      	mov	r1, r9
 80080e4:	4638      	mov	r0, r7
 80080e6:	47c0      	blx	r8
 80080e8:	3001      	adds	r0, #1
 80080ea:	d103      	bne.n	80080f4 <_printf_common+0xac>
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295
 80080f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f4:	3501      	adds	r5, #1
 80080f6:	e7c6      	b.n	8008086 <_printf_common+0x3e>
 80080f8:	18e1      	adds	r1, r4, r3
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	2030      	movs	r0, #48	; 0x30
 80080fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008102:	4422      	add	r2, r4
 8008104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800810c:	3302      	adds	r3, #2
 800810e:	e7c7      	b.n	80080a0 <_printf_common+0x58>
 8008110:	2301      	movs	r3, #1
 8008112:	4622      	mov	r2, r4
 8008114:	4649      	mov	r1, r9
 8008116:	4638      	mov	r0, r7
 8008118:	47c0      	blx	r8
 800811a:	3001      	adds	r0, #1
 800811c:	d0e6      	beq.n	80080ec <_printf_common+0xa4>
 800811e:	3601      	adds	r6, #1
 8008120:	e7d9      	b.n	80080d6 <_printf_common+0x8e>
	...

08008124 <_printf_i>:
 8008124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	7e0f      	ldrb	r7, [r1, #24]
 800812a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800812c:	2f78      	cmp	r7, #120	; 0x78
 800812e:	4691      	mov	r9, r2
 8008130:	4680      	mov	r8, r0
 8008132:	460c      	mov	r4, r1
 8008134:	469a      	mov	sl, r3
 8008136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800813a:	d807      	bhi.n	800814c <_printf_i+0x28>
 800813c:	2f62      	cmp	r7, #98	; 0x62
 800813e:	d80a      	bhi.n	8008156 <_printf_i+0x32>
 8008140:	2f00      	cmp	r7, #0
 8008142:	f000 80d4 	beq.w	80082ee <_printf_i+0x1ca>
 8008146:	2f58      	cmp	r7, #88	; 0x58
 8008148:	f000 80c0 	beq.w	80082cc <_printf_i+0x1a8>
 800814c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008154:	e03a      	b.n	80081cc <_printf_i+0xa8>
 8008156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800815a:	2b15      	cmp	r3, #21
 800815c:	d8f6      	bhi.n	800814c <_printf_i+0x28>
 800815e:	a101      	add	r1, pc, #4	; (adr r1, 8008164 <_printf_i+0x40>)
 8008160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008164:	080081bd 	.word	0x080081bd
 8008168:	080081d1 	.word	0x080081d1
 800816c:	0800814d 	.word	0x0800814d
 8008170:	0800814d 	.word	0x0800814d
 8008174:	0800814d 	.word	0x0800814d
 8008178:	0800814d 	.word	0x0800814d
 800817c:	080081d1 	.word	0x080081d1
 8008180:	0800814d 	.word	0x0800814d
 8008184:	0800814d 	.word	0x0800814d
 8008188:	0800814d 	.word	0x0800814d
 800818c:	0800814d 	.word	0x0800814d
 8008190:	080082d5 	.word	0x080082d5
 8008194:	080081fd 	.word	0x080081fd
 8008198:	0800828f 	.word	0x0800828f
 800819c:	0800814d 	.word	0x0800814d
 80081a0:	0800814d 	.word	0x0800814d
 80081a4:	080082f7 	.word	0x080082f7
 80081a8:	0800814d 	.word	0x0800814d
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	0800814d 	.word	0x0800814d
 80081b4:	0800814d 	.word	0x0800814d
 80081b8:	08008297 	.word	0x08008297
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	1d1a      	adds	r2, r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	602a      	str	r2, [r5, #0]
 80081c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081cc:	2301      	movs	r3, #1
 80081ce:	e09f      	b.n	8008310 <_printf_i+0x1ec>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	0607      	lsls	r7, r0, #24
 80081d6:	f103 0104 	add.w	r1, r3, #4
 80081da:	6029      	str	r1, [r5, #0]
 80081dc:	d501      	bpl.n	80081e2 <_printf_i+0xbe>
 80081de:	681e      	ldr	r6, [r3, #0]
 80081e0:	e003      	b.n	80081ea <_printf_i+0xc6>
 80081e2:	0646      	lsls	r6, r0, #25
 80081e4:	d5fb      	bpl.n	80081de <_printf_i+0xba>
 80081e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80081ea:	2e00      	cmp	r6, #0
 80081ec:	da03      	bge.n	80081f6 <_printf_i+0xd2>
 80081ee:	232d      	movs	r3, #45	; 0x2d
 80081f0:	4276      	negs	r6, r6
 80081f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f6:	485a      	ldr	r0, [pc, #360]	; (8008360 <_printf_i+0x23c>)
 80081f8:	230a      	movs	r3, #10
 80081fa:	e012      	b.n	8008222 <_printf_i+0xfe>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	1d19      	adds	r1, r3, #4
 8008202:	6029      	str	r1, [r5, #0]
 8008204:	0605      	lsls	r5, r0, #24
 8008206:	d501      	bpl.n	800820c <_printf_i+0xe8>
 8008208:	681e      	ldr	r6, [r3, #0]
 800820a:	e002      	b.n	8008212 <_printf_i+0xee>
 800820c:	0641      	lsls	r1, r0, #25
 800820e:	d5fb      	bpl.n	8008208 <_printf_i+0xe4>
 8008210:	881e      	ldrh	r6, [r3, #0]
 8008212:	4853      	ldr	r0, [pc, #332]	; (8008360 <_printf_i+0x23c>)
 8008214:	2f6f      	cmp	r7, #111	; 0x6f
 8008216:	bf0c      	ite	eq
 8008218:	2308      	moveq	r3, #8
 800821a:	230a      	movne	r3, #10
 800821c:	2100      	movs	r1, #0
 800821e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008222:	6865      	ldr	r5, [r4, #4]
 8008224:	60a5      	str	r5, [r4, #8]
 8008226:	2d00      	cmp	r5, #0
 8008228:	bfa2      	ittt	ge
 800822a:	6821      	ldrge	r1, [r4, #0]
 800822c:	f021 0104 	bicge.w	r1, r1, #4
 8008230:	6021      	strge	r1, [r4, #0]
 8008232:	b90e      	cbnz	r6, 8008238 <_printf_i+0x114>
 8008234:	2d00      	cmp	r5, #0
 8008236:	d04b      	beq.n	80082d0 <_printf_i+0x1ac>
 8008238:	4615      	mov	r5, r2
 800823a:	fbb6 f1f3 	udiv	r1, r6, r3
 800823e:	fb03 6711 	mls	r7, r3, r1, r6
 8008242:	5dc7      	ldrb	r7, [r0, r7]
 8008244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008248:	4637      	mov	r7, r6
 800824a:	42bb      	cmp	r3, r7
 800824c:	460e      	mov	r6, r1
 800824e:	d9f4      	bls.n	800823a <_printf_i+0x116>
 8008250:	2b08      	cmp	r3, #8
 8008252:	d10b      	bne.n	800826c <_printf_i+0x148>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	07de      	lsls	r6, r3, #31
 8008258:	d508      	bpl.n	800826c <_printf_i+0x148>
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	6861      	ldr	r1, [r4, #4]
 800825e:	4299      	cmp	r1, r3
 8008260:	bfde      	ittt	le
 8008262:	2330      	movle	r3, #48	; 0x30
 8008264:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008268:	f105 35ff 	addle.w	r5, r5, #4294967295
 800826c:	1b52      	subs	r2, r2, r5
 800826e:	6122      	str	r2, [r4, #16]
 8008270:	f8cd a000 	str.w	sl, [sp]
 8008274:	464b      	mov	r3, r9
 8008276:	aa03      	add	r2, sp, #12
 8008278:	4621      	mov	r1, r4
 800827a:	4640      	mov	r0, r8
 800827c:	f7ff fee4 	bl	8008048 <_printf_common>
 8008280:	3001      	adds	r0, #1
 8008282:	d14a      	bne.n	800831a <_printf_i+0x1f6>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	b004      	add	sp, #16
 800828a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	f043 0320 	orr.w	r3, r3, #32
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	4833      	ldr	r0, [pc, #204]	; (8008364 <_printf_i+0x240>)
 8008298:	2778      	movs	r7, #120	; 0x78
 800829a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6829      	ldr	r1, [r5, #0]
 80082a2:	061f      	lsls	r7, r3, #24
 80082a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80082a8:	d402      	bmi.n	80082b0 <_printf_i+0x18c>
 80082aa:	065f      	lsls	r7, r3, #25
 80082ac:	bf48      	it	mi
 80082ae:	b2b6      	uxthmi	r6, r6
 80082b0:	07df      	lsls	r7, r3, #31
 80082b2:	bf48      	it	mi
 80082b4:	f043 0320 	orrmi.w	r3, r3, #32
 80082b8:	6029      	str	r1, [r5, #0]
 80082ba:	bf48      	it	mi
 80082bc:	6023      	strmi	r3, [r4, #0]
 80082be:	b91e      	cbnz	r6, 80082c8 <_printf_i+0x1a4>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	f023 0320 	bic.w	r3, r3, #32
 80082c6:	6023      	str	r3, [r4, #0]
 80082c8:	2310      	movs	r3, #16
 80082ca:	e7a7      	b.n	800821c <_printf_i+0xf8>
 80082cc:	4824      	ldr	r0, [pc, #144]	; (8008360 <_printf_i+0x23c>)
 80082ce:	e7e4      	b.n	800829a <_printf_i+0x176>
 80082d0:	4615      	mov	r5, r2
 80082d2:	e7bd      	b.n	8008250 <_printf_i+0x12c>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	6826      	ldr	r6, [r4, #0]
 80082d8:	6961      	ldr	r1, [r4, #20]
 80082da:	1d18      	adds	r0, r3, #4
 80082dc:	6028      	str	r0, [r5, #0]
 80082de:	0635      	lsls	r5, r6, #24
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	d501      	bpl.n	80082e8 <_printf_i+0x1c4>
 80082e4:	6019      	str	r1, [r3, #0]
 80082e6:	e002      	b.n	80082ee <_printf_i+0x1ca>
 80082e8:	0670      	lsls	r0, r6, #25
 80082ea:	d5fb      	bpl.n	80082e4 <_printf_i+0x1c0>
 80082ec:	8019      	strh	r1, [r3, #0]
 80082ee:	2300      	movs	r3, #0
 80082f0:	6123      	str	r3, [r4, #16]
 80082f2:	4615      	mov	r5, r2
 80082f4:	e7bc      	b.n	8008270 <_printf_i+0x14c>
 80082f6:	682b      	ldr	r3, [r5, #0]
 80082f8:	1d1a      	adds	r2, r3, #4
 80082fa:	602a      	str	r2, [r5, #0]
 80082fc:	681d      	ldr	r5, [r3, #0]
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	2100      	movs	r1, #0
 8008302:	4628      	mov	r0, r5
 8008304:	f7f7 ff6c 	bl	80001e0 <memchr>
 8008308:	b108      	cbz	r0, 800830e <_printf_i+0x1ea>
 800830a:	1b40      	subs	r0, r0, r5
 800830c:	6060      	str	r0, [r4, #4]
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	2300      	movs	r3, #0
 8008314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008318:	e7aa      	b.n	8008270 <_printf_i+0x14c>
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	462a      	mov	r2, r5
 800831e:	4649      	mov	r1, r9
 8008320:	4640      	mov	r0, r8
 8008322:	47d0      	blx	sl
 8008324:	3001      	adds	r0, #1
 8008326:	d0ad      	beq.n	8008284 <_printf_i+0x160>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	079b      	lsls	r3, r3, #30
 800832c:	d413      	bmi.n	8008356 <_printf_i+0x232>
 800832e:	68e0      	ldr	r0, [r4, #12]
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	4298      	cmp	r0, r3
 8008334:	bfb8      	it	lt
 8008336:	4618      	movlt	r0, r3
 8008338:	e7a6      	b.n	8008288 <_printf_i+0x164>
 800833a:	2301      	movs	r3, #1
 800833c:	4632      	mov	r2, r6
 800833e:	4649      	mov	r1, r9
 8008340:	4640      	mov	r0, r8
 8008342:	47d0      	blx	sl
 8008344:	3001      	adds	r0, #1
 8008346:	d09d      	beq.n	8008284 <_printf_i+0x160>
 8008348:	3501      	adds	r5, #1
 800834a:	68e3      	ldr	r3, [r4, #12]
 800834c:	9903      	ldr	r1, [sp, #12]
 800834e:	1a5b      	subs	r3, r3, r1
 8008350:	42ab      	cmp	r3, r5
 8008352:	dcf2      	bgt.n	800833a <_printf_i+0x216>
 8008354:	e7eb      	b.n	800832e <_printf_i+0x20a>
 8008356:	2500      	movs	r5, #0
 8008358:	f104 0619 	add.w	r6, r4, #25
 800835c:	e7f5      	b.n	800834a <_printf_i+0x226>
 800835e:	bf00      	nop
 8008360:	0800c452 	.word	0x0800c452
 8008364:	0800c463 	.word	0x0800c463

08008368 <_scanf_float>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	b087      	sub	sp, #28
 800836e:	4617      	mov	r7, r2
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	688b      	ldr	r3, [r1, #8]
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800837a:	bf83      	ittte	hi
 800837c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008380:	195b      	addhi	r3, r3, r5
 8008382:	9302      	strhi	r3, [sp, #8]
 8008384:	2300      	movls	r3, #0
 8008386:	bf86      	itte	hi
 8008388:	f240 135d 	movwhi	r3, #349	; 0x15d
 800838c:	608b      	strhi	r3, [r1, #8]
 800838e:	9302      	strls	r3, [sp, #8]
 8008390:	680b      	ldr	r3, [r1, #0]
 8008392:	468b      	mov	fp, r1
 8008394:	2500      	movs	r5, #0
 8008396:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800839a:	f84b 3b1c 	str.w	r3, [fp], #28
 800839e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083a2:	4680      	mov	r8, r0
 80083a4:	460c      	mov	r4, r1
 80083a6:	465e      	mov	r6, fp
 80083a8:	46aa      	mov	sl, r5
 80083aa:	46a9      	mov	r9, r5
 80083ac:	9501      	str	r5, [sp, #4]
 80083ae:	68a2      	ldr	r2, [r4, #8]
 80083b0:	b152      	cbz	r2, 80083c8 <_scanf_float+0x60>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b4e      	cmp	r3, #78	; 0x4e
 80083b8:	d864      	bhi.n	8008484 <_scanf_float+0x11c>
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d83c      	bhi.n	8008438 <_scanf_float+0xd0>
 80083be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80083c2:	b2c8      	uxtb	r0, r1
 80083c4:	280e      	cmp	r0, #14
 80083c6:	d93a      	bls.n	800843e <_scanf_float+0xd6>
 80083c8:	f1b9 0f00 	cmp.w	r9, #0
 80083cc:	d003      	beq.n	80083d6 <_scanf_float+0x6e>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083da:	f1ba 0f01 	cmp.w	sl, #1
 80083de:	f200 8113 	bhi.w	8008608 <_scanf_float+0x2a0>
 80083e2:	455e      	cmp	r6, fp
 80083e4:	f200 8105 	bhi.w	80085f2 <_scanf_float+0x28a>
 80083e8:	2501      	movs	r5, #1
 80083ea:	4628      	mov	r0, r5
 80083ec:	b007      	add	sp, #28
 80083ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80083f6:	2a0d      	cmp	r2, #13
 80083f8:	d8e6      	bhi.n	80083c8 <_scanf_float+0x60>
 80083fa:	a101      	add	r1, pc, #4	; (adr r1, 8008400 <_scanf_float+0x98>)
 80083fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008400:	0800853f 	.word	0x0800853f
 8008404:	080083c9 	.word	0x080083c9
 8008408:	080083c9 	.word	0x080083c9
 800840c:	080083c9 	.word	0x080083c9
 8008410:	0800859f 	.word	0x0800859f
 8008414:	08008577 	.word	0x08008577
 8008418:	080083c9 	.word	0x080083c9
 800841c:	080083c9 	.word	0x080083c9
 8008420:	0800854d 	.word	0x0800854d
 8008424:	080083c9 	.word	0x080083c9
 8008428:	080083c9 	.word	0x080083c9
 800842c:	080083c9 	.word	0x080083c9
 8008430:	080083c9 	.word	0x080083c9
 8008434:	08008505 	.word	0x08008505
 8008438:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800843c:	e7db      	b.n	80083f6 <_scanf_float+0x8e>
 800843e:	290e      	cmp	r1, #14
 8008440:	d8c2      	bhi.n	80083c8 <_scanf_float+0x60>
 8008442:	a001      	add	r0, pc, #4	; (adr r0, 8008448 <_scanf_float+0xe0>)
 8008444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008448:	080084f7 	.word	0x080084f7
 800844c:	080083c9 	.word	0x080083c9
 8008450:	080084f7 	.word	0x080084f7
 8008454:	0800858b 	.word	0x0800858b
 8008458:	080083c9 	.word	0x080083c9
 800845c:	080084a5 	.word	0x080084a5
 8008460:	080084e1 	.word	0x080084e1
 8008464:	080084e1 	.word	0x080084e1
 8008468:	080084e1 	.word	0x080084e1
 800846c:	080084e1 	.word	0x080084e1
 8008470:	080084e1 	.word	0x080084e1
 8008474:	080084e1 	.word	0x080084e1
 8008478:	080084e1 	.word	0x080084e1
 800847c:	080084e1 	.word	0x080084e1
 8008480:	080084e1 	.word	0x080084e1
 8008484:	2b6e      	cmp	r3, #110	; 0x6e
 8008486:	d809      	bhi.n	800849c <_scanf_float+0x134>
 8008488:	2b60      	cmp	r3, #96	; 0x60
 800848a:	d8b2      	bhi.n	80083f2 <_scanf_float+0x8a>
 800848c:	2b54      	cmp	r3, #84	; 0x54
 800848e:	d077      	beq.n	8008580 <_scanf_float+0x218>
 8008490:	2b59      	cmp	r3, #89	; 0x59
 8008492:	d199      	bne.n	80083c8 <_scanf_float+0x60>
 8008494:	2d07      	cmp	r5, #7
 8008496:	d197      	bne.n	80083c8 <_scanf_float+0x60>
 8008498:	2508      	movs	r5, #8
 800849a:	e029      	b.n	80084f0 <_scanf_float+0x188>
 800849c:	2b74      	cmp	r3, #116	; 0x74
 800849e:	d06f      	beq.n	8008580 <_scanf_float+0x218>
 80084a0:	2b79      	cmp	r3, #121	; 0x79
 80084a2:	e7f6      	b.n	8008492 <_scanf_float+0x12a>
 80084a4:	6821      	ldr	r1, [r4, #0]
 80084a6:	05c8      	lsls	r0, r1, #23
 80084a8:	d51a      	bpl.n	80084e0 <_scanf_float+0x178>
 80084aa:	9b02      	ldr	r3, [sp, #8]
 80084ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80084b0:	6021      	str	r1, [r4, #0]
 80084b2:	f109 0901 	add.w	r9, r9, #1
 80084b6:	b11b      	cbz	r3, 80084c0 <_scanf_float+0x158>
 80084b8:	3b01      	subs	r3, #1
 80084ba:	3201      	adds	r2, #1
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	60a2      	str	r2, [r4, #8]
 80084c0:	68a3      	ldr	r3, [r4, #8]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	6923      	ldr	r3, [r4, #16]
 80084c8:	3301      	adds	r3, #1
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	607b      	str	r3, [r7, #4]
 80084d4:	f340 8084 	ble.w	80085e0 <_scanf_float+0x278>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	3301      	adds	r3, #1
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	e766      	b.n	80083ae <_scanf_float+0x46>
 80084e0:	eb1a 0f05 	cmn.w	sl, r5
 80084e4:	f47f af70 	bne.w	80083c8 <_scanf_float+0x60>
 80084e8:	6822      	ldr	r2, [r4, #0]
 80084ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	f806 3b01 	strb.w	r3, [r6], #1
 80084f4:	e7e4      	b.n	80084c0 <_scanf_float+0x158>
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	0610      	lsls	r0, r2, #24
 80084fa:	f57f af65 	bpl.w	80083c8 <_scanf_float+0x60>
 80084fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008502:	e7f4      	b.n	80084ee <_scanf_float+0x186>
 8008504:	f1ba 0f00 	cmp.w	sl, #0
 8008508:	d10e      	bne.n	8008528 <_scanf_float+0x1c0>
 800850a:	f1b9 0f00 	cmp.w	r9, #0
 800850e:	d10e      	bne.n	800852e <_scanf_float+0x1c6>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008516:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800851a:	d108      	bne.n	800852e <_scanf_float+0x1c6>
 800851c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008520:	6022      	str	r2, [r4, #0]
 8008522:	f04f 0a01 	mov.w	sl, #1
 8008526:	e7e3      	b.n	80084f0 <_scanf_float+0x188>
 8008528:	f1ba 0f02 	cmp.w	sl, #2
 800852c:	d055      	beq.n	80085da <_scanf_float+0x272>
 800852e:	2d01      	cmp	r5, #1
 8008530:	d002      	beq.n	8008538 <_scanf_float+0x1d0>
 8008532:	2d04      	cmp	r5, #4
 8008534:	f47f af48 	bne.w	80083c8 <_scanf_float+0x60>
 8008538:	3501      	adds	r5, #1
 800853a:	b2ed      	uxtb	r5, r5
 800853c:	e7d8      	b.n	80084f0 <_scanf_float+0x188>
 800853e:	f1ba 0f01 	cmp.w	sl, #1
 8008542:	f47f af41 	bne.w	80083c8 <_scanf_float+0x60>
 8008546:	f04f 0a02 	mov.w	sl, #2
 800854a:	e7d1      	b.n	80084f0 <_scanf_float+0x188>
 800854c:	b97d      	cbnz	r5, 800856e <_scanf_float+0x206>
 800854e:	f1b9 0f00 	cmp.w	r9, #0
 8008552:	f47f af3c 	bne.w	80083ce <_scanf_float+0x66>
 8008556:	6822      	ldr	r2, [r4, #0]
 8008558:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800855c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008560:	f47f af39 	bne.w	80083d6 <_scanf_float+0x6e>
 8008564:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008568:	6022      	str	r2, [r4, #0]
 800856a:	2501      	movs	r5, #1
 800856c:	e7c0      	b.n	80084f0 <_scanf_float+0x188>
 800856e:	2d03      	cmp	r5, #3
 8008570:	d0e2      	beq.n	8008538 <_scanf_float+0x1d0>
 8008572:	2d05      	cmp	r5, #5
 8008574:	e7de      	b.n	8008534 <_scanf_float+0x1cc>
 8008576:	2d02      	cmp	r5, #2
 8008578:	f47f af26 	bne.w	80083c8 <_scanf_float+0x60>
 800857c:	2503      	movs	r5, #3
 800857e:	e7b7      	b.n	80084f0 <_scanf_float+0x188>
 8008580:	2d06      	cmp	r5, #6
 8008582:	f47f af21 	bne.w	80083c8 <_scanf_float+0x60>
 8008586:	2507      	movs	r5, #7
 8008588:	e7b2      	b.n	80084f0 <_scanf_float+0x188>
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	0591      	lsls	r1, r2, #22
 800858e:	f57f af1b 	bpl.w	80083c8 <_scanf_float+0x60>
 8008592:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008596:	6022      	str	r2, [r4, #0]
 8008598:	f8cd 9004 	str.w	r9, [sp, #4]
 800859c:	e7a8      	b.n	80084f0 <_scanf_float+0x188>
 800859e:	6822      	ldr	r2, [r4, #0]
 80085a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80085a8:	d006      	beq.n	80085b8 <_scanf_float+0x250>
 80085aa:	0550      	lsls	r0, r2, #21
 80085ac:	f57f af0c 	bpl.w	80083c8 <_scanf_float+0x60>
 80085b0:	f1b9 0f00 	cmp.w	r9, #0
 80085b4:	f43f af0f 	beq.w	80083d6 <_scanf_float+0x6e>
 80085b8:	0591      	lsls	r1, r2, #22
 80085ba:	bf58      	it	pl
 80085bc:	9901      	ldrpl	r1, [sp, #4]
 80085be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085c2:	bf58      	it	pl
 80085c4:	eba9 0101 	subpl.w	r1, r9, r1
 80085c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80085cc:	bf58      	it	pl
 80085ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	f04f 0900 	mov.w	r9, #0
 80085d8:	e78a      	b.n	80084f0 <_scanf_float+0x188>
 80085da:	f04f 0a03 	mov.w	sl, #3
 80085de:	e787      	b.n	80084f0 <_scanf_float+0x188>
 80085e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085e4:	4639      	mov	r1, r7
 80085e6:	4640      	mov	r0, r8
 80085e8:	4798      	blx	r3
 80085ea:	2800      	cmp	r0, #0
 80085ec:	f43f aedf 	beq.w	80083ae <_scanf_float+0x46>
 80085f0:	e6ea      	b.n	80083c8 <_scanf_float+0x60>
 80085f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085fa:	463a      	mov	r2, r7
 80085fc:	4640      	mov	r0, r8
 80085fe:	4798      	blx	r3
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	3b01      	subs	r3, #1
 8008604:	6123      	str	r3, [r4, #16]
 8008606:	e6ec      	b.n	80083e2 <_scanf_float+0x7a>
 8008608:	1e6b      	subs	r3, r5, #1
 800860a:	2b06      	cmp	r3, #6
 800860c:	d825      	bhi.n	800865a <_scanf_float+0x2f2>
 800860e:	2d02      	cmp	r5, #2
 8008610:	d836      	bhi.n	8008680 <_scanf_float+0x318>
 8008612:	455e      	cmp	r6, fp
 8008614:	f67f aee8 	bls.w	80083e8 <_scanf_float+0x80>
 8008618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800861c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008620:	463a      	mov	r2, r7
 8008622:	4640      	mov	r0, r8
 8008624:	4798      	blx	r3
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	3b01      	subs	r3, #1
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	e7f1      	b.n	8008612 <_scanf_float+0x2aa>
 800862e:	9802      	ldr	r0, [sp, #8]
 8008630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008634:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008638:	9002      	str	r0, [sp, #8]
 800863a:	463a      	mov	r2, r7
 800863c:	4640      	mov	r0, r8
 800863e:	4798      	blx	r3
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	3b01      	subs	r3, #1
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800864a:	fa5f fa8a 	uxtb.w	sl, sl
 800864e:	f1ba 0f02 	cmp.w	sl, #2
 8008652:	d1ec      	bne.n	800862e <_scanf_float+0x2c6>
 8008654:	3d03      	subs	r5, #3
 8008656:	b2ed      	uxtb	r5, r5
 8008658:	1b76      	subs	r6, r6, r5
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	05da      	lsls	r2, r3, #23
 800865e:	d52f      	bpl.n	80086c0 <_scanf_float+0x358>
 8008660:	055b      	lsls	r3, r3, #21
 8008662:	d510      	bpl.n	8008686 <_scanf_float+0x31e>
 8008664:	455e      	cmp	r6, fp
 8008666:	f67f aebf 	bls.w	80083e8 <_scanf_float+0x80>
 800866a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800866e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008672:	463a      	mov	r2, r7
 8008674:	4640      	mov	r0, r8
 8008676:	4798      	blx	r3
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	3b01      	subs	r3, #1
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	e7f1      	b.n	8008664 <_scanf_float+0x2fc>
 8008680:	46aa      	mov	sl, r5
 8008682:	9602      	str	r6, [sp, #8]
 8008684:	e7df      	b.n	8008646 <_scanf_float+0x2de>
 8008686:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	2965      	cmp	r1, #101	; 0x65
 800868e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008692:	f106 35ff 	add.w	r5, r6, #4294967295
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	d00c      	beq.n	80086b4 <_scanf_float+0x34c>
 800869a:	2945      	cmp	r1, #69	; 0x45
 800869c:	d00a      	beq.n	80086b4 <_scanf_float+0x34c>
 800869e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086a2:	463a      	mov	r2, r7
 80086a4:	4640      	mov	r0, r8
 80086a6:	4798      	blx	r3
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	1eb5      	subs	r5, r6, #2
 80086b2:	6123      	str	r3, [r4, #16]
 80086b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086b8:	463a      	mov	r2, r7
 80086ba:	4640      	mov	r0, r8
 80086bc:	4798      	blx	r3
 80086be:	462e      	mov	r6, r5
 80086c0:	6825      	ldr	r5, [r4, #0]
 80086c2:	f015 0510 	ands.w	r5, r5, #16
 80086c6:	d158      	bne.n	800877a <_scanf_float+0x412>
 80086c8:	7035      	strb	r5, [r6, #0]
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d4:	d11c      	bne.n	8008710 <_scanf_float+0x3a8>
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	454b      	cmp	r3, r9
 80086da:	eba3 0209 	sub.w	r2, r3, r9
 80086de:	d124      	bne.n	800872a <_scanf_float+0x3c2>
 80086e0:	2200      	movs	r2, #0
 80086e2:	4659      	mov	r1, fp
 80086e4:	4640      	mov	r0, r8
 80086e6:	f002 fc73 	bl	800afd0 <_strtod_r>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	6821      	ldr	r1, [r4, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f011 0f02 	tst.w	r1, #2
 80086f4:	ec57 6b10 	vmov	r6, r7, d0
 80086f8:	f103 0204 	add.w	r2, r3, #4
 80086fc:	d020      	beq.n	8008740 <_scanf_float+0x3d8>
 80086fe:	9903      	ldr	r1, [sp, #12]
 8008700:	600a      	str	r2, [r1, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	e9c3 6700 	strd	r6, r7, [r3]
 8008708:	68e3      	ldr	r3, [r4, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	60e3      	str	r3, [r4, #12]
 800870e:	e66c      	b.n	80083ea <_scanf_float+0x82>
 8008710:	9b04      	ldr	r3, [sp, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0e4      	beq.n	80086e0 <_scanf_float+0x378>
 8008716:	9905      	ldr	r1, [sp, #20]
 8008718:	230a      	movs	r3, #10
 800871a:	462a      	mov	r2, r5
 800871c:	3101      	adds	r1, #1
 800871e:	4640      	mov	r0, r8
 8008720:	f002 fcde 	bl	800b0e0 <_strtol_r>
 8008724:	9b04      	ldr	r3, [sp, #16]
 8008726:	9e05      	ldr	r6, [sp, #20]
 8008728:	1ac2      	subs	r2, r0, r3
 800872a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800872e:	429e      	cmp	r6, r3
 8008730:	bf28      	it	cs
 8008732:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008736:	4912      	ldr	r1, [pc, #72]	; (8008780 <_scanf_float+0x418>)
 8008738:	4630      	mov	r0, r6
 800873a:	f000 f91b 	bl	8008974 <siprintf>
 800873e:	e7cf      	b.n	80086e0 <_scanf_float+0x378>
 8008740:	f011 0f04 	tst.w	r1, #4
 8008744:	9903      	ldr	r1, [sp, #12]
 8008746:	600a      	str	r2, [r1, #0]
 8008748:	d1db      	bne.n	8008702 <_scanf_float+0x39a>
 800874a:	f8d3 8000 	ldr.w	r8, [r3]
 800874e:	ee10 2a10 	vmov	r2, s0
 8008752:	ee10 0a10 	vmov	r0, s0
 8008756:	463b      	mov	r3, r7
 8008758:	4639      	mov	r1, r7
 800875a:	f7f8 f9ef 	bl	8000b3c <__aeabi_dcmpun>
 800875e:	b128      	cbz	r0, 800876c <_scanf_float+0x404>
 8008760:	4808      	ldr	r0, [pc, #32]	; (8008784 <_scanf_float+0x41c>)
 8008762:	f000 f9f9 	bl	8008b58 <nanf>
 8008766:	ed88 0a00 	vstr	s0, [r8]
 800876a:	e7cd      	b.n	8008708 <_scanf_float+0x3a0>
 800876c:	4630      	mov	r0, r6
 800876e:	4639      	mov	r1, r7
 8008770:	f7f8 fa42 	bl	8000bf8 <__aeabi_d2f>
 8008774:	f8c8 0000 	str.w	r0, [r8]
 8008778:	e7c6      	b.n	8008708 <_scanf_float+0x3a0>
 800877a:	2500      	movs	r5, #0
 800877c:	e635      	b.n	80083ea <_scanf_float+0x82>
 800877e:	bf00      	nop
 8008780:	0800c474 	.word	0x0800c474
 8008784:	0800c805 	.word	0x0800c805

08008788 <std>:
 8008788:	2300      	movs	r3, #0
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	e9c0 3300 	strd	r3, r3, [r0]
 8008792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008796:	6083      	str	r3, [r0, #8]
 8008798:	8181      	strh	r1, [r0, #12]
 800879a:	6643      	str	r3, [r0, #100]	; 0x64
 800879c:	81c2      	strh	r2, [r0, #14]
 800879e:	6183      	str	r3, [r0, #24]
 80087a0:	4619      	mov	r1, r3
 80087a2:	2208      	movs	r2, #8
 80087a4:	305c      	adds	r0, #92	; 0x5c
 80087a6:	f000 f948 	bl	8008a3a <memset>
 80087aa:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <std+0x58>)
 80087ac:	6263      	str	r3, [r4, #36]	; 0x24
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <std+0x5c>)
 80087b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80087b2:	4b0d      	ldr	r3, [pc, #52]	; (80087e8 <std+0x60>)
 80087b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <std+0x64>)
 80087b8:	6323      	str	r3, [r4, #48]	; 0x30
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <std+0x68>)
 80087bc:	6224      	str	r4, [r4, #32]
 80087be:	429c      	cmp	r4, r3
 80087c0:	d006      	beq.n	80087d0 <std+0x48>
 80087c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80087c6:	4294      	cmp	r4, r2
 80087c8:	d002      	beq.n	80087d0 <std+0x48>
 80087ca:	33d0      	adds	r3, #208	; 0xd0
 80087cc:	429c      	cmp	r4, r3
 80087ce:	d105      	bne.n	80087dc <std+0x54>
 80087d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d8:	f000 b9ac 	b.w	8008b34 <__retarget_lock_init_recursive>
 80087dc:	bd10      	pop	{r4, pc}
 80087de:	bf00      	nop
 80087e0:	080089b5 	.word	0x080089b5
 80087e4:	080089d7 	.word	0x080089d7
 80087e8:	08008a0f 	.word	0x08008a0f
 80087ec:	08008a33 	.word	0x08008a33
 80087f0:	20004d14 	.word	0x20004d14

080087f4 <stdio_exit_handler>:
 80087f4:	4a02      	ldr	r2, [pc, #8]	; (8008800 <stdio_exit_handler+0xc>)
 80087f6:	4903      	ldr	r1, [pc, #12]	; (8008804 <stdio_exit_handler+0x10>)
 80087f8:	4803      	ldr	r0, [pc, #12]	; (8008808 <stdio_exit_handler+0x14>)
 80087fa:	f000 b869 	b.w	80088d0 <_fwalk_sglue>
 80087fe:	bf00      	nop
 8008800:	20000020 	.word	0x20000020
 8008804:	0800b4a1 	.word	0x0800b4a1
 8008808:	2000002c 	.word	0x2000002c

0800880c <cleanup_stdio>:
 800880c:	6841      	ldr	r1, [r0, #4]
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <cleanup_stdio+0x34>)
 8008810:	4299      	cmp	r1, r3
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	d001      	beq.n	800881c <cleanup_stdio+0x10>
 8008818:	f002 fe42 	bl	800b4a0 <_fflush_r>
 800881c:	68a1      	ldr	r1, [r4, #8]
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <cleanup_stdio+0x38>)
 8008820:	4299      	cmp	r1, r3
 8008822:	d002      	beq.n	800882a <cleanup_stdio+0x1e>
 8008824:	4620      	mov	r0, r4
 8008826:	f002 fe3b 	bl	800b4a0 <_fflush_r>
 800882a:	68e1      	ldr	r1, [r4, #12]
 800882c:	4b06      	ldr	r3, [pc, #24]	; (8008848 <cleanup_stdio+0x3c>)
 800882e:	4299      	cmp	r1, r3
 8008830:	d004      	beq.n	800883c <cleanup_stdio+0x30>
 8008832:	4620      	mov	r0, r4
 8008834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008838:	f002 be32 	b.w	800b4a0 <_fflush_r>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	bf00      	nop
 8008840:	20004d14 	.word	0x20004d14
 8008844:	20004d7c 	.word	0x20004d7c
 8008848:	20004de4 	.word	0x20004de4

0800884c <global_stdio_init.part.0>:
 800884c:	b510      	push	{r4, lr}
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <global_stdio_init.part.0+0x30>)
 8008850:	4c0b      	ldr	r4, [pc, #44]	; (8008880 <global_stdio_init.part.0+0x34>)
 8008852:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <global_stdio_init.part.0+0x38>)
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	4620      	mov	r0, r4
 8008858:	2200      	movs	r2, #0
 800885a:	2104      	movs	r1, #4
 800885c:	f7ff ff94 	bl	8008788 <std>
 8008860:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008864:	2201      	movs	r2, #1
 8008866:	2109      	movs	r1, #9
 8008868:	f7ff ff8e 	bl	8008788 <std>
 800886c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008870:	2202      	movs	r2, #2
 8008872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008876:	2112      	movs	r1, #18
 8008878:	f7ff bf86 	b.w	8008788 <std>
 800887c:	20004e4c 	.word	0x20004e4c
 8008880:	20004d14 	.word	0x20004d14
 8008884:	080087f5 	.word	0x080087f5

08008888 <__sfp_lock_acquire>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__sfp_lock_acquire+0x8>)
 800888a:	f000 b954 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 800888e:	bf00      	nop
 8008890:	20004e55 	.word	0x20004e55

08008894 <__sfp_lock_release>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__sfp_lock_release+0x8>)
 8008896:	f000 b94f 	b.w	8008b38 <__retarget_lock_release_recursive>
 800889a:	bf00      	nop
 800889c:	20004e55 	.word	0x20004e55

080088a0 <__sinit>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	f7ff fff0 	bl	8008888 <__sfp_lock_acquire>
 80088a8:	6a23      	ldr	r3, [r4, #32]
 80088aa:	b11b      	cbz	r3, 80088b4 <__sinit+0x14>
 80088ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b0:	f7ff bff0 	b.w	8008894 <__sfp_lock_release>
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <__sinit+0x28>)
 80088b6:	6223      	str	r3, [r4, #32]
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <__sinit+0x2c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1f5      	bne.n	80088ac <__sinit+0xc>
 80088c0:	f7ff ffc4 	bl	800884c <global_stdio_init.part.0>
 80088c4:	e7f2      	b.n	80088ac <__sinit+0xc>
 80088c6:	bf00      	nop
 80088c8:	0800880d 	.word	0x0800880d
 80088cc:	20004e4c 	.word	0x20004e4c

080088d0 <_fwalk_sglue>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	4607      	mov	r7, r0
 80088d6:	4688      	mov	r8, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	2600      	movs	r6, #0
 80088dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e0:	f1b9 0901 	subs.w	r9, r9, #1
 80088e4:	d505      	bpl.n	80088f2 <_fwalk_sglue+0x22>
 80088e6:	6824      	ldr	r4, [r4, #0]
 80088e8:	2c00      	cmp	r4, #0
 80088ea:	d1f7      	bne.n	80088dc <_fwalk_sglue+0xc>
 80088ec:	4630      	mov	r0, r6
 80088ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f2:	89ab      	ldrh	r3, [r5, #12]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d907      	bls.n	8008908 <_fwalk_sglue+0x38>
 80088f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088fc:	3301      	adds	r3, #1
 80088fe:	d003      	beq.n	8008908 <_fwalk_sglue+0x38>
 8008900:	4629      	mov	r1, r5
 8008902:	4638      	mov	r0, r7
 8008904:	47c0      	blx	r8
 8008906:	4306      	orrs	r6, r0
 8008908:	3568      	adds	r5, #104	; 0x68
 800890a:	e7e9      	b.n	80088e0 <_fwalk_sglue+0x10>

0800890c <sniprintf>:
 800890c:	b40c      	push	{r2, r3}
 800890e:	b530      	push	{r4, r5, lr}
 8008910:	4b17      	ldr	r3, [pc, #92]	; (8008970 <sniprintf+0x64>)
 8008912:	1e0c      	subs	r4, r1, #0
 8008914:	681d      	ldr	r5, [r3, #0]
 8008916:	b09d      	sub	sp, #116	; 0x74
 8008918:	da08      	bge.n	800892c <sniprintf+0x20>
 800891a:	238b      	movs	r3, #139	; 0x8b
 800891c:	602b      	str	r3, [r5, #0]
 800891e:	f04f 30ff 	mov.w	r0, #4294967295
 8008922:	b01d      	add	sp, #116	; 0x74
 8008924:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008928:	b002      	add	sp, #8
 800892a:	4770      	bx	lr
 800892c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008930:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008934:	bf14      	ite	ne
 8008936:	f104 33ff 	addne.w	r3, r4, #4294967295
 800893a:	4623      	moveq	r3, r4
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	9307      	str	r3, [sp, #28]
 8008940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008944:	9002      	str	r0, [sp, #8]
 8008946:	9006      	str	r0, [sp, #24]
 8008948:	f8ad 3016 	strh.w	r3, [sp, #22]
 800894c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800894e:	ab21      	add	r3, sp, #132	; 0x84
 8008950:	a902      	add	r1, sp, #8
 8008952:	4628      	mov	r0, r5
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	f002 fc1f 	bl	800b198 <_svfiprintf_r>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	bfbc      	itt	lt
 800895e:	238b      	movlt	r3, #139	; 0x8b
 8008960:	602b      	strlt	r3, [r5, #0]
 8008962:	2c00      	cmp	r4, #0
 8008964:	d0dd      	beq.n	8008922 <sniprintf+0x16>
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	e7d9      	b.n	8008922 <sniprintf+0x16>
 800896e:	bf00      	nop
 8008970:	20000078 	.word	0x20000078

08008974 <siprintf>:
 8008974:	b40e      	push	{r1, r2, r3}
 8008976:	b500      	push	{lr}
 8008978:	b09c      	sub	sp, #112	; 0x70
 800897a:	ab1d      	add	r3, sp, #116	; 0x74
 800897c:	9002      	str	r0, [sp, #8]
 800897e:	9006      	str	r0, [sp, #24]
 8008980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008984:	4809      	ldr	r0, [pc, #36]	; (80089ac <siprintf+0x38>)
 8008986:	9107      	str	r1, [sp, #28]
 8008988:	9104      	str	r1, [sp, #16]
 800898a:	4909      	ldr	r1, [pc, #36]	; (80089b0 <siprintf+0x3c>)
 800898c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008990:	9105      	str	r1, [sp, #20]
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	a902      	add	r1, sp, #8
 8008998:	f002 fbfe 	bl	800b198 <_svfiprintf_r>
 800899c:	9b02      	ldr	r3, [sp, #8]
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	b01c      	add	sp, #112	; 0x70
 80089a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a8:	b003      	add	sp, #12
 80089aa:	4770      	bx	lr
 80089ac:	20000078 	.word	0x20000078
 80089b0:	ffff0208 	.word	0xffff0208

080089b4 <__sread>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	f000 f86c 	bl	8008a98 <_read_r>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	bfab      	itete	ge
 80089c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089c6:	89a3      	ldrhlt	r3, [r4, #12]
 80089c8:	181b      	addge	r3, r3, r0
 80089ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ce:	bfac      	ite	ge
 80089d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089d2:	81a3      	strhlt	r3, [r4, #12]
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <__swrite>:
 80089d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089da:	461f      	mov	r7, r3
 80089dc:	898b      	ldrh	r3, [r1, #12]
 80089de:	05db      	lsls	r3, r3, #23
 80089e0:	4605      	mov	r5, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	4616      	mov	r6, r2
 80089e6:	d505      	bpl.n	80089f4 <__swrite+0x1e>
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	2302      	movs	r3, #2
 80089ee:	2200      	movs	r2, #0
 80089f0:	f000 f840 	bl	8008a74 <_lseek_r>
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	4632      	mov	r2, r6
 8008a02:	463b      	mov	r3, r7
 8008a04:	4628      	mov	r0, r5
 8008a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	f000 b857 	b.w	8008abc <_write_r>

08008a0e <__sseek>:
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	460c      	mov	r4, r1
 8008a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a16:	f000 f82d 	bl	8008a74 <_lseek_r>
 8008a1a:	1c43      	adds	r3, r0, #1
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	bf15      	itete	ne
 8008a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a2a:	81a3      	strheq	r3, [r4, #12]
 8008a2c:	bf18      	it	ne
 8008a2e:	81a3      	strhne	r3, [r4, #12]
 8008a30:	bd10      	pop	{r4, pc}

08008a32 <__sclose>:
 8008a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a36:	f000 b80d 	b.w	8008a54 <_close_r>

08008a3a <memset>:
 8008a3a:	4402      	add	r2, r0
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d100      	bne.n	8008a44 <memset+0xa>
 8008a42:	4770      	bx	lr
 8008a44:	f803 1b01 	strb.w	r1, [r3], #1
 8008a48:	e7f9      	b.n	8008a3e <memset+0x4>
	...

08008a4c <_localeconv_r>:
 8008a4c:	4800      	ldr	r0, [pc, #0]	; (8008a50 <_localeconv_r+0x4>)
 8008a4e:	4770      	bx	lr
 8008a50:	2000016c 	.word	0x2000016c

08008a54 <_close_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	; (8008a70 <_close_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f9 fa9d 	bl	8001f9e <_close>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_close_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_close_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20004e50 	.word	0x20004e50

08008a74 <_lseek_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	; (8008a94 <_lseek_r+0x20>)
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f7f9 fab2 	bl	8001fec <_lseek>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_lseek_r+0x1e>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_lseek_r+0x1e>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20004e50 	.word	0x20004e50

08008a98 <_read_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d07      	ldr	r5, [pc, #28]	; (8008ab8 <_read_r+0x20>)
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	602a      	str	r2, [r5, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7f9 fa40 	bl	8001f2c <_read>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_read_r+0x1e>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_read_r+0x1e>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	20004e50 	.word	0x20004e50

08008abc <_write_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	; (8008adc <_write_r+0x20>)
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f9 fa4b 	bl	8001f66 <_write>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_write_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_write_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20004e50 	.word	0x20004e50

08008ae0 <__errno>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	; (8008ae8 <__errno+0x8>)
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000078 	.word	0x20000078

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4d0d      	ldr	r5, [pc, #52]	; (8008b24 <__libc_init_array+0x38>)
 8008af0:	4c0d      	ldr	r4, [pc, #52]	; (8008b28 <__libc_init_array+0x3c>)
 8008af2:	1b64      	subs	r4, r4, r5
 8008af4:	10a4      	asrs	r4, r4, #2
 8008af6:	2600      	movs	r6, #0
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	4d0b      	ldr	r5, [pc, #44]	; (8008b2c <__libc_init_array+0x40>)
 8008afe:	4c0c      	ldr	r4, [pc, #48]	; (8008b30 <__libc_init_array+0x44>)
 8008b00:	f003 fbd6 	bl	800c2b0 <_init>
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	2600      	movs	r6, #0
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	0800c870 	.word	0x0800c870
 8008b28:	0800c870 	.word	0x0800c870
 8008b2c:	0800c870 	.word	0x0800c870
 8008b30:	0800c874 	.word	0x0800c874

08008b34 <__retarget_lock_init_recursive>:
 8008b34:	4770      	bx	lr

08008b36 <__retarget_lock_acquire_recursive>:
 8008b36:	4770      	bx	lr

08008b38 <__retarget_lock_release_recursive>:
 8008b38:	4770      	bx	lr

08008b3a <memcpy>:
 8008b3a:	440a      	add	r2, r1
 8008b3c:	4291      	cmp	r1, r2
 8008b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b42:	d100      	bne.n	8008b46 <memcpy+0xc>
 8008b44:	4770      	bx	lr
 8008b46:	b510      	push	{r4, lr}
 8008b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b50:	4291      	cmp	r1, r2
 8008b52:	d1f9      	bne.n	8008b48 <memcpy+0xe>
 8008b54:	bd10      	pop	{r4, pc}
	...

08008b58 <nanf>:
 8008b58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b60 <nanf+0x8>
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	7fc00000 	.word	0x7fc00000

08008b64 <quorem>:
 8008b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b68:	6903      	ldr	r3, [r0, #16]
 8008b6a:	690c      	ldr	r4, [r1, #16]
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	4607      	mov	r7, r0
 8008b70:	db7e      	blt.n	8008c70 <quorem+0x10c>
 8008b72:	3c01      	subs	r4, #1
 8008b74:	f101 0814 	add.w	r8, r1, #20
 8008b78:	f100 0514 	add.w	r5, r0, #20
 8008b7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b96:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b9a:	d331      	bcc.n	8008c00 <quorem+0x9c>
 8008b9c:	f04f 0e00 	mov.w	lr, #0
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	46ac      	mov	ip, r5
 8008ba4:	46f2      	mov	sl, lr
 8008ba6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008baa:	b293      	uxth	r3, r2
 8008bac:	fb06 e303 	mla	r3, r6, r3, lr
 8008bb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bb4:	0c1a      	lsrs	r2, r3, #16
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	ebaa 0303 	sub.w	r3, sl, r3
 8008bbc:	f8dc a000 	ldr.w	sl, [ip]
 8008bc0:	fa13 f38a 	uxtah	r3, r3, sl
 8008bc4:	fb06 220e 	mla	r2, r6, lr, r2
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	9b00      	ldr	r3, [sp, #0]
 8008bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bd0:	b292      	uxth	r2, r2
 8008bd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bda:	f8bd 3000 	ldrh.w	r3, [sp]
 8008bde:	4581      	cmp	r9, r0
 8008be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008be4:	f84c 3b04 	str.w	r3, [ip], #4
 8008be8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bec:	d2db      	bcs.n	8008ba6 <quorem+0x42>
 8008bee:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bf2:	b92b      	cbnz	r3, 8008c00 <quorem+0x9c>
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	3b04      	subs	r3, #4
 8008bf8:	429d      	cmp	r5, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	d32c      	bcc.n	8008c58 <quorem+0xf4>
 8008bfe:	613c      	str	r4, [r7, #16]
 8008c00:	4638      	mov	r0, r7
 8008c02:	f001 f9f1 	bl	8009fe8 <__mcmp>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	db22      	blt.n	8008c50 <quorem+0xec>
 8008c0a:	3601      	adds	r6, #1
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c14:	f8d1 c000 	ldr.w	ip, [r1]
 8008c18:	b293      	uxth	r3, r2
 8008c1a:	1ac3      	subs	r3, r0, r3
 8008c1c:	0c12      	lsrs	r2, r2, #16
 8008c1e:	fa13 f38c 	uxtah	r3, r3, ip
 8008c22:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c30:	45c1      	cmp	r9, r8
 8008c32:	f841 3b04 	str.w	r3, [r1], #4
 8008c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c3a:	d2e9      	bcs.n	8008c10 <quorem+0xac>
 8008c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c44:	b922      	cbnz	r2, 8008c50 <quorem+0xec>
 8008c46:	3b04      	subs	r3, #4
 8008c48:	429d      	cmp	r5, r3
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	d30a      	bcc.n	8008c64 <quorem+0x100>
 8008c4e:	613c      	str	r4, [r7, #16]
 8008c50:	4630      	mov	r0, r6
 8008c52:	b003      	add	sp, #12
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	6812      	ldr	r2, [r2, #0]
 8008c5a:	3b04      	subs	r3, #4
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	d1ce      	bne.n	8008bfe <quorem+0x9a>
 8008c60:	3c01      	subs	r4, #1
 8008c62:	e7c9      	b.n	8008bf8 <quorem+0x94>
 8008c64:	6812      	ldr	r2, [r2, #0]
 8008c66:	3b04      	subs	r3, #4
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d1f0      	bne.n	8008c4e <quorem+0xea>
 8008c6c:	3c01      	subs	r4, #1
 8008c6e:	e7eb      	b.n	8008c48 <quorem+0xe4>
 8008c70:	2000      	movs	r0, #0
 8008c72:	e7ee      	b.n	8008c52 <quorem+0xee>
 8008c74:	0000      	movs	r0, r0
	...

08008c78 <_dtoa_r>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	ed2d 8b04 	vpush	{d8-d9}
 8008c80:	69c5      	ldr	r5, [r0, #28]
 8008c82:	b093      	sub	sp, #76	; 0x4c
 8008c84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c88:	ec57 6b10 	vmov	r6, r7, d0
 8008c8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c90:	9107      	str	r1, [sp, #28]
 8008c92:	4604      	mov	r4, r0
 8008c94:	920a      	str	r2, [sp, #40]	; 0x28
 8008c96:	930d      	str	r3, [sp, #52]	; 0x34
 8008c98:	b975      	cbnz	r5, 8008cb8 <_dtoa_r+0x40>
 8008c9a:	2010      	movs	r0, #16
 8008c9c:	f000 fe2a 	bl	80098f4 <malloc>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	61e0      	str	r0, [r4, #28]
 8008ca4:	b920      	cbnz	r0, 8008cb0 <_dtoa_r+0x38>
 8008ca6:	4bae      	ldr	r3, [pc, #696]	; (8008f60 <_dtoa_r+0x2e8>)
 8008ca8:	21ef      	movs	r1, #239	; 0xef
 8008caa:	48ae      	ldr	r0, [pc, #696]	; (8008f64 <_dtoa_r+0x2ec>)
 8008cac:	f002 fc64 	bl	800b578 <__assert_func>
 8008cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cb4:	6005      	str	r5, [r0, #0]
 8008cb6:	60c5      	str	r5, [r0, #12]
 8008cb8:	69e3      	ldr	r3, [r4, #28]
 8008cba:	6819      	ldr	r1, [r3, #0]
 8008cbc:	b151      	cbz	r1, 8008cd4 <_dtoa_r+0x5c>
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	604a      	str	r2, [r1, #4]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4093      	lsls	r3, r2
 8008cc6:	608b      	str	r3, [r1, #8]
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 ff07 	bl	8009adc <_Bfree>
 8008cce:	69e3      	ldr	r3, [r4, #28]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	1e3b      	subs	r3, r7, #0
 8008cd6:	bfbb      	ittet	lt
 8008cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cdc:	9303      	strlt	r3, [sp, #12]
 8008cde:	2300      	movge	r3, #0
 8008ce0:	2201      	movlt	r2, #1
 8008ce2:	bfac      	ite	ge
 8008ce4:	f8c8 3000 	strge.w	r3, [r8]
 8008ce8:	f8c8 2000 	strlt.w	r2, [r8]
 8008cec:	4b9e      	ldr	r3, [pc, #632]	; (8008f68 <_dtoa_r+0x2f0>)
 8008cee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008cf2:	ea33 0308 	bics.w	r3, r3, r8
 8008cf6:	d11b      	bne.n	8008d30 <_dtoa_r+0xb8>
 8008cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d04:	4333      	orrs	r3, r6
 8008d06:	f000 8593 	beq.w	8009830 <_dtoa_r+0xbb8>
 8008d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d0c:	b963      	cbnz	r3, 8008d28 <_dtoa_r+0xb0>
 8008d0e:	4b97      	ldr	r3, [pc, #604]	; (8008f6c <_dtoa_r+0x2f4>)
 8008d10:	e027      	b.n	8008d62 <_dtoa_r+0xea>
 8008d12:	4b97      	ldr	r3, [pc, #604]	; (8008f70 <_dtoa_r+0x2f8>)
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	9800      	ldr	r0, [sp, #0]
 8008d1e:	b013      	add	sp, #76	; 0x4c
 8008d20:	ecbd 8b04 	vpop	{d8-d9}
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	4b90      	ldr	r3, [pc, #576]	; (8008f6c <_dtoa_r+0x2f4>)
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	3303      	adds	r3, #3
 8008d2e:	e7f3      	b.n	8008d18 <_dtoa_r+0xa0>
 8008d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d34:	2200      	movs	r2, #0
 8008d36:	ec51 0b17 	vmov	r0, r1, d7
 8008d3a:	eeb0 8a47 	vmov.f32	s16, s14
 8008d3e:	eef0 8a67 	vmov.f32	s17, s15
 8008d42:	2300      	movs	r3, #0
 8008d44:	f7f7 fec8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d48:	4681      	mov	r9, r0
 8008d4a:	b160      	cbz	r0, 8008d66 <_dtoa_r+0xee>
 8008d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d4e:	2301      	movs	r3, #1
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8568 	beq.w	800982a <_dtoa_r+0xbb2>
 8008d5a:	4b86      	ldr	r3, [pc, #536]	; (8008f74 <_dtoa_r+0x2fc>)
 8008d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	e7da      	b.n	8008d1c <_dtoa_r+0xa4>
 8008d66:	aa10      	add	r2, sp, #64	; 0x40
 8008d68:	a911      	add	r1, sp, #68	; 0x44
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d70:	eef0 0a68 	vmov.f32	s1, s17
 8008d74:	f001 fa4e 	bl	800a214 <__d2b>
 8008d78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d7c:	4682      	mov	sl, r0
 8008d7e:	2d00      	cmp	r5, #0
 8008d80:	d07f      	beq.n	8008e82 <_dtoa_r+0x20a>
 8008d82:	ee18 3a90 	vmov	r3, s17
 8008d86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d8e:	ec51 0b18 	vmov	r0, r1, d8
 8008d92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008d9e:	4619      	mov	r1, r3
 8008da0:	2200      	movs	r2, #0
 8008da2:	4b75      	ldr	r3, [pc, #468]	; (8008f78 <_dtoa_r+0x300>)
 8008da4:	f7f7 fa78 	bl	8000298 <__aeabi_dsub>
 8008da8:	a367      	add	r3, pc, #412	; (adr r3, 8008f48 <_dtoa_r+0x2d0>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fc2b 	bl	8000608 <__aeabi_dmul>
 8008db2:	a367      	add	r3, pc, #412	; (adr r3, 8008f50 <_dtoa_r+0x2d8>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fa70 	bl	800029c <__adddf3>
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	f7f7 fbb7 	bl	8000534 <__aeabi_i2d>
 8008dc6:	a364      	add	r3, pc, #400	; (adr r3, 8008f58 <_dtoa_r+0x2e0>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	f7f7 fc1c 	bl	8000608 <__aeabi_dmul>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	f7f7 fa60 	bl	800029c <__adddf3>
 8008ddc:	4606      	mov	r6, r0
 8008dde:	460f      	mov	r7, r1
 8008de0:	f7f7 fec2 	bl	8000b68 <__aeabi_d2iz>
 8008de4:	2200      	movs	r2, #0
 8008de6:	4683      	mov	fp, r0
 8008de8:	2300      	movs	r3, #0
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fe7d 	bl	8000aec <__aeabi_dcmplt>
 8008df2:	b148      	cbz	r0, 8008e08 <_dtoa_r+0x190>
 8008df4:	4658      	mov	r0, fp
 8008df6:	f7f7 fb9d 	bl	8000534 <__aeabi_i2d>
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	f7f7 fe6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e02:	b908      	cbnz	r0, 8008e08 <_dtoa_r+0x190>
 8008e04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e08:	f1bb 0f16 	cmp.w	fp, #22
 8008e0c:	d857      	bhi.n	8008ebe <_dtoa_r+0x246>
 8008e0e:	4b5b      	ldr	r3, [pc, #364]	; (8008f7c <_dtoa_r+0x304>)
 8008e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	ec51 0b18 	vmov	r0, r1, d8
 8008e1c:	f7f7 fe66 	bl	8000aec <__aeabi_dcmplt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d04e      	beq.n	8008ec2 <_dtoa_r+0x24a>
 8008e24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e28:	2300      	movs	r3, #0
 8008e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e2e:	1b5b      	subs	r3, r3, r5
 8008e30:	1e5a      	subs	r2, r3, #1
 8008e32:	bf45      	ittet	mi
 8008e34:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e38:	9305      	strmi	r3, [sp, #20]
 8008e3a:	2300      	movpl	r3, #0
 8008e3c:	2300      	movmi	r3, #0
 8008e3e:	9206      	str	r2, [sp, #24]
 8008e40:	bf54      	ite	pl
 8008e42:	9305      	strpl	r3, [sp, #20]
 8008e44:	9306      	strmi	r3, [sp, #24]
 8008e46:	f1bb 0f00 	cmp.w	fp, #0
 8008e4a:	db3c      	blt.n	8008ec6 <_dtoa_r+0x24e>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008e52:	445b      	add	r3, fp
 8008e54:	9306      	str	r3, [sp, #24]
 8008e56:	2300      	movs	r3, #0
 8008e58:	9308      	str	r3, [sp, #32]
 8008e5a:	9b07      	ldr	r3, [sp, #28]
 8008e5c:	2b09      	cmp	r3, #9
 8008e5e:	d868      	bhi.n	8008f32 <_dtoa_r+0x2ba>
 8008e60:	2b05      	cmp	r3, #5
 8008e62:	bfc4      	itt	gt
 8008e64:	3b04      	subgt	r3, #4
 8008e66:	9307      	strgt	r3, [sp, #28]
 8008e68:	9b07      	ldr	r3, [sp, #28]
 8008e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8008e6e:	bfcc      	ite	gt
 8008e70:	2500      	movgt	r5, #0
 8008e72:	2501      	movle	r5, #1
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	f200 8085 	bhi.w	8008f84 <_dtoa_r+0x30c>
 8008e7a:	e8df f003 	tbb	[pc, r3]
 8008e7e:	3b2e      	.short	0x3b2e
 8008e80:	5839      	.short	0x5839
 8008e82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e86:	441d      	add	r5, r3
 8008e88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	bfc1      	itttt	gt
 8008e90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e94:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008e9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ea0:	bfd6      	itet	le
 8008ea2:	f1c3 0320 	rsble	r3, r3, #32
 8008ea6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008eaa:	fa06 f003 	lslle.w	r0, r6, r3
 8008eae:	f7f7 fb31 	bl	8000514 <__aeabi_ui2d>
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008eb8:	3d01      	subs	r5, #1
 8008eba:	920e      	str	r2, [sp, #56]	; 0x38
 8008ebc:	e76f      	b.n	8008d9e <_dtoa_r+0x126>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e7b3      	b.n	8008e2a <_dtoa_r+0x1b2>
 8008ec2:	900c      	str	r0, [sp, #48]	; 0x30
 8008ec4:	e7b2      	b.n	8008e2c <_dtoa_r+0x1b4>
 8008ec6:	9b05      	ldr	r3, [sp, #20]
 8008ec8:	eba3 030b 	sub.w	r3, r3, fp
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	f1cb 0300 	rsb	r3, fp, #0
 8008ed2:	9308      	str	r3, [sp, #32]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ed8:	e7bf      	b.n	8008e5a <_dtoa_r+0x1e2>
 8008eda:	2300      	movs	r3, #0
 8008edc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	dc52      	bgt.n	8008f8a <_dtoa_r+0x312>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	461a      	mov	r2, r3
 8008eec:	920a      	str	r2, [sp, #40]	; 0x28
 8008eee:	e00b      	b.n	8008f08 <_dtoa_r+0x290>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e7f3      	b.n	8008edc <_dtoa_r+0x264>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efa:	445b      	add	r3, fp
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	3301      	adds	r3, #1
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	bfb8      	it	lt
 8008f06:	2301      	movlt	r3, #1
 8008f08:	69e0      	ldr	r0, [r4, #28]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	f102 0614 	add.w	r6, r2, #20
 8008f12:	429e      	cmp	r6, r3
 8008f14:	d93d      	bls.n	8008f92 <_dtoa_r+0x31a>
 8008f16:	6041      	str	r1, [r0, #4]
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fd9f 	bl	8009a5c <_Balloc>
 8008f1e:	9000      	str	r0, [sp, #0]
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d139      	bne.n	8008f98 <_dtoa_r+0x320>
 8008f24:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <_dtoa_r+0x308>)
 8008f26:	4602      	mov	r2, r0
 8008f28:	f240 11af 	movw	r1, #431	; 0x1af
 8008f2c:	e6bd      	b.n	8008caa <_dtoa_r+0x32>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e7e1      	b.n	8008ef6 <_dtoa_r+0x27e>
 8008f32:	2501      	movs	r5, #1
 8008f34:	2300      	movs	r3, #0
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	9509      	str	r5, [sp, #36]	; 0x24
 8008f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	2200      	movs	r2, #0
 8008f44:	2312      	movs	r3, #18
 8008f46:	e7d1      	b.n	8008eec <_dtoa_r+0x274>
 8008f48:	636f4361 	.word	0x636f4361
 8008f4c:	3fd287a7 	.word	0x3fd287a7
 8008f50:	8b60c8b3 	.word	0x8b60c8b3
 8008f54:	3fc68a28 	.word	0x3fc68a28
 8008f58:	509f79fb 	.word	0x509f79fb
 8008f5c:	3fd34413 	.word	0x3fd34413
 8008f60:	0800c486 	.word	0x0800c486
 8008f64:	0800c49d 	.word	0x0800c49d
 8008f68:	7ff00000 	.word	0x7ff00000
 8008f6c:	0800c482 	.word	0x0800c482
 8008f70:	0800c479 	.word	0x0800c479
 8008f74:	0800c451 	.word	0x0800c451
 8008f78:	3ff80000 	.word	0x3ff80000
 8008f7c:	0800c588 	.word	0x0800c588
 8008f80:	0800c4f5 	.word	0x0800c4f5
 8008f84:	2301      	movs	r3, #1
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
 8008f88:	e7d7      	b.n	8008f3a <_dtoa_r+0x2c2>
 8008f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	e7ba      	b.n	8008f08 <_dtoa_r+0x290>
 8008f92:	3101      	adds	r1, #1
 8008f94:	0052      	lsls	r2, r2, #1
 8008f96:	e7ba      	b.n	8008f0e <_dtoa_r+0x296>
 8008f98:	69e3      	ldr	r3, [r4, #28]
 8008f9a:	9a00      	ldr	r2, [sp, #0]
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	2b0e      	cmp	r3, #14
 8008fa2:	f200 80a8 	bhi.w	80090f6 <_dtoa_r+0x47e>
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	f000 80a5 	beq.w	80090f6 <_dtoa_r+0x47e>
 8008fac:	f1bb 0f00 	cmp.w	fp, #0
 8008fb0:	dd38      	ble.n	8009024 <_dtoa_r+0x3ac>
 8008fb2:	4bc0      	ldr	r3, [pc, #768]	; (80092b4 <_dtoa_r+0x63c>)
 8008fb4:	f00b 020f 	and.w	r2, fp, #15
 8008fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008fc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008fc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008fc8:	d019      	beq.n	8008ffe <_dtoa_r+0x386>
 8008fca:	4bbb      	ldr	r3, [pc, #748]	; (80092b8 <_dtoa_r+0x640>)
 8008fcc:	ec51 0b18 	vmov	r0, r1, d8
 8008fd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd4:	f7f7 fc42 	bl	800085c <__aeabi_ddiv>
 8008fd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fdc:	f008 080f 	and.w	r8, r8, #15
 8008fe0:	2503      	movs	r5, #3
 8008fe2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80092b8 <_dtoa_r+0x640>
 8008fe6:	f1b8 0f00 	cmp.w	r8, #0
 8008fea:	d10a      	bne.n	8009002 <_dtoa_r+0x38a>
 8008fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	f7f7 fc32 	bl	800085c <__aeabi_ddiv>
 8008ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ffc:	e02b      	b.n	8009056 <_dtoa_r+0x3de>
 8008ffe:	2502      	movs	r5, #2
 8009000:	e7ef      	b.n	8008fe2 <_dtoa_r+0x36a>
 8009002:	f018 0f01 	tst.w	r8, #1
 8009006:	d008      	beq.n	800901a <_dtoa_r+0x3a2>
 8009008:	4630      	mov	r0, r6
 800900a:	4639      	mov	r1, r7
 800900c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009010:	f7f7 fafa 	bl	8000608 <__aeabi_dmul>
 8009014:	3501      	adds	r5, #1
 8009016:	4606      	mov	r6, r0
 8009018:	460f      	mov	r7, r1
 800901a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800901e:	f109 0908 	add.w	r9, r9, #8
 8009022:	e7e0      	b.n	8008fe6 <_dtoa_r+0x36e>
 8009024:	f000 809f 	beq.w	8009166 <_dtoa_r+0x4ee>
 8009028:	f1cb 0600 	rsb	r6, fp, #0
 800902c:	4ba1      	ldr	r3, [pc, #644]	; (80092b4 <_dtoa_r+0x63c>)
 800902e:	4fa2      	ldr	r7, [pc, #648]	; (80092b8 <_dtoa_r+0x640>)
 8009030:	f006 020f 	and.w	r2, r6, #15
 8009034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	ec51 0b18 	vmov	r0, r1, d8
 8009040:	f7f7 fae2 	bl	8000608 <__aeabi_dmul>
 8009044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009048:	1136      	asrs	r6, r6, #4
 800904a:	2300      	movs	r3, #0
 800904c:	2502      	movs	r5, #2
 800904e:	2e00      	cmp	r6, #0
 8009050:	d17e      	bne.n	8009150 <_dtoa_r+0x4d8>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1d0      	bne.n	8008ff8 <_dtoa_r+0x380>
 8009056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009058:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 8084 	beq.w	800916a <_dtoa_r+0x4f2>
 8009062:	4b96      	ldr	r3, [pc, #600]	; (80092bc <_dtoa_r+0x644>)
 8009064:	2200      	movs	r2, #0
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800906e:	2800      	cmp	r0, #0
 8009070:	d07b      	beq.n	800916a <_dtoa_r+0x4f2>
 8009072:	9b04      	ldr	r3, [sp, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d078      	beq.n	800916a <_dtoa_r+0x4f2>
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	dd39      	ble.n	80090f2 <_dtoa_r+0x47a>
 800907e:	4b90      	ldr	r3, [pc, #576]	; (80092c0 <_dtoa_r+0x648>)
 8009080:	2200      	movs	r2, #0
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 fabf 	bl	8000608 <__aeabi_dmul>
 800908a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800908e:	9e01      	ldr	r6, [sp, #4]
 8009090:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009094:	3501      	adds	r5, #1
 8009096:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800909a:	4628      	mov	r0, r5
 800909c:	f7f7 fa4a 	bl	8000534 <__aeabi_i2d>
 80090a0:	4642      	mov	r2, r8
 80090a2:	464b      	mov	r3, r9
 80090a4:	f7f7 fab0 	bl	8000608 <__aeabi_dmul>
 80090a8:	4b86      	ldr	r3, [pc, #536]	; (80092c4 <_dtoa_r+0x64c>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 f8f6 	bl	800029c <__adddf3>
 80090b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b8:	9303      	str	r3, [sp, #12]
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d158      	bne.n	8009170 <_dtoa_r+0x4f8>
 80090be:	4b82      	ldr	r3, [pc, #520]	; (80092c8 <_dtoa_r+0x650>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	f7f7 f8e7 	bl	8000298 <__aeabi_dsub>
 80090ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ce:	4680      	mov	r8, r0
 80090d0:	4689      	mov	r9, r1
 80090d2:	f7f7 fd29 	bl	8000b28 <__aeabi_dcmpgt>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f040 8296 	bne.w	8009608 <_dtoa_r+0x990>
 80090dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80090e0:	4640      	mov	r0, r8
 80090e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fd00 	bl	8000aec <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f040 8289 	bne.w	8009604 <_dtoa_r+0x98c>
 80090f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80090f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f2c0 814e 	blt.w	800939a <_dtoa_r+0x722>
 80090fe:	f1bb 0f0e 	cmp.w	fp, #14
 8009102:	f300 814a 	bgt.w	800939a <_dtoa_r+0x722>
 8009106:	4b6b      	ldr	r3, [pc, #428]	; (80092b4 <_dtoa_r+0x63c>)
 8009108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800910c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	f280 80dc 	bge.w	80092d0 <_dtoa_r+0x658>
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f300 80d8 	bgt.w	80092d0 <_dtoa_r+0x658>
 8009120:	f040 826f 	bne.w	8009602 <_dtoa_r+0x98a>
 8009124:	4b68      	ldr	r3, [pc, #416]	; (80092c8 <_dtoa_r+0x650>)
 8009126:	2200      	movs	r2, #0
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 fa6c 	bl	8000608 <__aeabi_dmul>
 8009130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009134:	f7f7 fcee 	bl	8000b14 <__aeabi_dcmpge>
 8009138:	9e04      	ldr	r6, [sp, #16]
 800913a:	4637      	mov	r7, r6
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 8245 	bne.w	80095cc <_dtoa_r+0x954>
 8009142:	9d00      	ldr	r5, [sp, #0]
 8009144:	2331      	movs	r3, #49	; 0x31
 8009146:	f805 3b01 	strb.w	r3, [r5], #1
 800914a:	f10b 0b01 	add.w	fp, fp, #1
 800914e:	e241      	b.n	80095d4 <_dtoa_r+0x95c>
 8009150:	07f2      	lsls	r2, r6, #31
 8009152:	d505      	bpl.n	8009160 <_dtoa_r+0x4e8>
 8009154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009158:	f7f7 fa56 	bl	8000608 <__aeabi_dmul>
 800915c:	3501      	adds	r5, #1
 800915e:	2301      	movs	r3, #1
 8009160:	1076      	asrs	r6, r6, #1
 8009162:	3708      	adds	r7, #8
 8009164:	e773      	b.n	800904e <_dtoa_r+0x3d6>
 8009166:	2502      	movs	r5, #2
 8009168:	e775      	b.n	8009056 <_dtoa_r+0x3de>
 800916a:	9e04      	ldr	r6, [sp, #16]
 800916c:	465f      	mov	r7, fp
 800916e:	e792      	b.n	8009096 <_dtoa_r+0x41e>
 8009170:	9900      	ldr	r1, [sp, #0]
 8009172:	4b50      	ldr	r3, [pc, #320]	; (80092b4 <_dtoa_r+0x63c>)
 8009174:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009178:	4431      	add	r1, r6
 800917a:	9102      	str	r1, [sp, #8]
 800917c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800917e:	eeb0 9a47 	vmov.f32	s18, s14
 8009182:	eef0 9a67 	vmov.f32	s19, s15
 8009186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800918a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800918e:	2900      	cmp	r1, #0
 8009190:	d044      	beq.n	800921c <_dtoa_r+0x5a4>
 8009192:	494e      	ldr	r1, [pc, #312]	; (80092cc <_dtoa_r+0x654>)
 8009194:	2000      	movs	r0, #0
 8009196:	f7f7 fb61 	bl	800085c <__aeabi_ddiv>
 800919a:	ec53 2b19 	vmov	r2, r3, d9
 800919e:	f7f7 f87b 	bl	8000298 <__aeabi_dsub>
 80091a2:	9d00      	ldr	r5, [sp, #0]
 80091a4:	ec41 0b19 	vmov	d9, r0, r1
 80091a8:	4649      	mov	r1, r9
 80091aa:	4640      	mov	r0, r8
 80091ac:	f7f7 fcdc 	bl	8000b68 <__aeabi_d2iz>
 80091b0:	4606      	mov	r6, r0
 80091b2:	f7f7 f9bf 	bl	8000534 <__aeabi_i2d>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 f86b 	bl	8000298 <__aeabi_dsub>
 80091c2:	3630      	adds	r6, #48	; 0x30
 80091c4:	f805 6b01 	strb.w	r6, [r5], #1
 80091c8:	ec53 2b19 	vmov	r2, r3, d9
 80091cc:	4680      	mov	r8, r0
 80091ce:	4689      	mov	r9, r1
 80091d0:	f7f7 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d164      	bne.n	80092a2 <_dtoa_r+0x62a>
 80091d8:	4642      	mov	r2, r8
 80091da:	464b      	mov	r3, r9
 80091dc:	4937      	ldr	r1, [pc, #220]	; (80092bc <_dtoa_r+0x644>)
 80091de:	2000      	movs	r0, #0
 80091e0:	f7f7 f85a 	bl	8000298 <__aeabi_dsub>
 80091e4:	ec53 2b19 	vmov	r2, r3, d9
 80091e8:	f7f7 fc80 	bl	8000aec <__aeabi_dcmplt>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f040 80b6 	bne.w	800935e <_dtoa_r+0x6e6>
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	429d      	cmp	r5, r3
 80091f6:	f43f af7c 	beq.w	80090f2 <_dtoa_r+0x47a>
 80091fa:	4b31      	ldr	r3, [pc, #196]	; (80092c0 <_dtoa_r+0x648>)
 80091fc:	ec51 0b19 	vmov	r0, r1, d9
 8009200:	2200      	movs	r2, #0
 8009202:	f7f7 fa01 	bl	8000608 <__aeabi_dmul>
 8009206:	4b2e      	ldr	r3, [pc, #184]	; (80092c0 <_dtoa_r+0x648>)
 8009208:	ec41 0b19 	vmov	d9, r0, r1
 800920c:	2200      	movs	r2, #0
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f7 f9f9 	bl	8000608 <__aeabi_dmul>
 8009216:	4680      	mov	r8, r0
 8009218:	4689      	mov	r9, r1
 800921a:	e7c5      	b.n	80091a8 <_dtoa_r+0x530>
 800921c:	ec51 0b17 	vmov	r0, r1, d7
 8009220:	f7f7 f9f2 	bl	8000608 <__aeabi_dmul>
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	9d00      	ldr	r5, [sp, #0]
 8009228:	930f      	str	r3, [sp, #60]	; 0x3c
 800922a:	ec41 0b19 	vmov	d9, r0, r1
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	f7f7 fc99 	bl	8000b68 <__aeabi_d2iz>
 8009236:	4606      	mov	r6, r0
 8009238:	f7f7 f97c 	bl	8000534 <__aeabi_i2d>
 800923c:	3630      	adds	r6, #48	; 0x30
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4640      	mov	r0, r8
 8009244:	4649      	mov	r1, r9
 8009246:	f7f7 f827 	bl	8000298 <__aeabi_dsub>
 800924a:	f805 6b01 	strb.w	r6, [r5], #1
 800924e:	9b02      	ldr	r3, [sp, #8]
 8009250:	429d      	cmp	r5, r3
 8009252:	4680      	mov	r8, r0
 8009254:	4689      	mov	r9, r1
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	d124      	bne.n	80092a6 <_dtoa_r+0x62e>
 800925c:	4b1b      	ldr	r3, [pc, #108]	; (80092cc <_dtoa_r+0x654>)
 800925e:	ec51 0b19 	vmov	r0, r1, d9
 8009262:	f7f7 f81b 	bl	800029c <__adddf3>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 fc5b 	bl	8000b28 <__aeabi_dcmpgt>
 8009272:	2800      	cmp	r0, #0
 8009274:	d173      	bne.n	800935e <_dtoa_r+0x6e6>
 8009276:	ec53 2b19 	vmov	r2, r3, d9
 800927a:	4914      	ldr	r1, [pc, #80]	; (80092cc <_dtoa_r+0x654>)
 800927c:	2000      	movs	r0, #0
 800927e:	f7f7 f80b 	bl	8000298 <__aeabi_dsub>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f7 fc2f 	bl	8000aec <__aeabi_dcmplt>
 800928e:	2800      	cmp	r0, #0
 8009290:	f43f af2f 	beq.w	80090f2 <_dtoa_r+0x47a>
 8009294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009296:	1e6b      	subs	r3, r5, #1
 8009298:	930f      	str	r3, [sp, #60]	; 0x3c
 800929a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800929e:	2b30      	cmp	r3, #48	; 0x30
 80092a0:	d0f8      	beq.n	8009294 <_dtoa_r+0x61c>
 80092a2:	46bb      	mov	fp, r7
 80092a4:	e04a      	b.n	800933c <_dtoa_r+0x6c4>
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <_dtoa_r+0x648>)
 80092a8:	f7f7 f9ae 	bl	8000608 <__aeabi_dmul>
 80092ac:	4680      	mov	r8, r0
 80092ae:	4689      	mov	r9, r1
 80092b0:	e7bd      	b.n	800922e <_dtoa_r+0x5b6>
 80092b2:	bf00      	nop
 80092b4:	0800c588 	.word	0x0800c588
 80092b8:	0800c560 	.word	0x0800c560
 80092bc:	3ff00000 	.word	0x3ff00000
 80092c0:	40240000 	.word	0x40240000
 80092c4:	401c0000 	.word	0x401c0000
 80092c8:	40140000 	.word	0x40140000
 80092cc:	3fe00000 	.word	0x3fe00000
 80092d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092d4:	9d00      	ldr	r5, [sp, #0]
 80092d6:	4642      	mov	r2, r8
 80092d8:	464b      	mov	r3, r9
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 fabd 	bl	800085c <__aeabi_ddiv>
 80092e2:	f7f7 fc41 	bl	8000b68 <__aeabi_d2iz>
 80092e6:	9001      	str	r0, [sp, #4]
 80092e8:	f7f7 f924 	bl	8000534 <__aeabi_i2d>
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	f7f7 f98a 	bl	8000608 <__aeabi_dmul>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4630      	mov	r0, r6
 80092fa:	4639      	mov	r1, r7
 80092fc:	f7f6 ffcc 	bl	8000298 <__aeabi_dsub>
 8009300:	9e01      	ldr	r6, [sp, #4]
 8009302:	9f04      	ldr	r7, [sp, #16]
 8009304:	3630      	adds	r6, #48	; 0x30
 8009306:	f805 6b01 	strb.w	r6, [r5], #1
 800930a:	9e00      	ldr	r6, [sp, #0]
 800930c:	1bae      	subs	r6, r5, r6
 800930e:	42b7      	cmp	r7, r6
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	d134      	bne.n	8009380 <_dtoa_r+0x708>
 8009316:	f7f6 ffc1 	bl	800029c <__adddf3>
 800931a:	4642      	mov	r2, r8
 800931c:	464b      	mov	r3, r9
 800931e:	4606      	mov	r6, r0
 8009320:	460f      	mov	r7, r1
 8009322:	f7f7 fc01 	bl	8000b28 <__aeabi_dcmpgt>
 8009326:	b9c8      	cbnz	r0, 800935c <_dtoa_r+0x6e4>
 8009328:	4642      	mov	r2, r8
 800932a:	464b      	mov	r3, r9
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f7 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009334:	b110      	cbz	r0, 800933c <_dtoa_r+0x6c4>
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	07db      	lsls	r3, r3, #31
 800933a:	d40f      	bmi.n	800935c <_dtoa_r+0x6e4>
 800933c:	4651      	mov	r1, sl
 800933e:	4620      	mov	r0, r4
 8009340:	f000 fbcc 	bl	8009adc <_Bfree>
 8009344:	2300      	movs	r3, #0
 8009346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009348:	702b      	strb	r3, [r5, #0]
 800934a:	f10b 0301 	add.w	r3, fp, #1
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009352:	2b00      	cmp	r3, #0
 8009354:	f43f ace2 	beq.w	8008d1c <_dtoa_r+0xa4>
 8009358:	601d      	str	r5, [r3, #0]
 800935a:	e4df      	b.n	8008d1c <_dtoa_r+0xa4>
 800935c:	465f      	mov	r7, fp
 800935e:	462b      	mov	r3, r5
 8009360:	461d      	mov	r5, r3
 8009362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009366:	2a39      	cmp	r2, #57	; 0x39
 8009368:	d106      	bne.n	8009378 <_dtoa_r+0x700>
 800936a:	9a00      	ldr	r2, [sp, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d1f7      	bne.n	8009360 <_dtoa_r+0x6e8>
 8009370:	9900      	ldr	r1, [sp, #0]
 8009372:	2230      	movs	r2, #48	; 0x30
 8009374:	3701      	adds	r7, #1
 8009376:	700a      	strb	r2, [r1, #0]
 8009378:	781a      	ldrb	r2, [r3, #0]
 800937a:	3201      	adds	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	e790      	b.n	80092a2 <_dtoa_r+0x62a>
 8009380:	4ba3      	ldr	r3, [pc, #652]	; (8009610 <_dtoa_r+0x998>)
 8009382:	2200      	movs	r2, #0
 8009384:	f7f7 f940 	bl	8000608 <__aeabi_dmul>
 8009388:	2200      	movs	r2, #0
 800938a:	2300      	movs	r3, #0
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	f7f7 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009394:	2800      	cmp	r0, #0
 8009396:	d09e      	beq.n	80092d6 <_dtoa_r+0x65e>
 8009398:	e7d0      	b.n	800933c <_dtoa_r+0x6c4>
 800939a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800939c:	2a00      	cmp	r2, #0
 800939e:	f000 80ca 	beq.w	8009536 <_dtoa_r+0x8be>
 80093a2:	9a07      	ldr	r2, [sp, #28]
 80093a4:	2a01      	cmp	r2, #1
 80093a6:	f300 80ad 	bgt.w	8009504 <_dtoa_r+0x88c>
 80093aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ac:	2a00      	cmp	r2, #0
 80093ae:	f000 80a5 	beq.w	80094fc <_dtoa_r+0x884>
 80093b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093b6:	9e08      	ldr	r6, [sp, #32]
 80093b8:	9d05      	ldr	r5, [sp, #20]
 80093ba:	9a05      	ldr	r2, [sp, #20]
 80093bc:	441a      	add	r2, r3
 80093be:	9205      	str	r2, [sp, #20]
 80093c0:	9a06      	ldr	r2, [sp, #24]
 80093c2:	2101      	movs	r1, #1
 80093c4:	441a      	add	r2, r3
 80093c6:	4620      	mov	r0, r4
 80093c8:	9206      	str	r2, [sp, #24]
 80093ca:	f000 fc87 	bl	8009cdc <__i2b>
 80093ce:	4607      	mov	r7, r0
 80093d0:	b165      	cbz	r5, 80093ec <_dtoa_r+0x774>
 80093d2:	9b06      	ldr	r3, [sp, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd09      	ble.n	80093ec <_dtoa_r+0x774>
 80093d8:	42ab      	cmp	r3, r5
 80093da:	9a05      	ldr	r2, [sp, #20]
 80093dc:	bfa8      	it	ge
 80093de:	462b      	movge	r3, r5
 80093e0:	1ad2      	subs	r2, r2, r3
 80093e2:	9205      	str	r2, [sp, #20]
 80093e4:	9a06      	ldr	r2, [sp, #24]
 80093e6:	1aed      	subs	r5, r5, r3
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	9306      	str	r3, [sp, #24]
 80093ec:	9b08      	ldr	r3, [sp, #32]
 80093ee:	b1f3      	cbz	r3, 800942e <_dtoa_r+0x7b6>
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 80a3 	beq.w	800953e <_dtoa_r+0x8c6>
 80093f8:	2e00      	cmp	r6, #0
 80093fa:	dd10      	ble.n	800941e <_dtoa_r+0x7a6>
 80093fc:	4639      	mov	r1, r7
 80093fe:	4632      	mov	r2, r6
 8009400:	4620      	mov	r0, r4
 8009402:	f000 fd2b 	bl	8009e5c <__pow5mult>
 8009406:	4652      	mov	r2, sl
 8009408:	4601      	mov	r1, r0
 800940a:	4607      	mov	r7, r0
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fc7b 	bl	8009d08 <__multiply>
 8009412:	4651      	mov	r1, sl
 8009414:	4680      	mov	r8, r0
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fb60 	bl	8009adc <_Bfree>
 800941c:	46c2      	mov	sl, r8
 800941e:	9b08      	ldr	r3, [sp, #32]
 8009420:	1b9a      	subs	r2, r3, r6
 8009422:	d004      	beq.n	800942e <_dtoa_r+0x7b6>
 8009424:	4651      	mov	r1, sl
 8009426:	4620      	mov	r0, r4
 8009428:	f000 fd18 	bl	8009e5c <__pow5mult>
 800942c:	4682      	mov	sl, r0
 800942e:	2101      	movs	r1, #1
 8009430:	4620      	mov	r0, r4
 8009432:	f000 fc53 	bl	8009cdc <__i2b>
 8009436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009438:	2b00      	cmp	r3, #0
 800943a:	4606      	mov	r6, r0
 800943c:	f340 8081 	ble.w	8009542 <_dtoa_r+0x8ca>
 8009440:	461a      	mov	r2, r3
 8009442:	4601      	mov	r1, r0
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fd09 	bl	8009e5c <__pow5mult>
 800944a:	9b07      	ldr	r3, [sp, #28]
 800944c:	2b01      	cmp	r3, #1
 800944e:	4606      	mov	r6, r0
 8009450:	dd7a      	ble.n	8009548 <_dtoa_r+0x8d0>
 8009452:	f04f 0800 	mov.w	r8, #0
 8009456:	6933      	ldr	r3, [r6, #16]
 8009458:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800945c:	6918      	ldr	r0, [r3, #16]
 800945e:	f000 fbef 	bl	8009c40 <__hi0bits>
 8009462:	f1c0 0020 	rsb	r0, r0, #32
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	4418      	add	r0, r3
 800946a:	f010 001f 	ands.w	r0, r0, #31
 800946e:	f000 8094 	beq.w	800959a <_dtoa_r+0x922>
 8009472:	f1c0 0320 	rsb	r3, r0, #32
 8009476:	2b04      	cmp	r3, #4
 8009478:	f340 8085 	ble.w	8009586 <_dtoa_r+0x90e>
 800947c:	9b05      	ldr	r3, [sp, #20]
 800947e:	f1c0 001c 	rsb	r0, r0, #28
 8009482:	4403      	add	r3, r0
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	4403      	add	r3, r0
 800948a:	4405      	add	r5, r0
 800948c:	9306      	str	r3, [sp, #24]
 800948e:	9b05      	ldr	r3, [sp, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dd05      	ble.n	80094a0 <_dtoa_r+0x828>
 8009494:	4651      	mov	r1, sl
 8009496:	461a      	mov	r2, r3
 8009498:	4620      	mov	r0, r4
 800949a:	f000 fd39 	bl	8009f10 <__lshift>
 800949e:	4682      	mov	sl, r0
 80094a0:	9b06      	ldr	r3, [sp, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd05      	ble.n	80094b2 <_dtoa_r+0x83a>
 80094a6:	4631      	mov	r1, r6
 80094a8:	461a      	mov	r2, r3
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 fd30 	bl	8009f10 <__lshift>
 80094b0:	4606      	mov	r6, r0
 80094b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d072      	beq.n	800959e <_dtoa_r+0x926>
 80094b8:	4631      	mov	r1, r6
 80094ba:	4650      	mov	r0, sl
 80094bc:	f000 fd94 	bl	8009fe8 <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	da6c      	bge.n	800959e <_dtoa_r+0x926>
 80094c4:	2300      	movs	r3, #0
 80094c6:	4651      	mov	r1, sl
 80094c8:	220a      	movs	r2, #10
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 fb28 	bl	8009b20 <__multadd>
 80094d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094d6:	4682      	mov	sl, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 81b0 	beq.w	800983e <_dtoa_r+0xbc6>
 80094de:	2300      	movs	r3, #0
 80094e0:	4639      	mov	r1, r7
 80094e2:	220a      	movs	r2, #10
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fb1b 	bl	8009b20 <__multadd>
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	4607      	mov	r7, r0
 80094f0:	f300 8096 	bgt.w	8009620 <_dtoa_r+0x9a8>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	dc59      	bgt.n	80095ae <_dtoa_r+0x936>
 80094fa:	e091      	b.n	8009620 <_dtoa_r+0x9a8>
 80094fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009502:	e758      	b.n	80093b6 <_dtoa_r+0x73e>
 8009504:	9b04      	ldr	r3, [sp, #16]
 8009506:	1e5e      	subs	r6, r3, #1
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	42b3      	cmp	r3, r6
 800950c:	bfbf      	itttt	lt
 800950e:	9b08      	ldrlt	r3, [sp, #32]
 8009510:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009512:	9608      	strlt	r6, [sp, #32]
 8009514:	1af3      	sublt	r3, r6, r3
 8009516:	bfb4      	ite	lt
 8009518:	18d2      	addlt	r2, r2, r3
 800951a:	1b9e      	subge	r6, r3, r6
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	bfbc      	itt	lt
 8009520:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009522:	2600      	movlt	r6, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfb7      	itett	lt
 8009528:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800952c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009530:	1a9d      	sublt	r5, r3, r2
 8009532:	2300      	movlt	r3, #0
 8009534:	e741      	b.n	80093ba <_dtoa_r+0x742>
 8009536:	9e08      	ldr	r6, [sp, #32]
 8009538:	9d05      	ldr	r5, [sp, #20]
 800953a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800953c:	e748      	b.n	80093d0 <_dtoa_r+0x758>
 800953e:	9a08      	ldr	r2, [sp, #32]
 8009540:	e770      	b.n	8009424 <_dtoa_r+0x7ac>
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	2b01      	cmp	r3, #1
 8009546:	dc19      	bgt.n	800957c <_dtoa_r+0x904>
 8009548:	9b02      	ldr	r3, [sp, #8]
 800954a:	b9bb      	cbnz	r3, 800957c <_dtoa_r+0x904>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009552:	b99b      	cbnz	r3, 800957c <_dtoa_r+0x904>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800955a:	0d1b      	lsrs	r3, r3, #20
 800955c:	051b      	lsls	r3, r3, #20
 800955e:	b183      	cbz	r3, 8009582 <_dtoa_r+0x90a>
 8009560:	9b05      	ldr	r3, [sp, #20]
 8009562:	3301      	adds	r3, #1
 8009564:	9305      	str	r3, [sp, #20]
 8009566:	9b06      	ldr	r3, [sp, #24]
 8009568:	3301      	adds	r3, #1
 800956a:	9306      	str	r3, [sp, #24]
 800956c:	f04f 0801 	mov.w	r8, #1
 8009570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009572:	2b00      	cmp	r3, #0
 8009574:	f47f af6f 	bne.w	8009456 <_dtoa_r+0x7de>
 8009578:	2001      	movs	r0, #1
 800957a:	e774      	b.n	8009466 <_dtoa_r+0x7ee>
 800957c:	f04f 0800 	mov.w	r8, #0
 8009580:	e7f6      	b.n	8009570 <_dtoa_r+0x8f8>
 8009582:	4698      	mov	r8, r3
 8009584:	e7f4      	b.n	8009570 <_dtoa_r+0x8f8>
 8009586:	d082      	beq.n	800948e <_dtoa_r+0x816>
 8009588:	9a05      	ldr	r2, [sp, #20]
 800958a:	331c      	adds	r3, #28
 800958c:	441a      	add	r2, r3
 800958e:	9205      	str	r2, [sp, #20]
 8009590:	9a06      	ldr	r2, [sp, #24]
 8009592:	441a      	add	r2, r3
 8009594:	441d      	add	r5, r3
 8009596:	9206      	str	r2, [sp, #24]
 8009598:	e779      	b.n	800948e <_dtoa_r+0x816>
 800959a:	4603      	mov	r3, r0
 800959c:	e7f4      	b.n	8009588 <_dtoa_r+0x910>
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc37      	bgt.n	8009614 <_dtoa_r+0x99c>
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	dd34      	ble.n	8009614 <_dtoa_r+0x99c>
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	b963      	cbnz	r3, 80095cc <_dtoa_r+0x954>
 80095b2:	4631      	mov	r1, r6
 80095b4:	2205      	movs	r2, #5
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 fab2 	bl	8009b20 <__multadd>
 80095bc:	4601      	mov	r1, r0
 80095be:	4606      	mov	r6, r0
 80095c0:	4650      	mov	r0, sl
 80095c2:	f000 fd11 	bl	8009fe8 <__mcmp>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f73f adbb 	bgt.w	8009142 <_dtoa_r+0x4ca>
 80095cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ce:	9d00      	ldr	r5, [sp, #0]
 80095d0:	ea6f 0b03 	mvn.w	fp, r3
 80095d4:	f04f 0800 	mov.w	r8, #0
 80095d8:	4631      	mov	r1, r6
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fa7e 	bl	8009adc <_Bfree>
 80095e0:	2f00      	cmp	r7, #0
 80095e2:	f43f aeab 	beq.w	800933c <_dtoa_r+0x6c4>
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	d005      	beq.n	80095f8 <_dtoa_r+0x980>
 80095ec:	45b8      	cmp	r8, r7
 80095ee:	d003      	beq.n	80095f8 <_dtoa_r+0x980>
 80095f0:	4641      	mov	r1, r8
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 fa72 	bl	8009adc <_Bfree>
 80095f8:	4639      	mov	r1, r7
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 fa6e 	bl	8009adc <_Bfree>
 8009600:	e69c      	b.n	800933c <_dtoa_r+0x6c4>
 8009602:	2600      	movs	r6, #0
 8009604:	4637      	mov	r7, r6
 8009606:	e7e1      	b.n	80095cc <_dtoa_r+0x954>
 8009608:	46bb      	mov	fp, r7
 800960a:	4637      	mov	r7, r6
 800960c:	e599      	b.n	8009142 <_dtoa_r+0x4ca>
 800960e:	bf00      	nop
 8009610:	40240000 	.word	0x40240000
 8009614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 80c8 	beq.w	80097ac <_dtoa_r+0xb34>
 800961c:	9b04      	ldr	r3, [sp, #16]
 800961e:	9301      	str	r3, [sp, #4]
 8009620:	2d00      	cmp	r5, #0
 8009622:	dd05      	ble.n	8009630 <_dtoa_r+0x9b8>
 8009624:	4639      	mov	r1, r7
 8009626:	462a      	mov	r2, r5
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fc71 	bl	8009f10 <__lshift>
 800962e:	4607      	mov	r7, r0
 8009630:	f1b8 0f00 	cmp.w	r8, #0
 8009634:	d05b      	beq.n	80096ee <_dtoa_r+0xa76>
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fa0f 	bl	8009a5c <_Balloc>
 800963e:	4605      	mov	r5, r0
 8009640:	b928      	cbnz	r0, 800964e <_dtoa_r+0x9d6>
 8009642:	4b83      	ldr	r3, [pc, #524]	; (8009850 <_dtoa_r+0xbd8>)
 8009644:	4602      	mov	r2, r0
 8009646:	f240 21ef 	movw	r1, #751	; 0x2ef
 800964a:	f7ff bb2e 	b.w	8008caa <_dtoa_r+0x32>
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	3202      	adds	r2, #2
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	f107 010c 	add.w	r1, r7, #12
 8009658:	300c      	adds	r0, #12
 800965a:	f7ff fa6e 	bl	8008b3a <memcpy>
 800965e:	2201      	movs	r2, #1
 8009660:	4629      	mov	r1, r5
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fc54 	bl	8009f10 <__lshift>
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009672:	4413      	add	r3, r2
 8009674:	9308      	str	r3, [sp, #32]
 8009676:	9b02      	ldr	r3, [sp, #8]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	46b8      	mov	r8, r7
 800967e:	9306      	str	r3, [sp, #24]
 8009680:	4607      	mov	r7, r0
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	4631      	mov	r1, r6
 8009686:	3b01      	subs	r3, #1
 8009688:	4650      	mov	r0, sl
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	f7ff fa6a 	bl	8008b64 <quorem>
 8009690:	4641      	mov	r1, r8
 8009692:	9002      	str	r0, [sp, #8]
 8009694:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009698:	4650      	mov	r0, sl
 800969a:	f000 fca5 	bl	8009fe8 <__mcmp>
 800969e:	463a      	mov	r2, r7
 80096a0:	9005      	str	r0, [sp, #20]
 80096a2:	4631      	mov	r1, r6
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fcbb 	bl	800a020 <__mdiff>
 80096aa:	68c2      	ldr	r2, [r0, #12]
 80096ac:	4605      	mov	r5, r0
 80096ae:	bb02      	cbnz	r2, 80096f2 <_dtoa_r+0xa7a>
 80096b0:	4601      	mov	r1, r0
 80096b2:	4650      	mov	r0, sl
 80096b4:	f000 fc98 	bl	8009fe8 <__mcmp>
 80096b8:	4602      	mov	r2, r0
 80096ba:	4629      	mov	r1, r5
 80096bc:	4620      	mov	r0, r4
 80096be:	9209      	str	r2, [sp, #36]	; 0x24
 80096c0:	f000 fa0c 	bl	8009adc <_Bfree>
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096c8:	9d04      	ldr	r5, [sp, #16]
 80096ca:	ea43 0102 	orr.w	r1, r3, r2
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	4319      	orrs	r1, r3
 80096d2:	d110      	bne.n	80096f6 <_dtoa_r+0xa7e>
 80096d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096d8:	d029      	beq.n	800972e <_dtoa_r+0xab6>
 80096da:	9b05      	ldr	r3, [sp, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd02      	ble.n	80096e6 <_dtoa_r+0xa6e>
 80096e0:	9b02      	ldr	r3, [sp, #8]
 80096e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80096e6:	9b01      	ldr	r3, [sp, #4]
 80096e8:	f883 9000 	strb.w	r9, [r3]
 80096ec:	e774      	b.n	80095d8 <_dtoa_r+0x960>
 80096ee:	4638      	mov	r0, r7
 80096f0:	e7ba      	b.n	8009668 <_dtoa_r+0x9f0>
 80096f2:	2201      	movs	r2, #1
 80096f4:	e7e1      	b.n	80096ba <_dtoa_r+0xa42>
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	db04      	blt.n	8009706 <_dtoa_r+0xa8e>
 80096fc:	9907      	ldr	r1, [sp, #28]
 80096fe:	430b      	orrs	r3, r1
 8009700:	9906      	ldr	r1, [sp, #24]
 8009702:	430b      	orrs	r3, r1
 8009704:	d120      	bne.n	8009748 <_dtoa_r+0xad0>
 8009706:	2a00      	cmp	r2, #0
 8009708:	dded      	ble.n	80096e6 <_dtoa_r+0xa6e>
 800970a:	4651      	mov	r1, sl
 800970c:	2201      	movs	r2, #1
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fbfe 	bl	8009f10 <__lshift>
 8009714:	4631      	mov	r1, r6
 8009716:	4682      	mov	sl, r0
 8009718:	f000 fc66 	bl	8009fe8 <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	dc03      	bgt.n	8009728 <_dtoa_r+0xab0>
 8009720:	d1e1      	bne.n	80096e6 <_dtoa_r+0xa6e>
 8009722:	f019 0f01 	tst.w	r9, #1
 8009726:	d0de      	beq.n	80096e6 <_dtoa_r+0xa6e>
 8009728:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800972c:	d1d8      	bne.n	80096e0 <_dtoa_r+0xa68>
 800972e:	9a01      	ldr	r2, [sp, #4]
 8009730:	2339      	movs	r3, #57	; 0x39
 8009732:	7013      	strb	r3, [r2, #0]
 8009734:	462b      	mov	r3, r5
 8009736:	461d      	mov	r5, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800973e:	2a39      	cmp	r2, #57	; 0x39
 8009740:	d06c      	beq.n	800981c <_dtoa_r+0xba4>
 8009742:	3201      	adds	r2, #1
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	e747      	b.n	80095d8 <_dtoa_r+0x960>
 8009748:	2a00      	cmp	r2, #0
 800974a:	dd07      	ble.n	800975c <_dtoa_r+0xae4>
 800974c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009750:	d0ed      	beq.n	800972e <_dtoa_r+0xab6>
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	f109 0301 	add.w	r3, r9, #1
 8009758:	7013      	strb	r3, [r2, #0]
 800975a:	e73d      	b.n	80095d8 <_dtoa_r+0x960>
 800975c:	9b04      	ldr	r3, [sp, #16]
 800975e:	9a08      	ldr	r2, [sp, #32]
 8009760:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009764:	4293      	cmp	r3, r2
 8009766:	d043      	beq.n	80097f0 <_dtoa_r+0xb78>
 8009768:	4651      	mov	r1, sl
 800976a:	2300      	movs	r3, #0
 800976c:	220a      	movs	r2, #10
 800976e:	4620      	mov	r0, r4
 8009770:	f000 f9d6 	bl	8009b20 <__multadd>
 8009774:	45b8      	cmp	r8, r7
 8009776:	4682      	mov	sl, r0
 8009778:	f04f 0300 	mov.w	r3, #0
 800977c:	f04f 020a 	mov.w	r2, #10
 8009780:	4641      	mov	r1, r8
 8009782:	4620      	mov	r0, r4
 8009784:	d107      	bne.n	8009796 <_dtoa_r+0xb1e>
 8009786:	f000 f9cb 	bl	8009b20 <__multadd>
 800978a:	4680      	mov	r8, r0
 800978c:	4607      	mov	r7, r0
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	3301      	adds	r3, #1
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	e775      	b.n	8009682 <_dtoa_r+0xa0a>
 8009796:	f000 f9c3 	bl	8009b20 <__multadd>
 800979a:	4639      	mov	r1, r7
 800979c:	4680      	mov	r8, r0
 800979e:	2300      	movs	r3, #0
 80097a0:	220a      	movs	r2, #10
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f9bc 	bl	8009b20 <__multadd>
 80097a8:	4607      	mov	r7, r0
 80097aa:	e7f0      	b.n	800978e <_dtoa_r+0xb16>
 80097ac:	9b04      	ldr	r3, [sp, #16]
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	9d00      	ldr	r5, [sp, #0]
 80097b2:	4631      	mov	r1, r6
 80097b4:	4650      	mov	r0, sl
 80097b6:	f7ff f9d5 	bl	8008b64 <quorem>
 80097ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	f805 9b01 	strb.w	r9, [r5], #1
 80097c4:	1aea      	subs	r2, r5, r3
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	4293      	cmp	r3, r2
 80097ca:	dd07      	ble.n	80097dc <_dtoa_r+0xb64>
 80097cc:	4651      	mov	r1, sl
 80097ce:	2300      	movs	r3, #0
 80097d0:	220a      	movs	r2, #10
 80097d2:	4620      	mov	r0, r4
 80097d4:	f000 f9a4 	bl	8009b20 <__multadd>
 80097d8:	4682      	mov	sl, r0
 80097da:	e7ea      	b.n	80097b2 <_dtoa_r+0xb3a>
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfc8      	it	gt
 80097e2:	461d      	movgt	r5, r3
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	bfd8      	it	le
 80097e8:	2501      	movle	r5, #1
 80097ea:	441d      	add	r5, r3
 80097ec:	f04f 0800 	mov.w	r8, #0
 80097f0:	4651      	mov	r1, sl
 80097f2:	2201      	movs	r2, #1
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 fb8b 	bl	8009f10 <__lshift>
 80097fa:	4631      	mov	r1, r6
 80097fc:	4682      	mov	sl, r0
 80097fe:	f000 fbf3 	bl	8009fe8 <__mcmp>
 8009802:	2800      	cmp	r0, #0
 8009804:	dc96      	bgt.n	8009734 <_dtoa_r+0xabc>
 8009806:	d102      	bne.n	800980e <_dtoa_r+0xb96>
 8009808:	f019 0f01 	tst.w	r9, #1
 800980c:	d192      	bne.n	8009734 <_dtoa_r+0xabc>
 800980e:	462b      	mov	r3, r5
 8009810:	461d      	mov	r5, r3
 8009812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009816:	2a30      	cmp	r2, #48	; 0x30
 8009818:	d0fa      	beq.n	8009810 <_dtoa_r+0xb98>
 800981a:	e6dd      	b.n	80095d8 <_dtoa_r+0x960>
 800981c:	9a00      	ldr	r2, [sp, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d189      	bne.n	8009736 <_dtoa_r+0xabe>
 8009822:	f10b 0b01 	add.w	fp, fp, #1
 8009826:	2331      	movs	r3, #49	; 0x31
 8009828:	e796      	b.n	8009758 <_dtoa_r+0xae0>
 800982a:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <_dtoa_r+0xbdc>)
 800982c:	f7ff ba99 	b.w	8008d62 <_dtoa_r+0xea>
 8009830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009832:	2b00      	cmp	r3, #0
 8009834:	f47f aa6d 	bne.w	8008d12 <_dtoa_r+0x9a>
 8009838:	4b07      	ldr	r3, [pc, #28]	; (8009858 <_dtoa_r+0xbe0>)
 800983a:	f7ff ba92 	b.w	8008d62 <_dtoa_r+0xea>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	dcb5      	bgt.n	80097b0 <_dtoa_r+0xb38>
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	2b02      	cmp	r3, #2
 8009848:	f73f aeb1 	bgt.w	80095ae <_dtoa_r+0x936>
 800984c:	e7b0      	b.n	80097b0 <_dtoa_r+0xb38>
 800984e:	bf00      	nop
 8009850:	0800c4f5 	.word	0x0800c4f5
 8009854:	0800c450 	.word	0x0800c450
 8009858:	0800c479 	.word	0x0800c479

0800985c <_free_r>:
 800985c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800985e:	2900      	cmp	r1, #0
 8009860:	d044      	beq.n	80098ec <_free_r+0x90>
 8009862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009866:	9001      	str	r0, [sp, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f1a1 0404 	sub.w	r4, r1, #4
 800986e:	bfb8      	it	lt
 8009870:	18e4      	addlt	r4, r4, r3
 8009872:	f000 f8e7 	bl	8009a44 <__malloc_lock>
 8009876:	4a1e      	ldr	r2, [pc, #120]	; (80098f0 <_free_r+0x94>)
 8009878:	9801      	ldr	r0, [sp, #4]
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	b933      	cbnz	r3, 800988c <_free_r+0x30>
 800987e:	6063      	str	r3, [r4, #4]
 8009880:	6014      	str	r4, [r2, #0]
 8009882:	b003      	add	sp, #12
 8009884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009888:	f000 b8e2 	b.w	8009a50 <__malloc_unlock>
 800988c:	42a3      	cmp	r3, r4
 800988e:	d908      	bls.n	80098a2 <_free_r+0x46>
 8009890:	6825      	ldr	r5, [r4, #0]
 8009892:	1961      	adds	r1, r4, r5
 8009894:	428b      	cmp	r3, r1
 8009896:	bf01      	itttt	eq
 8009898:	6819      	ldreq	r1, [r3, #0]
 800989a:	685b      	ldreq	r3, [r3, #4]
 800989c:	1949      	addeq	r1, r1, r5
 800989e:	6021      	streq	r1, [r4, #0]
 80098a0:	e7ed      	b.n	800987e <_free_r+0x22>
 80098a2:	461a      	mov	r2, r3
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	b10b      	cbz	r3, 80098ac <_free_r+0x50>
 80098a8:	42a3      	cmp	r3, r4
 80098aa:	d9fa      	bls.n	80098a2 <_free_r+0x46>
 80098ac:	6811      	ldr	r1, [r2, #0]
 80098ae:	1855      	adds	r5, r2, r1
 80098b0:	42a5      	cmp	r5, r4
 80098b2:	d10b      	bne.n	80098cc <_free_r+0x70>
 80098b4:	6824      	ldr	r4, [r4, #0]
 80098b6:	4421      	add	r1, r4
 80098b8:	1854      	adds	r4, r2, r1
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	d1e0      	bne.n	8009882 <_free_r+0x26>
 80098c0:	681c      	ldr	r4, [r3, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	6053      	str	r3, [r2, #4]
 80098c6:	440c      	add	r4, r1
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	e7da      	b.n	8009882 <_free_r+0x26>
 80098cc:	d902      	bls.n	80098d4 <_free_r+0x78>
 80098ce:	230c      	movs	r3, #12
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	e7d6      	b.n	8009882 <_free_r+0x26>
 80098d4:	6825      	ldr	r5, [r4, #0]
 80098d6:	1961      	adds	r1, r4, r5
 80098d8:	428b      	cmp	r3, r1
 80098da:	bf04      	itt	eq
 80098dc:	6819      	ldreq	r1, [r3, #0]
 80098de:	685b      	ldreq	r3, [r3, #4]
 80098e0:	6063      	str	r3, [r4, #4]
 80098e2:	bf04      	itt	eq
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	6054      	str	r4, [r2, #4]
 80098ea:	e7ca      	b.n	8009882 <_free_r+0x26>
 80098ec:	b003      	add	sp, #12
 80098ee:	bd30      	pop	{r4, r5, pc}
 80098f0:	20004e58 	.word	0x20004e58

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b823 	b.w	8009944 <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	20000078 	.word	0x20000078

08009904 <sbrk_aligned>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4e0e      	ldr	r6, [pc, #56]	; (8009940 <sbrk_aligned+0x3c>)
 8009908:	460c      	mov	r4, r1
 800990a:	6831      	ldr	r1, [r6, #0]
 800990c:	4605      	mov	r5, r0
 800990e:	b911      	cbnz	r1, 8009916 <sbrk_aligned+0x12>
 8009910:	f001 fe1a 	bl	800b548 <_sbrk_r>
 8009914:	6030      	str	r0, [r6, #0]
 8009916:	4621      	mov	r1, r4
 8009918:	4628      	mov	r0, r5
 800991a:	f001 fe15 	bl	800b548 <_sbrk_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d00a      	beq.n	8009938 <sbrk_aligned+0x34>
 8009922:	1cc4      	adds	r4, r0, #3
 8009924:	f024 0403 	bic.w	r4, r4, #3
 8009928:	42a0      	cmp	r0, r4
 800992a:	d007      	beq.n	800993c <sbrk_aligned+0x38>
 800992c:	1a21      	subs	r1, r4, r0
 800992e:	4628      	mov	r0, r5
 8009930:	f001 fe0a 	bl	800b548 <_sbrk_r>
 8009934:	3001      	adds	r0, #1
 8009936:	d101      	bne.n	800993c <sbrk_aligned+0x38>
 8009938:	f04f 34ff 	mov.w	r4, #4294967295
 800993c:	4620      	mov	r0, r4
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	20004e5c 	.word	0x20004e5c

08009944 <_malloc_r>:
 8009944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009948:	1ccd      	adds	r5, r1, #3
 800994a:	f025 0503 	bic.w	r5, r5, #3
 800994e:	3508      	adds	r5, #8
 8009950:	2d0c      	cmp	r5, #12
 8009952:	bf38      	it	cc
 8009954:	250c      	movcc	r5, #12
 8009956:	2d00      	cmp	r5, #0
 8009958:	4607      	mov	r7, r0
 800995a:	db01      	blt.n	8009960 <_malloc_r+0x1c>
 800995c:	42a9      	cmp	r1, r5
 800995e:	d905      	bls.n	800996c <_malloc_r+0x28>
 8009960:	230c      	movs	r3, #12
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	2600      	movs	r6, #0
 8009966:	4630      	mov	r0, r6
 8009968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800996c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a40 <_malloc_r+0xfc>
 8009970:	f000 f868 	bl	8009a44 <__malloc_lock>
 8009974:	f8d8 3000 	ldr.w	r3, [r8]
 8009978:	461c      	mov	r4, r3
 800997a:	bb5c      	cbnz	r4, 80099d4 <_malloc_r+0x90>
 800997c:	4629      	mov	r1, r5
 800997e:	4638      	mov	r0, r7
 8009980:	f7ff ffc0 	bl	8009904 <sbrk_aligned>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	4604      	mov	r4, r0
 8009988:	d155      	bne.n	8009a36 <_malloc_r+0xf2>
 800998a:	f8d8 4000 	ldr.w	r4, [r8]
 800998e:	4626      	mov	r6, r4
 8009990:	2e00      	cmp	r6, #0
 8009992:	d145      	bne.n	8009a20 <_malloc_r+0xdc>
 8009994:	2c00      	cmp	r4, #0
 8009996:	d048      	beq.n	8009a2a <_malloc_r+0xe6>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	4631      	mov	r1, r6
 800999c:	4638      	mov	r0, r7
 800999e:	eb04 0903 	add.w	r9, r4, r3
 80099a2:	f001 fdd1 	bl	800b548 <_sbrk_r>
 80099a6:	4581      	cmp	r9, r0
 80099a8:	d13f      	bne.n	8009a2a <_malloc_r+0xe6>
 80099aa:	6821      	ldr	r1, [r4, #0]
 80099ac:	1a6d      	subs	r5, r5, r1
 80099ae:	4629      	mov	r1, r5
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7ff ffa7 	bl	8009904 <sbrk_aligned>
 80099b6:	3001      	adds	r0, #1
 80099b8:	d037      	beq.n	8009a2a <_malloc_r+0xe6>
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	442b      	add	r3, r5
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	f8d8 3000 	ldr.w	r3, [r8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d038      	beq.n	8009a3a <_malloc_r+0xf6>
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	d12b      	bne.n	8009a26 <_malloc_r+0xe2>
 80099ce:	2200      	movs	r2, #0
 80099d0:	605a      	str	r2, [r3, #4]
 80099d2:	e00f      	b.n	80099f4 <_malloc_r+0xb0>
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	1b52      	subs	r2, r2, r5
 80099d8:	d41f      	bmi.n	8009a1a <_malloc_r+0xd6>
 80099da:	2a0b      	cmp	r2, #11
 80099dc:	d917      	bls.n	8009a0e <_malloc_r+0xca>
 80099de:	1961      	adds	r1, r4, r5
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	6025      	str	r5, [r4, #0]
 80099e4:	bf18      	it	ne
 80099e6:	6059      	strne	r1, [r3, #4]
 80099e8:	6863      	ldr	r3, [r4, #4]
 80099ea:	bf08      	it	eq
 80099ec:	f8c8 1000 	streq.w	r1, [r8]
 80099f0:	5162      	str	r2, [r4, r5]
 80099f2:	604b      	str	r3, [r1, #4]
 80099f4:	4638      	mov	r0, r7
 80099f6:	f104 060b 	add.w	r6, r4, #11
 80099fa:	f000 f829 	bl	8009a50 <__malloc_unlock>
 80099fe:	f026 0607 	bic.w	r6, r6, #7
 8009a02:	1d23      	adds	r3, r4, #4
 8009a04:	1af2      	subs	r2, r6, r3
 8009a06:	d0ae      	beq.n	8009966 <_malloc_r+0x22>
 8009a08:	1b9b      	subs	r3, r3, r6
 8009a0a:	50a3      	str	r3, [r4, r2]
 8009a0c:	e7ab      	b.n	8009966 <_malloc_r+0x22>
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	6862      	ldr	r2, [r4, #4]
 8009a12:	d1dd      	bne.n	80099d0 <_malloc_r+0x8c>
 8009a14:	f8c8 2000 	str.w	r2, [r8]
 8009a18:	e7ec      	b.n	80099f4 <_malloc_r+0xb0>
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	6864      	ldr	r4, [r4, #4]
 8009a1e:	e7ac      	b.n	800997a <_malloc_r+0x36>
 8009a20:	4634      	mov	r4, r6
 8009a22:	6876      	ldr	r6, [r6, #4]
 8009a24:	e7b4      	b.n	8009990 <_malloc_r+0x4c>
 8009a26:	4613      	mov	r3, r2
 8009a28:	e7cc      	b.n	80099c4 <_malloc_r+0x80>
 8009a2a:	230c      	movs	r3, #12
 8009a2c:	603b      	str	r3, [r7, #0]
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f000 f80e 	bl	8009a50 <__malloc_unlock>
 8009a34:	e797      	b.n	8009966 <_malloc_r+0x22>
 8009a36:	6025      	str	r5, [r4, #0]
 8009a38:	e7dc      	b.n	80099f4 <_malloc_r+0xb0>
 8009a3a:	605b      	str	r3, [r3, #4]
 8009a3c:	deff      	udf	#255	; 0xff
 8009a3e:	bf00      	nop
 8009a40:	20004e58 	.word	0x20004e58

08009a44 <__malloc_lock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__malloc_lock+0x8>)
 8009a46:	f7ff b876 	b.w	8008b36 <__retarget_lock_acquire_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20004e54 	.word	0x20004e54

08009a50 <__malloc_unlock>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__malloc_unlock+0x8>)
 8009a52:	f7ff b871 	b.w	8008b38 <__retarget_lock_release_recursive>
 8009a56:	bf00      	nop
 8009a58:	20004e54 	.word	0x20004e54

08009a5c <_Balloc>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	69c6      	ldr	r6, [r0, #28]
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	b976      	cbnz	r6, 8009a84 <_Balloc+0x28>
 8009a66:	2010      	movs	r0, #16
 8009a68:	f7ff ff44 	bl	80098f4 <malloc>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	61e0      	str	r0, [r4, #28]
 8009a70:	b920      	cbnz	r0, 8009a7c <_Balloc+0x20>
 8009a72:	4b18      	ldr	r3, [pc, #96]	; (8009ad4 <_Balloc+0x78>)
 8009a74:	4818      	ldr	r0, [pc, #96]	; (8009ad8 <_Balloc+0x7c>)
 8009a76:	216b      	movs	r1, #107	; 0x6b
 8009a78:	f001 fd7e 	bl	800b578 <__assert_func>
 8009a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a80:	6006      	str	r6, [r0, #0]
 8009a82:	60c6      	str	r6, [r0, #12]
 8009a84:	69e6      	ldr	r6, [r4, #28]
 8009a86:	68f3      	ldr	r3, [r6, #12]
 8009a88:	b183      	cbz	r3, 8009aac <_Balloc+0x50>
 8009a8a:	69e3      	ldr	r3, [r4, #28]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a92:	b9b8      	cbnz	r0, 8009ac4 <_Balloc+0x68>
 8009a94:	2101      	movs	r1, #1
 8009a96:	fa01 f605 	lsl.w	r6, r1, r5
 8009a9a:	1d72      	adds	r2, r6, #5
 8009a9c:	0092      	lsls	r2, r2, #2
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f001 fd88 	bl	800b5b4 <_calloc_r>
 8009aa4:	b160      	cbz	r0, 8009ac0 <_Balloc+0x64>
 8009aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009aaa:	e00e      	b.n	8009aca <_Balloc+0x6e>
 8009aac:	2221      	movs	r2, #33	; 0x21
 8009aae:	2104      	movs	r1, #4
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f001 fd7f 	bl	800b5b4 <_calloc_r>
 8009ab6:	69e3      	ldr	r3, [r4, #28]
 8009ab8:	60f0      	str	r0, [r6, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e4      	bne.n	8009a8a <_Balloc+0x2e>
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	6802      	ldr	r2, [r0, #0]
 8009ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aca:	2300      	movs	r3, #0
 8009acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ad0:	e7f7      	b.n	8009ac2 <_Balloc+0x66>
 8009ad2:	bf00      	nop
 8009ad4:	0800c486 	.word	0x0800c486
 8009ad8:	0800c506 	.word	0x0800c506

08009adc <_Bfree>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	69c6      	ldr	r6, [r0, #28]
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	b976      	cbnz	r6, 8009b04 <_Bfree+0x28>
 8009ae6:	2010      	movs	r0, #16
 8009ae8:	f7ff ff04 	bl	80098f4 <malloc>
 8009aec:	4602      	mov	r2, r0
 8009aee:	61e8      	str	r0, [r5, #28]
 8009af0:	b920      	cbnz	r0, 8009afc <_Bfree+0x20>
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <_Bfree+0x3c>)
 8009af4:	4809      	ldr	r0, [pc, #36]	; (8009b1c <_Bfree+0x40>)
 8009af6:	218f      	movs	r1, #143	; 0x8f
 8009af8:	f001 fd3e 	bl	800b578 <__assert_func>
 8009afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b00:	6006      	str	r6, [r0, #0]
 8009b02:	60c6      	str	r6, [r0, #12]
 8009b04:	b13c      	cbz	r4, 8009b16 <_Bfree+0x3a>
 8009b06:	69eb      	ldr	r3, [r5, #28]
 8009b08:	6862      	ldr	r2, [r4, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b10:	6021      	str	r1, [r4, #0]
 8009b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	0800c486 	.word	0x0800c486
 8009b1c:	0800c506 	.word	0x0800c506

08009b20 <__multadd>:
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	690d      	ldr	r5, [r1, #16]
 8009b26:	4607      	mov	r7, r0
 8009b28:	460c      	mov	r4, r1
 8009b2a:	461e      	mov	r6, r3
 8009b2c:	f101 0c14 	add.w	ip, r1, #20
 8009b30:	2000      	movs	r0, #0
 8009b32:	f8dc 3000 	ldr.w	r3, [ip]
 8009b36:	b299      	uxth	r1, r3
 8009b38:	fb02 6101 	mla	r1, r2, r1, r6
 8009b3c:	0c1e      	lsrs	r6, r3, #16
 8009b3e:	0c0b      	lsrs	r3, r1, #16
 8009b40:	fb02 3306 	mla	r3, r2, r6, r3
 8009b44:	b289      	uxth	r1, r1
 8009b46:	3001      	adds	r0, #1
 8009b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b4c:	4285      	cmp	r5, r0
 8009b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b56:	dcec      	bgt.n	8009b32 <__multadd+0x12>
 8009b58:	b30e      	cbz	r6, 8009b9e <__multadd+0x7e>
 8009b5a:	68a3      	ldr	r3, [r4, #8]
 8009b5c:	42ab      	cmp	r3, r5
 8009b5e:	dc19      	bgt.n	8009b94 <__multadd+0x74>
 8009b60:	6861      	ldr	r1, [r4, #4]
 8009b62:	4638      	mov	r0, r7
 8009b64:	3101      	adds	r1, #1
 8009b66:	f7ff ff79 	bl	8009a5c <_Balloc>
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	b928      	cbnz	r0, 8009b7a <__multadd+0x5a>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	4b0c      	ldr	r3, [pc, #48]	; (8009ba4 <__multadd+0x84>)
 8009b72:	480d      	ldr	r0, [pc, #52]	; (8009ba8 <__multadd+0x88>)
 8009b74:	21ba      	movs	r1, #186	; 0xba
 8009b76:	f001 fcff 	bl	800b578 <__assert_func>
 8009b7a:	6922      	ldr	r2, [r4, #16]
 8009b7c:	3202      	adds	r2, #2
 8009b7e:	f104 010c 	add.w	r1, r4, #12
 8009b82:	0092      	lsls	r2, r2, #2
 8009b84:	300c      	adds	r0, #12
 8009b86:	f7fe ffd8 	bl	8008b3a <memcpy>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4638      	mov	r0, r7
 8009b8e:	f7ff ffa5 	bl	8009adc <_Bfree>
 8009b92:	4644      	mov	r4, r8
 8009b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b98:	3501      	adds	r5, #1
 8009b9a:	615e      	str	r6, [r3, #20]
 8009b9c:	6125      	str	r5, [r4, #16]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba4:	0800c4f5 	.word	0x0800c4f5
 8009ba8:	0800c506 	.word	0x0800c506

08009bac <__s2b>:
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	4615      	mov	r5, r2
 8009bb4:	461f      	mov	r7, r3
 8009bb6:	2209      	movs	r2, #9
 8009bb8:	3308      	adds	r3, #8
 8009bba:	4606      	mov	r6, r0
 8009bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	db09      	blt.n	8009bdc <__s2b+0x30>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ff47 	bl	8009a5c <_Balloc>
 8009bce:	b940      	cbnz	r0, 8009be2 <__s2b+0x36>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <__s2b+0x8c>)
 8009bd4:	4819      	ldr	r0, [pc, #100]	; (8009c3c <__s2b+0x90>)
 8009bd6:	21d3      	movs	r1, #211	; 0xd3
 8009bd8:	f001 fcce 	bl	800b578 <__assert_func>
 8009bdc:	0052      	lsls	r2, r2, #1
 8009bde:	3101      	adds	r1, #1
 8009be0:	e7f0      	b.n	8009bc4 <__s2b+0x18>
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	6143      	str	r3, [r0, #20]
 8009be6:	2d09      	cmp	r5, #9
 8009be8:	f04f 0301 	mov.w	r3, #1
 8009bec:	6103      	str	r3, [r0, #16]
 8009bee:	dd16      	ble.n	8009c1e <__s2b+0x72>
 8009bf0:	f104 0909 	add.w	r9, r4, #9
 8009bf4:	46c8      	mov	r8, r9
 8009bf6:	442c      	add	r4, r5
 8009bf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	3b30      	subs	r3, #48	; 0x30
 8009c00:	220a      	movs	r2, #10
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7ff ff8c 	bl	8009b20 <__multadd>
 8009c08:	45a0      	cmp	r8, r4
 8009c0a:	d1f5      	bne.n	8009bf8 <__s2b+0x4c>
 8009c0c:	f1a5 0408 	sub.w	r4, r5, #8
 8009c10:	444c      	add	r4, r9
 8009c12:	1b2d      	subs	r5, r5, r4
 8009c14:	1963      	adds	r3, r4, r5
 8009c16:	42bb      	cmp	r3, r7
 8009c18:	db04      	blt.n	8009c24 <__s2b+0x78>
 8009c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	340a      	adds	r4, #10
 8009c20:	2509      	movs	r5, #9
 8009c22:	e7f6      	b.n	8009c12 <__s2b+0x66>
 8009c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c28:	4601      	mov	r1, r0
 8009c2a:	3b30      	subs	r3, #48	; 0x30
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff ff76 	bl	8009b20 <__multadd>
 8009c34:	e7ee      	b.n	8009c14 <__s2b+0x68>
 8009c36:	bf00      	nop
 8009c38:	0800c4f5 	.word	0x0800c4f5
 8009c3c:	0800c506 	.word	0x0800c506

08009c40 <__hi0bits>:
 8009c40:	0c03      	lsrs	r3, r0, #16
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	b9d3      	cbnz	r3, 8009c7c <__hi0bits+0x3c>
 8009c46:	0400      	lsls	r0, r0, #16
 8009c48:	2310      	movs	r3, #16
 8009c4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c4e:	bf04      	itt	eq
 8009c50:	0200      	lsleq	r0, r0, #8
 8009c52:	3308      	addeq	r3, #8
 8009c54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c58:	bf04      	itt	eq
 8009c5a:	0100      	lsleq	r0, r0, #4
 8009c5c:	3304      	addeq	r3, #4
 8009c5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c62:	bf04      	itt	eq
 8009c64:	0080      	lsleq	r0, r0, #2
 8009c66:	3302      	addeq	r3, #2
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	db05      	blt.n	8009c78 <__hi0bits+0x38>
 8009c6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c70:	f103 0301 	add.w	r3, r3, #1
 8009c74:	bf08      	it	eq
 8009c76:	2320      	moveq	r3, #32
 8009c78:	4618      	mov	r0, r3
 8009c7a:	4770      	bx	lr
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e7e4      	b.n	8009c4a <__hi0bits+0xa>

08009c80 <__lo0bits>:
 8009c80:	6803      	ldr	r3, [r0, #0]
 8009c82:	f013 0207 	ands.w	r2, r3, #7
 8009c86:	d00c      	beq.n	8009ca2 <__lo0bits+0x22>
 8009c88:	07d9      	lsls	r1, r3, #31
 8009c8a:	d422      	bmi.n	8009cd2 <__lo0bits+0x52>
 8009c8c:	079a      	lsls	r2, r3, #30
 8009c8e:	bf49      	itett	mi
 8009c90:	085b      	lsrmi	r3, r3, #1
 8009c92:	089b      	lsrpl	r3, r3, #2
 8009c94:	6003      	strmi	r3, [r0, #0]
 8009c96:	2201      	movmi	r2, #1
 8009c98:	bf5c      	itt	pl
 8009c9a:	6003      	strpl	r3, [r0, #0]
 8009c9c:	2202      	movpl	r2, #2
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	4770      	bx	lr
 8009ca2:	b299      	uxth	r1, r3
 8009ca4:	b909      	cbnz	r1, 8009caa <__lo0bits+0x2a>
 8009ca6:	0c1b      	lsrs	r3, r3, #16
 8009ca8:	2210      	movs	r2, #16
 8009caa:	b2d9      	uxtb	r1, r3
 8009cac:	b909      	cbnz	r1, 8009cb2 <__lo0bits+0x32>
 8009cae:	3208      	adds	r2, #8
 8009cb0:	0a1b      	lsrs	r3, r3, #8
 8009cb2:	0719      	lsls	r1, r3, #28
 8009cb4:	bf04      	itt	eq
 8009cb6:	091b      	lsreq	r3, r3, #4
 8009cb8:	3204      	addeq	r2, #4
 8009cba:	0799      	lsls	r1, r3, #30
 8009cbc:	bf04      	itt	eq
 8009cbe:	089b      	lsreq	r3, r3, #2
 8009cc0:	3202      	addeq	r2, #2
 8009cc2:	07d9      	lsls	r1, r3, #31
 8009cc4:	d403      	bmi.n	8009cce <__lo0bits+0x4e>
 8009cc6:	085b      	lsrs	r3, r3, #1
 8009cc8:	f102 0201 	add.w	r2, r2, #1
 8009ccc:	d003      	beq.n	8009cd6 <__lo0bits+0x56>
 8009cce:	6003      	str	r3, [r0, #0]
 8009cd0:	e7e5      	b.n	8009c9e <__lo0bits+0x1e>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	e7e3      	b.n	8009c9e <__lo0bits+0x1e>
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	e7e1      	b.n	8009c9e <__lo0bits+0x1e>
	...

08009cdc <__i2b>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	460c      	mov	r4, r1
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	f7ff febb 	bl	8009a5c <_Balloc>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	b928      	cbnz	r0, 8009cf6 <__i2b+0x1a>
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <__i2b+0x24>)
 8009cec:	4805      	ldr	r0, [pc, #20]	; (8009d04 <__i2b+0x28>)
 8009cee:	f240 1145 	movw	r1, #325	; 0x145
 8009cf2:	f001 fc41 	bl	800b578 <__assert_func>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	6144      	str	r4, [r0, #20]
 8009cfa:	6103      	str	r3, [r0, #16]
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800c4f5 	.word	0x0800c4f5
 8009d04:	0800c506 	.word	0x0800c506

08009d08 <__multiply>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	4691      	mov	r9, r2
 8009d0e:	690a      	ldr	r2, [r1, #16]
 8009d10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	bfb8      	it	lt
 8009d18:	460b      	movlt	r3, r1
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	bfbc      	itt	lt
 8009d1e:	464c      	movlt	r4, r9
 8009d20:	4699      	movlt	r9, r3
 8009d22:	6927      	ldr	r7, [r4, #16]
 8009d24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d28:	68a3      	ldr	r3, [r4, #8]
 8009d2a:	6861      	ldr	r1, [r4, #4]
 8009d2c:	eb07 060a 	add.w	r6, r7, sl
 8009d30:	42b3      	cmp	r3, r6
 8009d32:	b085      	sub	sp, #20
 8009d34:	bfb8      	it	lt
 8009d36:	3101      	addlt	r1, #1
 8009d38:	f7ff fe90 	bl	8009a5c <_Balloc>
 8009d3c:	b930      	cbnz	r0, 8009d4c <__multiply+0x44>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	4b44      	ldr	r3, [pc, #272]	; (8009e54 <__multiply+0x14c>)
 8009d42:	4845      	ldr	r0, [pc, #276]	; (8009e58 <__multiply+0x150>)
 8009d44:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d48:	f001 fc16 	bl	800b578 <__assert_func>
 8009d4c:	f100 0514 	add.w	r5, r0, #20
 8009d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d54:	462b      	mov	r3, r5
 8009d56:	2200      	movs	r2, #0
 8009d58:	4543      	cmp	r3, r8
 8009d5a:	d321      	bcc.n	8009da0 <__multiply+0x98>
 8009d5c:	f104 0314 	add.w	r3, r4, #20
 8009d60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d64:	f109 0314 	add.w	r3, r9, #20
 8009d68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d6c:	9202      	str	r2, [sp, #8]
 8009d6e:	1b3a      	subs	r2, r7, r4
 8009d70:	3a15      	subs	r2, #21
 8009d72:	f022 0203 	bic.w	r2, r2, #3
 8009d76:	3204      	adds	r2, #4
 8009d78:	f104 0115 	add.w	r1, r4, #21
 8009d7c:	428f      	cmp	r7, r1
 8009d7e:	bf38      	it	cc
 8009d80:	2204      	movcc	r2, #4
 8009d82:	9201      	str	r2, [sp, #4]
 8009d84:	9a02      	ldr	r2, [sp, #8]
 8009d86:	9303      	str	r3, [sp, #12]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d80c      	bhi.n	8009da6 <__multiply+0x9e>
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd03      	ble.n	8009d98 <__multiply+0x90>
 8009d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d05b      	beq.n	8009e50 <__multiply+0x148>
 8009d98:	6106      	str	r6, [r0, #16]
 8009d9a:	b005      	add	sp, #20
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	f843 2b04 	str.w	r2, [r3], #4
 8009da4:	e7d8      	b.n	8009d58 <__multiply+0x50>
 8009da6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009daa:	f1ba 0f00 	cmp.w	sl, #0
 8009dae:	d024      	beq.n	8009dfa <__multiply+0xf2>
 8009db0:	f104 0e14 	add.w	lr, r4, #20
 8009db4:	46a9      	mov	r9, r5
 8009db6:	f04f 0c00 	mov.w	ip, #0
 8009dba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dbe:	f8d9 1000 	ldr.w	r1, [r9]
 8009dc2:	fa1f fb82 	uxth.w	fp, r2
 8009dc6:	b289      	uxth	r1, r1
 8009dc8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8009dd4:	4461      	add	r1, ip
 8009dd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dda:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009de2:	b289      	uxth	r1, r1
 8009de4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009de8:	4577      	cmp	r7, lr
 8009dea:	f849 1b04 	str.w	r1, [r9], #4
 8009dee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009df2:	d8e2      	bhi.n	8009dba <__multiply+0xb2>
 8009df4:	9a01      	ldr	r2, [sp, #4]
 8009df6:	f845 c002 	str.w	ip, [r5, r2]
 8009dfa:	9a03      	ldr	r2, [sp, #12]
 8009dfc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e00:	3304      	adds	r3, #4
 8009e02:	f1b9 0f00 	cmp.w	r9, #0
 8009e06:	d021      	beq.n	8009e4c <__multiply+0x144>
 8009e08:	6829      	ldr	r1, [r5, #0]
 8009e0a:	f104 0c14 	add.w	ip, r4, #20
 8009e0e:	46ae      	mov	lr, r5
 8009e10:	f04f 0a00 	mov.w	sl, #0
 8009e14:	f8bc b000 	ldrh.w	fp, [ip]
 8009e18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e1c:	fb09 220b 	mla	r2, r9, fp, r2
 8009e20:	4452      	add	r2, sl
 8009e22:	b289      	uxth	r1, r1
 8009e24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e28:	f84e 1b04 	str.w	r1, [lr], #4
 8009e2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e34:	f8be 1000 	ldrh.w	r1, [lr]
 8009e38:	fb09 110a 	mla	r1, r9, sl, r1
 8009e3c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e40:	4567      	cmp	r7, ip
 8009e42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e46:	d8e5      	bhi.n	8009e14 <__multiply+0x10c>
 8009e48:	9a01      	ldr	r2, [sp, #4]
 8009e4a:	50a9      	str	r1, [r5, r2]
 8009e4c:	3504      	adds	r5, #4
 8009e4e:	e799      	b.n	8009d84 <__multiply+0x7c>
 8009e50:	3e01      	subs	r6, #1
 8009e52:	e79b      	b.n	8009d8c <__multiply+0x84>
 8009e54:	0800c4f5 	.word	0x0800c4f5
 8009e58:	0800c506 	.word	0x0800c506

08009e5c <__pow5mult>:
 8009e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e60:	4615      	mov	r5, r2
 8009e62:	f012 0203 	ands.w	r2, r2, #3
 8009e66:	4606      	mov	r6, r0
 8009e68:	460f      	mov	r7, r1
 8009e6a:	d007      	beq.n	8009e7c <__pow5mult+0x20>
 8009e6c:	4c25      	ldr	r4, [pc, #148]	; (8009f04 <__pow5mult+0xa8>)
 8009e6e:	3a01      	subs	r2, #1
 8009e70:	2300      	movs	r3, #0
 8009e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e76:	f7ff fe53 	bl	8009b20 <__multadd>
 8009e7a:	4607      	mov	r7, r0
 8009e7c:	10ad      	asrs	r5, r5, #2
 8009e7e:	d03d      	beq.n	8009efc <__pow5mult+0xa0>
 8009e80:	69f4      	ldr	r4, [r6, #28]
 8009e82:	b97c      	cbnz	r4, 8009ea4 <__pow5mult+0x48>
 8009e84:	2010      	movs	r0, #16
 8009e86:	f7ff fd35 	bl	80098f4 <malloc>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	61f0      	str	r0, [r6, #28]
 8009e8e:	b928      	cbnz	r0, 8009e9c <__pow5mult+0x40>
 8009e90:	4b1d      	ldr	r3, [pc, #116]	; (8009f08 <__pow5mult+0xac>)
 8009e92:	481e      	ldr	r0, [pc, #120]	; (8009f0c <__pow5mult+0xb0>)
 8009e94:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e98:	f001 fb6e 	bl	800b578 <__assert_func>
 8009e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ea0:	6004      	str	r4, [r0, #0]
 8009ea2:	60c4      	str	r4, [r0, #12]
 8009ea4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009eac:	b94c      	cbnz	r4, 8009ec2 <__pow5mult+0x66>
 8009eae:	f240 2171 	movw	r1, #625	; 0x271
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7ff ff12 	bl	8009cdc <__i2b>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	f04f 0900 	mov.w	r9, #0
 8009ec6:	07eb      	lsls	r3, r5, #31
 8009ec8:	d50a      	bpl.n	8009ee0 <__pow5mult+0x84>
 8009eca:	4639      	mov	r1, r7
 8009ecc:	4622      	mov	r2, r4
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f7ff ff1a 	bl	8009d08 <__multiply>
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f7ff fdff 	bl	8009adc <_Bfree>
 8009ede:	4647      	mov	r7, r8
 8009ee0:	106d      	asrs	r5, r5, #1
 8009ee2:	d00b      	beq.n	8009efc <__pow5mult+0xa0>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	b938      	cbnz	r0, 8009ef8 <__pow5mult+0x9c>
 8009ee8:	4622      	mov	r2, r4
 8009eea:	4621      	mov	r1, r4
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7ff ff0b 	bl	8009d08 <__multiply>
 8009ef2:	6020      	str	r0, [r4, #0]
 8009ef4:	f8c0 9000 	str.w	r9, [r0]
 8009ef8:	4604      	mov	r4, r0
 8009efa:	e7e4      	b.n	8009ec6 <__pow5mult+0x6a>
 8009efc:	4638      	mov	r0, r7
 8009efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f02:	bf00      	nop
 8009f04:	0800c650 	.word	0x0800c650
 8009f08:	0800c486 	.word	0x0800c486
 8009f0c:	0800c506 	.word	0x0800c506

08009f10 <__lshift>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	460c      	mov	r4, r1
 8009f16:	6849      	ldr	r1, [r1, #4]
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	4607      	mov	r7, r0
 8009f22:	4691      	mov	r9, r2
 8009f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f28:	f108 0601 	add.w	r6, r8, #1
 8009f2c:	42b3      	cmp	r3, r6
 8009f2e:	db0b      	blt.n	8009f48 <__lshift+0x38>
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7ff fd93 	bl	8009a5c <_Balloc>
 8009f36:	4605      	mov	r5, r0
 8009f38:	b948      	cbnz	r0, 8009f4e <__lshift+0x3e>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b28      	ldr	r3, [pc, #160]	; (8009fe0 <__lshift+0xd0>)
 8009f3e:	4829      	ldr	r0, [pc, #164]	; (8009fe4 <__lshift+0xd4>)
 8009f40:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f44:	f001 fb18 	bl	800b578 <__assert_func>
 8009f48:	3101      	adds	r1, #1
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	e7ee      	b.n	8009f2c <__lshift+0x1c>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f100 0114 	add.w	r1, r0, #20
 8009f54:	f100 0210 	add.w	r2, r0, #16
 8009f58:	4618      	mov	r0, r3
 8009f5a:	4553      	cmp	r3, sl
 8009f5c:	db33      	blt.n	8009fc6 <__lshift+0xb6>
 8009f5e:	6920      	ldr	r0, [r4, #16]
 8009f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f64:	f104 0314 	add.w	r3, r4, #20
 8009f68:	f019 091f 	ands.w	r9, r9, #31
 8009f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f74:	d02b      	beq.n	8009fce <__lshift+0xbe>
 8009f76:	f1c9 0e20 	rsb	lr, r9, #32
 8009f7a:	468a      	mov	sl, r1
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	fa00 f009 	lsl.w	r0, r0, r9
 8009f84:	4310      	orrs	r0, r2
 8009f86:	f84a 0b04 	str.w	r0, [sl], #4
 8009f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8e:	459c      	cmp	ip, r3
 8009f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f94:	d8f3      	bhi.n	8009f7e <__lshift+0x6e>
 8009f96:	ebac 0304 	sub.w	r3, ip, r4
 8009f9a:	3b15      	subs	r3, #21
 8009f9c:	f023 0303 	bic.w	r3, r3, #3
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	f104 0015 	add.w	r0, r4, #21
 8009fa6:	4584      	cmp	ip, r0
 8009fa8:	bf38      	it	cc
 8009faa:	2304      	movcc	r3, #4
 8009fac:	50ca      	str	r2, [r1, r3]
 8009fae:	b10a      	cbz	r2, 8009fb4 <__lshift+0xa4>
 8009fb0:	f108 0602 	add.w	r6, r8, #2
 8009fb4:	3e01      	subs	r6, #1
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	612e      	str	r6, [r5, #16]
 8009fba:	4621      	mov	r1, r4
 8009fbc:	f7ff fd8e 	bl	8009adc <_Bfree>
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fca:	3301      	adds	r3, #1
 8009fcc:	e7c5      	b.n	8009f5a <__lshift+0x4a>
 8009fce:	3904      	subs	r1, #4
 8009fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd8:	459c      	cmp	ip, r3
 8009fda:	d8f9      	bhi.n	8009fd0 <__lshift+0xc0>
 8009fdc:	e7ea      	b.n	8009fb4 <__lshift+0xa4>
 8009fde:	bf00      	nop
 8009fe0:	0800c4f5 	.word	0x0800c4f5
 8009fe4:	0800c506 	.word	0x0800c506

08009fe8 <__mcmp>:
 8009fe8:	b530      	push	{r4, r5, lr}
 8009fea:	6902      	ldr	r2, [r0, #16]
 8009fec:	690c      	ldr	r4, [r1, #16]
 8009fee:	1b12      	subs	r2, r2, r4
 8009ff0:	d10e      	bne.n	800a010 <__mcmp+0x28>
 8009ff2:	f100 0314 	add.w	r3, r0, #20
 8009ff6:	3114      	adds	r1, #20
 8009ff8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ffc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a000:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a004:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a008:	42a5      	cmp	r5, r4
 800a00a:	d003      	beq.n	800a014 <__mcmp+0x2c>
 800a00c:	d305      	bcc.n	800a01a <__mcmp+0x32>
 800a00e:	2201      	movs	r2, #1
 800a010:	4610      	mov	r0, r2
 800a012:	bd30      	pop	{r4, r5, pc}
 800a014:	4283      	cmp	r3, r0
 800a016:	d3f3      	bcc.n	800a000 <__mcmp+0x18>
 800a018:	e7fa      	b.n	800a010 <__mcmp+0x28>
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	e7f7      	b.n	800a010 <__mcmp+0x28>

0800a020 <__mdiff>:
 800a020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	460c      	mov	r4, r1
 800a026:	4606      	mov	r6, r0
 800a028:	4611      	mov	r1, r2
 800a02a:	4620      	mov	r0, r4
 800a02c:	4690      	mov	r8, r2
 800a02e:	f7ff ffdb 	bl	8009fe8 <__mcmp>
 800a032:	1e05      	subs	r5, r0, #0
 800a034:	d110      	bne.n	800a058 <__mdiff+0x38>
 800a036:	4629      	mov	r1, r5
 800a038:	4630      	mov	r0, r6
 800a03a:	f7ff fd0f 	bl	8009a5c <_Balloc>
 800a03e:	b930      	cbnz	r0, 800a04e <__mdiff+0x2e>
 800a040:	4b3a      	ldr	r3, [pc, #232]	; (800a12c <__mdiff+0x10c>)
 800a042:	4602      	mov	r2, r0
 800a044:	f240 2137 	movw	r1, #567	; 0x237
 800a048:	4839      	ldr	r0, [pc, #228]	; (800a130 <__mdiff+0x110>)
 800a04a:	f001 fa95 	bl	800b578 <__assert_func>
 800a04e:	2301      	movs	r3, #1
 800a050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	bfa4      	itt	ge
 800a05a:	4643      	movge	r3, r8
 800a05c:	46a0      	movge	r8, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a064:	bfa6      	itte	ge
 800a066:	461c      	movge	r4, r3
 800a068:	2500      	movge	r5, #0
 800a06a:	2501      	movlt	r5, #1
 800a06c:	f7ff fcf6 	bl	8009a5c <_Balloc>
 800a070:	b920      	cbnz	r0, 800a07c <__mdiff+0x5c>
 800a072:	4b2e      	ldr	r3, [pc, #184]	; (800a12c <__mdiff+0x10c>)
 800a074:	4602      	mov	r2, r0
 800a076:	f240 2145 	movw	r1, #581	; 0x245
 800a07a:	e7e5      	b.n	800a048 <__mdiff+0x28>
 800a07c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a080:	6926      	ldr	r6, [r4, #16]
 800a082:	60c5      	str	r5, [r0, #12]
 800a084:	f104 0914 	add.w	r9, r4, #20
 800a088:	f108 0514 	add.w	r5, r8, #20
 800a08c:	f100 0e14 	add.w	lr, r0, #20
 800a090:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a094:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a098:	f108 0210 	add.w	r2, r8, #16
 800a09c:	46f2      	mov	sl, lr
 800a09e:	2100      	movs	r1, #0
 800a0a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0a8:	fa11 f88b 	uxtah	r8, r1, fp
 800a0ac:	b299      	uxth	r1, r3
 800a0ae:	0c1b      	lsrs	r3, r3, #16
 800a0b0:	eba8 0801 	sub.w	r8, r8, r1
 800a0b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0bc:	fa1f f888 	uxth.w	r8, r8
 800a0c0:	1419      	asrs	r1, r3, #16
 800a0c2:	454e      	cmp	r6, r9
 800a0c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0c8:	f84a 3b04 	str.w	r3, [sl], #4
 800a0cc:	d8e8      	bhi.n	800a0a0 <__mdiff+0x80>
 800a0ce:	1b33      	subs	r3, r6, r4
 800a0d0:	3b15      	subs	r3, #21
 800a0d2:	f023 0303 	bic.w	r3, r3, #3
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	3415      	adds	r4, #21
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	bf38      	it	cc
 800a0de:	2304      	movcc	r3, #4
 800a0e0:	441d      	add	r5, r3
 800a0e2:	4473      	add	r3, lr
 800a0e4:	469e      	mov	lr, r3
 800a0e6:	462e      	mov	r6, r5
 800a0e8:	4566      	cmp	r6, ip
 800a0ea:	d30e      	bcc.n	800a10a <__mdiff+0xea>
 800a0ec:	f10c 0203 	add.w	r2, ip, #3
 800a0f0:	1b52      	subs	r2, r2, r5
 800a0f2:	f022 0203 	bic.w	r2, r2, #3
 800a0f6:	3d03      	subs	r5, #3
 800a0f8:	45ac      	cmp	ip, r5
 800a0fa:	bf38      	it	cc
 800a0fc:	2200      	movcc	r2, #0
 800a0fe:	4413      	add	r3, r2
 800a100:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a104:	b17a      	cbz	r2, 800a126 <__mdiff+0x106>
 800a106:	6107      	str	r7, [r0, #16]
 800a108:	e7a4      	b.n	800a054 <__mdiff+0x34>
 800a10a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a10e:	fa11 f288 	uxtah	r2, r1, r8
 800a112:	1414      	asrs	r4, r2, #16
 800a114:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a118:	b292      	uxth	r2, r2
 800a11a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a11e:	f84e 2b04 	str.w	r2, [lr], #4
 800a122:	1421      	asrs	r1, r4, #16
 800a124:	e7e0      	b.n	800a0e8 <__mdiff+0xc8>
 800a126:	3f01      	subs	r7, #1
 800a128:	e7ea      	b.n	800a100 <__mdiff+0xe0>
 800a12a:	bf00      	nop
 800a12c:	0800c4f5 	.word	0x0800c4f5
 800a130:	0800c506 	.word	0x0800c506

0800a134 <__ulp>:
 800a134:	b082      	sub	sp, #8
 800a136:	ed8d 0b00 	vstr	d0, [sp]
 800a13a:	9a01      	ldr	r2, [sp, #4]
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <__ulp+0x48>)
 800a13e:	4013      	ands	r3, r2
 800a140:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc08      	bgt.n	800a15a <__ulp+0x26>
 800a148:	425b      	negs	r3, r3
 800a14a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a14e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a152:	da04      	bge.n	800a15e <__ulp+0x2a>
 800a154:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a158:	4113      	asrs	r3, r2
 800a15a:	2200      	movs	r2, #0
 800a15c:	e008      	b.n	800a170 <__ulp+0x3c>
 800a15e:	f1a2 0314 	sub.w	r3, r2, #20
 800a162:	2b1e      	cmp	r3, #30
 800a164:	bfda      	itte	le
 800a166:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a16a:	40da      	lsrle	r2, r3
 800a16c:	2201      	movgt	r2, #1
 800a16e:	2300      	movs	r3, #0
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	ec41 0b10 	vmov	d0, r0, r1
 800a178:	b002      	add	sp, #8
 800a17a:	4770      	bx	lr
 800a17c:	7ff00000 	.word	0x7ff00000

0800a180 <__b2d>:
 800a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a184:	6906      	ldr	r6, [r0, #16]
 800a186:	f100 0814 	add.w	r8, r0, #20
 800a18a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a18e:	1f37      	subs	r7, r6, #4
 800a190:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a194:	4610      	mov	r0, r2
 800a196:	f7ff fd53 	bl	8009c40 <__hi0bits>
 800a19a:	f1c0 0320 	rsb	r3, r0, #32
 800a19e:	280a      	cmp	r0, #10
 800a1a0:	600b      	str	r3, [r1, #0]
 800a1a2:	491b      	ldr	r1, [pc, #108]	; (800a210 <__b2d+0x90>)
 800a1a4:	dc15      	bgt.n	800a1d2 <__b2d+0x52>
 800a1a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1aa:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1ae:	45b8      	cmp	r8, r7
 800a1b0:	ea43 0501 	orr.w	r5, r3, r1
 800a1b4:	bf34      	ite	cc
 800a1b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1ba:	2300      	movcs	r3, #0
 800a1bc:	3015      	adds	r0, #21
 800a1be:	fa02 f000 	lsl.w	r0, r2, r0
 800a1c2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1c6:	4303      	orrs	r3, r0
 800a1c8:	461c      	mov	r4, r3
 800a1ca:	ec45 4b10 	vmov	d0, r4, r5
 800a1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d2:	45b8      	cmp	r8, r7
 800a1d4:	bf3a      	itte	cc
 800a1d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1da:	f1a6 0708 	subcc.w	r7, r6, #8
 800a1de:	2300      	movcs	r3, #0
 800a1e0:	380b      	subs	r0, #11
 800a1e2:	d012      	beq.n	800a20a <__b2d+0x8a>
 800a1e4:	f1c0 0120 	rsb	r1, r0, #32
 800a1e8:	fa23 f401 	lsr.w	r4, r3, r1
 800a1ec:	4082      	lsls	r2, r0
 800a1ee:	4322      	orrs	r2, r4
 800a1f0:	4547      	cmp	r7, r8
 800a1f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a1f6:	bf8c      	ite	hi
 800a1f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a1fc:	2200      	movls	r2, #0
 800a1fe:	4083      	lsls	r3, r0
 800a200:	40ca      	lsrs	r2, r1
 800a202:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a206:	4313      	orrs	r3, r2
 800a208:	e7de      	b.n	800a1c8 <__b2d+0x48>
 800a20a:	ea42 0501 	orr.w	r5, r2, r1
 800a20e:	e7db      	b.n	800a1c8 <__b2d+0x48>
 800a210:	3ff00000 	.word	0x3ff00000

0800a214 <__d2b>:
 800a214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a218:	460f      	mov	r7, r1
 800a21a:	2101      	movs	r1, #1
 800a21c:	ec59 8b10 	vmov	r8, r9, d0
 800a220:	4616      	mov	r6, r2
 800a222:	f7ff fc1b 	bl	8009a5c <_Balloc>
 800a226:	4604      	mov	r4, r0
 800a228:	b930      	cbnz	r0, 800a238 <__d2b+0x24>
 800a22a:	4602      	mov	r2, r0
 800a22c:	4b24      	ldr	r3, [pc, #144]	; (800a2c0 <__d2b+0xac>)
 800a22e:	4825      	ldr	r0, [pc, #148]	; (800a2c4 <__d2b+0xb0>)
 800a230:	f240 310f 	movw	r1, #783	; 0x30f
 800a234:	f001 f9a0 	bl	800b578 <__assert_func>
 800a238:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a23c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a240:	bb2d      	cbnz	r5, 800a28e <__d2b+0x7a>
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	f1b8 0300 	subs.w	r3, r8, #0
 800a248:	d026      	beq.n	800a298 <__d2b+0x84>
 800a24a:	4668      	mov	r0, sp
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	f7ff fd17 	bl	8009c80 <__lo0bits>
 800a252:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a256:	b1e8      	cbz	r0, 800a294 <__d2b+0x80>
 800a258:	f1c0 0320 	rsb	r3, r0, #32
 800a25c:	fa02 f303 	lsl.w	r3, r2, r3
 800a260:	430b      	orrs	r3, r1
 800a262:	40c2      	lsrs	r2, r0
 800a264:	6163      	str	r3, [r4, #20]
 800a266:	9201      	str	r2, [sp, #4]
 800a268:	9b01      	ldr	r3, [sp, #4]
 800a26a:	61a3      	str	r3, [r4, #24]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bf14      	ite	ne
 800a270:	2202      	movne	r2, #2
 800a272:	2201      	moveq	r2, #1
 800a274:	6122      	str	r2, [r4, #16]
 800a276:	b1bd      	cbz	r5, 800a2a8 <__d2b+0x94>
 800a278:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a27c:	4405      	add	r5, r0
 800a27e:	603d      	str	r5, [r7, #0]
 800a280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a284:	6030      	str	r0, [r6, #0]
 800a286:	4620      	mov	r0, r4
 800a288:	b003      	add	sp, #12
 800a28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a28e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a292:	e7d6      	b.n	800a242 <__d2b+0x2e>
 800a294:	6161      	str	r1, [r4, #20]
 800a296:	e7e7      	b.n	800a268 <__d2b+0x54>
 800a298:	a801      	add	r0, sp, #4
 800a29a:	f7ff fcf1 	bl	8009c80 <__lo0bits>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	6163      	str	r3, [r4, #20]
 800a2a2:	3020      	adds	r0, #32
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	e7e5      	b.n	800a274 <__d2b+0x60>
 800a2a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2b0:	6038      	str	r0, [r7, #0]
 800a2b2:	6918      	ldr	r0, [r3, #16]
 800a2b4:	f7ff fcc4 	bl	8009c40 <__hi0bits>
 800a2b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2bc:	e7e2      	b.n	800a284 <__d2b+0x70>
 800a2be:	bf00      	nop
 800a2c0:	0800c4f5 	.word	0x0800c4f5
 800a2c4:	0800c506 	.word	0x0800c506

0800a2c8 <__ratio>:
 800a2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	4688      	mov	r8, r1
 800a2ce:	4669      	mov	r1, sp
 800a2d0:	4681      	mov	r9, r0
 800a2d2:	f7ff ff55 	bl	800a180 <__b2d>
 800a2d6:	a901      	add	r1, sp, #4
 800a2d8:	4640      	mov	r0, r8
 800a2da:	ec55 4b10 	vmov	r4, r5, d0
 800a2de:	f7ff ff4f 	bl	800a180 <__b2d>
 800a2e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2ea:	eba3 0c02 	sub.w	ip, r3, r2
 800a2ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2f8:	ec51 0b10 	vmov	r0, r1, d0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	bfd6      	itet	le
 800a300:	460a      	movle	r2, r1
 800a302:	462a      	movgt	r2, r5
 800a304:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a308:	468b      	mov	fp, r1
 800a30a:	462f      	mov	r7, r5
 800a30c:	bfd4      	ite	le
 800a30e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a312:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a316:	4620      	mov	r0, r4
 800a318:	ee10 2a10 	vmov	r2, s0
 800a31c:	465b      	mov	r3, fp
 800a31e:	4639      	mov	r1, r7
 800a320:	f7f6 fa9c 	bl	800085c <__aeabi_ddiv>
 800a324:	ec41 0b10 	vmov	d0, r0, r1
 800a328:	b003      	add	sp, #12
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a32e <__copybits>:
 800a32e:	3901      	subs	r1, #1
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	1149      	asrs	r1, r1, #5
 800a334:	6914      	ldr	r4, [r2, #16]
 800a336:	3101      	adds	r1, #1
 800a338:	f102 0314 	add.w	r3, r2, #20
 800a33c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a344:	1f05      	subs	r5, r0, #4
 800a346:	42a3      	cmp	r3, r4
 800a348:	d30c      	bcc.n	800a364 <__copybits+0x36>
 800a34a:	1aa3      	subs	r3, r4, r2
 800a34c:	3b11      	subs	r3, #17
 800a34e:	f023 0303 	bic.w	r3, r3, #3
 800a352:	3211      	adds	r2, #17
 800a354:	42a2      	cmp	r2, r4
 800a356:	bf88      	it	hi
 800a358:	2300      	movhi	r3, #0
 800a35a:	4418      	add	r0, r3
 800a35c:	2300      	movs	r3, #0
 800a35e:	4288      	cmp	r0, r1
 800a360:	d305      	bcc.n	800a36e <__copybits+0x40>
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	f853 6b04 	ldr.w	r6, [r3], #4
 800a368:	f845 6f04 	str.w	r6, [r5, #4]!
 800a36c:	e7eb      	b.n	800a346 <__copybits+0x18>
 800a36e:	f840 3b04 	str.w	r3, [r0], #4
 800a372:	e7f4      	b.n	800a35e <__copybits+0x30>

0800a374 <__any_on>:
 800a374:	f100 0214 	add.w	r2, r0, #20
 800a378:	6900      	ldr	r0, [r0, #16]
 800a37a:	114b      	asrs	r3, r1, #5
 800a37c:	4298      	cmp	r0, r3
 800a37e:	b510      	push	{r4, lr}
 800a380:	db11      	blt.n	800a3a6 <__any_on+0x32>
 800a382:	dd0a      	ble.n	800a39a <__any_on+0x26>
 800a384:	f011 011f 	ands.w	r1, r1, #31
 800a388:	d007      	beq.n	800a39a <__any_on+0x26>
 800a38a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a38e:	fa24 f001 	lsr.w	r0, r4, r1
 800a392:	fa00 f101 	lsl.w	r1, r0, r1
 800a396:	428c      	cmp	r4, r1
 800a398:	d10b      	bne.n	800a3b2 <__any_on+0x3e>
 800a39a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d803      	bhi.n	800a3aa <__any_on+0x36>
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	e7f7      	b.n	800a39a <__any_on+0x26>
 800a3aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	d0f5      	beq.n	800a39e <__any_on+0x2a>
 800a3b2:	2001      	movs	r0, #1
 800a3b4:	e7f6      	b.n	800a3a4 <__any_on+0x30>

0800a3b6 <sulp>:
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	ec45 4b10 	vmov	d0, r4, r5
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	f7ff feb7 	bl	800a134 <__ulp>
 800a3c6:	ec51 0b10 	vmov	r0, r1, d0
 800a3ca:	b17e      	cbz	r6, 800a3ec <sulp+0x36>
 800a3cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	dd09      	ble.n	800a3ec <sulp+0x36>
 800a3d8:	051b      	lsls	r3, r3, #20
 800a3da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a3de:	2400      	movs	r4, #0
 800a3e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	462b      	mov	r3, r5
 800a3e8:	f7f6 f90e 	bl	8000608 <__aeabi_dmul>
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3f0 <_strtod_l>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	ed2d 8b02 	vpush	{d8}
 800a3f8:	b09b      	sub	sp, #108	; 0x6c
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	9213      	str	r2, [sp, #76]	; 0x4c
 800a3fe:	2200      	movs	r2, #0
 800a400:	9216      	str	r2, [sp, #88]	; 0x58
 800a402:	460d      	mov	r5, r1
 800a404:	f04f 0800 	mov.w	r8, #0
 800a408:	f04f 0900 	mov.w	r9, #0
 800a40c:	460a      	mov	r2, r1
 800a40e:	9215      	str	r2, [sp, #84]	; 0x54
 800a410:	7811      	ldrb	r1, [r2, #0]
 800a412:	292b      	cmp	r1, #43	; 0x2b
 800a414:	d04c      	beq.n	800a4b0 <_strtod_l+0xc0>
 800a416:	d83a      	bhi.n	800a48e <_strtod_l+0x9e>
 800a418:	290d      	cmp	r1, #13
 800a41a:	d834      	bhi.n	800a486 <_strtod_l+0x96>
 800a41c:	2908      	cmp	r1, #8
 800a41e:	d834      	bhi.n	800a48a <_strtod_l+0x9a>
 800a420:	2900      	cmp	r1, #0
 800a422:	d03d      	beq.n	800a4a0 <_strtod_l+0xb0>
 800a424:	2200      	movs	r2, #0
 800a426:	920a      	str	r2, [sp, #40]	; 0x28
 800a428:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a42a:	7832      	ldrb	r2, [r6, #0]
 800a42c:	2a30      	cmp	r2, #48	; 0x30
 800a42e:	f040 80b4 	bne.w	800a59a <_strtod_l+0x1aa>
 800a432:	7872      	ldrb	r2, [r6, #1]
 800a434:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a438:	2a58      	cmp	r2, #88	; 0x58
 800a43a:	d170      	bne.n	800a51e <_strtod_l+0x12e>
 800a43c:	9302      	str	r3, [sp, #8]
 800a43e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	ab16      	add	r3, sp, #88	; 0x58
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4a8e      	ldr	r2, [pc, #568]	; (800a680 <_strtod_l+0x290>)
 800a448:	ab17      	add	r3, sp, #92	; 0x5c
 800a44a:	a915      	add	r1, sp, #84	; 0x54
 800a44c:	4620      	mov	r0, r4
 800a44e:	f001 f92f 	bl	800b6b0 <__gethex>
 800a452:	f010 070f 	ands.w	r7, r0, #15
 800a456:	4605      	mov	r5, r0
 800a458:	d005      	beq.n	800a466 <_strtod_l+0x76>
 800a45a:	2f06      	cmp	r7, #6
 800a45c:	d12a      	bne.n	800a4b4 <_strtod_l+0xc4>
 800a45e:	3601      	adds	r6, #1
 800a460:	2300      	movs	r3, #0
 800a462:	9615      	str	r6, [sp, #84]	; 0x54
 800a464:	930a      	str	r3, [sp, #40]	; 0x28
 800a466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f040 857f 	bne.w	800af6c <_strtod_l+0xb7c>
 800a46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a470:	b1db      	cbz	r3, 800a4aa <_strtod_l+0xba>
 800a472:	4642      	mov	r2, r8
 800a474:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a478:	ec43 2b10 	vmov	d0, r2, r3
 800a47c:	b01b      	add	sp, #108	; 0x6c
 800a47e:	ecbd 8b02 	vpop	{d8}
 800a482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a486:	2920      	cmp	r1, #32
 800a488:	d1cc      	bne.n	800a424 <_strtod_l+0x34>
 800a48a:	3201      	adds	r2, #1
 800a48c:	e7bf      	b.n	800a40e <_strtod_l+0x1e>
 800a48e:	292d      	cmp	r1, #45	; 0x2d
 800a490:	d1c8      	bne.n	800a424 <_strtod_l+0x34>
 800a492:	2101      	movs	r1, #1
 800a494:	910a      	str	r1, [sp, #40]	; 0x28
 800a496:	1c51      	adds	r1, r2, #1
 800a498:	9115      	str	r1, [sp, #84]	; 0x54
 800a49a:	7852      	ldrb	r2, [r2, #1]
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	d1c3      	bne.n	800a428 <_strtod_l+0x38>
 800a4a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4a2:	9515      	str	r5, [sp, #84]	; 0x54
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 855f 	bne.w	800af68 <_strtod_l+0xb78>
 800a4aa:	4642      	mov	r2, r8
 800a4ac:	464b      	mov	r3, r9
 800a4ae:	e7e3      	b.n	800a478 <_strtod_l+0x88>
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	e7ef      	b.n	800a494 <_strtod_l+0xa4>
 800a4b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4b6:	b13a      	cbz	r2, 800a4c8 <_strtod_l+0xd8>
 800a4b8:	2135      	movs	r1, #53	; 0x35
 800a4ba:	a818      	add	r0, sp, #96	; 0x60
 800a4bc:	f7ff ff37 	bl	800a32e <__copybits>
 800a4c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff fb0a 	bl	8009adc <_Bfree>
 800a4c8:	3f01      	subs	r7, #1
 800a4ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4cc:	2f04      	cmp	r7, #4
 800a4ce:	d806      	bhi.n	800a4de <_strtod_l+0xee>
 800a4d0:	e8df f007 	tbb	[pc, r7]
 800a4d4:	201d0314 	.word	0x201d0314
 800a4d8:	14          	.byte	0x14
 800a4d9:	00          	.byte	0x00
 800a4da:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a4de:	05e9      	lsls	r1, r5, #23
 800a4e0:	bf48      	it	mi
 800a4e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a4e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4ea:	0d1b      	lsrs	r3, r3, #20
 800a4ec:	051b      	lsls	r3, r3, #20
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1b9      	bne.n	800a466 <_strtod_l+0x76>
 800a4f2:	f7fe faf5 	bl	8008ae0 <__errno>
 800a4f6:	2322      	movs	r3, #34	; 0x22
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	e7b4      	b.n	800a466 <_strtod_l+0x76>
 800a4fc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a500:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a504:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a508:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a50c:	e7e7      	b.n	800a4de <_strtod_l+0xee>
 800a50e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a688 <_strtod_l+0x298>
 800a512:	e7e4      	b.n	800a4de <_strtod_l+0xee>
 800a514:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a518:	f04f 38ff 	mov.w	r8, #4294967295
 800a51c:	e7df      	b.n	800a4de <_strtod_l+0xee>
 800a51e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	9215      	str	r2, [sp, #84]	; 0x54
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b30      	cmp	r3, #48	; 0x30
 800a528:	d0f9      	beq.n	800a51e <_strtod_l+0x12e>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d09b      	beq.n	800a466 <_strtod_l+0x76>
 800a52e:	2301      	movs	r3, #1
 800a530:	f04f 0a00 	mov.w	sl, #0
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a538:	930b      	str	r3, [sp, #44]	; 0x2c
 800a53a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a53e:	46d3      	mov	fp, sl
 800a540:	220a      	movs	r2, #10
 800a542:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a544:	7806      	ldrb	r6, [r0, #0]
 800a546:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a54a:	b2d9      	uxtb	r1, r3
 800a54c:	2909      	cmp	r1, #9
 800a54e:	d926      	bls.n	800a59e <_strtod_l+0x1ae>
 800a550:	494c      	ldr	r1, [pc, #304]	; (800a684 <_strtod_l+0x294>)
 800a552:	2201      	movs	r2, #1
 800a554:	f000 ffe6 	bl	800b524 <strncmp>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d030      	beq.n	800a5be <_strtod_l+0x1ce>
 800a55c:	2000      	movs	r0, #0
 800a55e:	4632      	mov	r2, r6
 800a560:	9005      	str	r0, [sp, #20]
 800a562:	465e      	mov	r6, fp
 800a564:	4603      	mov	r3, r0
 800a566:	2a65      	cmp	r2, #101	; 0x65
 800a568:	d001      	beq.n	800a56e <_strtod_l+0x17e>
 800a56a:	2a45      	cmp	r2, #69	; 0x45
 800a56c:	d113      	bne.n	800a596 <_strtod_l+0x1a6>
 800a56e:	b91e      	cbnz	r6, 800a578 <_strtod_l+0x188>
 800a570:	9a04      	ldr	r2, [sp, #16]
 800a572:	4302      	orrs	r2, r0
 800a574:	d094      	beq.n	800a4a0 <_strtod_l+0xb0>
 800a576:	2600      	movs	r6, #0
 800a578:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a57a:	1c6a      	adds	r2, r5, #1
 800a57c:	9215      	str	r2, [sp, #84]	; 0x54
 800a57e:	786a      	ldrb	r2, [r5, #1]
 800a580:	2a2b      	cmp	r2, #43	; 0x2b
 800a582:	d074      	beq.n	800a66e <_strtod_l+0x27e>
 800a584:	2a2d      	cmp	r2, #45	; 0x2d
 800a586:	d078      	beq.n	800a67a <_strtod_l+0x28a>
 800a588:	f04f 0c00 	mov.w	ip, #0
 800a58c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a590:	2909      	cmp	r1, #9
 800a592:	d97f      	bls.n	800a694 <_strtod_l+0x2a4>
 800a594:	9515      	str	r5, [sp, #84]	; 0x54
 800a596:	2700      	movs	r7, #0
 800a598:	e09e      	b.n	800a6d8 <_strtod_l+0x2e8>
 800a59a:	2300      	movs	r3, #0
 800a59c:	e7c8      	b.n	800a530 <_strtod_l+0x140>
 800a59e:	f1bb 0f08 	cmp.w	fp, #8
 800a5a2:	bfd8      	it	le
 800a5a4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a5a6:	f100 0001 	add.w	r0, r0, #1
 800a5aa:	bfda      	itte	le
 800a5ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5b0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a5b2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a5b6:	f10b 0b01 	add.w	fp, fp, #1
 800a5ba:	9015      	str	r0, [sp, #84]	; 0x54
 800a5bc:	e7c1      	b.n	800a542 <_strtod_l+0x152>
 800a5be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	9215      	str	r2, [sp, #84]	; 0x54
 800a5c4:	785a      	ldrb	r2, [r3, #1]
 800a5c6:	f1bb 0f00 	cmp.w	fp, #0
 800a5ca:	d037      	beq.n	800a63c <_strtod_l+0x24c>
 800a5cc:	9005      	str	r0, [sp, #20]
 800a5ce:	465e      	mov	r6, fp
 800a5d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d912      	bls.n	800a5fe <_strtod_l+0x20e>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e7c4      	b.n	800a566 <_strtod_l+0x176>
 800a5dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	9215      	str	r2, [sp, #84]	; 0x54
 800a5e2:	785a      	ldrb	r2, [r3, #1]
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	2a30      	cmp	r2, #48	; 0x30
 800a5e8:	d0f8      	beq.n	800a5dc <_strtod_l+0x1ec>
 800a5ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a5ee:	2b08      	cmp	r3, #8
 800a5f0:	f200 84c1 	bhi.w	800af76 <_strtod_l+0xb86>
 800a5f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5f6:	9005      	str	r0, [sp, #20]
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	3a30      	subs	r2, #48	; 0x30
 800a600:	f100 0301 	add.w	r3, r0, #1
 800a604:	d014      	beq.n	800a630 <_strtod_l+0x240>
 800a606:	9905      	ldr	r1, [sp, #20]
 800a608:	4419      	add	r1, r3
 800a60a:	9105      	str	r1, [sp, #20]
 800a60c:	4633      	mov	r3, r6
 800a60e:	eb00 0c06 	add.w	ip, r0, r6
 800a612:	210a      	movs	r1, #10
 800a614:	4563      	cmp	r3, ip
 800a616:	d113      	bne.n	800a640 <_strtod_l+0x250>
 800a618:	1833      	adds	r3, r6, r0
 800a61a:	2b08      	cmp	r3, #8
 800a61c:	f106 0601 	add.w	r6, r6, #1
 800a620:	4406      	add	r6, r0
 800a622:	dc1a      	bgt.n	800a65a <_strtod_l+0x26a>
 800a624:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a626:	230a      	movs	r3, #10
 800a628:	fb03 2301 	mla	r3, r3, r1, r2
 800a62c:	9309      	str	r3, [sp, #36]	; 0x24
 800a62e:	2300      	movs	r3, #0
 800a630:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a632:	1c51      	adds	r1, r2, #1
 800a634:	9115      	str	r1, [sp, #84]	; 0x54
 800a636:	7852      	ldrb	r2, [r2, #1]
 800a638:	4618      	mov	r0, r3
 800a63a:	e7c9      	b.n	800a5d0 <_strtod_l+0x1e0>
 800a63c:	4658      	mov	r0, fp
 800a63e:	e7d2      	b.n	800a5e6 <_strtod_l+0x1f6>
 800a640:	2b08      	cmp	r3, #8
 800a642:	f103 0301 	add.w	r3, r3, #1
 800a646:	dc03      	bgt.n	800a650 <_strtod_l+0x260>
 800a648:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a64a:	434f      	muls	r7, r1
 800a64c:	9709      	str	r7, [sp, #36]	; 0x24
 800a64e:	e7e1      	b.n	800a614 <_strtod_l+0x224>
 800a650:	2b10      	cmp	r3, #16
 800a652:	bfd8      	it	le
 800a654:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a658:	e7dc      	b.n	800a614 <_strtod_l+0x224>
 800a65a:	2e10      	cmp	r6, #16
 800a65c:	bfdc      	itt	le
 800a65e:	230a      	movle	r3, #10
 800a660:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a664:	e7e3      	b.n	800a62e <_strtod_l+0x23e>
 800a666:	2300      	movs	r3, #0
 800a668:	9305      	str	r3, [sp, #20]
 800a66a:	2301      	movs	r3, #1
 800a66c:	e780      	b.n	800a570 <_strtod_l+0x180>
 800a66e:	f04f 0c00 	mov.w	ip, #0
 800a672:	1caa      	adds	r2, r5, #2
 800a674:	9215      	str	r2, [sp, #84]	; 0x54
 800a676:	78aa      	ldrb	r2, [r5, #2]
 800a678:	e788      	b.n	800a58c <_strtod_l+0x19c>
 800a67a:	f04f 0c01 	mov.w	ip, #1
 800a67e:	e7f8      	b.n	800a672 <_strtod_l+0x282>
 800a680:	0800c660 	.word	0x0800c660
 800a684:	0800c65c 	.word	0x0800c65c
 800a688:	7ff00000 	.word	0x7ff00000
 800a68c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a68e:	1c51      	adds	r1, r2, #1
 800a690:	9115      	str	r1, [sp, #84]	; 0x54
 800a692:	7852      	ldrb	r2, [r2, #1]
 800a694:	2a30      	cmp	r2, #48	; 0x30
 800a696:	d0f9      	beq.n	800a68c <_strtod_l+0x29c>
 800a698:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a69c:	2908      	cmp	r1, #8
 800a69e:	f63f af7a 	bhi.w	800a596 <_strtod_l+0x1a6>
 800a6a2:	3a30      	subs	r2, #48	; 0x30
 800a6a4:	9208      	str	r2, [sp, #32]
 800a6a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6a8:	920c      	str	r2, [sp, #48]	; 0x30
 800a6aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6ac:	1c57      	adds	r7, r2, #1
 800a6ae:	9715      	str	r7, [sp, #84]	; 0x54
 800a6b0:	7852      	ldrb	r2, [r2, #1]
 800a6b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a6b6:	f1be 0f09 	cmp.w	lr, #9
 800a6ba:	d938      	bls.n	800a72e <_strtod_l+0x33e>
 800a6bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6be:	1a7f      	subs	r7, r7, r1
 800a6c0:	2f08      	cmp	r7, #8
 800a6c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a6c6:	dc03      	bgt.n	800a6d0 <_strtod_l+0x2e0>
 800a6c8:	9908      	ldr	r1, [sp, #32]
 800a6ca:	428f      	cmp	r7, r1
 800a6cc:	bfa8      	it	ge
 800a6ce:	460f      	movge	r7, r1
 800a6d0:	f1bc 0f00 	cmp.w	ip, #0
 800a6d4:	d000      	beq.n	800a6d8 <_strtod_l+0x2e8>
 800a6d6:	427f      	negs	r7, r7
 800a6d8:	2e00      	cmp	r6, #0
 800a6da:	d14f      	bne.n	800a77c <_strtod_l+0x38c>
 800a6dc:	9904      	ldr	r1, [sp, #16]
 800a6de:	4301      	orrs	r1, r0
 800a6e0:	f47f aec1 	bne.w	800a466 <_strtod_l+0x76>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f aedb 	bne.w	800a4a0 <_strtod_l+0xb0>
 800a6ea:	2a69      	cmp	r2, #105	; 0x69
 800a6ec:	d029      	beq.n	800a742 <_strtod_l+0x352>
 800a6ee:	dc26      	bgt.n	800a73e <_strtod_l+0x34e>
 800a6f0:	2a49      	cmp	r2, #73	; 0x49
 800a6f2:	d026      	beq.n	800a742 <_strtod_l+0x352>
 800a6f4:	2a4e      	cmp	r2, #78	; 0x4e
 800a6f6:	f47f aed3 	bne.w	800a4a0 <_strtod_l+0xb0>
 800a6fa:	499b      	ldr	r1, [pc, #620]	; (800a968 <_strtod_l+0x578>)
 800a6fc:	a815      	add	r0, sp, #84	; 0x54
 800a6fe:	f001 fa17 	bl	800bb30 <__match>
 800a702:	2800      	cmp	r0, #0
 800a704:	f43f aecc 	beq.w	800a4a0 <_strtod_l+0xb0>
 800a708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	2b28      	cmp	r3, #40	; 0x28
 800a70e:	d12f      	bne.n	800a770 <_strtod_l+0x380>
 800a710:	4996      	ldr	r1, [pc, #600]	; (800a96c <_strtod_l+0x57c>)
 800a712:	aa18      	add	r2, sp, #96	; 0x60
 800a714:	a815      	add	r0, sp, #84	; 0x54
 800a716:	f001 fa1f 	bl	800bb58 <__hexnan>
 800a71a:	2805      	cmp	r0, #5
 800a71c:	d128      	bne.n	800a770 <_strtod_l+0x380>
 800a71e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a720:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a724:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a728:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a72c:	e69b      	b.n	800a466 <_strtod_l+0x76>
 800a72e:	9f08      	ldr	r7, [sp, #32]
 800a730:	210a      	movs	r1, #10
 800a732:	fb01 2107 	mla	r1, r1, r7, r2
 800a736:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a73a:	9208      	str	r2, [sp, #32]
 800a73c:	e7b5      	b.n	800a6aa <_strtod_l+0x2ba>
 800a73e:	2a6e      	cmp	r2, #110	; 0x6e
 800a740:	e7d9      	b.n	800a6f6 <_strtod_l+0x306>
 800a742:	498b      	ldr	r1, [pc, #556]	; (800a970 <_strtod_l+0x580>)
 800a744:	a815      	add	r0, sp, #84	; 0x54
 800a746:	f001 f9f3 	bl	800bb30 <__match>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f43f aea8 	beq.w	800a4a0 <_strtod_l+0xb0>
 800a750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a752:	4988      	ldr	r1, [pc, #544]	; (800a974 <_strtod_l+0x584>)
 800a754:	3b01      	subs	r3, #1
 800a756:	a815      	add	r0, sp, #84	; 0x54
 800a758:	9315      	str	r3, [sp, #84]	; 0x54
 800a75a:	f001 f9e9 	bl	800bb30 <__match>
 800a75e:	b910      	cbnz	r0, 800a766 <_strtod_l+0x376>
 800a760:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a762:	3301      	adds	r3, #1
 800a764:	9315      	str	r3, [sp, #84]	; 0x54
 800a766:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a984 <_strtod_l+0x594>
 800a76a:	f04f 0800 	mov.w	r8, #0
 800a76e:	e67a      	b.n	800a466 <_strtod_l+0x76>
 800a770:	4881      	ldr	r0, [pc, #516]	; (800a978 <_strtod_l+0x588>)
 800a772:	f000 fef9 	bl	800b568 <nan>
 800a776:	ec59 8b10 	vmov	r8, r9, d0
 800a77a:	e674      	b.n	800a466 <_strtod_l+0x76>
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a780:	1afb      	subs	r3, r7, r3
 800a782:	f1bb 0f00 	cmp.w	fp, #0
 800a786:	bf08      	it	eq
 800a788:	46b3      	moveq	fp, r6
 800a78a:	2e10      	cmp	r6, #16
 800a78c:	9308      	str	r3, [sp, #32]
 800a78e:	4635      	mov	r5, r6
 800a790:	bfa8      	it	ge
 800a792:	2510      	movge	r5, #16
 800a794:	f7f5 febe 	bl	8000514 <__aeabi_ui2d>
 800a798:	2e09      	cmp	r6, #9
 800a79a:	4680      	mov	r8, r0
 800a79c:	4689      	mov	r9, r1
 800a79e:	dd13      	ble.n	800a7c8 <_strtod_l+0x3d8>
 800a7a0:	4b76      	ldr	r3, [pc, #472]	; (800a97c <_strtod_l+0x58c>)
 800a7a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7aa:	f7f5 ff2d 	bl	8000608 <__aeabi_dmul>
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	4689      	mov	r9, r1
 800a7b4:	f7f5 feae 	bl	8000514 <__aeabi_ui2d>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4640      	mov	r0, r8
 800a7be:	4649      	mov	r1, r9
 800a7c0:	f7f5 fd6c 	bl	800029c <__adddf3>
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4689      	mov	r9, r1
 800a7c8:	2e0f      	cmp	r6, #15
 800a7ca:	dc38      	bgt.n	800a83e <_strtod_l+0x44e>
 800a7cc:	9b08      	ldr	r3, [sp, #32]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f43f ae49 	beq.w	800a466 <_strtod_l+0x76>
 800a7d4:	dd24      	ble.n	800a820 <_strtod_l+0x430>
 800a7d6:	2b16      	cmp	r3, #22
 800a7d8:	dc0b      	bgt.n	800a7f2 <_strtod_l+0x402>
 800a7da:	4968      	ldr	r1, [pc, #416]	; (800a97c <_strtod_l+0x58c>)
 800a7dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	464b      	mov	r3, r9
 800a7e8:	f7f5 ff0e 	bl	8000608 <__aeabi_dmul>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	e639      	b.n	800a466 <_strtod_l+0x76>
 800a7f2:	9a08      	ldr	r2, [sp, #32]
 800a7f4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	db20      	blt.n	800a83e <_strtod_l+0x44e>
 800a7fc:	4c5f      	ldr	r4, [pc, #380]	; (800a97c <_strtod_l+0x58c>)
 800a7fe:	f1c6 060f 	rsb	r6, r6, #15
 800a802:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a806:	4642      	mov	r2, r8
 800a808:	464b      	mov	r3, r9
 800a80a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80e:	f7f5 fefb 	bl	8000608 <__aeabi_dmul>
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	1b9e      	subs	r6, r3, r6
 800a816:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a81a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a81e:	e7e3      	b.n	800a7e8 <_strtod_l+0x3f8>
 800a820:	9b08      	ldr	r3, [sp, #32]
 800a822:	3316      	adds	r3, #22
 800a824:	db0b      	blt.n	800a83e <_strtod_l+0x44e>
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	1bdf      	subs	r7, r3, r7
 800a82a:	4b54      	ldr	r3, [pc, #336]	; (800a97c <_strtod_l+0x58c>)
 800a82c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a834:	4640      	mov	r0, r8
 800a836:	4649      	mov	r1, r9
 800a838:	f7f6 f810 	bl	800085c <__aeabi_ddiv>
 800a83c:	e7d6      	b.n	800a7ec <_strtod_l+0x3fc>
 800a83e:	9b08      	ldr	r3, [sp, #32]
 800a840:	1b75      	subs	r5, r6, r5
 800a842:	441d      	add	r5, r3
 800a844:	2d00      	cmp	r5, #0
 800a846:	dd70      	ble.n	800a92a <_strtod_l+0x53a>
 800a848:	f015 030f 	ands.w	r3, r5, #15
 800a84c:	d00a      	beq.n	800a864 <_strtod_l+0x474>
 800a84e:	494b      	ldr	r1, [pc, #300]	; (800a97c <_strtod_l+0x58c>)
 800a850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a854:	4642      	mov	r2, r8
 800a856:	464b      	mov	r3, r9
 800a858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a85c:	f7f5 fed4 	bl	8000608 <__aeabi_dmul>
 800a860:	4680      	mov	r8, r0
 800a862:	4689      	mov	r9, r1
 800a864:	f035 050f 	bics.w	r5, r5, #15
 800a868:	d04d      	beq.n	800a906 <_strtod_l+0x516>
 800a86a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a86e:	dd22      	ble.n	800a8b6 <_strtod_l+0x4c6>
 800a870:	2500      	movs	r5, #0
 800a872:	46ab      	mov	fp, r5
 800a874:	9509      	str	r5, [sp, #36]	; 0x24
 800a876:	9505      	str	r5, [sp, #20]
 800a878:	2322      	movs	r3, #34	; 0x22
 800a87a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a984 <_strtod_l+0x594>
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	f04f 0800 	mov.w	r8, #0
 800a884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	f43f aded 	beq.w	800a466 <_strtod_l+0x76>
 800a88c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a88e:	4620      	mov	r0, r4
 800a890:	f7ff f924 	bl	8009adc <_Bfree>
 800a894:	9905      	ldr	r1, [sp, #20]
 800a896:	4620      	mov	r0, r4
 800a898:	f7ff f920 	bl	8009adc <_Bfree>
 800a89c:	4659      	mov	r1, fp
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7ff f91c 	bl	8009adc <_Bfree>
 800a8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff f918 	bl	8009adc <_Bfree>
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f7ff f914 	bl	8009adc <_Bfree>
 800a8b4:	e5d7      	b.n	800a466 <_strtod_l+0x76>
 800a8b6:	4b32      	ldr	r3, [pc, #200]	; (800a980 <_strtod_l+0x590>)
 800a8b8:	9304      	str	r3, [sp, #16]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	112d      	asrs	r5, r5, #4
 800a8be:	4640      	mov	r0, r8
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	469a      	mov	sl, r3
 800a8c4:	2d01      	cmp	r5, #1
 800a8c6:	dc21      	bgt.n	800a90c <_strtod_l+0x51c>
 800a8c8:	b10b      	cbz	r3, 800a8ce <_strtod_l+0x4de>
 800a8ca:	4680      	mov	r8, r0
 800a8cc:	4689      	mov	r9, r1
 800a8ce:	492c      	ldr	r1, [pc, #176]	; (800a980 <_strtod_l+0x590>)
 800a8d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a8d4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e0:	f7f5 fe92 	bl	8000608 <__aeabi_dmul>
 800a8e4:	4b27      	ldr	r3, [pc, #156]	; (800a984 <_strtod_l+0x594>)
 800a8e6:	460a      	mov	r2, r1
 800a8e8:	400b      	ands	r3, r1
 800a8ea:	4927      	ldr	r1, [pc, #156]	; (800a988 <_strtod_l+0x598>)
 800a8ec:	428b      	cmp	r3, r1
 800a8ee:	4680      	mov	r8, r0
 800a8f0:	d8be      	bhi.n	800a870 <_strtod_l+0x480>
 800a8f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a8f6:	428b      	cmp	r3, r1
 800a8f8:	bf86      	itte	hi
 800a8fa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a98c <_strtod_l+0x59c>
 800a8fe:	f04f 38ff 	movhi.w	r8, #4294967295
 800a902:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a906:	2300      	movs	r3, #0
 800a908:	9304      	str	r3, [sp, #16]
 800a90a:	e07b      	b.n	800aa04 <_strtod_l+0x614>
 800a90c:	07ea      	lsls	r2, r5, #31
 800a90e:	d505      	bpl.n	800a91c <_strtod_l+0x52c>
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	f7f5 fe77 	bl	8000608 <__aeabi_dmul>
 800a91a:	2301      	movs	r3, #1
 800a91c:	9a04      	ldr	r2, [sp, #16]
 800a91e:	3208      	adds	r2, #8
 800a920:	f10a 0a01 	add.w	sl, sl, #1
 800a924:	106d      	asrs	r5, r5, #1
 800a926:	9204      	str	r2, [sp, #16]
 800a928:	e7cc      	b.n	800a8c4 <_strtod_l+0x4d4>
 800a92a:	d0ec      	beq.n	800a906 <_strtod_l+0x516>
 800a92c:	426d      	negs	r5, r5
 800a92e:	f015 020f 	ands.w	r2, r5, #15
 800a932:	d00a      	beq.n	800a94a <_strtod_l+0x55a>
 800a934:	4b11      	ldr	r3, [pc, #68]	; (800a97c <_strtod_l+0x58c>)
 800a936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 ff8b 	bl	800085c <__aeabi_ddiv>
 800a946:	4680      	mov	r8, r0
 800a948:	4689      	mov	r9, r1
 800a94a:	112d      	asrs	r5, r5, #4
 800a94c:	d0db      	beq.n	800a906 <_strtod_l+0x516>
 800a94e:	2d1f      	cmp	r5, #31
 800a950:	dd1e      	ble.n	800a990 <_strtod_l+0x5a0>
 800a952:	2500      	movs	r5, #0
 800a954:	46ab      	mov	fp, r5
 800a956:	9509      	str	r5, [sp, #36]	; 0x24
 800a958:	9505      	str	r5, [sp, #20]
 800a95a:	2322      	movs	r3, #34	; 0x22
 800a95c:	f04f 0800 	mov.w	r8, #0
 800a960:	f04f 0900 	mov.w	r9, #0
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	e78d      	b.n	800a884 <_strtod_l+0x494>
 800a968:	0800c44d 	.word	0x0800c44d
 800a96c:	0800c674 	.word	0x0800c674
 800a970:	0800c445 	.word	0x0800c445
 800a974:	0800c47c 	.word	0x0800c47c
 800a978:	0800c805 	.word	0x0800c805
 800a97c:	0800c588 	.word	0x0800c588
 800a980:	0800c560 	.word	0x0800c560
 800a984:	7ff00000 	.word	0x7ff00000
 800a988:	7ca00000 	.word	0x7ca00000
 800a98c:	7fefffff 	.word	0x7fefffff
 800a990:	f015 0310 	ands.w	r3, r5, #16
 800a994:	bf18      	it	ne
 800a996:	236a      	movne	r3, #106	; 0x6a
 800a998:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ad3c <_strtod_l+0x94c>
 800a99c:	9304      	str	r3, [sp, #16]
 800a99e:	4640      	mov	r0, r8
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	07ea      	lsls	r2, r5, #31
 800a9a6:	d504      	bpl.n	800a9b2 <_strtod_l+0x5c2>
 800a9a8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a9ac:	f7f5 fe2c 	bl	8000608 <__aeabi_dmul>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	106d      	asrs	r5, r5, #1
 800a9b4:	f10a 0a08 	add.w	sl, sl, #8
 800a9b8:	d1f4      	bne.n	800a9a4 <_strtod_l+0x5b4>
 800a9ba:	b10b      	cbz	r3, 800a9c0 <_strtod_l+0x5d0>
 800a9bc:	4680      	mov	r8, r0
 800a9be:	4689      	mov	r9, r1
 800a9c0:	9b04      	ldr	r3, [sp, #16]
 800a9c2:	b1bb      	cbz	r3, 800a9f4 <_strtod_l+0x604>
 800a9c4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a9c8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	dd10      	ble.n	800a9f4 <_strtod_l+0x604>
 800a9d2:	2b1f      	cmp	r3, #31
 800a9d4:	f340 811e 	ble.w	800ac14 <_strtod_l+0x824>
 800a9d8:	2b34      	cmp	r3, #52	; 0x34
 800a9da:	bfde      	ittt	le
 800a9dc:	f04f 33ff 	movle.w	r3, #4294967295
 800a9e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a9e4:	4093      	lslle	r3, r2
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	bfcc      	ite	gt
 800a9ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a9f0:	ea03 0901 	andle.w	r9, r3, r1
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	f7f6 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d1a6      	bne.n	800a952 <_strtod_l+0x562>
 800aa04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa0a:	4633      	mov	r3, r6
 800aa0c:	465a      	mov	r2, fp
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f7ff f8cc 	bl	8009bac <__s2b>
 800aa14:	9009      	str	r0, [sp, #36]	; 0x24
 800aa16:	2800      	cmp	r0, #0
 800aa18:	f43f af2a 	beq.w	800a870 <_strtod_l+0x480>
 800aa1c:	9a08      	ldr	r2, [sp, #32]
 800aa1e:	9b05      	ldr	r3, [sp, #20]
 800aa20:	2a00      	cmp	r2, #0
 800aa22:	eba3 0307 	sub.w	r3, r3, r7
 800aa26:	bfa8      	it	ge
 800aa28:	2300      	movge	r3, #0
 800aa2a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa2c:	2500      	movs	r5, #0
 800aa2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa32:	9312      	str	r3, [sp, #72]	; 0x48
 800aa34:	46ab      	mov	fp, r5
 800aa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa38:	4620      	mov	r0, r4
 800aa3a:	6859      	ldr	r1, [r3, #4]
 800aa3c:	f7ff f80e 	bl	8009a5c <_Balloc>
 800aa40:	9005      	str	r0, [sp, #20]
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f43f af18 	beq.w	800a878 <_strtod_l+0x488>
 800aa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4a:	691a      	ldr	r2, [r3, #16]
 800aa4c:	3202      	adds	r2, #2
 800aa4e:	f103 010c 	add.w	r1, r3, #12
 800aa52:	0092      	lsls	r2, r2, #2
 800aa54:	300c      	adds	r0, #12
 800aa56:	f7fe f870 	bl	8008b3a <memcpy>
 800aa5a:	ec49 8b10 	vmov	d0, r8, r9
 800aa5e:	aa18      	add	r2, sp, #96	; 0x60
 800aa60:	a917      	add	r1, sp, #92	; 0x5c
 800aa62:	4620      	mov	r0, r4
 800aa64:	f7ff fbd6 	bl	800a214 <__d2b>
 800aa68:	ec49 8b18 	vmov	d8, r8, r9
 800aa6c:	9016      	str	r0, [sp, #88]	; 0x58
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f43f af02 	beq.w	800a878 <_strtod_l+0x488>
 800aa74:	2101      	movs	r1, #1
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7ff f930 	bl	8009cdc <__i2b>
 800aa7c:	4683      	mov	fp, r0
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f43f aefa 	beq.w	800a878 <_strtod_l+0x488>
 800aa84:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aa86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	bfab      	itete	ge
 800aa8c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aa8e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aa90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aa92:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aa96:	bfac      	ite	ge
 800aa98:	eb06 0a03 	addge.w	sl, r6, r3
 800aa9c:	1b9f      	sublt	r7, r3, r6
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	1af6      	subs	r6, r6, r3
 800aaa2:	4416      	add	r6, r2
 800aaa4:	4ba0      	ldr	r3, [pc, #640]	; (800ad28 <_strtod_l+0x938>)
 800aaa6:	3e01      	subs	r6, #1
 800aaa8:	429e      	cmp	r6, r3
 800aaaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aaae:	f280 80c4 	bge.w	800ac3a <_strtod_l+0x84a>
 800aab2:	1b9b      	subs	r3, r3, r6
 800aab4:	2b1f      	cmp	r3, #31
 800aab6:	eba2 0203 	sub.w	r2, r2, r3
 800aaba:	f04f 0101 	mov.w	r1, #1
 800aabe:	f300 80b0 	bgt.w	800ac22 <_strtod_l+0x832>
 800aac2:	fa01 f303 	lsl.w	r3, r1, r3
 800aac6:	930e      	str	r3, [sp, #56]	; 0x38
 800aac8:	2300      	movs	r3, #0
 800aaca:	930d      	str	r3, [sp, #52]	; 0x34
 800aacc:	eb0a 0602 	add.w	r6, sl, r2
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	45b2      	cmp	sl, r6
 800aad4:	4417      	add	r7, r2
 800aad6:	441f      	add	r7, r3
 800aad8:	4653      	mov	r3, sl
 800aada:	bfa8      	it	ge
 800aadc:	4633      	movge	r3, r6
 800aade:	42bb      	cmp	r3, r7
 800aae0:	bfa8      	it	ge
 800aae2:	463b      	movge	r3, r7
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bfc2      	ittt	gt
 800aae8:	1af6      	subgt	r6, r6, r3
 800aaea:	1aff      	subgt	r7, r7, r3
 800aaec:	ebaa 0a03 	subgt.w	sl, sl, r3
 800aaf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dd17      	ble.n	800ab26 <_strtod_l+0x736>
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4620      	mov	r0, r4
 800aafc:	f7ff f9ae 	bl	8009e5c <__pow5mult>
 800ab00:	4683      	mov	fp, r0
 800ab02:	2800      	cmp	r0, #0
 800ab04:	f43f aeb8 	beq.w	800a878 <_strtod_l+0x488>
 800ab08:	4601      	mov	r1, r0
 800ab0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f7ff f8fb 	bl	8009d08 <__multiply>
 800ab12:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f43f aeaf 	beq.w	800a878 <_strtod_l+0x488>
 800ab1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f7fe ffdd 	bl	8009adc <_Bfree>
 800ab22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab24:	9316      	str	r3, [sp, #88]	; 0x58
 800ab26:	2e00      	cmp	r6, #0
 800ab28:	f300 808c 	bgt.w	800ac44 <_strtod_l+0x854>
 800ab2c:	9b08      	ldr	r3, [sp, #32]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	dd08      	ble.n	800ab44 <_strtod_l+0x754>
 800ab32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab34:	9905      	ldr	r1, [sp, #20]
 800ab36:	4620      	mov	r0, r4
 800ab38:	f7ff f990 	bl	8009e5c <__pow5mult>
 800ab3c:	9005      	str	r0, [sp, #20]
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	f43f ae9a 	beq.w	800a878 <_strtod_l+0x488>
 800ab44:	2f00      	cmp	r7, #0
 800ab46:	dd08      	ble.n	800ab5a <_strtod_l+0x76a>
 800ab48:	9905      	ldr	r1, [sp, #20]
 800ab4a:	463a      	mov	r2, r7
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7ff f9df 	bl	8009f10 <__lshift>
 800ab52:	9005      	str	r0, [sp, #20]
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f43f ae8f 	beq.w	800a878 <_strtod_l+0x488>
 800ab5a:	f1ba 0f00 	cmp.w	sl, #0
 800ab5e:	dd08      	ble.n	800ab72 <_strtod_l+0x782>
 800ab60:	4659      	mov	r1, fp
 800ab62:	4652      	mov	r2, sl
 800ab64:	4620      	mov	r0, r4
 800ab66:	f7ff f9d3 	bl	8009f10 <__lshift>
 800ab6a:	4683      	mov	fp, r0
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f ae83 	beq.w	800a878 <_strtod_l+0x488>
 800ab72:	9a05      	ldr	r2, [sp, #20]
 800ab74:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff fa52 	bl	800a020 <__mdiff>
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f43f ae7a 	beq.w	800a878 <_strtod_l+0x488>
 800ab84:	68c3      	ldr	r3, [r0, #12]
 800ab86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60c3      	str	r3, [r0, #12]
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	f7ff fa2b 	bl	8009fe8 <__mcmp>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	da60      	bge.n	800ac58 <_strtod_l+0x868>
 800ab96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab98:	ea53 0308 	orrs.w	r3, r3, r8
 800ab9c:	f040 8084 	bne.w	800aca8 <_strtod_l+0x8b8>
 800aba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d17f      	bne.n	800aca8 <_strtod_l+0x8b8>
 800aba8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800abac:	0d1b      	lsrs	r3, r3, #20
 800abae:	051b      	lsls	r3, r3, #20
 800abb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abb4:	d978      	bls.n	800aca8 <_strtod_l+0x8b8>
 800abb6:	696b      	ldr	r3, [r5, #20]
 800abb8:	b913      	cbnz	r3, 800abc0 <_strtod_l+0x7d0>
 800abba:	692b      	ldr	r3, [r5, #16]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	dd73      	ble.n	800aca8 <_strtod_l+0x8b8>
 800abc0:	4629      	mov	r1, r5
 800abc2:	2201      	movs	r2, #1
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7ff f9a3 	bl	8009f10 <__lshift>
 800abca:	4659      	mov	r1, fp
 800abcc:	4605      	mov	r5, r0
 800abce:	f7ff fa0b 	bl	8009fe8 <__mcmp>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	dd68      	ble.n	800aca8 <_strtod_l+0x8b8>
 800abd6:	9904      	ldr	r1, [sp, #16]
 800abd8:	4a54      	ldr	r2, [pc, #336]	; (800ad2c <_strtod_l+0x93c>)
 800abda:	464b      	mov	r3, r9
 800abdc:	2900      	cmp	r1, #0
 800abde:	f000 8084 	beq.w	800acea <_strtod_l+0x8fa>
 800abe2:	ea02 0109 	and.w	r1, r2, r9
 800abe6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800abea:	dc7e      	bgt.n	800acea <_strtod_l+0x8fa>
 800abec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800abf0:	f77f aeb3 	ble.w	800a95a <_strtod_l+0x56a>
 800abf4:	4b4e      	ldr	r3, [pc, #312]	; (800ad30 <_strtod_l+0x940>)
 800abf6:	4640      	mov	r0, r8
 800abf8:	4649      	mov	r1, r9
 800abfa:	2200      	movs	r2, #0
 800abfc:	f7f5 fd04 	bl	8000608 <__aeabi_dmul>
 800ac00:	4b4a      	ldr	r3, [pc, #296]	; (800ad2c <_strtod_l+0x93c>)
 800ac02:	400b      	ands	r3, r1
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f47f ae3f 	bne.w	800a88c <_strtod_l+0x49c>
 800ac0e:	2322      	movs	r3, #34	; 0x22
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	e63b      	b.n	800a88c <_strtod_l+0x49c>
 800ac14:	f04f 32ff 	mov.w	r2, #4294967295
 800ac18:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1c:	ea03 0808 	and.w	r8, r3, r8
 800ac20:	e6e8      	b.n	800a9f4 <_strtod_l+0x604>
 800ac22:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ac26:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ac2a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ac2e:	36e2      	adds	r6, #226	; 0xe2
 800ac30:	fa01 f306 	lsl.w	r3, r1, r6
 800ac34:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ac38:	e748      	b.n	800aacc <_strtod_l+0x6dc>
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ac42:	e743      	b.n	800aacc <_strtod_l+0x6dc>
 800ac44:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac46:	4632      	mov	r2, r6
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f7ff f961 	bl	8009f10 <__lshift>
 800ac4e:	9016      	str	r0, [sp, #88]	; 0x58
 800ac50:	2800      	cmp	r0, #0
 800ac52:	f47f af6b 	bne.w	800ab2c <_strtod_l+0x73c>
 800ac56:	e60f      	b.n	800a878 <_strtod_l+0x488>
 800ac58:	46ca      	mov	sl, r9
 800ac5a:	d171      	bne.n	800ad40 <_strtod_l+0x950>
 800ac5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac62:	b352      	cbz	r2, 800acba <_strtod_l+0x8ca>
 800ac64:	4a33      	ldr	r2, [pc, #204]	; (800ad34 <_strtod_l+0x944>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d12a      	bne.n	800acc0 <_strtod_l+0x8d0>
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	4641      	mov	r1, r8
 800ac6e:	b1fb      	cbz	r3, 800acb0 <_strtod_l+0x8c0>
 800ac70:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <_strtod_l+0x93c>)
 800ac72:	ea09 0303 	and.w	r3, r9, r3
 800ac76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac7e:	d81a      	bhi.n	800acb6 <_strtod_l+0x8c6>
 800ac80:	0d1b      	lsrs	r3, r3, #20
 800ac82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	4299      	cmp	r1, r3
 800ac8c:	d118      	bne.n	800acc0 <_strtod_l+0x8d0>
 800ac8e:	4b2a      	ldr	r3, [pc, #168]	; (800ad38 <_strtod_l+0x948>)
 800ac90:	459a      	cmp	sl, r3
 800ac92:	d102      	bne.n	800ac9a <_strtod_l+0x8aa>
 800ac94:	3101      	adds	r1, #1
 800ac96:	f43f adef 	beq.w	800a878 <_strtod_l+0x488>
 800ac9a:	4b24      	ldr	r3, [pc, #144]	; (800ad2c <_strtod_l+0x93c>)
 800ac9c:	ea0a 0303 	and.w	r3, sl, r3
 800aca0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aca4:	f04f 0800 	mov.w	r8, #0
 800aca8:	9b04      	ldr	r3, [sp, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1a2      	bne.n	800abf4 <_strtod_l+0x804>
 800acae:	e5ed      	b.n	800a88c <_strtod_l+0x49c>
 800acb0:	f04f 33ff 	mov.w	r3, #4294967295
 800acb4:	e7e9      	b.n	800ac8a <_strtod_l+0x89a>
 800acb6:	4613      	mov	r3, r2
 800acb8:	e7e7      	b.n	800ac8a <_strtod_l+0x89a>
 800acba:	ea53 0308 	orrs.w	r3, r3, r8
 800acbe:	d08a      	beq.n	800abd6 <_strtod_l+0x7e6>
 800acc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acc2:	b1e3      	cbz	r3, 800acfe <_strtod_l+0x90e>
 800acc4:	ea13 0f0a 	tst.w	r3, sl
 800acc8:	d0ee      	beq.n	800aca8 <_strtod_l+0x8b8>
 800acca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800accc:	9a04      	ldr	r2, [sp, #16]
 800acce:	4640      	mov	r0, r8
 800acd0:	4649      	mov	r1, r9
 800acd2:	b1c3      	cbz	r3, 800ad06 <_strtod_l+0x916>
 800acd4:	f7ff fb6f 	bl	800a3b6 <sulp>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	ec51 0b18 	vmov	r0, r1, d8
 800ace0:	f7f5 fadc 	bl	800029c <__adddf3>
 800ace4:	4680      	mov	r8, r0
 800ace6:	4689      	mov	r9, r1
 800ace8:	e7de      	b.n	800aca8 <_strtod_l+0x8b8>
 800acea:	4013      	ands	r3, r2
 800acec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800acf0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800acf4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800acf8:	f04f 38ff 	mov.w	r8, #4294967295
 800acfc:	e7d4      	b.n	800aca8 <_strtod_l+0x8b8>
 800acfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad00:	ea13 0f08 	tst.w	r3, r8
 800ad04:	e7e0      	b.n	800acc8 <_strtod_l+0x8d8>
 800ad06:	f7ff fb56 	bl	800a3b6 <sulp>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	ec51 0b18 	vmov	r0, r1, d8
 800ad12:	f7f5 fac1 	bl	8000298 <__aeabi_dsub>
 800ad16:	2200      	movs	r2, #0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	4689      	mov	r9, r1
 800ad1e:	f7f5 fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0c0      	beq.n	800aca8 <_strtod_l+0x8b8>
 800ad26:	e618      	b.n	800a95a <_strtod_l+0x56a>
 800ad28:	fffffc02 	.word	0xfffffc02
 800ad2c:	7ff00000 	.word	0x7ff00000
 800ad30:	39500000 	.word	0x39500000
 800ad34:	000fffff 	.word	0x000fffff
 800ad38:	7fefffff 	.word	0x7fefffff
 800ad3c:	0800c688 	.word	0x0800c688
 800ad40:	4659      	mov	r1, fp
 800ad42:	4628      	mov	r0, r5
 800ad44:	f7ff fac0 	bl	800a2c8 <__ratio>
 800ad48:	ec57 6b10 	vmov	r6, r7, d0
 800ad4c:	ee10 0a10 	vmov	r0, s0
 800ad50:	2200      	movs	r2, #0
 800ad52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad56:	4639      	mov	r1, r7
 800ad58:	f7f5 fed2 	bl	8000b00 <__aeabi_dcmple>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d071      	beq.n	800ae44 <_strtod_l+0xa54>
 800ad60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d17c      	bne.n	800ae60 <_strtod_l+0xa70>
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	d15a      	bne.n	800ae22 <_strtod_l+0xa32>
 800ad6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d15d      	bne.n	800ae30 <_strtod_l+0xa40>
 800ad74:	4b90      	ldr	r3, [pc, #576]	; (800afb8 <_strtod_l+0xbc8>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 feb6 	bl	8000aec <__aeabi_dcmplt>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d15c      	bne.n	800ae3e <_strtod_l+0xa4e>
 800ad84:	4630      	mov	r0, r6
 800ad86:	4639      	mov	r1, r7
 800ad88:	4b8c      	ldr	r3, [pc, #560]	; (800afbc <_strtod_l+0xbcc>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f7f5 fc3c 	bl	8000608 <__aeabi_dmul>
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ad98:	9606      	str	r6, [sp, #24]
 800ad9a:	9307      	str	r3, [sp, #28]
 800ad9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ada0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ada4:	4b86      	ldr	r3, [pc, #536]	; (800afc0 <_strtod_l+0xbd0>)
 800ada6:	ea0a 0303 	and.w	r3, sl, r3
 800adaa:	930d      	str	r3, [sp, #52]	; 0x34
 800adac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adae:	4b85      	ldr	r3, [pc, #532]	; (800afc4 <_strtod_l+0xbd4>)
 800adb0:	429a      	cmp	r2, r3
 800adb2:	f040 8090 	bne.w	800aed6 <_strtod_l+0xae6>
 800adb6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800adba:	ec49 8b10 	vmov	d0, r8, r9
 800adbe:	f7ff f9b9 	bl	800a134 <__ulp>
 800adc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adc6:	ec51 0b10 	vmov	r0, r1, d0
 800adca:	f7f5 fc1d 	bl	8000608 <__aeabi_dmul>
 800adce:	4642      	mov	r2, r8
 800add0:	464b      	mov	r3, r9
 800add2:	f7f5 fa63 	bl	800029c <__adddf3>
 800add6:	460b      	mov	r3, r1
 800add8:	4979      	ldr	r1, [pc, #484]	; (800afc0 <_strtod_l+0xbd0>)
 800adda:	4a7b      	ldr	r2, [pc, #492]	; (800afc8 <_strtod_l+0xbd8>)
 800addc:	4019      	ands	r1, r3
 800adde:	4291      	cmp	r1, r2
 800ade0:	4680      	mov	r8, r0
 800ade2:	d944      	bls.n	800ae6e <_strtod_l+0xa7e>
 800ade4:	ee18 2a90 	vmov	r2, s17
 800ade8:	4b78      	ldr	r3, [pc, #480]	; (800afcc <_strtod_l+0xbdc>)
 800adea:	429a      	cmp	r2, r3
 800adec:	d104      	bne.n	800adf8 <_strtod_l+0xa08>
 800adee:	ee18 3a10 	vmov	r3, s16
 800adf2:	3301      	adds	r3, #1
 800adf4:	f43f ad40 	beq.w	800a878 <_strtod_l+0x488>
 800adf8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800afcc <_strtod_l+0xbdc>
 800adfc:	f04f 38ff 	mov.w	r8, #4294967295
 800ae00:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae02:	4620      	mov	r0, r4
 800ae04:	f7fe fe6a 	bl	8009adc <_Bfree>
 800ae08:	9905      	ldr	r1, [sp, #20]
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7fe fe66 	bl	8009adc <_Bfree>
 800ae10:	4659      	mov	r1, fp
 800ae12:	4620      	mov	r0, r4
 800ae14:	f7fe fe62 	bl	8009adc <_Bfree>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f7fe fe5e 	bl	8009adc <_Bfree>
 800ae20:	e609      	b.n	800aa36 <_strtod_l+0x646>
 800ae22:	f1b8 0f01 	cmp.w	r8, #1
 800ae26:	d103      	bne.n	800ae30 <_strtod_l+0xa40>
 800ae28:	f1b9 0f00 	cmp.w	r9, #0
 800ae2c:	f43f ad95 	beq.w	800a95a <_strtod_l+0x56a>
 800ae30:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800af88 <_strtod_l+0xb98>
 800ae34:	4f60      	ldr	r7, [pc, #384]	; (800afb8 <_strtod_l+0xbc8>)
 800ae36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae3a:	2600      	movs	r6, #0
 800ae3c:	e7ae      	b.n	800ad9c <_strtod_l+0x9ac>
 800ae3e:	4f5f      	ldr	r7, [pc, #380]	; (800afbc <_strtod_l+0xbcc>)
 800ae40:	2600      	movs	r6, #0
 800ae42:	e7a7      	b.n	800ad94 <_strtod_l+0x9a4>
 800ae44:	4b5d      	ldr	r3, [pc, #372]	; (800afbc <_strtod_l+0xbcc>)
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f7f5 fbdc 	bl	8000608 <__aeabi_dmul>
 800ae50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d09c      	beq.n	800ad94 <_strtod_l+0x9a4>
 800ae5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae5e:	e79d      	b.n	800ad9c <_strtod_l+0x9ac>
 800ae60:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800af90 <_strtod_l+0xba0>
 800ae64:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae68:	ec57 6b17 	vmov	r6, r7, d7
 800ae6c:	e796      	b.n	800ad9c <_strtod_l+0x9ac>
 800ae6e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	46ca      	mov	sl, r9
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1c2      	bne.n	800ae00 <_strtod_l+0xa10>
 800ae7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae80:	0d1b      	lsrs	r3, r3, #20
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d1bb      	bne.n	800ae00 <_strtod_l+0xa10>
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 ff1c 	bl	8000cc8 <__aeabi_d2lz>
 800ae90:	f7f5 fb8c 	bl	80005ac <__aeabi_l2d>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4630      	mov	r0, r6
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	f7f5 f9fc 	bl	8000298 <__aeabi_dsub>
 800aea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aea2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aea6:	ea43 0308 	orr.w	r3, r3, r8
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	d054      	beq.n	800af5c <_strtod_l+0xb6c>
 800aeb2:	a339      	add	r3, pc, #228	; (adr r3, 800af98 <_strtod_l+0xba8>)
 800aeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb8:	f7f5 fe18 	bl	8000aec <__aeabi_dcmplt>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f47f ace5 	bne.w	800a88c <_strtod_l+0x49c>
 800aec2:	a337      	add	r3, pc, #220	; (adr r3, 800afa0 <_strtod_l+0xbb0>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 fe2c 	bl	8000b28 <__aeabi_dcmpgt>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d095      	beq.n	800ae00 <_strtod_l+0xa10>
 800aed4:	e4da      	b.n	800a88c <_strtod_l+0x49c>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	b333      	cbz	r3, 800af28 <_strtod_l+0xb38>
 800aeda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aedc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aee0:	d822      	bhi.n	800af28 <_strtod_l+0xb38>
 800aee2:	a331      	add	r3, pc, #196	; (adr r3, 800afa8 <_strtod_l+0xbb8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	4630      	mov	r0, r6
 800aeea:	4639      	mov	r1, r7
 800aeec:	f7f5 fe08 	bl	8000b00 <__aeabi_dcmple>
 800aef0:	b1a0      	cbz	r0, 800af1c <_strtod_l+0xb2c>
 800aef2:	4639      	mov	r1, r7
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7f5 fe5f 	bl	8000bb8 <__aeabi_d2uiz>
 800aefa:	2801      	cmp	r0, #1
 800aefc:	bf38      	it	cc
 800aefe:	2001      	movcc	r0, #1
 800af00:	f7f5 fb08 	bl	8000514 <__aeabi_ui2d>
 800af04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af06:	4606      	mov	r6, r0
 800af08:	460f      	mov	r7, r1
 800af0a:	bb23      	cbnz	r3, 800af56 <_strtod_l+0xb66>
 800af0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af10:	9010      	str	r0, [sp, #64]	; 0x40
 800af12:	9311      	str	r3, [sp, #68]	; 0x44
 800af14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800af1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af24:	1a9b      	subs	r3, r3, r2
 800af26:	930f      	str	r3, [sp, #60]	; 0x3c
 800af28:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af2c:	eeb0 0a48 	vmov.f32	s0, s16
 800af30:	eef0 0a68 	vmov.f32	s1, s17
 800af34:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800af38:	f7ff f8fc 	bl	800a134 <__ulp>
 800af3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af40:	ec53 2b10 	vmov	r2, r3, d0
 800af44:	f7f5 fb60 	bl	8000608 <__aeabi_dmul>
 800af48:	ec53 2b18 	vmov	r2, r3, d8
 800af4c:	f7f5 f9a6 	bl	800029c <__adddf3>
 800af50:	4680      	mov	r8, r0
 800af52:	4689      	mov	r9, r1
 800af54:	e78d      	b.n	800ae72 <_strtod_l+0xa82>
 800af56:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800af5a:	e7db      	b.n	800af14 <_strtod_l+0xb24>
 800af5c:	a314      	add	r3, pc, #80	; (adr r3, 800afb0 <_strtod_l+0xbc0>)
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	f7f5 fdc3 	bl	8000aec <__aeabi_dcmplt>
 800af66:	e7b3      	b.n	800aed0 <_strtod_l+0xae0>
 800af68:	2300      	movs	r3, #0
 800af6a:	930a      	str	r3, [sp, #40]	; 0x28
 800af6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af70:	6013      	str	r3, [r2, #0]
 800af72:	f7ff ba7c 	b.w	800a46e <_strtod_l+0x7e>
 800af76:	2a65      	cmp	r2, #101	; 0x65
 800af78:	f43f ab75 	beq.w	800a666 <_strtod_l+0x276>
 800af7c:	2a45      	cmp	r2, #69	; 0x45
 800af7e:	f43f ab72 	beq.w	800a666 <_strtod_l+0x276>
 800af82:	2301      	movs	r3, #1
 800af84:	f7ff bbaa 	b.w	800a6dc <_strtod_l+0x2ec>
 800af88:	00000000 	.word	0x00000000
 800af8c:	bff00000 	.word	0xbff00000
 800af90:	00000000 	.word	0x00000000
 800af94:	3ff00000 	.word	0x3ff00000
 800af98:	94a03595 	.word	0x94a03595
 800af9c:	3fdfffff 	.word	0x3fdfffff
 800afa0:	35afe535 	.word	0x35afe535
 800afa4:	3fe00000 	.word	0x3fe00000
 800afa8:	ffc00000 	.word	0xffc00000
 800afac:	41dfffff 	.word	0x41dfffff
 800afb0:	94a03595 	.word	0x94a03595
 800afb4:	3fcfffff 	.word	0x3fcfffff
 800afb8:	3ff00000 	.word	0x3ff00000
 800afbc:	3fe00000 	.word	0x3fe00000
 800afc0:	7ff00000 	.word	0x7ff00000
 800afc4:	7fe00000 	.word	0x7fe00000
 800afc8:	7c9fffff 	.word	0x7c9fffff
 800afcc:	7fefffff 	.word	0x7fefffff

0800afd0 <_strtod_r>:
 800afd0:	4b01      	ldr	r3, [pc, #4]	; (800afd8 <_strtod_r+0x8>)
 800afd2:	f7ff ba0d 	b.w	800a3f0 <_strtod_l>
 800afd6:	bf00      	nop
 800afd8:	2000007c 	.word	0x2000007c

0800afdc <_strtol_l.constprop.0>:
 800afdc:	2b01      	cmp	r3, #1
 800afde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe2:	d001      	beq.n	800afe8 <_strtol_l.constprop.0+0xc>
 800afe4:	2b24      	cmp	r3, #36	; 0x24
 800afe6:	d906      	bls.n	800aff6 <_strtol_l.constprop.0+0x1a>
 800afe8:	f7fd fd7a 	bl	8008ae0 <__errno>
 800afec:	2316      	movs	r3, #22
 800afee:	6003      	str	r3, [r0, #0]
 800aff0:	2000      	movs	r0, #0
 800aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b0dc <_strtol_l.constprop.0+0x100>
 800affa:	460d      	mov	r5, r1
 800affc:	462e      	mov	r6, r5
 800affe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b002:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b006:	f017 0708 	ands.w	r7, r7, #8
 800b00a:	d1f7      	bne.n	800affc <_strtol_l.constprop.0+0x20>
 800b00c:	2c2d      	cmp	r4, #45	; 0x2d
 800b00e:	d132      	bne.n	800b076 <_strtol_l.constprop.0+0x9a>
 800b010:	782c      	ldrb	r4, [r5, #0]
 800b012:	2701      	movs	r7, #1
 800b014:	1cb5      	adds	r5, r6, #2
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05b      	beq.n	800b0d2 <_strtol_l.constprop.0+0xf6>
 800b01a:	2b10      	cmp	r3, #16
 800b01c:	d109      	bne.n	800b032 <_strtol_l.constprop.0+0x56>
 800b01e:	2c30      	cmp	r4, #48	; 0x30
 800b020:	d107      	bne.n	800b032 <_strtol_l.constprop.0+0x56>
 800b022:	782c      	ldrb	r4, [r5, #0]
 800b024:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b028:	2c58      	cmp	r4, #88	; 0x58
 800b02a:	d14d      	bne.n	800b0c8 <_strtol_l.constprop.0+0xec>
 800b02c:	786c      	ldrb	r4, [r5, #1]
 800b02e:	2310      	movs	r3, #16
 800b030:	3502      	adds	r5, #2
 800b032:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b036:	f108 38ff 	add.w	r8, r8, #4294967295
 800b03a:	f04f 0e00 	mov.w	lr, #0
 800b03e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b042:	4676      	mov	r6, lr
 800b044:	fb03 8a19 	mls	sl, r3, r9, r8
 800b048:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b04c:	f1bc 0f09 	cmp.w	ip, #9
 800b050:	d816      	bhi.n	800b080 <_strtol_l.constprop.0+0xa4>
 800b052:	4664      	mov	r4, ip
 800b054:	42a3      	cmp	r3, r4
 800b056:	dd24      	ble.n	800b0a2 <_strtol_l.constprop.0+0xc6>
 800b058:	f1be 3fff 	cmp.w	lr, #4294967295
 800b05c:	d008      	beq.n	800b070 <_strtol_l.constprop.0+0x94>
 800b05e:	45b1      	cmp	r9, r6
 800b060:	d31c      	bcc.n	800b09c <_strtol_l.constprop.0+0xc0>
 800b062:	d101      	bne.n	800b068 <_strtol_l.constprop.0+0x8c>
 800b064:	45a2      	cmp	sl, r4
 800b066:	db19      	blt.n	800b09c <_strtol_l.constprop.0+0xc0>
 800b068:	fb06 4603 	mla	r6, r6, r3, r4
 800b06c:	f04f 0e01 	mov.w	lr, #1
 800b070:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b074:	e7e8      	b.n	800b048 <_strtol_l.constprop.0+0x6c>
 800b076:	2c2b      	cmp	r4, #43	; 0x2b
 800b078:	bf04      	itt	eq
 800b07a:	782c      	ldrbeq	r4, [r5, #0]
 800b07c:	1cb5      	addeq	r5, r6, #2
 800b07e:	e7ca      	b.n	800b016 <_strtol_l.constprop.0+0x3a>
 800b080:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b084:	f1bc 0f19 	cmp.w	ip, #25
 800b088:	d801      	bhi.n	800b08e <_strtol_l.constprop.0+0xb2>
 800b08a:	3c37      	subs	r4, #55	; 0x37
 800b08c:	e7e2      	b.n	800b054 <_strtol_l.constprop.0+0x78>
 800b08e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b092:	f1bc 0f19 	cmp.w	ip, #25
 800b096:	d804      	bhi.n	800b0a2 <_strtol_l.constprop.0+0xc6>
 800b098:	3c57      	subs	r4, #87	; 0x57
 800b09a:	e7db      	b.n	800b054 <_strtol_l.constprop.0+0x78>
 800b09c:	f04f 3eff 	mov.w	lr, #4294967295
 800b0a0:	e7e6      	b.n	800b070 <_strtol_l.constprop.0+0x94>
 800b0a2:	f1be 3fff 	cmp.w	lr, #4294967295
 800b0a6:	d105      	bne.n	800b0b4 <_strtol_l.constprop.0+0xd8>
 800b0a8:	2322      	movs	r3, #34	; 0x22
 800b0aa:	6003      	str	r3, [r0, #0]
 800b0ac:	4646      	mov	r6, r8
 800b0ae:	b942      	cbnz	r2, 800b0c2 <_strtol_l.constprop.0+0xe6>
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	e79e      	b.n	800aff2 <_strtol_l.constprop.0+0x16>
 800b0b4:	b107      	cbz	r7, 800b0b8 <_strtol_l.constprop.0+0xdc>
 800b0b6:	4276      	negs	r6, r6
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	d0f9      	beq.n	800b0b0 <_strtol_l.constprop.0+0xd4>
 800b0bc:	f1be 0f00 	cmp.w	lr, #0
 800b0c0:	d000      	beq.n	800b0c4 <_strtol_l.constprop.0+0xe8>
 800b0c2:	1e69      	subs	r1, r5, #1
 800b0c4:	6011      	str	r1, [r2, #0]
 800b0c6:	e7f3      	b.n	800b0b0 <_strtol_l.constprop.0+0xd4>
 800b0c8:	2430      	movs	r4, #48	; 0x30
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1b1      	bne.n	800b032 <_strtol_l.constprop.0+0x56>
 800b0ce:	2308      	movs	r3, #8
 800b0d0:	e7af      	b.n	800b032 <_strtol_l.constprop.0+0x56>
 800b0d2:	2c30      	cmp	r4, #48	; 0x30
 800b0d4:	d0a5      	beq.n	800b022 <_strtol_l.constprop.0+0x46>
 800b0d6:	230a      	movs	r3, #10
 800b0d8:	e7ab      	b.n	800b032 <_strtol_l.constprop.0+0x56>
 800b0da:	bf00      	nop
 800b0dc:	0800c6b1 	.word	0x0800c6b1

0800b0e0 <_strtol_r>:
 800b0e0:	f7ff bf7c 	b.w	800afdc <_strtol_l.constprop.0>

0800b0e4 <__ssputs_r>:
 800b0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e8:	688e      	ldr	r6, [r1, #8]
 800b0ea:	461f      	mov	r7, r3
 800b0ec:	42be      	cmp	r6, r7
 800b0ee:	680b      	ldr	r3, [r1, #0]
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	4690      	mov	r8, r2
 800b0f6:	d82c      	bhi.n	800b152 <__ssputs_r+0x6e>
 800b0f8:	898a      	ldrh	r2, [r1, #12]
 800b0fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0fe:	d026      	beq.n	800b14e <__ssputs_r+0x6a>
 800b100:	6965      	ldr	r5, [r4, #20]
 800b102:	6909      	ldr	r1, [r1, #16]
 800b104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b108:	eba3 0901 	sub.w	r9, r3, r1
 800b10c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b110:	1c7b      	adds	r3, r7, #1
 800b112:	444b      	add	r3, r9
 800b114:	106d      	asrs	r5, r5, #1
 800b116:	429d      	cmp	r5, r3
 800b118:	bf38      	it	cc
 800b11a:	461d      	movcc	r5, r3
 800b11c:	0553      	lsls	r3, r2, #21
 800b11e:	d527      	bpl.n	800b170 <__ssputs_r+0x8c>
 800b120:	4629      	mov	r1, r5
 800b122:	f7fe fc0f 	bl	8009944 <_malloc_r>
 800b126:	4606      	mov	r6, r0
 800b128:	b360      	cbz	r0, 800b184 <__ssputs_r+0xa0>
 800b12a:	6921      	ldr	r1, [r4, #16]
 800b12c:	464a      	mov	r2, r9
 800b12e:	f7fd fd04 	bl	8008b3a <memcpy>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	6126      	str	r6, [r4, #16]
 800b140:	6165      	str	r5, [r4, #20]
 800b142:	444e      	add	r6, r9
 800b144:	eba5 0509 	sub.w	r5, r5, r9
 800b148:	6026      	str	r6, [r4, #0]
 800b14a:	60a5      	str	r5, [r4, #8]
 800b14c:	463e      	mov	r6, r7
 800b14e:	42be      	cmp	r6, r7
 800b150:	d900      	bls.n	800b154 <__ssputs_r+0x70>
 800b152:	463e      	mov	r6, r7
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	4632      	mov	r2, r6
 800b158:	4641      	mov	r1, r8
 800b15a:	f000 f9c9 	bl	800b4f0 <memmove>
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	1b9b      	subs	r3, r3, r6
 800b162:	60a3      	str	r3, [r4, #8]
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	4433      	add	r3, r6
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	2000      	movs	r0, #0
 800b16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b170:	462a      	mov	r2, r5
 800b172:	f000 fd9e 	bl	800bcb2 <_realloc_r>
 800b176:	4606      	mov	r6, r0
 800b178:	2800      	cmp	r0, #0
 800b17a:	d1e0      	bne.n	800b13e <__ssputs_r+0x5a>
 800b17c:	6921      	ldr	r1, [r4, #16]
 800b17e:	4650      	mov	r0, sl
 800b180:	f7fe fb6c 	bl	800985c <_free_r>
 800b184:	230c      	movs	r3, #12
 800b186:	f8ca 3000 	str.w	r3, [sl]
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b190:	81a3      	strh	r3, [r4, #12]
 800b192:	f04f 30ff 	mov.w	r0, #4294967295
 800b196:	e7e9      	b.n	800b16c <__ssputs_r+0x88>

0800b198 <_svfiprintf_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	4698      	mov	r8, r3
 800b19e:	898b      	ldrh	r3, [r1, #12]
 800b1a0:	061b      	lsls	r3, r3, #24
 800b1a2:	b09d      	sub	sp, #116	; 0x74
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	460d      	mov	r5, r1
 800b1a8:	4614      	mov	r4, r2
 800b1aa:	d50e      	bpl.n	800b1ca <_svfiprintf_r+0x32>
 800b1ac:	690b      	ldr	r3, [r1, #16]
 800b1ae:	b963      	cbnz	r3, 800b1ca <_svfiprintf_r+0x32>
 800b1b0:	2140      	movs	r1, #64	; 0x40
 800b1b2:	f7fe fbc7 	bl	8009944 <_malloc_r>
 800b1b6:	6028      	str	r0, [r5, #0]
 800b1b8:	6128      	str	r0, [r5, #16]
 800b1ba:	b920      	cbnz	r0, 800b1c6 <_svfiprintf_r+0x2e>
 800b1bc:	230c      	movs	r3, #12
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c4:	e0d0      	b.n	800b368 <_svfiprintf_r+0x1d0>
 800b1c6:	2340      	movs	r3, #64	; 0x40
 800b1c8:	616b      	str	r3, [r5, #20]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ce:	2320      	movs	r3, #32
 800b1d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1d8:	2330      	movs	r3, #48	; 0x30
 800b1da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b380 <_svfiprintf_r+0x1e8>
 800b1de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1e2:	f04f 0901 	mov.w	r9, #1
 800b1e6:	4623      	mov	r3, r4
 800b1e8:	469a      	mov	sl, r3
 800b1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ee:	b10a      	cbz	r2, 800b1f4 <_svfiprintf_r+0x5c>
 800b1f0:	2a25      	cmp	r2, #37	; 0x25
 800b1f2:	d1f9      	bne.n	800b1e8 <_svfiprintf_r+0x50>
 800b1f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b1f8:	d00b      	beq.n	800b212 <_svfiprintf_r+0x7a>
 800b1fa:	465b      	mov	r3, fp
 800b1fc:	4622      	mov	r2, r4
 800b1fe:	4629      	mov	r1, r5
 800b200:	4638      	mov	r0, r7
 800b202:	f7ff ff6f 	bl	800b0e4 <__ssputs_r>
 800b206:	3001      	adds	r0, #1
 800b208:	f000 80a9 	beq.w	800b35e <_svfiprintf_r+0x1c6>
 800b20c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b20e:	445a      	add	r2, fp
 800b210:	9209      	str	r2, [sp, #36]	; 0x24
 800b212:	f89a 3000 	ldrb.w	r3, [sl]
 800b216:	2b00      	cmp	r3, #0
 800b218:	f000 80a1 	beq.w	800b35e <_svfiprintf_r+0x1c6>
 800b21c:	2300      	movs	r3, #0
 800b21e:	f04f 32ff 	mov.w	r2, #4294967295
 800b222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b226:	f10a 0a01 	add.w	sl, sl, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	9307      	str	r3, [sp, #28]
 800b22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b232:	931a      	str	r3, [sp, #104]	; 0x68
 800b234:	4654      	mov	r4, sl
 800b236:	2205      	movs	r2, #5
 800b238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b23c:	4850      	ldr	r0, [pc, #320]	; (800b380 <_svfiprintf_r+0x1e8>)
 800b23e:	f7f4 ffcf 	bl	80001e0 <memchr>
 800b242:	9a04      	ldr	r2, [sp, #16]
 800b244:	b9d8      	cbnz	r0, 800b27e <_svfiprintf_r+0xe6>
 800b246:	06d0      	lsls	r0, r2, #27
 800b248:	bf44      	itt	mi
 800b24a:	2320      	movmi	r3, #32
 800b24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b250:	0711      	lsls	r1, r2, #28
 800b252:	bf44      	itt	mi
 800b254:	232b      	movmi	r3, #43	; 0x2b
 800b256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b25a:	f89a 3000 	ldrb.w	r3, [sl]
 800b25e:	2b2a      	cmp	r3, #42	; 0x2a
 800b260:	d015      	beq.n	800b28e <_svfiprintf_r+0xf6>
 800b262:	9a07      	ldr	r2, [sp, #28]
 800b264:	4654      	mov	r4, sl
 800b266:	2000      	movs	r0, #0
 800b268:	f04f 0c0a 	mov.w	ip, #10
 800b26c:	4621      	mov	r1, r4
 800b26e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b272:	3b30      	subs	r3, #48	; 0x30
 800b274:	2b09      	cmp	r3, #9
 800b276:	d94d      	bls.n	800b314 <_svfiprintf_r+0x17c>
 800b278:	b1b0      	cbz	r0, 800b2a8 <_svfiprintf_r+0x110>
 800b27a:	9207      	str	r2, [sp, #28]
 800b27c:	e014      	b.n	800b2a8 <_svfiprintf_r+0x110>
 800b27e:	eba0 0308 	sub.w	r3, r0, r8
 800b282:	fa09 f303 	lsl.w	r3, r9, r3
 800b286:	4313      	orrs	r3, r2
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	46a2      	mov	sl, r4
 800b28c:	e7d2      	b.n	800b234 <_svfiprintf_r+0x9c>
 800b28e:	9b03      	ldr	r3, [sp, #12]
 800b290:	1d19      	adds	r1, r3, #4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	9103      	str	r1, [sp, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	bfbb      	ittet	lt
 800b29a:	425b      	neglt	r3, r3
 800b29c:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a0:	9307      	strge	r3, [sp, #28]
 800b2a2:	9307      	strlt	r3, [sp, #28]
 800b2a4:	bfb8      	it	lt
 800b2a6:	9204      	strlt	r2, [sp, #16]
 800b2a8:	7823      	ldrb	r3, [r4, #0]
 800b2aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b2ac:	d10c      	bne.n	800b2c8 <_svfiprintf_r+0x130>
 800b2ae:	7863      	ldrb	r3, [r4, #1]
 800b2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b2:	d134      	bne.n	800b31e <_svfiprintf_r+0x186>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	1d1a      	adds	r2, r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	9203      	str	r2, [sp, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bfb8      	it	lt
 800b2c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2c4:	3402      	adds	r4, #2
 800b2c6:	9305      	str	r3, [sp, #20]
 800b2c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b390 <_svfiprintf_r+0x1f8>
 800b2cc:	7821      	ldrb	r1, [r4, #0]
 800b2ce:	2203      	movs	r2, #3
 800b2d0:	4650      	mov	r0, sl
 800b2d2:	f7f4 ff85 	bl	80001e0 <memchr>
 800b2d6:	b138      	cbz	r0, 800b2e8 <_svfiprintf_r+0x150>
 800b2d8:	9b04      	ldr	r3, [sp, #16]
 800b2da:	eba0 000a 	sub.w	r0, r0, sl
 800b2de:	2240      	movs	r2, #64	; 0x40
 800b2e0:	4082      	lsls	r2, r0
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	3401      	adds	r4, #1
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ec:	4825      	ldr	r0, [pc, #148]	; (800b384 <_svfiprintf_r+0x1ec>)
 800b2ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2f2:	2206      	movs	r2, #6
 800b2f4:	f7f4 ff74 	bl	80001e0 <memchr>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d038      	beq.n	800b36e <_svfiprintf_r+0x1d6>
 800b2fc:	4b22      	ldr	r3, [pc, #136]	; (800b388 <_svfiprintf_r+0x1f0>)
 800b2fe:	bb1b      	cbnz	r3, 800b348 <_svfiprintf_r+0x1b0>
 800b300:	9b03      	ldr	r3, [sp, #12]
 800b302:	3307      	adds	r3, #7
 800b304:	f023 0307 	bic.w	r3, r3, #7
 800b308:	3308      	adds	r3, #8
 800b30a:	9303      	str	r3, [sp, #12]
 800b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30e:	4433      	add	r3, r6
 800b310:	9309      	str	r3, [sp, #36]	; 0x24
 800b312:	e768      	b.n	800b1e6 <_svfiprintf_r+0x4e>
 800b314:	fb0c 3202 	mla	r2, ip, r2, r3
 800b318:	460c      	mov	r4, r1
 800b31a:	2001      	movs	r0, #1
 800b31c:	e7a6      	b.n	800b26c <_svfiprintf_r+0xd4>
 800b31e:	2300      	movs	r3, #0
 800b320:	3401      	adds	r4, #1
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	4619      	mov	r1, r3
 800b326:	f04f 0c0a 	mov.w	ip, #10
 800b32a:	4620      	mov	r0, r4
 800b32c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b330:	3a30      	subs	r2, #48	; 0x30
 800b332:	2a09      	cmp	r2, #9
 800b334:	d903      	bls.n	800b33e <_svfiprintf_r+0x1a6>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0c6      	beq.n	800b2c8 <_svfiprintf_r+0x130>
 800b33a:	9105      	str	r1, [sp, #20]
 800b33c:	e7c4      	b.n	800b2c8 <_svfiprintf_r+0x130>
 800b33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b342:	4604      	mov	r4, r0
 800b344:	2301      	movs	r3, #1
 800b346:	e7f0      	b.n	800b32a <_svfiprintf_r+0x192>
 800b348:	ab03      	add	r3, sp, #12
 800b34a:	9300      	str	r3, [sp, #0]
 800b34c:	462a      	mov	r2, r5
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <_svfiprintf_r+0x1f4>)
 800b350:	a904      	add	r1, sp, #16
 800b352:	4638      	mov	r0, r7
 800b354:	f7fc fc42 	bl	8007bdc <_printf_float>
 800b358:	1c42      	adds	r2, r0, #1
 800b35a:	4606      	mov	r6, r0
 800b35c:	d1d6      	bne.n	800b30c <_svfiprintf_r+0x174>
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	065b      	lsls	r3, r3, #25
 800b362:	f53f af2d 	bmi.w	800b1c0 <_svfiprintf_r+0x28>
 800b366:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b368:	b01d      	add	sp, #116	; 0x74
 800b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36e:	ab03      	add	r3, sp, #12
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	462a      	mov	r2, r5
 800b374:	4b05      	ldr	r3, [pc, #20]	; (800b38c <_svfiprintf_r+0x1f4>)
 800b376:	a904      	add	r1, sp, #16
 800b378:	4638      	mov	r0, r7
 800b37a:	f7fc fed3 	bl	8008124 <_printf_i>
 800b37e:	e7eb      	b.n	800b358 <_svfiprintf_r+0x1c0>
 800b380:	0800c7b1 	.word	0x0800c7b1
 800b384:	0800c7bb 	.word	0x0800c7bb
 800b388:	08007bdd 	.word	0x08007bdd
 800b38c:	0800b0e5 	.word	0x0800b0e5
 800b390:	0800c7b7 	.word	0x0800c7b7

0800b394 <__sflush_r>:
 800b394:	898a      	ldrh	r2, [r1, #12]
 800b396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39a:	4605      	mov	r5, r0
 800b39c:	0710      	lsls	r0, r2, #28
 800b39e:	460c      	mov	r4, r1
 800b3a0:	d458      	bmi.n	800b454 <__sflush_r+0xc0>
 800b3a2:	684b      	ldr	r3, [r1, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dc05      	bgt.n	800b3b4 <__sflush_r+0x20>
 800b3a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	dc02      	bgt.n	800b3b4 <__sflush_r+0x20>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3b6:	2e00      	cmp	r6, #0
 800b3b8:	d0f9      	beq.n	800b3ae <__sflush_r+0x1a>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3c0:	682f      	ldr	r7, [r5, #0]
 800b3c2:	6a21      	ldr	r1, [r4, #32]
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	d032      	beq.n	800b42e <__sflush_r+0x9a>
 800b3c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	075a      	lsls	r2, r3, #29
 800b3ce:	d505      	bpl.n	800b3dc <__sflush_r+0x48>
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	1ac0      	subs	r0, r0, r3
 800b3d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3d6:	b10b      	cbz	r3, 800b3dc <__sflush_r+0x48>
 800b3d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3da:	1ac0      	subs	r0, r0, r3
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4602      	mov	r2, r0
 800b3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3e2:	6a21      	ldr	r1, [r4, #32]
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	47b0      	blx	r6
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	d106      	bne.n	800b3fc <__sflush_r+0x68>
 800b3ee:	6829      	ldr	r1, [r5, #0]
 800b3f0:	291d      	cmp	r1, #29
 800b3f2:	d82b      	bhi.n	800b44c <__sflush_r+0xb8>
 800b3f4:	4a29      	ldr	r2, [pc, #164]	; (800b49c <__sflush_r+0x108>)
 800b3f6:	410a      	asrs	r2, r1
 800b3f8:	07d6      	lsls	r6, r2, #31
 800b3fa:	d427      	bmi.n	800b44c <__sflush_r+0xb8>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	6062      	str	r2, [r4, #4]
 800b400:	04d9      	lsls	r1, r3, #19
 800b402:	6922      	ldr	r2, [r4, #16]
 800b404:	6022      	str	r2, [r4, #0]
 800b406:	d504      	bpl.n	800b412 <__sflush_r+0x7e>
 800b408:	1c42      	adds	r2, r0, #1
 800b40a:	d101      	bne.n	800b410 <__sflush_r+0x7c>
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	b903      	cbnz	r3, 800b412 <__sflush_r+0x7e>
 800b410:	6560      	str	r0, [r4, #84]	; 0x54
 800b412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b414:	602f      	str	r7, [r5, #0]
 800b416:	2900      	cmp	r1, #0
 800b418:	d0c9      	beq.n	800b3ae <__sflush_r+0x1a>
 800b41a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b41e:	4299      	cmp	r1, r3
 800b420:	d002      	beq.n	800b428 <__sflush_r+0x94>
 800b422:	4628      	mov	r0, r5
 800b424:	f7fe fa1a 	bl	800985c <_free_r>
 800b428:	2000      	movs	r0, #0
 800b42a:	6360      	str	r0, [r4, #52]	; 0x34
 800b42c:	e7c0      	b.n	800b3b0 <__sflush_r+0x1c>
 800b42e:	2301      	movs	r3, #1
 800b430:	4628      	mov	r0, r5
 800b432:	47b0      	blx	r6
 800b434:	1c41      	adds	r1, r0, #1
 800b436:	d1c8      	bne.n	800b3ca <__sflush_r+0x36>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0c5      	beq.n	800b3ca <__sflush_r+0x36>
 800b43e:	2b1d      	cmp	r3, #29
 800b440:	d001      	beq.n	800b446 <__sflush_r+0xb2>
 800b442:	2b16      	cmp	r3, #22
 800b444:	d101      	bne.n	800b44a <__sflush_r+0xb6>
 800b446:	602f      	str	r7, [r5, #0]
 800b448:	e7b1      	b.n	800b3ae <__sflush_r+0x1a>
 800b44a:	89a3      	ldrh	r3, [r4, #12]
 800b44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	e7ad      	b.n	800b3b0 <__sflush_r+0x1c>
 800b454:	690f      	ldr	r7, [r1, #16]
 800b456:	2f00      	cmp	r7, #0
 800b458:	d0a9      	beq.n	800b3ae <__sflush_r+0x1a>
 800b45a:	0793      	lsls	r3, r2, #30
 800b45c:	680e      	ldr	r6, [r1, #0]
 800b45e:	bf08      	it	eq
 800b460:	694b      	ldreq	r3, [r1, #20]
 800b462:	600f      	str	r7, [r1, #0]
 800b464:	bf18      	it	ne
 800b466:	2300      	movne	r3, #0
 800b468:	eba6 0807 	sub.w	r8, r6, r7
 800b46c:	608b      	str	r3, [r1, #8]
 800b46e:	f1b8 0f00 	cmp.w	r8, #0
 800b472:	dd9c      	ble.n	800b3ae <__sflush_r+0x1a>
 800b474:	6a21      	ldr	r1, [r4, #32]
 800b476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b478:	4643      	mov	r3, r8
 800b47a:	463a      	mov	r2, r7
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b0      	blx	r6
 800b480:	2800      	cmp	r0, #0
 800b482:	dc06      	bgt.n	800b492 <__sflush_r+0xfe>
 800b484:	89a3      	ldrh	r3, [r4, #12]
 800b486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	f04f 30ff 	mov.w	r0, #4294967295
 800b490:	e78e      	b.n	800b3b0 <__sflush_r+0x1c>
 800b492:	4407      	add	r7, r0
 800b494:	eba8 0800 	sub.w	r8, r8, r0
 800b498:	e7e9      	b.n	800b46e <__sflush_r+0xda>
 800b49a:	bf00      	nop
 800b49c:	dfbffffe 	.word	0xdfbffffe

0800b4a0 <_fflush_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	690b      	ldr	r3, [r1, #16]
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	b913      	cbnz	r3, 800b4b0 <_fflush_r+0x10>
 800b4aa:	2500      	movs	r5, #0
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	b118      	cbz	r0, 800b4ba <_fflush_r+0x1a>
 800b4b2:	6a03      	ldr	r3, [r0, #32]
 800b4b4:	b90b      	cbnz	r3, 800b4ba <_fflush_r+0x1a>
 800b4b6:	f7fd f9f3 	bl	80088a0 <__sinit>
 800b4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d0f3      	beq.n	800b4aa <_fflush_r+0xa>
 800b4c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4c4:	07d0      	lsls	r0, r2, #31
 800b4c6:	d404      	bmi.n	800b4d2 <_fflush_r+0x32>
 800b4c8:	0599      	lsls	r1, r3, #22
 800b4ca:	d402      	bmi.n	800b4d2 <_fflush_r+0x32>
 800b4cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ce:	f7fd fb32 	bl	8008b36 <__retarget_lock_acquire_recursive>
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	f7ff ff5d 	bl	800b394 <__sflush_r>
 800b4da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4dc:	07da      	lsls	r2, r3, #31
 800b4de:	4605      	mov	r5, r0
 800b4e0:	d4e4      	bmi.n	800b4ac <_fflush_r+0xc>
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	059b      	lsls	r3, r3, #22
 800b4e6:	d4e1      	bmi.n	800b4ac <_fflush_r+0xc>
 800b4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ea:	f7fd fb25 	bl	8008b38 <__retarget_lock_release_recursive>
 800b4ee:	e7dd      	b.n	800b4ac <_fflush_r+0xc>

0800b4f0 <memmove>:
 800b4f0:	4288      	cmp	r0, r1
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	eb01 0402 	add.w	r4, r1, r2
 800b4f8:	d902      	bls.n	800b500 <memmove+0x10>
 800b4fa:	4284      	cmp	r4, r0
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	d807      	bhi.n	800b510 <memmove+0x20>
 800b500:	1e43      	subs	r3, r0, #1
 800b502:	42a1      	cmp	r1, r4
 800b504:	d008      	beq.n	800b518 <memmove+0x28>
 800b506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b50a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b50e:	e7f8      	b.n	800b502 <memmove+0x12>
 800b510:	4402      	add	r2, r0
 800b512:	4601      	mov	r1, r0
 800b514:	428a      	cmp	r2, r1
 800b516:	d100      	bne.n	800b51a <memmove+0x2a>
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b51e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b522:	e7f7      	b.n	800b514 <memmove+0x24>

0800b524 <strncmp>:
 800b524:	b510      	push	{r4, lr}
 800b526:	b16a      	cbz	r2, 800b544 <strncmp+0x20>
 800b528:	3901      	subs	r1, #1
 800b52a:	1884      	adds	r4, r0, r2
 800b52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b530:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b534:	429a      	cmp	r2, r3
 800b536:	d103      	bne.n	800b540 <strncmp+0x1c>
 800b538:	42a0      	cmp	r0, r4
 800b53a:	d001      	beq.n	800b540 <strncmp+0x1c>
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	d1f5      	bne.n	800b52c <strncmp+0x8>
 800b540:	1ad0      	subs	r0, r2, r3
 800b542:	bd10      	pop	{r4, pc}
 800b544:	4610      	mov	r0, r2
 800b546:	e7fc      	b.n	800b542 <strncmp+0x1e>

0800b548 <_sbrk_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4d06      	ldr	r5, [pc, #24]	; (800b564 <_sbrk_r+0x1c>)
 800b54c:	2300      	movs	r3, #0
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	f7f6 fd58 	bl	8002008 <_sbrk>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_sbrk_r+0x1a>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_sbrk_r+0x1a>
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	20004e50 	.word	0x20004e50

0800b568 <nan>:
 800b568:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b570 <nan+0x8>
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	00000000 	.word	0x00000000
 800b574:	7ff80000 	.word	0x7ff80000

0800b578 <__assert_func>:
 800b578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b57a:	4614      	mov	r4, r2
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <__assert_func+0x2c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4605      	mov	r5, r0
 800b584:	68d8      	ldr	r0, [r3, #12]
 800b586:	b14c      	cbz	r4, 800b59c <__assert_func+0x24>
 800b588:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <__assert_func+0x30>)
 800b58a:	9100      	str	r1, [sp, #0]
 800b58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b590:	4906      	ldr	r1, [pc, #24]	; (800b5ac <__assert_func+0x34>)
 800b592:	462b      	mov	r3, r5
 800b594:	f000 fbca 	bl	800bd2c <fiprintf>
 800b598:	f000 fbda 	bl	800bd50 <abort>
 800b59c:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <__assert_func+0x38>)
 800b59e:	461c      	mov	r4, r3
 800b5a0:	e7f3      	b.n	800b58a <__assert_func+0x12>
 800b5a2:	bf00      	nop
 800b5a4:	20000078 	.word	0x20000078
 800b5a8:	0800c7ca 	.word	0x0800c7ca
 800b5ac:	0800c7d7 	.word	0x0800c7d7
 800b5b0:	0800c805 	.word	0x0800c805

0800b5b4 <_calloc_r>:
 800b5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5b6:	fba1 2402 	umull	r2, r4, r1, r2
 800b5ba:	b94c      	cbnz	r4, 800b5d0 <_calloc_r+0x1c>
 800b5bc:	4611      	mov	r1, r2
 800b5be:	9201      	str	r2, [sp, #4]
 800b5c0:	f7fe f9c0 	bl	8009944 <_malloc_r>
 800b5c4:	9a01      	ldr	r2, [sp, #4]
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	b930      	cbnz	r0, 800b5d8 <_calloc_r+0x24>
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	b003      	add	sp, #12
 800b5ce:	bd30      	pop	{r4, r5, pc}
 800b5d0:	220c      	movs	r2, #12
 800b5d2:	6002      	str	r2, [r0, #0]
 800b5d4:	2500      	movs	r5, #0
 800b5d6:	e7f8      	b.n	800b5ca <_calloc_r+0x16>
 800b5d8:	4621      	mov	r1, r4
 800b5da:	f7fd fa2e 	bl	8008a3a <memset>
 800b5de:	e7f4      	b.n	800b5ca <_calloc_r+0x16>

0800b5e0 <rshift>:
 800b5e0:	6903      	ldr	r3, [r0, #16]
 800b5e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5ee:	f100 0414 	add.w	r4, r0, #20
 800b5f2:	dd45      	ble.n	800b680 <rshift+0xa0>
 800b5f4:	f011 011f 	ands.w	r1, r1, #31
 800b5f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b5fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b600:	d10c      	bne.n	800b61c <rshift+0x3c>
 800b602:	f100 0710 	add.w	r7, r0, #16
 800b606:	4629      	mov	r1, r5
 800b608:	42b1      	cmp	r1, r6
 800b60a:	d334      	bcc.n	800b676 <rshift+0x96>
 800b60c:	1a9b      	subs	r3, r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	1eea      	subs	r2, r5, #3
 800b612:	4296      	cmp	r6, r2
 800b614:	bf38      	it	cc
 800b616:	2300      	movcc	r3, #0
 800b618:	4423      	add	r3, r4
 800b61a:	e015      	b.n	800b648 <rshift+0x68>
 800b61c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b620:	f1c1 0820 	rsb	r8, r1, #32
 800b624:	40cf      	lsrs	r7, r1
 800b626:	f105 0e04 	add.w	lr, r5, #4
 800b62a:	46a1      	mov	r9, r4
 800b62c:	4576      	cmp	r6, lr
 800b62e:	46f4      	mov	ip, lr
 800b630:	d815      	bhi.n	800b65e <rshift+0x7e>
 800b632:	1a9a      	subs	r2, r3, r2
 800b634:	0092      	lsls	r2, r2, #2
 800b636:	3a04      	subs	r2, #4
 800b638:	3501      	adds	r5, #1
 800b63a:	42ae      	cmp	r6, r5
 800b63c:	bf38      	it	cc
 800b63e:	2200      	movcc	r2, #0
 800b640:	18a3      	adds	r3, r4, r2
 800b642:	50a7      	str	r7, [r4, r2]
 800b644:	b107      	cbz	r7, 800b648 <rshift+0x68>
 800b646:	3304      	adds	r3, #4
 800b648:	1b1a      	subs	r2, r3, r4
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b650:	bf08      	it	eq
 800b652:	2300      	moveq	r3, #0
 800b654:	6102      	str	r2, [r0, #16]
 800b656:	bf08      	it	eq
 800b658:	6143      	streq	r3, [r0, #20]
 800b65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b65e:	f8dc c000 	ldr.w	ip, [ip]
 800b662:	fa0c fc08 	lsl.w	ip, ip, r8
 800b666:	ea4c 0707 	orr.w	r7, ip, r7
 800b66a:	f849 7b04 	str.w	r7, [r9], #4
 800b66e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b672:	40cf      	lsrs	r7, r1
 800b674:	e7da      	b.n	800b62c <rshift+0x4c>
 800b676:	f851 cb04 	ldr.w	ip, [r1], #4
 800b67a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b67e:	e7c3      	b.n	800b608 <rshift+0x28>
 800b680:	4623      	mov	r3, r4
 800b682:	e7e1      	b.n	800b648 <rshift+0x68>

0800b684 <__hexdig_fun>:
 800b684:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b688:	2b09      	cmp	r3, #9
 800b68a:	d802      	bhi.n	800b692 <__hexdig_fun+0xe>
 800b68c:	3820      	subs	r0, #32
 800b68e:	b2c0      	uxtb	r0, r0
 800b690:	4770      	bx	lr
 800b692:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b696:	2b05      	cmp	r3, #5
 800b698:	d801      	bhi.n	800b69e <__hexdig_fun+0x1a>
 800b69a:	3847      	subs	r0, #71	; 0x47
 800b69c:	e7f7      	b.n	800b68e <__hexdig_fun+0xa>
 800b69e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	d801      	bhi.n	800b6aa <__hexdig_fun+0x26>
 800b6a6:	3827      	subs	r0, #39	; 0x27
 800b6a8:	e7f1      	b.n	800b68e <__hexdig_fun+0xa>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <__gethex>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4617      	mov	r7, r2
 800b6b6:	680a      	ldr	r2, [r1, #0]
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	f102 0b02 	add.w	fp, r2, #2
 800b6be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6c6:	4681      	mov	r9, r0
 800b6c8:	468a      	mov	sl, r1
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	32fe      	adds	r2, #254	; 0xfe
 800b6ce:	eb02 030b 	add.w	r3, r2, fp
 800b6d2:	46d8      	mov	r8, fp
 800b6d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	2830      	cmp	r0, #48	; 0x30
 800b6dc:	d0f7      	beq.n	800b6ce <__gethex+0x1e>
 800b6de:	f7ff ffd1 	bl	800b684 <__hexdig_fun>
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d138      	bne.n	800b75a <__gethex+0xaa>
 800b6e8:	49a7      	ldr	r1, [pc, #668]	; (800b988 <__gethex+0x2d8>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	f7ff ff19 	bl	800b524 <strncmp>
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d169      	bne.n	800b7cc <__gethex+0x11c>
 800b6f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b6fc:	465d      	mov	r5, fp
 800b6fe:	f7ff ffc1 	bl	800b684 <__hexdig_fun>
 800b702:	2800      	cmp	r0, #0
 800b704:	d064      	beq.n	800b7d0 <__gethex+0x120>
 800b706:	465a      	mov	r2, fp
 800b708:	7810      	ldrb	r0, [r2, #0]
 800b70a:	2830      	cmp	r0, #48	; 0x30
 800b70c:	4690      	mov	r8, r2
 800b70e:	f102 0201 	add.w	r2, r2, #1
 800b712:	d0f9      	beq.n	800b708 <__gethex+0x58>
 800b714:	f7ff ffb6 	bl	800b684 <__hexdig_fun>
 800b718:	2301      	movs	r3, #1
 800b71a:	fab0 f480 	clz	r4, r0
 800b71e:	0964      	lsrs	r4, r4, #5
 800b720:	465e      	mov	r6, fp
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	4642      	mov	r2, r8
 800b726:	4615      	mov	r5, r2
 800b728:	3201      	adds	r2, #1
 800b72a:	7828      	ldrb	r0, [r5, #0]
 800b72c:	f7ff ffaa 	bl	800b684 <__hexdig_fun>
 800b730:	2800      	cmp	r0, #0
 800b732:	d1f8      	bne.n	800b726 <__gethex+0x76>
 800b734:	4994      	ldr	r1, [pc, #592]	; (800b988 <__gethex+0x2d8>)
 800b736:	2201      	movs	r2, #1
 800b738:	4628      	mov	r0, r5
 800b73a:	f7ff fef3 	bl	800b524 <strncmp>
 800b73e:	b978      	cbnz	r0, 800b760 <__gethex+0xb0>
 800b740:	b946      	cbnz	r6, 800b754 <__gethex+0xa4>
 800b742:	1c6e      	adds	r6, r5, #1
 800b744:	4632      	mov	r2, r6
 800b746:	4615      	mov	r5, r2
 800b748:	3201      	adds	r2, #1
 800b74a:	7828      	ldrb	r0, [r5, #0]
 800b74c:	f7ff ff9a 	bl	800b684 <__hexdig_fun>
 800b750:	2800      	cmp	r0, #0
 800b752:	d1f8      	bne.n	800b746 <__gethex+0x96>
 800b754:	1b73      	subs	r3, r6, r5
 800b756:	009e      	lsls	r6, r3, #2
 800b758:	e004      	b.n	800b764 <__gethex+0xb4>
 800b75a:	2400      	movs	r4, #0
 800b75c:	4626      	mov	r6, r4
 800b75e:	e7e1      	b.n	800b724 <__gethex+0x74>
 800b760:	2e00      	cmp	r6, #0
 800b762:	d1f7      	bne.n	800b754 <__gethex+0xa4>
 800b764:	782b      	ldrb	r3, [r5, #0]
 800b766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b76a:	2b50      	cmp	r3, #80	; 0x50
 800b76c:	d13d      	bne.n	800b7ea <__gethex+0x13a>
 800b76e:	786b      	ldrb	r3, [r5, #1]
 800b770:	2b2b      	cmp	r3, #43	; 0x2b
 800b772:	d02f      	beq.n	800b7d4 <__gethex+0x124>
 800b774:	2b2d      	cmp	r3, #45	; 0x2d
 800b776:	d031      	beq.n	800b7dc <__gethex+0x12c>
 800b778:	1c69      	adds	r1, r5, #1
 800b77a:	f04f 0b00 	mov.w	fp, #0
 800b77e:	7808      	ldrb	r0, [r1, #0]
 800b780:	f7ff ff80 	bl	800b684 <__hexdig_fun>
 800b784:	1e42      	subs	r2, r0, #1
 800b786:	b2d2      	uxtb	r2, r2
 800b788:	2a18      	cmp	r2, #24
 800b78a:	d82e      	bhi.n	800b7ea <__gethex+0x13a>
 800b78c:	f1a0 0210 	sub.w	r2, r0, #16
 800b790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b794:	f7ff ff76 	bl	800b684 <__hexdig_fun>
 800b798:	f100 3cff 	add.w	ip, r0, #4294967295
 800b79c:	fa5f fc8c 	uxtb.w	ip, ip
 800b7a0:	f1bc 0f18 	cmp.w	ip, #24
 800b7a4:	d91d      	bls.n	800b7e2 <__gethex+0x132>
 800b7a6:	f1bb 0f00 	cmp.w	fp, #0
 800b7aa:	d000      	beq.n	800b7ae <__gethex+0xfe>
 800b7ac:	4252      	negs	r2, r2
 800b7ae:	4416      	add	r6, r2
 800b7b0:	f8ca 1000 	str.w	r1, [sl]
 800b7b4:	b1dc      	cbz	r4, 800b7ee <__gethex+0x13e>
 800b7b6:	9b01      	ldr	r3, [sp, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	bf14      	ite	ne
 800b7bc:	f04f 0800 	movne.w	r8, #0
 800b7c0:	f04f 0806 	moveq.w	r8, #6
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	b005      	add	sp, #20
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7cc:	4645      	mov	r5, r8
 800b7ce:	4626      	mov	r6, r4
 800b7d0:	2401      	movs	r4, #1
 800b7d2:	e7c7      	b.n	800b764 <__gethex+0xb4>
 800b7d4:	f04f 0b00 	mov.w	fp, #0
 800b7d8:	1ca9      	adds	r1, r5, #2
 800b7da:	e7d0      	b.n	800b77e <__gethex+0xce>
 800b7dc:	f04f 0b01 	mov.w	fp, #1
 800b7e0:	e7fa      	b.n	800b7d8 <__gethex+0x128>
 800b7e2:	230a      	movs	r3, #10
 800b7e4:	fb03 0002 	mla	r0, r3, r2, r0
 800b7e8:	e7d0      	b.n	800b78c <__gethex+0xdc>
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	e7e0      	b.n	800b7b0 <__gethex+0x100>
 800b7ee:	eba5 0308 	sub.w	r3, r5, r8
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	2b07      	cmp	r3, #7
 800b7f8:	dc0a      	bgt.n	800b810 <__gethex+0x160>
 800b7fa:	4648      	mov	r0, r9
 800b7fc:	f7fe f92e 	bl	8009a5c <_Balloc>
 800b800:	4604      	mov	r4, r0
 800b802:	b940      	cbnz	r0, 800b816 <__gethex+0x166>
 800b804:	4b61      	ldr	r3, [pc, #388]	; (800b98c <__gethex+0x2dc>)
 800b806:	4602      	mov	r2, r0
 800b808:	21e4      	movs	r1, #228	; 0xe4
 800b80a:	4861      	ldr	r0, [pc, #388]	; (800b990 <__gethex+0x2e0>)
 800b80c:	f7ff feb4 	bl	800b578 <__assert_func>
 800b810:	3101      	adds	r1, #1
 800b812:	105b      	asrs	r3, r3, #1
 800b814:	e7ef      	b.n	800b7f6 <__gethex+0x146>
 800b816:	f100 0a14 	add.w	sl, r0, #20
 800b81a:	2300      	movs	r3, #0
 800b81c:	495a      	ldr	r1, [pc, #360]	; (800b988 <__gethex+0x2d8>)
 800b81e:	f8cd a004 	str.w	sl, [sp, #4]
 800b822:	469b      	mov	fp, r3
 800b824:	45a8      	cmp	r8, r5
 800b826:	d342      	bcc.n	800b8ae <__gethex+0x1fe>
 800b828:	9801      	ldr	r0, [sp, #4]
 800b82a:	f840 bb04 	str.w	fp, [r0], #4
 800b82e:	eba0 000a 	sub.w	r0, r0, sl
 800b832:	1080      	asrs	r0, r0, #2
 800b834:	6120      	str	r0, [r4, #16]
 800b836:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b83a:	4658      	mov	r0, fp
 800b83c:	f7fe fa00 	bl	8009c40 <__hi0bits>
 800b840:	683d      	ldr	r5, [r7, #0]
 800b842:	eba8 0000 	sub.w	r0, r8, r0
 800b846:	42a8      	cmp	r0, r5
 800b848:	dd59      	ble.n	800b8fe <__gethex+0x24e>
 800b84a:	eba0 0805 	sub.w	r8, r0, r5
 800b84e:	4641      	mov	r1, r8
 800b850:	4620      	mov	r0, r4
 800b852:	f7fe fd8f 	bl	800a374 <__any_on>
 800b856:	4683      	mov	fp, r0
 800b858:	b1b8      	cbz	r0, 800b88a <__gethex+0x1da>
 800b85a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b85e:	1159      	asrs	r1, r3, #5
 800b860:	f003 021f 	and.w	r2, r3, #31
 800b864:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b868:	f04f 0b01 	mov.w	fp, #1
 800b86c:	fa0b f202 	lsl.w	r2, fp, r2
 800b870:	420a      	tst	r2, r1
 800b872:	d00a      	beq.n	800b88a <__gethex+0x1da>
 800b874:	455b      	cmp	r3, fp
 800b876:	dd06      	ble.n	800b886 <__gethex+0x1d6>
 800b878:	f1a8 0102 	sub.w	r1, r8, #2
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7fe fd79 	bl	800a374 <__any_on>
 800b882:	2800      	cmp	r0, #0
 800b884:	d138      	bne.n	800b8f8 <__gethex+0x248>
 800b886:	f04f 0b02 	mov.w	fp, #2
 800b88a:	4641      	mov	r1, r8
 800b88c:	4620      	mov	r0, r4
 800b88e:	f7ff fea7 	bl	800b5e0 <rshift>
 800b892:	4446      	add	r6, r8
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	42b3      	cmp	r3, r6
 800b898:	da41      	bge.n	800b91e <__gethex+0x26e>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4648      	mov	r0, r9
 800b89e:	f7fe f91d 	bl	8009adc <_Bfree>
 800b8a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b8ac:	e78a      	b.n	800b7c4 <__gethex+0x114>
 800b8ae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b8b2:	2a2e      	cmp	r2, #46	; 0x2e
 800b8b4:	d014      	beq.n	800b8e0 <__gethex+0x230>
 800b8b6:	2b20      	cmp	r3, #32
 800b8b8:	d106      	bne.n	800b8c8 <__gethex+0x218>
 800b8ba:	9b01      	ldr	r3, [sp, #4]
 800b8bc:	f843 bb04 	str.w	fp, [r3], #4
 800b8c0:	f04f 0b00 	mov.w	fp, #0
 800b8c4:	9301      	str	r3, [sp, #4]
 800b8c6:	465b      	mov	r3, fp
 800b8c8:	7828      	ldrb	r0, [r5, #0]
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	f7ff feda 	bl	800b684 <__hexdig_fun>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	f000 000f 	and.w	r0, r0, #15
 800b8d6:	4098      	lsls	r0, r3
 800b8d8:	ea4b 0b00 	orr.w	fp, fp, r0
 800b8dc:	3304      	adds	r3, #4
 800b8de:	e7a1      	b.n	800b824 <__gethex+0x174>
 800b8e0:	45a8      	cmp	r8, r5
 800b8e2:	d8e8      	bhi.n	800b8b6 <__gethex+0x206>
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	9303      	str	r3, [sp, #12]
 800b8ea:	f7ff fe1b 	bl	800b524 <strncmp>
 800b8ee:	4926      	ldr	r1, [pc, #152]	; (800b988 <__gethex+0x2d8>)
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d1df      	bne.n	800b8b6 <__gethex+0x206>
 800b8f6:	e795      	b.n	800b824 <__gethex+0x174>
 800b8f8:	f04f 0b03 	mov.w	fp, #3
 800b8fc:	e7c5      	b.n	800b88a <__gethex+0x1da>
 800b8fe:	da0b      	bge.n	800b918 <__gethex+0x268>
 800b900:	eba5 0800 	sub.w	r8, r5, r0
 800b904:	4621      	mov	r1, r4
 800b906:	4642      	mov	r2, r8
 800b908:	4648      	mov	r0, r9
 800b90a:	f7fe fb01 	bl	8009f10 <__lshift>
 800b90e:	eba6 0608 	sub.w	r6, r6, r8
 800b912:	4604      	mov	r4, r0
 800b914:	f100 0a14 	add.w	sl, r0, #20
 800b918:	f04f 0b00 	mov.w	fp, #0
 800b91c:	e7ba      	b.n	800b894 <__gethex+0x1e4>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	42b3      	cmp	r3, r6
 800b922:	dd73      	ble.n	800ba0c <__gethex+0x35c>
 800b924:	1b9e      	subs	r6, r3, r6
 800b926:	42b5      	cmp	r5, r6
 800b928:	dc34      	bgt.n	800b994 <__gethex+0x2e4>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d023      	beq.n	800b978 <__gethex+0x2c8>
 800b930:	2b03      	cmp	r3, #3
 800b932:	d025      	beq.n	800b980 <__gethex+0x2d0>
 800b934:	2b01      	cmp	r3, #1
 800b936:	d115      	bne.n	800b964 <__gethex+0x2b4>
 800b938:	42b5      	cmp	r5, r6
 800b93a:	d113      	bne.n	800b964 <__gethex+0x2b4>
 800b93c:	2d01      	cmp	r5, #1
 800b93e:	d10b      	bne.n	800b958 <__gethex+0x2a8>
 800b940:	9a02      	ldr	r2, [sp, #8]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	2301      	movs	r3, #1
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	f8ca 3000 	str.w	r3, [sl]
 800b94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b950:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b954:	601c      	str	r4, [r3, #0]
 800b956:	e735      	b.n	800b7c4 <__gethex+0x114>
 800b958:	1e69      	subs	r1, r5, #1
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7fe fd0a 	bl	800a374 <__any_on>
 800b960:	2800      	cmp	r0, #0
 800b962:	d1ed      	bne.n	800b940 <__gethex+0x290>
 800b964:	4621      	mov	r1, r4
 800b966:	4648      	mov	r0, r9
 800b968:	f7fe f8b8 	bl	8009adc <_Bfree>
 800b96c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b96e:	2300      	movs	r3, #0
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b976:	e725      	b.n	800b7c4 <__gethex+0x114>
 800b978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1f2      	bne.n	800b964 <__gethex+0x2b4>
 800b97e:	e7df      	b.n	800b940 <__gethex+0x290>
 800b980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1dc      	bne.n	800b940 <__gethex+0x290>
 800b986:	e7ed      	b.n	800b964 <__gethex+0x2b4>
 800b988:	0800c65c 	.word	0x0800c65c
 800b98c:	0800c4f5 	.word	0x0800c4f5
 800b990:	0800c806 	.word	0x0800c806
 800b994:	f106 38ff 	add.w	r8, r6, #4294967295
 800b998:	f1bb 0f00 	cmp.w	fp, #0
 800b99c:	d133      	bne.n	800ba06 <__gethex+0x356>
 800b99e:	f1b8 0f00 	cmp.w	r8, #0
 800b9a2:	d004      	beq.n	800b9ae <__gethex+0x2fe>
 800b9a4:	4641      	mov	r1, r8
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7fe fce4 	bl	800a374 <__any_on>
 800b9ac:	4683      	mov	fp, r0
 800b9ae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9b8:	f008 081f 	and.w	r8, r8, #31
 800b9bc:	fa03 f308 	lsl.w	r3, r3, r8
 800b9c0:	4213      	tst	r3, r2
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	bf18      	it	ne
 800b9c8:	f04b 0b02 	orrne.w	fp, fp, #2
 800b9cc:	1bad      	subs	r5, r5, r6
 800b9ce:	f7ff fe07 	bl	800b5e0 <rshift>
 800b9d2:	687e      	ldr	r6, [r7, #4]
 800b9d4:	f04f 0802 	mov.w	r8, #2
 800b9d8:	f1bb 0f00 	cmp.w	fp, #0
 800b9dc:	d04a      	beq.n	800ba74 <__gethex+0x3c4>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d016      	beq.n	800ba12 <__gethex+0x362>
 800b9e4:	2b03      	cmp	r3, #3
 800b9e6:	d018      	beq.n	800ba1a <__gethex+0x36a>
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d109      	bne.n	800ba00 <__gethex+0x350>
 800b9ec:	f01b 0f02 	tst.w	fp, #2
 800b9f0:	d006      	beq.n	800ba00 <__gethex+0x350>
 800b9f2:	f8da 3000 	ldr.w	r3, [sl]
 800b9f6:	ea4b 0b03 	orr.w	fp, fp, r3
 800b9fa:	f01b 0f01 	tst.w	fp, #1
 800b9fe:	d10f      	bne.n	800ba20 <__gethex+0x370>
 800ba00:	f048 0810 	orr.w	r8, r8, #16
 800ba04:	e036      	b.n	800ba74 <__gethex+0x3c4>
 800ba06:	f04f 0b01 	mov.w	fp, #1
 800ba0a:	e7d0      	b.n	800b9ae <__gethex+0x2fe>
 800ba0c:	f04f 0801 	mov.w	r8, #1
 800ba10:	e7e2      	b.n	800b9d8 <__gethex+0x328>
 800ba12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba14:	f1c3 0301 	rsb	r3, r3, #1
 800ba18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0ef      	beq.n	800ba00 <__gethex+0x350>
 800ba20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba24:	f104 0214 	add.w	r2, r4, #20
 800ba28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ba32:	2300      	movs	r3, #0
 800ba34:	4694      	mov	ip, r2
 800ba36:	f852 1b04 	ldr.w	r1, [r2], #4
 800ba3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ba3e:	d01e      	beq.n	800ba7e <__gethex+0x3ce>
 800ba40:	3101      	adds	r1, #1
 800ba42:	f8cc 1000 	str.w	r1, [ip]
 800ba46:	f1b8 0f02 	cmp.w	r8, #2
 800ba4a:	f104 0214 	add.w	r2, r4, #20
 800ba4e:	d13d      	bne.n	800bacc <__gethex+0x41c>
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	d10b      	bne.n	800ba70 <__gethex+0x3c0>
 800ba58:	1169      	asrs	r1, r5, #5
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	f005 051f 	and.w	r5, r5, #31
 800ba60:	fa03 f505 	lsl.w	r5, r3, r5
 800ba64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba68:	421d      	tst	r5, r3
 800ba6a:	bf18      	it	ne
 800ba6c:	f04f 0801 	movne.w	r8, #1
 800ba70:	f048 0820 	orr.w	r8, r8, #32
 800ba74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba76:	601c      	str	r4, [r3, #0]
 800ba78:	9b02      	ldr	r3, [sp, #8]
 800ba7a:	601e      	str	r6, [r3, #0]
 800ba7c:	e6a2      	b.n	800b7c4 <__gethex+0x114>
 800ba7e:	4290      	cmp	r0, r2
 800ba80:	f842 3c04 	str.w	r3, [r2, #-4]
 800ba84:	d8d6      	bhi.n	800ba34 <__gethex+0x384>
 800ba86:	68a2      	ldr	r2, [r4, #8]
 800ba88:	4593      	cmp	fp, r2
 800ba8a:	db17      	blt.n	800babc <__gethex+0x40c>
 800ba8c:	6861      	ldr	r1, [r4, #4]
 800ba8e:	4648      	mov	r0, r9
 800ba90:	3101      	adds	r1, #1
 800ba92:	f7fd ffe3 	bl	8009a5c <_Balloc>
 800ba96:	4682      	mov	sl, r0
 800ba98:	b918      	cbnz	r0, 800baa2 <__gethex+0x3f2>
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <__gethex+0x458>)
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	2184      	movs	r1, #132	; 0x84
 800baa0:	e6b3      	b.n	800b80a <__gethex+0x15a>
 800baa2:	6922      	ldr	r2, [r4, #16]
 800baa4:	3202      	adds	r2, #2
 800baa6:	f104 010c 	add.w	r1, r4, #12
 800baaa:	0092      	lsls	r2, r2, #2
 800baac:	300c      	adds	r0, #12
 800baae:	f7fd f844 	bl	8008b3a <memcpy>
 800bab2:	4621      	mov	r1, r4
 800bab4:	4648      	mov	r0, r9
 800bab6:	f7fe f811 	bl	8009adc <_Bfree>
 800baba:	4654      	mov	r4, sl
 800babc:	6922      	ldr	r2, [r4, #16]
 800babe:	1c51      	adds	r1, r2, #1
 800bac0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bac4:	6121      	str	r1, [r4, #16]
 800bac6:	2101      	movs	r1, #1
 800bac8:	6151      	str	r1, [r2, #20]
 800baca:	e7bc      	b.n	800ba46 <__gethex+0x396>
 800bacc:	6921      	ldr	r1, [r4, #16]
 800bace:	4559      	cmp	r1, fp
 800bad0:	dd0b      	ble.n	800baea <__gethex+0x43a>
 800bad2:	2101      	movs	r1, #1
 800bad4:	4620      	mov	r0, r4
 800bad6:	f7ff fd83 	bl	800b5e0 <rshift>
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	3601      	adds	r6, #1
 800bade:	42b3      	cmp	r3, r6
 800bae0:	f6ff aedb 	blt.w	800b89a <__gethex+0x1ea>
 800bae4:	f04f 0801 	mov.w	r8, #1
 800bae8:	e7c2      	b.n	800ba70 <__gethex+0x3c0>
 800baea:	f015 051f 	ands.w	r5, r5, #31
 800baee:	d0f9      	beq.n	800bae4 <__gethex+0x434>
 800baf0:	9b01      	ldr	r3, [sp, #4]
 800baf2:	441a      	add	r2, r3
 800baf4:	f1c5 0520 	rsb	r5, r5, #32
 800baf8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bafc:	f7fe f8a0 	bl	8009c40 <__hi0bits>
 800bb00:	42a8      	cmp	r0, r5
 800bb02:	dbe6      	blt.n	800bad2 <__gethex+0x422>
 800bb04:	e7ee      	b.n	800bae4 <__gethex+0x434>
 800bb06:	bf00      	nop
 800bb08:	0800c4f5 	.word	0x0800c4f5

0800bb0c <L_shift>:
 800bb0c:	f1c2 0208 	rsb	r2, r2, #8
 800bb10:	0092      	lsls	r2, r2, #2
 800bb12:	b570      	push	{r4, r5, r6, lr}
 800bb14:	f1c2 0620 	rsb	r6, r2, #32
 800bb18:	6843      	ldr	r3, [r0, #4]
 800bb1a:	6804      	ldr	r4, [r0, #0]
 800bb1c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb20:	432c      	orrs	r4, r5
 800bb22:	40d3      	lsrs	r3, r2
 800bb24:	6004      	str	r4, [r0, #0]
 800bb26:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb2a:	4288      	cmp	r0, r1
 800bb2c:	d3f4      	bcc.n	800bb18 <L_shift+0xc>
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}

0800bb30 <__match>:
 800bb30:	b530      	push	{r4, r5, lr}
 800bb32:	6803      	ldr	r3, [r0, #0]
 800bb34:	3301      	adds	r3, #1
 800bb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb3a:	b914      	cbnz	r4, 800bb42 <__match+0x12>
 800bb3c:	6003      	str	r3, [r0, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	bd30      	pop	{r4, r5, pc}
 800bb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb4a:	2d19      	cmp	r5, #25
 800bb4c:	bf98      	it	ls
 800bb4e:	3220      	addls	r2, #32
 800bb50:	42a2      	cmp	r2, r4
 800bb52:	d0f0      	beq.n	800bb36 <__match+0x6>
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7f3      	b.n	800bb40 <__match+0x10>

0800bb58 <__hexnan>:
 800bb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5c:	680b      	ldr	r3, [r1, #0]
 800bb5e:	6801      	ldr	r1, [r0, #0]
 800bb60:	115e      	asrs	r6, r3, #5
 800bb62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb66:	f013 031f 	ands.w	r3, r3, #31
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	bf18      	it	ne
 800bb6e:	3604      	addne	r6, #4
 800bb70:	2500      	movs	r5, #0
 800bb72:	1f37      	subs	r7, r6, #4
 800bb74:	4682      	mov	sl, r0
 800bb76:	4690      	mov	r8, r2
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bb7e:	46b9      	mov	r9, r7
 800bb80:	463c      	mov	r4, r7
 800bb82:	9502      	str	r5, [sp, #8]
 800bb84:	46ab      	mov	fp, r5
 800bb86:	784a      	ldrb	r2, [r1, #1]
 800bb88:	1c4b      	adds	r3, r1, #1
 800bb8a:	9303      	str	r3, [sp, #12]
 800bb8c:	b342      	cbz	r2, 800bbe0 <__hexnan+0x88>
 800bb8e:	4610      	mov	r0, r2
 800bb90:	9105      	str	r1, [sp, #20]
 800bb92:	9204      	str	r2, [sp, #16]
 800bb94:	f7ff fd76 	bl	800b684 <__hexdig_fun>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d14f      	bne.n	800bc3c <__hexnan+0xe4>
 800bb9c:	9a04      	ldr	r2, [sp, #16]
 800bb9e:	9905      	ldr	r1, [sp, #20]
 800bba0:	2a20      	cmp	r2, #32
 800bba2:	d818      	bhi.n	800bbd6 <__hexnan+0x7e>
 800bba4:	9b02      	ldr	r3, [sp, #8]
 800bba6:	459b      	cmp	fp, r3
 800bba8:	dd13      	ble.n	800bbd2 <__hexnan+0x7a>
 800bbaa:	454c      	cmp	r4, r9
 800bbac:	d206      	bcs.n	800bbbc <__hexnan+0x64>
 800bbae:	2d07      	cmp	r5, #7
 800bbb0:	dc04      	bgt.n	800bbbc <__hexnan+0x64>
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4649      	mov	r1, r9
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f7ff ffa8 	bl	800bb0c <L_shift>
 800bbbc:	4544      	cmp	r4, r8
 800bbbe:	d950      	bls.n	800bc62 <__hexnan+0x10a>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f1a4 0904 	sub.w	r9, r4, #4
 800bbc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbca:	f8cd b008 	str.w	fp, [sp, #8]
 800bbce:	464c      	mov	r4, r9
 800bbd0:	461d      	mov	r5, r3
 800bbd2:	9903      	ldr	r1, [sp, #12]
 800bbd4:	e7d7      	b.n	800bb86 <__hexnan+0x2e>
 800bbd6:	2a29      	cmp	r2, #41	; 0x29
 800bbd8:	d155      	bne.n	800bc86 <__hexnan+0x12e>
 800bbda:	3102      	adds	r1, #2
 800bbdc:	f8ca 1000 	str.w	r1, [sl]
 800bbe0:	f1bb 0f00 	cmp.w	fp, #0
 800bbe4:	d04f      	beq.n	800bc86 <__hexnan+0x12e>
 800bbe6:	454c      	cmp	r4, r9
 800bbe8:	d206      	bcs.n	800bbf8 <__hexnan+0xa0>
 800bbea:	2d07      	cmp	r5, #7
 800bbec:	dc04      	bgt.n	800bbf8 <__hexnan+0xa0>
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff ff8a 	bl	800bb0c <L_shift>
 800bbf8:	4544      	cmp	r4, r8
 800bbfa:	d934      	bls.n	800bc66 <__hexnan+0x10e>
 800bbfc:	f1a8 0204 	sub.w	r2, r8, #4
 800bc00:	4623      	mov	r3, r4
 800bc02:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc06:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc0a:	429f      	cmp	r7, r3
 800bc0c:	d2f9      	bcs.n	800bc02 <__hexnan+0xaa>
 800bc0e:	1b3b      	subs	r3, r7, r4
 800bc10:	f023 0303 	bic.w	r3, r3, #3
 800bc14:	3304      	adds	r3, #4
 800bc16:	3e03      	subs	r6, #3
 800bc18:	3401      	adds	r4, #1
 800bc1a:	42a6      	cmp	r6, r4
 800bc1c:	bf38      	it	cc
 800bc1e:	2304      	movcc	r3, #4
 800bc20:	4443      	add	r3, r8
 800bc22:	2200      	movs	r2, #0
 800bc24:	f843 2b04 	str.w	r2, [r3], #4
 800bc28:	429f      	cmp	r7, r3
 800bc2a:	d2fb      	bcs.n	800bc24 <__hexnan+0xcc>
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	b91b      	cbnz	r3, 800bc38 <__hexnan+0xe0>
 800bc30:	4547      	cmp	r7, r8
 800bc32:	d126      	bne.n	800bc82 <__hexnan+0x12a>
 800bc34:	2301      	movs	r3, #1
 800bc36:	603b      	str	r3, [r7, #0]
 800bc38:	2005      	movs	r0, #5
 800bc3a:	e025      	b.n	800bc88 <__hexnan+0x130>
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	2d08      	cmp	r5, #8
 800bc40:	f10b 0b01 	add.w	fp, fp, #1
 800bc44:	dd06      	ble.n	800bc54 <__hexnan+0xfc>
 800bc46:	4544      	cmp	r4, r8
 800bc48:	d9c3      	bls.n	800bbd2 <__hexnan+0x7a>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc50:	2501      	movs	r5, #1
 800bc52:	3c04      	subs	r4, #4
 800bc54:	6822      	ldr	r2, [r4, #0]
 800bc56:	f000 000f 	and.w	r0, r0, #15
 800bc5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc5e:	6020      	str	r0, [r4, #0]
 800bc60:	e7b7      	b.n	800bbd2 <__hexnan+0x7a>
 800bc62:	2508      	movs	r5, #8
 800bc64:	e7b5      	b.n	800bbd2 <__hexnan+0x7a>
 800bc66:	9b01      	ldr	r3, [sp, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0df      	beq.n	800bc2c <__hexnan+0xd4>
 800bc6c:	f1c3 0320 	rsb	r3, r3, #32
 800bc70:	f04f 32ff 	mov.w	r2, #4294967295
 800bc74:	40da      	lsrs	r2, r3
 800bc76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	f846 3c04 	str.w	r3, [r6, #-4]
 800bc80:	e7d4      	b.n	800bc2c <__hexnan+0xd4>
 800bc82:	3f04      	subs	r7, #4
 800bc84:	e7d2      	b.n	800bc2c <__hexnan+0xd4>
 800bc86:	2004      	movs	r0, #4
 800bc88:	b007      	add	sp, #28
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc8e <__ascii_mbtowc>:
 800bc8e:	b082      	sub	sp, #8
 800bc90:	b901      	cbnz	r1, 800bc94 <__ascii_mbtowc+0x6>
 800bc92:	a901      	add	r1, sp, #4
 800bc94:	b142      	cbz	r2, 800bca8 <__ascii_mbtowc+0x1a>
 800bc96:	b14b      	cbz	r3, 800bcac <__ascii_mbtowc+0x1e>
 800bc98:	7813      	ldrb	r3, [r2, #0]
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	7812      	ldrb	r2, [r2, #0]
 800bc9e:	1e10      	subs	r0, r2, #0
 800bca0:	bf18      	it	ne
 800bca2:	2001      	movne	r0, #1
 800bca4:	b002      	add	sp, #8
 800bca6:	4770      	bx	lr
 800bca8:	4610      	mov	r0, r2
 800bcaa:	e7fb      	b.n	800bca4 <__ascii_mbtowc+0x16>
 800bcac:	f06f 0001 	mvn.w	r0, #1
 800bcb0:	e7f8      	b.n	800bca4 <__ascii_mbtowc+0x16>

0800bcb2 <_realloc_r>:
 800bcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	4614      	mov	r4, r2
 800bcba:	460e      	mov	r6, r1
 800bcbc:	b921      	cbnz	r1, 800bcc8 <_realloc_r+0x16>
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	f7fd be3e 	b.w	8009944 <_malloc_r>
 800bcc8:	b92a      	cbnz	r2, 800bcd6 <_realloc_r+0x24>
 800bcca:	f7fd fdc7 	bl	800985c <_free_r>
 800bcce:	4625      	mov	r5, r4
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd6:	f000 f842 	bl	800bd5e <_malloc_usable_size_r>
 800bcda:	4284      	cmp	r4, r0
 800bcdc:	4607      	mov	r7, r0
 800bcde:	d802      	bhi.n	800bce6 <_realloc_r+0x34>
 800bce0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bce4:	d812      	bhi.n	800bd0c <_realloc_r+0x5a>
 800bce6:	4621      	mov	r1, r4
 800bce8:	4640      	mov	r0, r8
 800bcea:	f7fd fe2b 	bl	8009944 <_malloc_r>
 800bcee:	4605      	mov	r5, r0
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d0ed      	beq.n	800bcd0 <_realloc_r+0x1e>
 800bcf4:	42bc      	cmp	r4, r7
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	bf28      	it	cs
 800bcfc:	463a      	movcs	r2, r7
 800bcfe:	f7fc ff1c 	bl	8008b3a <memcpy>
 800bd02:	4631      	mov	r1, r6
 800bd04:	4640      	mov	r0, r8
 800bd06:	f7fd fda9 	bl	800985c <_free_r>
 800bd0a:	e7e1      	b.n	800bcd0 <_realloc_r+0x1e>
 800bd0c:	4635      	mov	r5, r6
 800bd0e:	e7df      	b.n	800bcd0 <_realloc_r+0x1e>

0800bd10 <__ascii_wctomb>:
 800bd10:	b149      	cbz	r1, 800bd26 <__ascii_wctomb+0x16>
 800bd12:	2aff      	cmp	r2, #255	; 0xff
 800bd14:	bf85      	ittet	hi
 800bd16:	238a      	movhi	r3, #138	; 0x8a
 800bd18:	6003      	strhi	r3, [r0, #0]
 800bd1a:	700a      	strbls	r2, [r1, #0]
 800bd1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd20:	bf98      	it	ls
 800bd22:	2001      	movls	r0, #1
 800bd24:	4770      	bx	lr
 800bd26:	4608      	mov	r0, r1
 800bd28:	4770      	bx	lr
	...

0800bd2c <fiprintf>:
 800bd2c:	b40e      	push	{r1, r2, r3}
 800bd2e:	b503      	push	{r0, r1, lr}
 800bd30:	4601      	mov	r1, r0
 800bd32:	ab03      	add	r3, sp, #12
 800bd34:	4805      	ldr	r0, [pc, #20]	; (800bd4c <fiprintf+0x20>)
 800bd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd3a:	6800      	ldr	r0, [r0, #0]
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	f000 f83f 	bl	800bdc0 <_vfiprintf_r>
 800bd42:	b002      	add	sp, #8
 800bd44:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd48:	b003      	add	sp, #12
 800bd4a:	4770      	bx	lr
 800bd4c:	20000078 	.word	0x20000078

0800bd50 <abort>:
 800bd50:	b508      	push	{r3, lr}
 800bd52:	2006      	movs	r0, #6
 800bd54:	f000 fa0c 	bl	800c170 <raise>
 800bd58:	2001      	movs	r0, #1
 800bd5a:	f7f6 f8dd 	bl	8001f18 <_exit>

0800bd5e <_malloc_usable_size_r>:
 800bd5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd62:	1f18      	subs	r0, r3, #4
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	bfbc      	itt	lt
 800bd68:	580b      	ldrlt	r3, [r1, r0]
 800bd6a:	18c0      	addlt	r0, r0, r3
 800bd6c:	4770      	bx	lr

0800bd6e <__sfputc_r>:
 800bd6e:	6893      	ldr	r3, [r2, #8]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	b410      	push	{r4}
 800bd76:	6093      	str	r3, [r2, #8]
 800bd78:	da08      	bge.n	800bd8c <__sfputc_r+0x1e>
 800bd7a:	6994      	ldr	r4, [r2, #24]
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	db01      	blt.n	800bd84 <__sfputc_r+0x16>
 800bd80:	290a      	cmp	r1, #10
 800bd82:	d103      	bne.n	800bd8c <__sfputc_r+0x1e>
 800bd84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd88:	f000 b934 	b.w	800bff4 <__swbuf_r>
 800bd8c:	6813      	ldr	r3, [r2, #0]
 800bd8e:	1c58      	adds	r0, r3, #1
 800bd90:	6010      	str	r0, [r2, #0]
 800bd92:	7019      	strb	r1, [r3, #0]
 800bd94:	4608      	mov	r0, r1
 800bd96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <__sfputs_r>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	4606      	mov	r6, r0
 800bda0:	460f      	mov	r7, r1
 800bda2:	4614      	mov	r4, r2
 800bda4:	18d5      	adds	r5, r2, r3
 800bda6:	42ac      	cmp	r4, r5
 800bda8:	d101      	bne.n	800bdae <__sfputs_r+0x12>
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e007      	b.n	800bdbe <__sfputs_r+0x22>
 800bdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb2:	463a      	mov	r2, r7
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	f7ff ffda 	bl	800bd6e <__sfputc_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d1f3      	bne.n	800bda6 <__sfputs_r+0xa>
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdc0 <_vfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	b09d      	sub	sp, #116	; 0x74
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4698      	mov	r8, r3
 800bdcc:	4606      	mov	r6, r0
 800bdce:	b118      	cbz	r0, 800bdd8 <_vfiprintf_r+0x18>
 800bdd0:	6a03      	ldr	r3, [r0, #32]
 800bdd2:	b90b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x18>
 800bdd4:	f7fc fd64 	bl	80088a0 <__sinit>
 800bdd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdda:	07d9      	lsls	r1, r3, #31
 800bddc:	d405      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	059a      	lsls	r2, r3, #22
 800bde2:	d402      	bmi.n	800bdea <_vfiprintf_r+0x2a>
 800bde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bde6:	f7fc fea6 	bl	8008b36 <__retarget_lock_acquire_recursive>
 800bdea:	89ab      	ldrh	r3, [r5, #12]
 800bdec:	071b      	lsls	r3, r3, #28
 800bdee:	d501      	bpl.n	800bdf4 <_vfiprintf_r+0x34>
 800bdf0:	692b      	ldr	r3, [r5, #16]
 800bdf2:	b99b      	cbnz	r3, 800be1c <_vfiprintf_r+0x5c>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f000 f93a 	bl	800c070 <__swsetup_r>
 800bdfc:	b170      	cbz	r0, 800be1c <_vfiprintf_r+0x5c>
 800bdfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be00:	07dc      	lsls	r4, r3, #31
 800be02:	d504      	bpl.n	800be0e <_vfiprintf_r+0x4e>
 800be04:	f04f 30ff 	mov.w	r0, #4294967295
 800be08:	b01d      	add	sp, #116	; 0x74
 800be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	0598      	lsls	r0, r3, #22
 800be12:	d4f7      	bmi.n	800be04 <_vfiprintf_r+0x44>
 800be14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be16:	f7fc fe8f 	bl	8008b38 <__retarget_lock_release_recursive>
 800be1a:	e7f3      	b.n	800be04 <_vfiprintf_r+0x44>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9309      	str	r3, [sp, #36]	; 0x24
 800be20:	2320      	movs	r3, #32
 800be22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be26:	f8cd 800c 	str.w	r8, [sp, #12]
 800be2a:	2330      	movs	r3, #48	; 0x30
 800be2c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bfe0 <_vfiprintf_r+0x220>
 800be30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be34:	f04f 0901 	mov.w	r9, #1
 800be38:	4623      	mov	r3, r4
 800be3a:	469a      	mov	sl, r3
 800be3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be40:	b10a      	cbz	r2, 800be46 <_vfiprintf_r+0x86>
 800be42:	2a25      	cmp	r2, #37	; 0x25
 800be44:	d1f9      	bne.n	800be3a <_vfiprintf_r+0x7a>
 800be46:	ebba 0b04 	subs.w	fp, sl, r4
 800be4a:	d00b      	beq.n	800be64 <_vfiprintf_r+0xa4>
 800be4c:	465b      	mov	r3, fp
 800be4e:	4622      	mov	r2, r4
 800be50:	4629      	mov	r1, r5
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ffa2 	bl	800bd9c <__sfputs_r>
 800be58:	3001      	adds	r0, #1
 800be5a:	f000 80a9 	beq.w	800bfb0 <_vfiprintf_r+0x1f0>
 800be5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be60:	445a      	add	r2, fp
 800be62:	9209      	str	r2, [sp, #36]	; 0x24
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80a1 	beq.w	800bfb0 <_vfiprintf_r+0x1f0>
 800be6e:	2300      	movs	r3, #0
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be78:	f10a 0a01 	add.w	sl, sl, #1
 800be7c:	9304      	str	r3, [sp, #16]
 800be7e:	9307      	str	r3, [sp, #28]
 800be80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be84:	931a      	str	r3, [sp, #104]	; 0x68
 800be86:	4654      	mov	r4, sl
 800be88:	2205      	movs	r2, #5
 800be8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8e:	4854      	ldr	r0, [pc, #336]	; (800bfe0 <_vfiprintf_r+0x220>)
 800be90:	f7f4 f9a6 	bl	80001e0 <memchr>
 800be94:	9a04      	ldr	r2, [sp, #16]
 800be96:	b9d8      	cbnz	r0, 800bed0 <_vfiprintf_r+0x110>
 800be98:	06d1      	lsls	r1, r2, #27
 800be9a:	bf44      	itt	mi
 800be9c:	2320      	movmi	r3, #32
 800be9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bea2:	0713      	lsls	r3, r2, #28
 800bea4:	bf44      	itt	mi
 800bea6:	232b      	movmi	r3, #43	; 0x2b
 800bea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beac:	f89a 3000 	ldrb.w	r3, [sl]
 800beb0:	2b2a      	cmp	r3, #42	; 0x2a
 800beb2:	d015      	beq.n	800bee0 <_vfiprintf_r+0x120>
 800beb4:	9a07      	ldr	r2, [sp, #28]
 800beb6:	4654      	mov	r4, sl
 800beb8:	2000      	movs	r0, #0
 800beba:	f04f 0c0a 	mov.w	ip, #10
 800bebe:	4621      	mov	r1, r4
 800bec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bec4:	3b30      	subs	r3, #48	; 0x30
 800bec6:	2b09      	cmp	r3, #9
 800bec8:	d94d      	bls.n	800bf66 <_vfiprintf_r+0x1a6>
 800beca:	b1b0      	cbz	r0, 800befa <_vfiprintf_r+0x13a>
 800becc:	9207      	str	r2, [sp, #28]
 800bece:	e014      	b.n	800befa <_vfiprintf_r+0x13a>
 800bed0:	eba0 0308 	sub.w	r3, r0, r8
 800bed4:	fa09 f303 	lsl.w	r3, r9, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	9304      	str	r3, [sp, #16]
 800bedc:	46a2      	mov	sl, r4
 800bede:	e7d2      	b.n	800be86 <_vfiprintf_r+0xc6>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	1d19      	adds	r1, r3, #4
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	9103      	str	r1, [sp, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfbb      	ittet	lt
 800beec:	425b      	neglt	r3, r3
 800beee:	f042 0202 	orrlt.w	r2, r2, #2
 800bef2:	9307      	strge	r3, [sp, #28]
 800bef4:	9307      	strlt	r3, [sp, #28]
 800bef6:	bfb8      	it	lt
 800bef8:	9204      	strlt	r2, [sp, #16]
 800befa:	7823      	ldrb	r3, [r4, #0]
 800befc:	2b2e      	cmp	r3, #46	; 0x2e
 800befe:	d10c      	bne.n	800bf1a <_vfiprintf_r+0x15a>
 800bf00:	7863      	ldrb	r3, [r4, #1]
 800bf02:	2b2a      	cmp	r3, #42	; 0x2a
 800bf04:	d134      	bne.n	800bf70 <_vfiprintf_r+0x1b0>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	1d1a      	adds	r2, r3, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	9203      	str	r2, [sp, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	bfb8      	it	lt
 800bf12:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf16:	3402      	adds	r4, #2
 800bf18:	9305      	str	r3, [sp, #20]
 800bf1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bff0 <_vfiprintf_r+0x230>
 800bf1e:	7821      	ldrb	r1, [r4, #0]
 800bf20:	2203      	movs	r2, #3
 800bf22:	4650      	mov	r0, sl
 800bf24:	f7f4 f95c 	bl	80001e0 <memchr>
 800bf28:	b138      	cbz	r0, 800bf3a <_vfiprintf_r+0x17a>
 800bf2a:	9b04      	ldr	r3, [sp, #16]
 800bf2c:	eba0 000a 	sub.w	r0, r0, sl
 800bf30:	2240      	movs	r2, #64	; 0x40
 800bf32:	4082      	lsls	r2, r0
 800bf34:	4313      	orrs	r3, r2
 800bf36:	3401      	adds	r4, #1
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf3e:	4829      	ldr	r0, [pc, #164]	; (800bfe4 <_vfiprintf_r+0x224>)
 800bf40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf44:	2206      	movs	r2, #6
 800bf46:	f7f4 f94b 	bl	80001e0 <memchr>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d03f      	beq.n	800bfce <_vfiprintf_r+0x20e>
 800bf4e:	4b26      	ldr	r3, [pc, #152]	; (800bfe8 <_vfiprintf_r+0x228>)
 800bf50:	bb1b      	cbnz	r3, 800bf9a <_vfiprintf_r+0x1da>
 800bf52:	9b03      	ldr	r3, [sp, #12]
 800bf54:	3307      	adds	r3, #7
 800bf56:	f023 0307 	bic.w	r3, r3, #7
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	9303      	str	r3, [sp, #12]
 800bf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf60:	443b      	add	r3, r7
 800bf62:	9309      	str	r3, [sp, #36]	; 0x24
 800bf64:	e768      	b.n	800be38 <_vfiprintf_r+0x78>
 800bf66:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	e7a6      	b.n	800bebe <_vfiprintf_r+0xfe>
 800bf70:	2300      	movs	r3, #0
 800bf72:	3401      	adds	r4, #1
 800bf74:	9305      	str	r3, [sp, #20]
 800bf76:	4619      	mov	r1, r3
 800bf78:	f04f 0c0a 	mov.w	ip, #10
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf82:	3a30      	subs	r2, #48	; 0x30
 800bf84:	2a09      	cmp	r2, #9
 800bf86:	d903      	bls.n	800bf90 <_vfiprintf_r+0x1d0>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d0c6      	beq.n	800bf1a <_vfiprintf_r+0x15a>
 800bf8c:	9105      	str	r1, [sp, #20]
 800bf8e:	e7c4      	b.n	800bf1a <_vfiprintf_r+0x15a>
 800bf90:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf94:	4604      	mov	r4, r0
 800bf96:	2301      	movs	r3, #1
 800bf98:	e7f0      	b.n	800bf7c <_vfiprintf_r+0x1bc>
 800bf9a:	ab03      	add	r3, sp, #12
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	4b12      	ldr	r3, [pc, #72]	; (800bfec <_vfiprintf_r+0x22c>)
 800bfa2:	a904      	add	r1, sp, #16
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7fb fe19 	bl	8007bdc <_printf_float>
 800bfaa:	4607      	mov	r7, r0
 800bfac:	1c78      	adds	r0, r7, #1
 800bfae:	d1d6      	bne.n	800bf5e <_vfiprintf_r+0x19e>
 800bfb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfb2:	07d9      	lsls	r1, r3, #31
 800bfb4:	d405      	bmi.n	800bfc2 <_vfiprintf_r+0x202>
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	059a      	lsls	r2, r3, #22
 800bfba:	d402      	bmi.n	800bfc2 <_vfiprintf_r+0x202>
 800bfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfbe:	f7fc fdbb 	bl	8008b38 <__retarget_lock_release_recursive>
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	065b      	lsls	r3, r3, #25
 800bfc6:	f53f af1d 	bmi.w	800be04 <_vfiprintf_r+0x44>
 800bfca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfcc:	e71c      	b.n	800be08 <_vfiprintf_r+0x48>
 800bfce:	ab03      	add	r3, sp, #12
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	462a      	mov	r2, r5
 800bfd4:	4b05      	ldr	r3, [pc, #20]	; (800bfec <_vfiprintf_r+0x22c>)
 800bfd6:	a904      	add	r1, sp, #16
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7fc f8a3 	bl	8008124 <_printf_i>
 800bfde:	e7e4      	b.n	800bfaa <_vfiprintf_r+0x1ea>
 800bfe0:	0800c7b1 	.word	0x0800c7b1
 800bfe4:	0800c7bb 	.word	0x0800c7bb
 800bfe8:	08007bdd 	.word	0x08007bdd
 800bfec:	0800bd9d 	.word	0x0800bd9d
 800bff0:	0800c7b7 	.word	0x0800c7b7

0800bff4 <__swbuf_r>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	460e      	mov	r6, r1
 800bff8:	4614      	mov	r4, r2
 800bffa:	4605      	mov	r5, r0
 800bffc:	b118      	cbz	r0, 800c006 <__swbuf_r+0x12>
 800bffe:	6a03      	ldr	r3, [r0, #32]
 800c000:	b90b      	cbnz	r3, 800c006 <__swbuf_r+0x12>
 800c002:	f7fc fc4d 	bl	80088a0 <__sinit>
 800c006:	69a3      	ldr	r3, [r4, #24]
 800c008:	60a3      	str	r3, [r4, #8]
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	071a      	lsls	r2, r3, #28
 800c00e:	d525      	bpl.n	800c05c <__swbuf_r+0x68>
 800c010:	6923      	ldr	r3, [r4, #16]
 800c012:	b31b      	cbz	r3, 800c05c <__swbuf_r+0x68>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	6922      	ldr	r2, [r4, #16]
 800c018:	1a98      	subs	r0, r3, r2
 800c01a:	6963      	ldr	r3, [r4, #20]
 800c01c:	b2f6      	uxtb	r6, r6
 800c01e:	4283      	cmp	r3, r0
 800c020:	4637      	mov	r7, r6
 800c022:	dc04      	bgt.n	800c02e <__swbuf_r+0x3a>
 800c024:	4621      	mov	r1, r4
 800c026:	4628      	mov	r0, r5
 800c028:	f7ff fa3a 	bl	800b4a0 <_fflush_r>
 800c02c:	b9e0      	cbnz	r0, 800c068 <__swbuf_r+0x74>
 800c02e:	68a3      	ldr	r3, [r4, #8]
 800c030:	3b01      	subs	r3, #1
 800c032:	60a3      	str	r3, [r4, #8]
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	1c5a      	adds	r2, r3, #1
 800c038:	6022      	str	r2, [r4, #0]
 800c03a:	701e      	strb	r6, [r3, #0]
 800c03c:	6962      	ldr	r2, [r4, #20]
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	429a      	cmp	r2, r3
 800c042:	d004      	beq.n	800c04e <__swbuf_r+0x5a>
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	07db      	lsls	r3, r3, #31
 800c048:	d506      	bpl.n	800c058 <__swbuf_r+0x64>
 800c04a:	2e0a      	cmp	r6, #10
 800c04c:	d104      	bne.n	800c058 <__swbuf_r+0x64>
 800c04e:	4621      	mov	r1, r4
 800c050:	4628      	mov	r0, r5
 800c052:	f7ff fa25 	bl	800b4a0 <_fflush_r>
 800c056:	b938      	cbnz	r0, 800c068 <__swbuf_r+0x74>
 800c058:	4638      	mov	r0, r7
 800c05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c05c:	4621      	mov	r1, r4
 800c05e:	4628      	mov	r0, r5
 800c060:	f000 f806 	bl	800c070 <__swsetup_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	d0d5      	beq.n	800c014 <__swbuf_r+0x20>
 800c068:	f04f 37ff 	mov.w	r7, #4294967295
 800c06c:	e7f4      	b.n	800c058 <__swbuf_r+0x64>
	...

0800c070 <__swsetup_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4b2a      	ldr	r3, [pc, #168]	; (800c11c <__swsetup_r+0xac>)
 800c074:	4605      	mov	r5, r0
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	460c      	mov	r4, r1
 800c07a:	b118      	cbz	r0, 800c084 <__swsetup_r+0x14>
 800c07c:	6a03      	ldr	r3, [r0, #32]
 800c07e:	b90b      	cbnz	r3, 800c084 <__swsetup_r+0x14>
 800c080:	f7fc fc0e 	bl	80088a0 <__sinit>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c08a:	0718      	lsls	r0, r3, #28
 800c08c:	d422      	bmi.n	800c0d4 <__swsetup_r+0x64>
 800c08e:	06d9      	lsls	r1, r3, #27
 800c090:	d407      	bmi.n	800c0a2 <__swsetup_r+0x32>
 800c092:	2309      	movs	r3, #9
 800c094:	602b      	str	r3, [r5, #0]
 800c096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a0:	e034      	b.n	800c10c <__swsetup_r+0x9c>
 800c0a2:	0758      	lsls	r0, r3, #29
 800c0a4:	d512      	bpl.n	800c0cc <__swsetup_r+0x5c>
 800c0a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0a8:	b141      	cbz	r1, 800c0bc <__swsetup_r+0x4c>
 800c0aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	d002      	beq.n	800c0b8 <__swsetup_r+0x48>
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f7fd fbd2 	bl	800985c <_free_r>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	6363      	str	r3, [r4, #52]	; 0x34
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6063      	str	r3, [r4, #4]
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	f043 0308 	orr.w	r3, r3, #8
 800c0d2:	81a3      	strh	r3, [r4, #12]
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	b94b      	cbnz	r3, 800c0ec <__swsetup_r+0x7c>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0e2:	d003      	beq.n	800c0ec <__swsetup_r+0x7c>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 f884 	bl	800c1f4 <__smakebuf_r>
 800c0ec:	89a0      	ldrh	r0, [r4, #12]
 800c0ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0f2:	f010 0301 	ands.w	r3, r0, #1
 800c0f6:	d00a      	beq.n	800c10e <__swsetup_r+0x9e>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60a3      	str	r3, [r4, #8]
 800c0fc:	6963      	ldr	r3, [r4, #20]
 800c0fe:	425b      	negs	r3, r3
 800c100:	61a3      	str	r3, [r4, #24]
 800c102:	6923      	ldr	r3, [r4, #16]
 800c104:	b943      	cbnz	r3, 800c118 <__swsetup_r+0xa8>
 800c106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c10a:	d1c4      	bne.n	800c096 <__swsetup_r+0x26>
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
 800c10e:	0781      	lsls	r1, r0, #30
 800c110:	bf58      	it	pl
 800c112:	6963      	ldrpl	r3, [r4, #20]
 800c114:	60a3      	str	r3, [r4, #8]
 800c116:	e7f4      	b.n	800c102 <__swsetup_r+0x92>
 800c118:	2000      	movs	r0, #0
 800c11a:	e7f7      	b.n	800c10c <__swsetup_r+0x9c>
 800c11c:	20000078 	.word	0x20000078

0800c120 <_raise_r>:
 800c120:	291f      	cmp	r1, #31
 800c122:	b538      	push	{r3, r4, r5, lr}
 800c124:	4604      	mov	r4, r0
 800c126:	460d      	mov	r5, r1
 800c128:	d904      	bls.n	800c134 <_raise_r+0x14>
 800c12a:	2316      	movs	r3, #22
 800c12c:	6003      	str	r3, [r0, #0]
 800c12e:	f04f 30ff 	mov.w	r0, #4294967295
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c136:	b112      	cbz	r2, 800c13e <_raise_r+0x1e>
 800c138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c13c:	b94b      	cbnz	r3, 800c152 <_raise_r+0x32>
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 f830 	bl	800c1a4 <_getpid_r>
 800c144:	462a      	mov	r2, r5
 800c146:	4601      	mov	r1, r0
 800c148:	4620      	mov	r0, r4
 800c14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c14e:	f000 b817 	b.w	800c180 <_kill_r>
 800c152:	2b01      	cmp	r3, #1
 800c154:	d00a      	beq.n	800c16c <_raise_r+0x4c>
 800c156:	1c59      	adds	r1, r3, #1
 800c158:	d103      	bne.n	800c162 <_raise_r+0x42>
 800c15a:	2316      	movs	r3, #22
 800c15c:	6003      	str	r3, [r0, #0]
 800c15e:	2001      	movs	r0, #1
 800c160:	e7e7      	b.n	800c132 <_raise_r+0x12>
 800c162:	2400      	movs	r4, #0
 800c164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c168:	4628      	mov	r0, r5
 800c16a:	4798      	blx	r3
 800c16c:	2000      	movs	r0, #0
 800c16e:	e7e0      	b.n	800c132 <_raise_r+0x12>

0800c170 <raise>:
 800c170:	4b02      	ldr	r3, [pc, #8]	; (800c17c <raise+0xc>)
 800c172:	4601      	mov	r1, r0
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	f7ff bfd3 	b.w	800c120 <_raise_r>
 800c17a:	bf00      	nop
 800c17c:	20000078 	.word	0x20000078

0800c180 <_kill_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d07      	ldr	r5, [pc, #28]	; (800c1a0 <_kill_r+0x20>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	4611      	mov	r1, r2
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f7f5 feb3 	bl	8001ef8 <_kill>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	d102      	bne.n	800c19c <_kill_r+0x1c>
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	b103      	cbz	r3, 800c19c <_kill_r+0x1c>
 800c19a:	6023      	str	r3, [r4, #0]
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	bf00      	nop
 800c1a0:	20004e50 	.word	0x20004e50

0800c1a4 <_getpid_r>:
 800c1a4:	f7f5 bea0 	b.w	8001ee8 <_getpid>

0800c1a8 <__swhatbuf_r>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b0:	2900      	cmp	r1, #0
 800c1b2:	b096      	sub	sp, #88	; 0x58
 800c1b4:	4615      	mov	r5, r2
 800c1b6:	461e      	mov	r6, r3
 800c1b8:	da0d      	bge.n	800c1d6 <__swhatbuf_r+0x2e>
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c1c0:	f04f 0100 	mov.w	r1, #0
 800c1c4:	bf0c      	ite	eq
 800c1c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c1ca:	2340      	movne	r3, #64	; 0x40
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	6031      	str	r1, [r6, #0]
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	b016      	add	sp, #88	; 0x58
 800c1d4:	bd70      	pop	{r4, r5, r6, pc}
 800c1d6:	466a      	mov	r2, sp
 800c1d8:	f000 f848 	bl	800c26c <_fstat_r>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	dbec      	blt.n	800c1ba <__swhatbuf_r+0x12>
 800c1e0:	9901      	ldr	r1, [sp, #4]
 800c1e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c1e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c1ea:	4259      	negs	r1, r3
 800c1ec:	4159      	adcs	r1, r3
 800c1ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1f2:	e7eb      	b.n	800c1cc <__swhatbuf_r+0x24>

0800c1f4 <__smakebuf_r>:
 800c1f4:	898b      	ldrh	r3, [r1, #12]
 800c1f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1f8:	079d      	lsls	r5, r3, #30
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	d507      	bpl.n	800c210 <__smakebuf_r+0x1c>
 800c200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	6123      	str	r3, [r4, #16]
 800c208:	2301      	movs	r3, #1
 800c20a:	6163      	str	r3, [r4, #20]
 800c20c:	b002      	add	sp, #8
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	ab01      	add	r3, sp, #4
 800c212:	466a      	mov	r2, sp
 800c214:	f7ff ffc8 	bl	800c1a8 <__swhatbuf_r>
 800c218:	9900      	ldr	r1, [sp, #0]
 800c21a:	4605      	mov	r5, r0
 800c21c:	4630      	mov	r0, r6
 800c21e:	f7fd fb91 	bl	8009944 <_malloc_r>
 800c222:	b948      	cbnz	r0, 800c238 <__smakebuf_r+0x44>
 800c224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c228:	059a      	lsls	r2, r3, #22
 800c22a:	d4ef      	bmi.n	800c20c <__smakebuf_r+0x18>
 800c22c:	f023 0303 	bic.w	r3, r3, #3
 800c230:	f043 0302 	orr.w	r3, r3, #2
 800c234:	81a3      	strh	r3, [r4, #12]
 800c236:	e7e3      	b.n	800c200 <__smakebuf_r+0xc>
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	6020      	str	r0, [r4, #0]
 800c23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	9b00      	ldr	r3, [sp, #0]
 800c244:	6163      	str	r3, [r4, #20]
 800c246:	9b01      	ldr	r3, [sp, #4]
 800c248:	6120      	str	r0, [r4, #16]
 800c24a:	b15b      	cbz	r3, 800c264 <__smakebuf_r+0x70>
 800c24c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c250:	4630      	mov	r0, r6
 800c252:	f000 f81d 	bl	800c290 <_isatty_r>
 800c256:	b128      	cbz	r0, 800c264 <__smakebuf_r+0x70>
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	f023 0303 	bic.w	r3, r3, #3
 800c25e:	f043 0301 	orr.w	r3, r3, #1
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	431d      	orrs	r5, r3
 800c268:	81a5      	strh	r5, [r4, #12]
 800c26a:	e7cf      	b.n	800c20c <__smakebuf_r+0x18>

0800c26c <_fstat_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4d07      	ldr	r5, [pc, #28]	; (800c28c <_fstat_r+0x20>)
 800c270:	2300      	movs	r3, #0
 800c272:	4604      	mov	r4, r0
 800c274:	4608      	mov	r0, r1
 800c276:	4611      	mov	r1, r2
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	f7f5 fe9c 	bl	8001fb6 <_fstat>
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	d102      	bne.n	800c288 <_fstat_r+0x1c>
 800c282:	682b      	ldr	r3, [r5, #0]
 800c284:	b103      	cbz	r3, 800c288 <_fstat_r+0x1c>
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	bd38      	pop	{r3, r4, r5, pc}
 800c28a:	bf00      	nop
 800c28c:	20004e50 	.word	0x20004e50

0800c290 <_isatty_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4d06      	ldr	r5, [pc, #24]	; (800c2ac <_isatty_r+0x1c>)
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	4608      	mov	r0, r1
 800c29a:	602b      	str	r3, [r5, #0]
 800c29c:	f7f5 fe9b 	bl	8001fd6 <_isatty>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_isatty_r+0x1a>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_isatty_r+0x1a>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	20004e50 	.word	0x20004e50

0800c2b0 <_init>:
 800c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b2:	bf00      	nop
 800c2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b6:	bc08      	pop	{r3}
 800c2b8:	469e      	mov	lr, r3
 800c2ba:	4770      	bx	lr

0800c2bc <_fini>:
 800c2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2be:	bf00      	nop
 800c2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2c2:	bc08      	pop	{r3}
 800c2c4:	469e      	mov	lr, r3
 800c2c6:	4770      	bx	lr
